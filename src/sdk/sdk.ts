/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClientSDK } from "../lib/sdks.js";
// #region imports
import { RequestOptions } from "../lib/sdks.js";
import { ResponseWrapper } from "../lib/response-wrapper.js";
import { getResponse } from "../funcs/getResponse.js";
import * as models from "../models/index.js";
// #endregion
import { Analytics } from "./analytics.js";
import { APIKeys } from "./apikeys.js";
import { Beta } from "./beta.js";
import { Chat } from "./chat.js";
import { Completions } from "./completions.js";
import { Credits } from "./credits.js";
import { Endpoints } from "./endpoints.js";
import { Generations } from "./generations.js";
import { Models } from "./models.js";
import { OAuth } from "./oauth.js";
import { ParametersT } from "./parameters.js";
import { Providers } from "./providers.js";

export class OpenRouter extends ClientSDK {
  private _beta?: Beta;
  get beta(): Beta {
    return (this._beta ??= new Beta(this._options));
  }

  private _analytics?: Analytics;
  get analytics(): Analytics {
    return (this._analytics ??= new Analytics(this._options));
  }

  private _credits?: Credits;
  get credits(): Credits {
    return (this._credits ??= new Credits(this._options));
  }

  private _generations?: Generations;
  get generations(): Generations {
    return (this._generations ??= new Generations(this._options));
  }

  private _models?: Models;
  get models(): Models {
    return (this._models ??= new Models(this._options));
  }

  private _endpoints?: Endpoints;
  get endpoints(): Endpoints {
    return (this._endpoints ??= new Endpoints(this._options));
  }

  private _parameters?: ParametersT;
  get parameters(): ParametersT {
    return (this._parameters ??= new ParametersT(this._options));
  }

  private _providers?: Providers;
  get providers(): Providers {
    return (this._providers ??= new Providers(this._options));
  }

  private _apiKeys?: APIKeys;
  get apiKeys(): APIKeys {
    return (this._apiKeys ??= new APIKeys(this._options));
  }

  private _oAuth?: OAuth;
  get oAuth(): OAuth {
    return (this._oAuth ??= new OAuth(this._options));
  }

  private _chat?: Chat;
  get chat(): Chat {
    return (this._chat ??= new Chat(this._options));
  }

  private _completions?: Completions;
  get completions(): Completions {
    return (this._completions ??= new Completions(this._options));
  }
  // #region sdk-class-body
  private _memory?: any; // Memory type imported below

  /**
   * Get the memory instance if configured
   */
  get memory(): any | undefined {
    // Lazy initialization from options
    if (!this._memory && this._options && "memory" in this._options) {
      this._memory = (this._options as any).memory;
    }
    return this._memory;
  }

  /**
   * Get a response with multiple consumption patterns
   *
   * @remarks
   * Returns a wrapper that allows consuming the response in multiple ways:
   * - `await response.message` - Get the completed message
   * - `await response.text` - Get just the text content
   * - `for await (const delta of response.textStream)` - Stream text deltas
   * - `for await (const msg of response.messageStream)` - Stream incremental message updates
   * - `for await (const event of response.fullResponsesStream)` - Stream all response events
   * - `for await (const chunk of response.fullChatStream)` - Stream in chat-compatible format
   *
   * All consumption patterns can be used concurrently on the same response.
   *
   * When memory is configured and threadId/resourceId are provided in the request:
   * - History will be automatically injected before the request
   * - Messages will be automatically saved after the response completes
   *
   * @example
   * ```typescript
   * // Simple text extraction
   * const response = openRouter.getResponse({
   *   model: "anthropic/claude-3-opus",
   *   input: [{ role: "user", content: "Hello!" }]
   * });
   * const text = await response.text;
   * console.log(text);
   *
   * // Streaming text
   * const response = openRouter.getResponse({
   *   model: "anthropic/claude-3-opus",
   *   input: [{ role: "user", content: "Hello!" }]
   * });
   * for await (const delta of response.textStream) {
   *   process.stdout.write(delta);
   * }
   *
   * // With memory
   * const response = openRouter.getResponse({
   *   model: "anthropic/claude-3-opus",
   *   input: [{ role: "user", content: "Hello!" }],
   *   threadId: "thread-123",
   *   resourceId: "user-456"
   * });
   * const text = await response.text; // Messages automatically saved
   * ```
   */
  getResponse(
    request: Omit<models.OpenResponsesRequest, "stream"> & {
      threadId?: string;
      resourceId?: string;
    },
    options?: RequestOptions,
  ): ResponseWrapper {
    return getResponse(this, request, options);
  }
  // #endregion
}
