/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { getCredits } from "../funcs/getCredits.js";
import { getProviders } from "../funcs/getProviders.js";
import { postCreditsCoinbase } from "../funcs/postCreditsCoinbase.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { Analytics } from "./analytics.js";
import { APIKeys } from "./apikeys.js";
import { Chat } from "./chat.js";
import { Embeddings } from "./embeddings.js";
import { Endpoints } from "./endpoints.js";
import { Generations } from "./generations.js";
import { Models } from "./models.js";
import { ParametersT } from "./parameters.js";

export class OpenRouter extends ClientSDK {
  private _analytics?: Analytics;
  get analytics(): Analytics {
    return (this._analytics ??= new Analytics(this._options));
  }

  private _embeddings?: Embeddings;
  get embeddings(): Embeddings {
    return (this._embeddings ??= new Embeddings(this._options));
  }

  private _generations?: Generations;
  get generations(): Generations {
    return (this._generations ??= new Generations(this._options));
  }

  private _models?: Models;
  get models(): Models {
    return (this._models ??= new Models(this._options));
  }

  private _endpoints?: Endpoints;
  get endpoints(): Endpoints {
    return (this._endpoints ??= new Endpoints(this._options));
  }

  private _parameters?: ParametersT;
  get parameters(): ParametersT {
    return (this._parameters ??= new ParametersT(this._options));
  }

  private _apiKeys?: APIKeys;
  get apiKeys(): APIKeys {
    return (this._apiKeys ??= new APIKeys(this._options));
  }

  private _chat?: Chat;
  get chat(): Chat {
    return (this._chat ??= new Chat(this._options));
  }

  /**
   * Get total credits purchased and used for the authenticated user
   */
  async getCredits(
    options?: RequestOptions,
  ): Promise<operations.GetCreditsResponse> {
    return unwrapAsync(getCredits(
      this,
      options,
    ));
  }

  /**
   * Create a Coinbase charge for crypto payment
   */
  async postCreditsCoinbase(
    request?: operations.PostCreditsCoinbaseRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.PostCreditsCoinbaseResponse> {
    return unwrapAsync(postCreditsCoinbase(
      this,
      request,
      options,
    ));
  }

  async getProviders(
    options?: RequestOptions,
  ): Promise<operations.GetProvidersResponse> {
    return unwrapAsync(getProviders(
      this,
      options,
    ));
  }
}
