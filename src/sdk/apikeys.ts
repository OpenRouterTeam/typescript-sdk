/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { apiKeysDeleteKeysHash } from "../funcs/apiKeysDeleteKeysHash.js";
import { apiKeysGetAuthKey } from "../funcs/apiKeysGetAuthKey.js";
import { apiKeysGetKey } from "../funcs/apiKeysGetKey.js";
import { apiKeysGetKeys } from "../funcs/apiKeysGetKeys.js";
import { apiKeysGetKeysHash } from "../funcs/apiKeysGetKeysHash.js";
import { apiKeysPatchKeysHash } from "../funcs/apiKeysPatchKeysHash.js";
import { apiKeysPostKeys } from "../funcs/apiKeysPostKeys.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class APIKeys extends ClientSDK {
  /**
   * List API keys
   */
  async getKeys(
    request?: operations.GetKeysRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.GetKeysResponse> {
    return unwrapAsync(apiKeysGetKeys(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a new API key
   */
  async postKeys(
    request?: operations.PostKeysRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.PostKeysResponse> {
    return unwrapAsync(apiKeysPostKeys(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an API key
   */
  async patchKeysHash(
    request: operations.PatchKeysHashRequest,
    options?: RequestOptions,
  ): Promise<operations.PatchKeysHashResponse> {
    return unwrapAsync(apiKeysPatchKeysHash(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete an API key
   */
  async deleteKeysHash(
    request: operations.DeleteKeysHashRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteKeysHashResponse> {
    return unwrapAsync(apiKeysDeleteKeysHash(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a single API key
   */
  async getKeysHash(
    request: operations.GetKeysHashRequest,
    options?: RequestOptions,
  ): Promise<operations.GetKeysHashResponse> {
    return unwrapAsync(apiKeysGetKeysHash(
      this,
      request,
      options,
    ));
  }

  /**
   * Get current API key
   *
   * @remarks
   * Get information on the API key associated with the current authentication session
   */
  async getKey(
    options?: RequestOptions,
  ): Promise<operations.GetKeyResponse> {
    return unwrapAsync(apiKeysGetKey(
      this,
      options,
    ));
  }

  /**
   * Get current API key
   *
   * @remarks
   * Get information on the API key associated with the current authentication session
   */
  async getAuthKey(
    options?: RequestOptions,
  ): Promise<operations.GetAuthKeyResponse> {
    return unwrapAsync(apiKeysGetAuthKey(
      this,
      options,
    ));
  }
}
