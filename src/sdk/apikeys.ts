/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { apiKeysCreate } from "../funcs/apiKeysCreate.js";
import { apiKeysDelete } from "../funcs/apiKeysDelete.js";
import { apiKeysGet } from "../funcs/apiKeysGet.js";
import { apiKeysGetCurrentKeyMetadata } from "../funcs/apiKeysGetCurrentKeyMetadata.js";
import { apiKeysList } from "../funcs/apiKeysList.js";
import { apiKeysUpdate } from "../funcs/apiKeysUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class APIKeys extends ClientSDK {
  /**
   * List API keys
   */
  async list(
    request?: operations.ListApiKeysRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.ListApiKeysResponse> {
    return unwrapAsync(apiKeysList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a new API key
   */
  async create(
    request: operations.CreateRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateResponse> {
    return unwrapAsync(apiKeysCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an API key
   */
  async update(
    request: operations.UpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateResponse> {
    return unwrapAsync(apiKeysUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete an API key
   */
  async delete(
    request: operations.DeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteResponse> {
    return unwrapAsync(apiKeysDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a single API key
   */
  async get(
    request: operations.GetApiKeyRequest,
    options?: RequestOptions,
  ): Promise<operations.GetApiKeyResponse> {
    return unwrapAsync(apiKeysGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Get current API key
   *
   * @remarks
   * Get information on the API key associated with the current authentication session
   */
  async getCurrentKeyMetadata(
    options?: RequestOptions,
  ): Promise<operations.GetCurrentKeyResponse> {
    return unwrapAsync(apiKeysGetCurrentKeyMetadata(
      this,
      options,
    ));
  }
}
