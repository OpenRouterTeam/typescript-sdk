/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { chatComplete } from "../funcs/chatComplete.js";
import { chatCompleteStream } from "../funcs/chatCompleteStream.js";
import { EventStream } from "../lib/event-streams.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
// #region imports
// #endregion imports

export class Chat extends ClientSDK {
  // #region sdk-class-body
  /**
   * Create a chat completion with streaming enabled
   * @param request - Request with stream: true
   * @param options - Request options
   * @returns EventStream for streaming responses
   */
  async chatCreateChatCompletion(
    request: models.ChatCompletionCreateParams & { stream: true },
    options?: RequestOptions,
  ): Promise<EventStream<operations.StreamChatCompletionResponseBody>>;
  
  /**
   * Create a chat completion without streaming
   * @param request - Request with stream: false/undefined
   * @param options - Request options
   * @returns ChatCompletion response
   */
  async chatCreateChatCompletion(
    request: models.ChatCompletionCreateParams & { stream?: false | null | undefined },
    options?: RequestOptions,
  ): Promise<models.ChatCompletion>;
  
  /**
   * Create a chat completion with automatic streaming detection
   * @param request - Chat completion request
   * @param options - Request options
   * @returns Either ChatCompletion or EventStream based on stream parameter
   */
  async chatCreateChatCompletion(
    request: models.ChatCompletionCreateParams,
    options?: RequestOptions,
  ): Promise<models.ChatCompletion | EventStream<operations.StreamChatCompletionResponseBody>> {
    if (request.stream === true) {
      const { stream, ...streamRequest } = request;
      return unwrapAsync(chatCompleteStream(
        this,
        streamRequest as models.ChatStreamCompletionCreateParams,
        options,
      ));
    }

    return unwrapAsync(chatComplete(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a chat completion with automatic streaming detection
   *
   * @remarks
   * Creates a model response for the given chat conversation. Automatically detects streaming mode
   * based on the stream parameter and routes to appropriate method.
   */
  async complete(
    request: models.ChatCompletionCreateParams,
    options?: RequestOptions,
  ): Promise<
    | models.ChatCompletion
    | EventStream<operations.StreamChatCompletionResponseBody>
  > {
    if (request.stream === true) {
      // Remove stream from request for completeStream (it adds it automatically)
      const { stream, ...streamRequest } = request;
      return unwrapAsync(chatCompleteStream(
        this,
        streamRequest as models.ChatStreamCompletionCreateParams,
        options,
      ));
    }

    return unwrapAsync(chatComplete(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a chat completion
   *
   * @remarks
   * Creates a model response for the given chat conversation. Supports both streaming and non-streaming modes.
   */
  async completeStream(
    request: models.ChatStreamCompletionCreateParams,
    options?: RequestOptions,
  ): Promise<EventStream<operations.StreamChatCompletionResponseBody>> {
    return unwrapAsync(chatCompleteStream(
      this,
      request,
      options,
    ));
  }
  // #endregion sdk-class-body
}
