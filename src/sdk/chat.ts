/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { chatCreateChatCompletion } from "../funcs/chatCreateChatCompletion.js";
import { chatStreamChatCompletion } from "../funcs/chatStreamChatCompletion.js";
import { EventStream } from "../lib/event-streams.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Chat extends ClientSDK {
  /**
   * Create a chat completion
   *
   * @remarks
   * Creates a model response for the given chat conversation. Supports both streaming and non-streaming modes.
   */
  async createChatCompletion(
    request: models.ChatCompletionCreateParams,
    options?: RequestOptions,
  ): Promise<models.ChatCompletion> {
    return unwrapAsync(chatCreateChatCompletion(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a chat completion
   *
   * @remarks
   * Creates a model response for the given chat conversation. Supports both streaming and non-streaming modes.
   */
  async streamChatCompletion(
    request: models.ChatStreamCompletionCreateParams,
    options?: RequestOptions,
  ): Promise<EventStream<operations.StreamChatCompletionResponseBody>> {
    return unwrapAsync(chatStreamChatCompletion(
      this,
      request,
      options,
    ));
  }
}
