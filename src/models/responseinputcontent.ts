/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ResponseInputFile,
  ResponseInputFile$inboundSchema,
  ResponseInputFile$Outbound,
  ResponseInputFile$outboundSchema,
} from "./responseinputfile.js";
import {
  ResponseInputImage,
  ResponseInputImage$inboundSchema,
  ResponseInputImage$Outbound,
  ResponseInputImage$outboundSchema,
} from "./responseinputimage.js";
import {
  ResponseInputText,
  ResponseInputText$inboundSchema,
  ResponseInputText$Outbound,
  ResponseInputText$outboundSchema,
} from "./responseinputtext.js";

/**
 * Input content for Responses API
 */
export type ResponseInputContent =
  | (ResponseInputText & { type: "input_text" })
  | (ResponseInputImage & { type: "input_image" })
  | (ResponseInputFile & { type: "input_file" });

/** @internal */
export const ResponseInputContent$inboundSchema: z.ZodType<
  ResponseInputContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  ResponseInputText$inboundSchema.and(
    z.object({ type: z.literal("input_text") }).transform((v) => ({
      type: v.type,
    })),
  ),
  ResponseInputImage$inboundSchema.and(
    z.object({ type: z.literal("input_image") }).transform((v) => ({
      type: v.type,
    })),
  ),
  ResponseInputFile$inboundSchema.and(
    z.object({ type: z.literal("input_file") }).transform((v) => ({
      type: v.type,
    })),
  ),
]);

/** @internal */
export type ResponseInputContent$Outbound =
  | (ResponseInputText$Outbound & { type: "input_text" })
  | (ResponseInputImage$Outbound & { type: "input_image" })
  | (ResponseInputFile$Outbound & { type: "input_file" });

/** @internal */
export const ResponseInputContent$outboundSchema: z.ZodType<
  ResponseInputContent$Outbound,
  z.ZodTypeDef,
  ResponseInputContent
> = z.union([
  ResponseInputText$outboundSchema.and(
    z.object({ type: z.literal("input_text") }).transform((v) => ({
      type: v.type,
    })),
  ),
  ResponseInputImage$outboundSchema.and(
    z.object({ type: z.literal("input_image") }).transform((v) => ({
      type: v.type,
    })),
  ),
  ResponseInputFile$outboundSchema.and(
    z.object({ type: z.literal("input_file") }).transform((v) => ({
      type: v.type,
    })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseInputContent$ {
  /** @deprecated use `ResponseInputContent$inboundSchema` instead. */
  export const inboundSchema = ResponseInputContent$inboundSchema;
  /** @deprecated use `ResponseInputContent$outboundSchema` instead. */
  export const outboundSchema = ResponseInputContent$outboundSchema;
  /** @deprecated use `ResponseInputContent$Outbound` instead. */
  export type Outbound = ResponseInputContent$Outbound;
}

export function responseInputContentToJSON(
  responseInputContent: ResponseInputContent,
): string {
  return JSON.stringify(
    ResponseInputContent$outboundSchema.parse(responseInputContent),
  );
}

export function responseInputContentFromJSON(
  jsonString: string,
): SafeParseResult<ResponseInputContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseInputContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseInputContent' from JSON`,
  );
}
