/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ChatGenerationTokenUsage,
  ChatGenerationTokenUsage$inboundSchema,
  ChatGenerationTokenUsage$Outbound,
  ChatGenerationTokenUsage$outboundSchema,
} from "./chatgenerationtokenusage.js";
import {
  ChatStreamingChoice,
  ChatStreamingChoice$inboundSchema,
  ChatStreamingChoice$Outbound,
  ChatStreamingChoice$outboundSchema,
} from "./chatstreamingchoice.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ChatStreamingResponseChunkError = {
  message: string;
  code: number;
};

export type Data = {
  id: string;
  choices: Array<ChatStreamingChoice>;
  created: number;
  model: string;
  object: "chat.completion.chunk";
  systemFingerprint?: string | null | undefined;
  error?: ChatStreamingResponseChunkError | undefined;
  usage?: ChatGenerationTokenUsage | undefined;
};

export type ChatStreamingResponseChunk = {
  data: Data;
};

/** @internal */
export const ChatStreamingResponseChunkError$inboundSchema: z.ZodType<
  ChatStreamingResponseChunkError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.number(),
});

/** @internal */
export type ChatStreamingResponseChunkError$Outbound = {
  message: string;
  code: number;
};

/** @internal */
export const ChatStreamingResponseChunkError$outboundSchema: z.ZodType<
  ChatStreamingResponseChunkError$Outbound,
  z.ZodTypeDef,
  ChatStreamingResponseChunkError
> = z.object({
  message: z.string(),
  code: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatStreamingResponseChunkError$ {
  /** @deprecated use `ChatStreamingResponseChunkError$inboundSchema` instead. */
  export const inboundSchema = ChatStreamingResponseChunkError$inboundSchema;
  /** @deprecated use `ChatStreamingResponseChunkError$outboundSchema` instead. */
  export const outboundSchema = ChatStreamingResponseChunkError$outboundSchema;
  /** @deprecated use `ChatStreamingResponseChunkError$Outbound` instead. */
  export type Outbound = ChatStreamingResponseChunkError$Outbound;
}

export function chatStreamingResponseChunkErrorToJSON(
  chatStreamingResponseChunkError: ChatStreamingResponseChunkError,
): string {
  return JSON.stringify(
    ChatStreamingResponseChunkError$outboundSchema.parse(
      chatStreamingResponseChunkError,
    ),
  );
}

export function chatStreamingResponseChunkErrorFromJSON(
  jsonString: string,
): SafeParseResult<ChatStreamingResponseChunkError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatStreamingResponseChunkError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatStreamingResponseChunkError' from JSON`,
  );
}

/** @internal */
export const Data$inboundSchema: z.ZodType<Data, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string(),
    choices: z.array(ChatStreamingChoice$inboundSchema),
    created: z.number(),
    model: z.string(),
    object: z.literal("chat.completion.chunk"),
    system_fingerprint: z.nullable(z.string()).optional(),
    error: z.lazy(() => ChatStreamingResponseChunkError$inboundSchema)
      .optional(),
    usage: ChatGenerationTokenUsage$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "system_fingerprint": "systemFingerprint",
    });
  });

/** @internal */
export type Data$Outbound = {
  id: string;
  choices: Array<ChatStreamingChoice$Outbound>;
  created: number;
  model: string;
  object: "chat.completion.chunk";
  system_fingerprint?: string | null | undefined;
  error?: ChatStreamingResponseChunkError$Outbound | undefined;
  usage?: ChatGenerationTokenUsage$Outbound | undefined;
};

/** @internal */
export const Data$outboundSchema: z.ZodType<Data$Outbound, z.ZodTypeDef, Data> =
  z.object({
    id: z.string(),
    choices: z.array(ChatStreamingChoice$outboundSchema),
    created: z.number(),
    model: z.string(),
    object: z.literal("chat.completion.chunk"),
    systemFingerprint: z.nullable(z.string()).optional(),
    error: z.lazy(() => ChatStreamingResponseChunkError$outboundSchema)
      .optional(),
    usage: ChatGenerationTokenUsage$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      systemFingerprint: "system_fingerprint",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Data$ {
  /** @deprecated use `Data$inboundSchema` instead. */
  export const inboundSchema = Data$inboundSchema;
  /** @deprecated use `Data$outboundSchema` instead. */
  export const outboundSchema = Data$outboundSchema;
  /** @deprecated use `Data$Outbound` instead. */
  export type Outbound = Data$Outbound;
}

export function dataToJSON(data: Data): string {
  return JSON.stringify(Data$outboundSchema.parse(data));
}

export function dataFromJSON(
  jsonString: string,
): SafeParseResult<Data, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Data$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Data' from JSON`,
  );
}

/** @internal */
export const ChatStreamingResponseChunk$inboundSchema: z.ZodType<
  ChatStreamingResponseChunk,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.string().transform((v, ctx) => {
    try {
      return JSON.parse(v);
    } catch (err) {
      ctx.addIssue({
        code: z.ZodIssueCode.custom,
        message: `malformed json: ${err}`,
      });
      return z.NEVER;
    }
  }).pipe(z.lazy(() => Data$inboundSchema)),
});

/** @internal */
export type ChatStreamingResponseChunk$Outbound = {
  data: Data$Outbound;
};

/** @internal */
export const ChatStreamingResponseChunk$outboundSchema: z.ZodType<
  ChatStreamingResponseChunk$Outbound,
  z.ZodTypeDef,
  ChatStreamingResponseChunk
> = z.object({
  data: z.lazy(() => Data$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatStreamingResponseChunk$ {
  /** @deprecated use `ChatStreamingResponseChunk$inboundSchema` instead. */
  export const inboundSchema = ChatStreamingResponseChunk$inboundSchema;
  /** @deprecated use `ChatStreamingResponseChunk$outboundSchema` instead. */
  export const outboundSchema = ChatStreamingResponseChunk$outboundSchema;
  /** @deprecated use `ChatStreamingResponseChunk$Outbound` instead. */
  export type Outbound = ChatStreamingResponseChunk$Outbound;
}

export function chatStreamingResponseChunkToJSON(
  chatStreamingResponseChunk: ChatStreamingResponseChunk,
): string {
  return JSON.stringify(
    ChatStreamingResponseChunk$outboundSchema.parse(chatStreamingResponseChunk),
  );
}

export function chatStreamingResponseChunkFromJSON(
  jsonString: string,
): SafeParseResult<ChatStreamingResponseChunk, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatStreamingResponseChunk$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatStreamingResponseChunk' from JSON`,
  );
}
