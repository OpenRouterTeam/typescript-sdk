/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v4";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Alternative token with its log probability
 */
export type OpenResponsesTopLogprobs = {
  token?: string | undefined;
  logprob?: number | undefined;
};

/** @internal */
export const OpenResponsesTopLogprobs$inboundSchema: z.ZodType<
  OpenResponsesTopLogprobs,
  unknown
> = z.object({
  token: z.string().optional(),
  logprob: z.number().optional(),
});

/** @internal */
export type OpenResponsesTopLogprobs$Outbound = {
  token?: string | undefined;
  logprob?: number | undefined;
};

/** @internal */
export const OpenResponsesTopLogprobs$outboundSchema: z.ZodType<
  OpenResponsesTopLogprobs$Outbound,
  OpenResponsesTopLogprobs
> = z.object({
  token: z.string().optional(),
  logprob: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesTopLogprobs$ {
  /** @deprecated use `OpenResponsesTopLogprobs$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesTopLogprobs$inboundSchema;
  /** @deprecated use `OpenResponsesTopLogprobs$outboundSchema` instead. */
  export const outboundSchema = OpenResponsesTopLogprobs$outboundSchema;
  /** @deprecated use `OpenResponsesTopLogprobs$Outbound` instead. */
  export type Outbound = OpenResponsesTopLogprobs$Outbound;
}

export function openResponsesTopLogprobsToJSON(
  openResponsesTopLogprobs: OpenResponsesTopLogprobs,
): string {
  return JSON.stringify(
    OpenResponsesTopLogprobs$outboundSchema.parse(openResponsesTopLogprobs),
  );
}

export function openResponsesTopLogprobsFromJSON(
  jsonString: string,
): SafeParseResult<OpenResponsesTopLogprobs, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenResponsesTopLogprobs$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenResponsesTopLogprobs' from JSON`,
  );
}
