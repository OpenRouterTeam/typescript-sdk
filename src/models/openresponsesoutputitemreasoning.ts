/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ReasoningSummaryText,
  ReasoningSummaryText$inboundSchema,
  ReasoningSummaryText$Outbound,
  ReasoningSummaryText$outboundSchema,
} from "./reasoningsummarytext.js";
import {
  ReasoningTextContent,
  ReasoningTextContent$inboundSchema,
  ReasoningTextContent$Outbound,
  ReasoningTextContent$outboundSchema,
} from "./reasoningtextcontent.js";

export const OpenResponsesOutputItemReasoningType = {
  Reasoning: "reasoning",
} as const;
export type OpenResponsesOutputItemReasoningType = ClosedEnum<
  typeof OpenResponsesOutputItemReasoningType
>;

export const OpenResponsesOutputItemReasoningStatusInProgress = {
  InProgress: "in_progress",
} as const;
export type OpenResponsesOutputItemReasoningStatusInProgress = ClosedEnum<
  typeof OpenResponsesOutputItemReasoningStatusInProgress
>;

export const OpenResponsesOutputItemReasoningStatusIncomplete = {
  Incomplete: "incomplete",
} as const;
export type OpenResponsesOutputItemReasoningStatusIncomplete = ClosedEnum<
  typeof OpenResponsesOutputItemReasoningStatusIncomplete
>;

export const OpenResponsesOutputItemReasoningStatusCompleted = {
  Completed: "completed",
} as const;
export type OpenResponsesOutputItemReasoningStatusCompleted = ClosedEnum<
  typeof OpenResponsesOutputItemReasoningStatusCompleted
>;

export type OpenResponsesOutputItemReasoningStatusUnion =
  | OpenResponsesOutputItemReasoningStatusCompleted
  | OpenResponsesOutputItemReasoningStatusIncomplete
  | OpenResponsesOutputItemReasoningStatusInProgress;

/**
 * An output item containing reasoning
 */
export type OpenResponsesOutputItemReasoning = {
  type: OpenResponsesOutputItemReasoningType;
  id: string;
  content?: Array<ReasoningTextContent> | undefined;
  summary: Array<ReasoningSummaryText>;
  encryptedContent?: string | null | undefined;
  status?:
    | OpenResponsesOutputItemReasoningStatusCompleted
    | OpenResponsesOutputItemReasoningStatusIncomplete
    | OpenResponsesOutputItemReasoningStatusInProgress
    | undefined;
};

/** @internal */
export const OpenResponsesOutputItemReasoningType$inboundSchema:
  z.ZodNativeEnum<typeof OpenResponsesOutputItemReasoningType> = z.nativeEnum(
    OpenResponsesOutputItemReasoningType,
  );

/** @internal */
export const OpenResponsesOutputItemReasoningType$outboundSchema:
  z.ZodNativeEnum<typeof OpenResponsesOutputItemReasoningType> =
    OpenResponsesOutputItemReasoningType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesOutputItemReasoningType$ {
  /** @deprecated use `OpenResponsesOutputItemReasoningType$inboundSchema` instead. */
  export const inboundSchema =
    OpenResponsesOutputItemReasoningType$inboundSchema;
  /** @deprecated use `OpenResponsesOutputItemReasoningType$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesOutputItemReasoningType$outboundSchema;
}

/** @internal */
export const OpenResponsesOutputItemReasoningStatusInProgress$inboundSchema:
  z.ZodNativeEnum<typeof OpenResponsesOutputItemReasoningStatusInProgress> = z
    .nativeEnum(OpenResponsesOutputItemReasoningStatusInProgress);

/** @internal */
export const OpenResponsesOutputItemReasoningStatusInProgress$outboundSchema:
  z.ZodNativeEnum<typeof OpenResponsesOutputItemReasoningStatusInProgress> =
    OpenResponsesOutputItemReasoningStatusInProgress$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesOutputItemReasoningStatusInProgress$ {
  /** @deprecated use `OpenResponsesOutputItemReasoningStatusInProgress$inboundSchema` instead. */
  export const inboundSchema =
    OpenResponsesOutputItemReasoningStatusInProgress$inboundSchema;
  /** @deprecated use `OpenResponsesOutputItemReasoningStatusInProgress$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesOutputItemReasoningStatusInProgress$outboundSchema;
}

/** @internal */
export const OpenResponsesOutputItemReasoningStatusIncomplete$inboundSchema:
  z.ZodNativeEnum<typeof OpenResponsesOutputItemReasoningStatusIncomplete> = z
    .nativeEnum(OpenResponsesOutputItemReasoningStatusIncomplete);

/** @internal */
export const OpenResponsesOutputItemReasoningStatusIncomplete$outboundSchema:
  z.ZodNativeEnum<typeof OpenResponsesOutputItemReasoningStatusIncomplete> =
    OpenResponsesOutputItemReasoningStatusIncomplete$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesOutputItemReasoningStatusIncomplete$ {
  /** @deprecated use `OpenResponsesOutputItemReasoningStatusIncomplete$inboundSchema` instead. */
  export const inboundSchema =
    OpenResponsesOutputItemReasoningStatusIncomplete$inboundSchema;
  /** @deprecated use `OpenResponsesOutputItemReasoningStatusIncomplete$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesOutputItemReasoningStatusIncomplete$outboundSchema;
}

/** @internal */
export const OpenResponsesOutputItemReasoningStatusCompleted$inboundSchema:
  z.ZodNativeEnum<typeof OpenResponsesOutputItemReasoningStatusCompleted> = z
    .nativeEnum(OpenResponsesOutputItemReasoningStatusCompleted);

/** @internal */
export const OpenResponsesOutputItemReasoningStatusCompleted$outboundSchema:
  z.ZodNativeEnum<typeof OpenResponsesOutputItemReasoningStatusCompleted> =
    OpenResponsesOutputItemReasoningStatusCompleted$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesOutputItemReasoningStatusCompleted$ {
  /** @deprecated use `OpenResponsesOutputItemReasoningStatusCompleted$inboundSchema` instead. */
  export const inboundSchema =
    OpenResponsesOutputItemReasoningStatusCompleted$inboundSchema;
  /** @deprecated use `OpenResponsesOutputItemReasoningStatusCompleted$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesOutputItemReasoningStatusCompleted$outboundSchema;
}

/** @internal */
export const OpenResponsesOutputItemReasoningStatusUnion$inboundSchema:
  z.ZodType<
    OpenResponsesOutputItemReasoningStatusUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    OpenResponsesOutputItemReasoningStatusCompleted$inboundSchema,
    OpenResponsesOutputItemReasoningStatusIncomplete$inboundSchema,
    OpenResponsesOutputItemReasoningStatusInProgress$inboundSchema,
  ]);

/** @internal */
export type OpenResponsesOutputItemReasoningStatusUnion$Outbound =
  | string
  | string
  | string;

/** @internal */
export const OpenResponsesOutputItemReasoningStatusUnion$outboundSchema:
  z.ZodType<
    OpenResponsesOutputItemReasoningStatusUnion$Outbound,
    z.ZodTypeDef,
    OpenResponsesOutputItemReasoningStatusUnion
  > = z.union([
    OpenResponsesOutputItemReasoningStatusCompleted$outboundSchema,
    OpenResponsesOutputItemReasoningStatusIncomplete$outboundSchema,
    OpenResponsesOutputItemReasoningStatusInProgress$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesOutputItemReasoningStatusUnion$ {
  /** @deprecated use `OpenResponsesOutputItemReasoningStatusUnion$inboundSchema` instead. */
  export const inboundSchema =
    OpenResponsesOutputItemReasoningStatusUnion$inboundSchema;
  /** @deprecated use `OpenResponsesOutputItemReasoningStatusUnion$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesOutputItemReasoningStatusUnion$outboundSchema;
  /** @deprecated use `OpenResponsesOutputItemReasoningStatusUnion$Outbound` instead. */
  export type Outbound = OpenResponsesOutputItemReasoningStatusUnion$Outbound;
}

export function openResponsesOutputItemReasoningStatusUnionToJSON(
  openResponsesOutputItemReasoningStatusUnion:
    OpenResponsesOutputItemReasoningStatusUnion,
): string {
  return JSON.stringify(
    OpenResponsesOutputItemReasoningStatusUnion$outboundSchema.parse(
      openResponsesOutputItemReasoningStatusUnion,
    ),
  );
}

export function openResponsesOutputItemReasoningStatusUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  OpenResponsesOutputItemReasoningStatusUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      OpenResponsesOutputItemReasoningStatusUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'OpenResponsesOutputItemReasoningStatusUnion' from JSON`,
  );
}

/** @internal */
export const OpenResponsesOutputItemReasoning$inboundSchema: z.ZodType<
  OpenResponsesOutputItemReasoning,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: OpenResponsesOutputItemReasoningType$inboundSchema,
  id: z.string(),
  content: z.array(ReasoningTextContent$inboundSchema).optional(),
  summary: z.array(ReasoningSummaryText$inboundSchema),
  encrypted_content: z.nullable(z.string()).optional(),
  status: z.union([
    OpenResponsesOutputItemReasoningStatusCompleted$inboundSchema,
    OpenResponsesOutputItemReasoningStatusIncomplete$inboundSchema,
    OpenResponsesOutputItemReasoningStatusInProgress$inboundSchema,
  ]).optional(),
}).transform((v) => {
  return remap$(v, {
    "encrypted_content": "encryptedContent",
  });
});

/** @internal */
export type OpenResponsesOutputItemReasoning$Outbound = {
  type: string;
  id: string;
  content?: Array<ReasoningTextContent$Outbound> | undefined;
  summary: Array<ReasoningSummaryText$Outbound>;
  encrypted_content?: string | null | undefined;
  status?: string | string | string | undefined;
};

/** @internal */
export const OpenResponsesOutputItemReasoning$outboundSchema: z.ZodType<
  OpenResponsesOutputItemReasoning$Outbound,
  z.ZodTypeDef,
  OpenResponsesOutputItemReasoning
> = z.object({
  type: OpenResponsesOutputItemReasoningType$outboundSchema,
  id: z.string(),
  content: z.array(ReasoningTextContent$outboundSchema).optional(),
  summary: z.array(ReasoningSummaryText$outboundSchema),
  encryptedContent: z.nullable(z.string()).optional(),
  status: z.union([
    OpenResponsesOutputItemReasoningStatusCompleted$outboundSchema,
    OpenResponsesOutputItemReasoningStatusIncomplete$outboundSchema,
    OpenResponsesOutputItemReasoningStatusInProgress$outboundSchema,
  ]).optional(),
}).transform((v) => {
  return remap$(v, {
    encryptedContent: "encrypted_content",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesOutputItemReasoning$ {
  /** @deprecated use `OpenResponsesOutputItemReasoning$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesOutputItemReasoning$inboundSchema;
  /** @deprecated use `OpenResponsesOutputItemReasoning$outboundSchema` instead. */
  export const outboundSchema = OpenResponsesOutputItemReasoning$outboundSchema;
  /** @deprecated use `OpenResponsesOutputItemReasoning$Outbound` instead. */
  export type Outbound = OpenResponsesOutputItemReasoning$Outbound;
}

export function openResponsesOutputItemReasoningToJSON(
  openResponsesOutputItemReasoning: OpenResponsesOutputItemReasoning,
): string {
  return JSON.stringify(
    OpenResponsesOutputItemReasoning$outboundSchema.parse(
      openResponsesOutputItemReasoning,
    ),
  );
}

export function openResponsesOutputItemReasoningFromJSON(
  jsonString: string,
): SafeParseResult<OpenResponsesOutputItemReasoning, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenResponsesOutputItemReasoning$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenResponsesOutputItemReasoning' from JSON`,
  );
}
