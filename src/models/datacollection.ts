/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";

/**
 * Data collection setting. If no available model provider meets the requirement, your request will return an error.
 *
 * @remarks
 * - allow: (default) allow providers which store user data non-transiently and may train on it
 * - deny: use only providers which do not collect user data.
 */
export const DataCollection = {
  Deny: "deny",
  Allow: "allow",
} as const;
/**
 * Data collection setting. If no available model provider meets the requirement, your request will return an error.
 *
 * @remarks
 * - allow: (default) allow providers which store user data non-transiently and may train on it
 * - deny: use only providers which do not collect user data.
 */
export type DataCollection = OpenEnum<typeof DataCollection>;

/** @internal */
export const DataCollection$inboundSchema: z.ZodType<
  DataCollection,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(DataCollection),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const DataCollection$outboundSchema: z.ZodType<
  DataCollection,
  z.ZodTypeDef,
  DataCollection
> = z.union([
  z.nativeEnum(DataCollection),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DataCollection$ {
  /** @deprecated use `DataCollection$inboundSchema` instead. */
  export const inboundSchema = DataCollection$inboundSchema;
  /** @deprecated use `DataCollection$outboundSchema` instead. */
  export const outboundSchema = DataCollection$outboundSchema;
}
