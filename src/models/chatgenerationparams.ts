/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ChatStreamOptions,
  ChatStreamOptions$inboundSchema,
  ChatStreamOptions$Outbound,
  ChatStreamOptions$outboundSchema,
} from "./chatstreamoptions.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Message,
  Message$inboundSchema,
  Message$Outbound,
  Message$outboundSchema,
} from "./message.js";
import {
  ReasoningSummaryVerbosity,
  ReasoningSummaryVerbosity$inboundSchema,
  ReasoningSummaryVerbosity$outboundSchema,
} from "./reasoningsummaryverbosity.js";
import {
  ResponseFormatJSONSchema,
  ResponseFormatJSONSchema$inboundSchema,
  ResponseFormatJSONSchema$Outbound,
  ResponseFormatJSONSchema$outboundSchema,
} from "./responseformatjsonschema.js";
import {
  ResponseFormatTextGrammar,
  ResponseFormatTextGrammar$inboundSchema,
  ResponseFormatTextGrammar$Outbound,
  ResponseFormatTextGrammar$outboundSchema,
} from "./responseformattextgrammar.js";
import {
  Tool,
  Tool$inboundSchema,
  Tool$Outbound,
  Tool$outboundSchema,
} from "./tool.js";

export const ChatGenerationParamsEffort = {
  Minimal: "minimal",
  Low: "low",
  Medium: "medium",
  High: "high",
} as const;
export type ChatGenerationParamsEffort = OpenEnum<
  typeof ChatGenerationParamsEffort
>;

export type Reasoning = {
  effort?: ChatGenerationParamsEffort | null | undefined;
  summary?: ReasoningSummaryVerbosity | null | undefined;
};

export type ChatGenerationParamsResponseFormatPython = {
  type: "python";
};

export type ChatGenerationParamsResponseFormatJSONObject = {
  type: "json_object";
};

export type ChatGenerationParamsResponseFormatText = {
  type: "text";
};

export type ChatGenerationParamsResponseFormatUnion =
  | ResponseFormatJSONSchema
  | ResponseFormatTextGrammar
  | ChatGenerationParamsResponseFormatText
  | ChatGenerationParamsResponseFormatJSONObject
  | ChatGenerationParamsResponseFormatPython;

export type ChatGenerationParamsStop = string | Array<string>;

export type ChatGenerationParams = {
  messages: Array<Message>;
  model: string;
  frequencyPenalty?: number | null | undefined;
  logitBias?: { [k: string]: number } | null | undefined;
  logprobs?: boolean | null | undefined;
  topLogprobs?: number | null | undefined;
  maxCompletionTokens?: number | null | undefined;
  maxTokens?: number | null | undefined;
  metadata?: { [k: string]: string } | undefined;
  presencePenalty?: number | null | undefined;
  reasoning?: Reasoning | undefined;
  responseFormat?:
    | ResponseFormatJSONSchema
    | ResponseFormatTextGrammar
    | ChatGenerationParamsResponseFormatText
    | ChatGenerationParamsResponseFormatJSONObject
    | ChatGenerationParamsResponseFormatPython
    | undefined;
  seed?: number | null | undefined;
  stop?: string | Array<string> | null | undefined;
  stream?: boolean | null | undefined;
  streamOptions?: ChatStreamOptions | null | undefined;
  temperature?: number | null | undefined;
  toolChoice?: any | undefined;
  tools?: Array<Tool> | undefined;
  topP?: number | null | undefined;
  user?: string | undefined;
};

/** @internal */
export const ChatGenerationParamsEffort$inboundSchema: z.ZodType<
  ChatGenerationParamsEffort,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ChatGenerationParamsEffort),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ChatGenerationParamsEffort$outboundSchema: z.ZodType<
  ChatGenerationParamsEffort,
  z.ZodTypeDef,
  ChatGenerationParamsEffort
> = z.union([
  z.nativeEnum(ChatGenerationParamsEffort),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatGenerationParamsEffort$ {
  /** @deprecated use `ChatGenerationParamsEffort$inboundSchema` instead. */
  export const inboundSchema = ChatGenerationParamsEffort$inboundSchema;
  /** @deprecated use `ChatGenerationParamsEffort$outboundSchema` instead. */
  export const outboundSchema = ChatGenerationParamsEffort$outboundSchema;
}

/** @internal */
export const Reasoning$inboundSchema: z.ZodType<
  Reasoning,
  z.ZodTypeDef,
  unknown
> = z.object({
  effort: z.nullable(ChatGenerationParamsEffort$inboundSchema).optional(),
  summary: z.nullable(ReasoningSummaryVerbosity$inboundSchema).optional(),
});

/** @internal */
export type Reasoning$Outbound = {
  effort?: string | null | undefined;
  summary?: string | null | undefined;
};

/** @internal */
export const Reasoning$outboundSchema: z.ZodType<
  Reasoning$Outbound,
  z.ZodTypeDef,
  Reasoning
> = z.object({
  effort: z.nullable(ChatGenerationParamsEffort$outboundSchema).optional(),
  summary: z.nullable(ReasoningSummaryVerbosity$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Reasoning$ {
  /** @deprecated use `Reasoning$inboundSchema` instead. */
  export const inboundSchema = Reasoning$inboundSchema;
  /** @deprecated use `Reasoning$outboundSchema` instead. */
  export const outboundSchema = Reasoning$outboundSchema;
  /** @deprecated use `Reasoning$Outbound` instead. */
  export type Outbound = Reasoning$Outbound;
}

export function reasoningToJSON(reasoning: Reasoning): string {
  return JSON.stringify(Reasoning$outboundSchema.parse(reasoning));
}

export function reasoningFromJSON(
  jsonString: string,
): SafeParseResult<Reasoning, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Reasoning$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Reasoning' from JSON`,
  );
}

/** @internal */
export const ChatGenerationParamsResponseFormatPython$inboundSchema: z.ZodType<
  ChatGenerationParamsResponseFormatPython,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal("python"),
});

/** @internal */
export type ChatGenerationParamsResponseFormatPython$Outbound = {
  type: "python";
};

/** @internal */
export const ChatGenerationParamsResponseFormatPython$outboundSchema: z.ZodType<
  ChatGenerationParamsResponseFormatPython$Outbound,
  z.ZodTypeDef,
  ChatGenerationParamsResponseFormatPython
> = z.object({
  type: z.literal("python"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatGenerationParamsResponseFormatPython$ {
  /** @deprecated use `ChatGenerationParamsResponseFormatPython$inboundSchema` instead. */
  export const inboundSchema =
    ChatGenerationParamsResponseFormatPython$inboundSchema;
  /** @deprecated use `ChatGenerationParamsResponseFormatPython$outboundSchema` instead. */
  export const outboundSchema =
    ChatGenerationParamsResponseFormatPython$outboundSchema;
  /** @deprecated use `ChatGenerationParamsResponseFormatPython$Outbound` instead. */
  export type Outbound = ChatGenerationParamsResponseFormatPython$Outbound;
}

export function chatGenerationParamsResponseFormatPythonToJSON(
  chatGenerationParamsResponseFormatPython:
    ChatGenerationParamsResponseFormatPython,
): string {
  return JSON.stringify(
    ChatGenerationParamsResponseFormatPython$outboundSchema.parse(
      chatGenerationParamsResponseFormatPython,
    ),
  );
}

export function chatGenerationParamsResponseFormatPythonFromJSON(
  jsonString: string,
): SafeParseResult<
  ChatGenerationParamsResponseFormatPython,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ChatGenerationParamsResponseFormatPython$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ChatGenerationParamsResponseFormatPython' from JSON`,
  );
}

/** @internal */
export const ChatGenerationParamsResponseFormatJSONObject$inboundSchema:
  z.ZodType<
    ChatGenerationParamsResponseFormatJSONObject,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: z.literal("json_object"),
  });

/** @internal */
export type ChatGenerationParamsResponseFormatJSONObject$Outbound = {
  type: "json_object";
};

/** @internal */
export const ChatGenerationParamsResponseFormatJSONObject$outboundSchema:
  z.ZodType<
    ChatGenerationParamsResponseFormatJSONObject$Outbound,
    z.ZodTypeDef,
    ChatGenerationParamsResponseFormatJSONObject
  > = z.object({
    type: z.literal("json_object"),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatGenerationParamsResponseFormatJSONObject$ {
  /** @deprecated use `ChatGenerationParamsResponseFormatJSONObject$inboundSchema` instead. */
  export const inboundSchema =
    ChatGenerationParamsResponseFormatJSONObject$inboundSchema;
  /** @deprecated use `ChatGenerationParamsResponseFormatJSONObject$outboundSchema` instead. */
  export const outboundSchema =
    ChatGenerationParamsResponseFormatJSONObject$outboundSchema;
  /** @deprecated use `ChatGenerationParamsResponseFormatJSONObject$Outbound` instead. */
  export type Outbound = ChatGenerationParamsResponseFormatJSONObject$Outbound;
}

export function chatGenerationParamsResponseFormatJSONObjectToJSON(
  chatGenerationParamsResponseFormatJSONObject:
    ChatGenerationParamsResponseFormatJSONObject,
): string {
  return JSON.stringify(
    ChatGenerationParamsResponseFormatJSONObject$outboundSchema.parse(
      chatGenerationParamsResponseFormatJSONObject,
    ),
  );
}

export function chatGenerationParamsResponseFormatJSONObjectFromJSON(
  jsonString: string,
): SafeParseResult<
  ChatGenerationParamsResponseFormatJSONObject,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ChatGenerationParamsResponseFormatJSONObject$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ChatGenerationParamsResponseFormatJSONObject' from JSON`,
  );
}

/** @internal */
export const ChatGenerationParamsResponseFormatText$inboundSchema: z.ZodType<
  ChatGenerationParamsResponseFormatText,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal("text"),
});

/** @internal */
export type ChatGenerationParamsResponseFormatText$Outbound = {
  type: "text";
};

/** @internal */
export const ChatGenerationParamsResponseFormatText$outboundSchema: z.ZodType<
  ChatGenerationParamsResponseFormatText$Outbound,
  z.ZodTypeDef,
  ChatGenerationParamsResponseFormatText
> = z.object({
  type: z.literal("text"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatGenerationParamsResponseFormatText$ {
  /** @deprecated use `ChatGenerationParamsResponseFormatText$inboundSchema` instead. */
  export const inboundSchema =
    ChatGenerationParamsResponseFormatText$inboundSchema;
  /** @deprecated use `ChatGenerationParamsResponseFormatText$outboundSchema` instead. */
  export const outboundSchema =
    ChatGenerationParamsResponseFormatText$outboundSchema;
  /** @deprecated use `ChatGenerationParamsResponseFormatText$Outbound` instead. */
  export type Outbound = ChatGenerationParamsResponseFormatText$Outbound;
}

export function chatGenerationParamsResponseFormatTextToJSON(
  chatGenerationParamsResponseFormatText:
    ChatGenerationParamsResponseFormatText,
): string {
  return JSON.stringify(
    ChatGenerationParamsResponseFormatText$outboundSchema.parse(
      chatGenerationParamsResponseFormatText,
    ),
  );
}

export function chatGenerationParamsResponseFormatTextFromJSON(
  jsonString: string,
): SafeParseResult<ChatGenerationParamsResponseFormatText, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ChatGenerationParamsResponseFormatText$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatGenerationParamsResponseFormatText' from JSON`,
  );
}

/** @internal */
export const ChatGenerationParamsResponseFormatUnion$inboundSchema: z.ZodType<
  ChatGenerationParamsResponseFormatUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  ResponseFormatJSONSchema$inboundSchema,
  ResponseFormatTextGrammar$inboundSchema,
  z.lazy(() => ChatGenerationParamsResponseFormatText$inboundSchema),
  z.lazy(() => ChatGenerationParamsResponseFormatJSONObject$inboundSchema),
  z.lazy(() => ChatGenerationParamsResponseFormatPython$inboundSchema),
]);

/** @internal */
export type ChatGenerationParamsResponseFormatUnion$Outbound =
  | ResponseFormatJSONSchema$Outbound
  | ResponseFormatTextGrammar$Outbound
  | ChatGenerationParamsResponseFormatText$Outbound
  | ChatGenerationParamsResponseFormatJSONObject$Outbound
  | ChatGenerationParamsResponseFormatPython$Outbound;

/** @internal */
export const ChatGenerationParamsResponseFormatUnion$outboundSchema: z.ZodType<
  ChatGenerationParamsResponseFormatUnion$Outbound,
  z.ZodTypeDef,
  ChatGenerationParamsResponseFormatUnion
> = z.union([
  ResponseFormatJSONSchema$outboundSchema,
  ResponseFormatTextGrammar$outboundSchema,
  z.lazy(() => ChatGenerationParamsResponseFormatText$outboundSchema),
  z.lazy(() => ChatGenerationParamsResponseFormatJSONObject$outboundSchema),
  z.lazy(() => ChatGenerationParamsResponseFormatPython$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatGenerationParamsResponseFormatUnion$ {
  /** @deprecated use `ChatGenerationParamsResponseFormatUnion$inboundSchema` instead. */
  export const inboundSchema =
    ChatGenerationParamsResponseFormatUnion$inboundSchema;
  /** @deprecated use `ChatGenerationParamsResponseFormatUnion$outboundSchema` instead. */
  export const outboundSchema =
    ChatGenerationParamsResponseFormatUnion$outboundSchema;
  /** @deprecated use `ChatGenerationParamsResponseFormatUnion$Outbound` instead. */
  export type Outbound = ChatGenerationParamsResponseFormatUnion$Outbound;
}

export function chatGenerationParamsResponseFormatUnionToJSON(
  chatGenerationParamsResponseFormatUnion:
    ChatGenerationParamsResponseFormatUnion,
): string {
  return JSON.stringify(
    ChatGenerationParamsResponseFormatUnion$outboundSchema.parse(
      chatGenerationParamsResponseFormatUnion,
    ),
  );
}

export function chatGenerationParamsResponseFormatUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  ChatGenerationParamsResponseFormatUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ChatGenerationParamsResponseFormatUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ChatGenerationParamsResponseFormatUnion' from JSON`,
  );
}

/** @internal */
export const ChatGenerationParamsStop$inboundSchema: z.ZodType<
  ChatGenerationParamsStop,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type ChatGenerationParamsStop$Outbound = string | Array<string>;

/** @internal */
export const ChatGenerationParamsStop$outboundSchema: z.ZodType<
  ChatGenerationParamsStop$Outbound,
  z.ZodTypeDef,
  ChatGenerationParamsStop
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatGenerationParamsStop$ {
  /** @deprecated use `ChatGenerationParamsStop$inboundSchema` instead. */
  export const inboundSchema = ChatGenerationParamsStop$inboundSchema;
  /** @deprecated use `ChatGenerationParamsStop$outboundSchema` instead. */
  export const outboundSchema = ChatGenerationParamsStop$outboundSchema;
  /** @deprecated use `ChatGenerationParamsStop$Outbound` instead. */
  export type Outbound = ChatGenerationParamsStop$Outbound;
}

export function chatGenerationParamsStopToJSON(
  chatGenerationParamsStop: ChatGenerationParamsStop,
): string {
  return JSON.stringify(
    ChatGenerationParamsStop$outboundSchema.parse(chatGenerationParamsStop),
  );
}

export function chatGenerationParamsStopFromJSON(
  jsonString: string,
): SafeParseResult<ChatGenerationParamsStop, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatGenerationParamsStop$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatGenerationParamsStop' from JSON`,
  );
}

/** @internal */
export const ChatGenerationParams$inboundSchema: z.ZodType<
  ChatGenerationParams,
  z.ZodTypeDef,
  unknown
> = z.object({
  messages: z.array(Message$inboundSchema),
  model: z.string(),
  frequency_penalty: z.nullable(z.number()).optional(),
  logit_bias: z.nullable(z.record(z.number())).optional(),
  logprobs: z.nullable(z.boolean()).optional(),
  top_logprobs: z.nullable(z.number()).optional(),
  max_completion_tokens: z.nullable(z.number()).optional(),
  max_tokens: z.nullable(z.number()).optional(),
  metadata: z.record(z.string()).optional(),
  presence_penalty: z.nullable(z.number()).optional(),
  reasoning: z.lazy(() => Reasoning$inboundSchema).optional(),
  response_format: z.union([
    ResponseFormatJSONSchema$inboundSchema,
    ResponseFormatTextGrammar$inboundSchema,
    z.lazy(() => ChatGenerationParamsResponseFormatText$inboundSchema),
    z.lazy(() => ChatGenerationParamsResponseFormatJSONObject$inboundSchema),
    z.lazy(() => ChatGenerationParamsResponseFormatPython$inboundSchema),
  ]).optional(),
  seed: z.nullable(z.number().int()).optional(),
  stop: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
  stream: z.nullable(z.boolean()).optional(),
  stream_options: z.nullable(ChatStreamOptions$inboundSchema).optional(),
  temperature: z.nullable(z.number()).optional(),
  tool_choice: z.any().optional(),
  tools: z.array(Tool$inboundSchema).optional(),
  top_p: z.nullable(z.number()).optional(),
  user: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "frequency_penalty": "frequencyPenalty",
    "logit_bias": "logitBias",
    "top_logprobs": "topLogprobs",
    "max_completion_tokens": "maxCompletionTokens",
    "max_tokens": "maxTokens",
    "presence_penalty": "presencePenalty",
    "response_format": "responseFormat",
    "stream_options": "streamOptions",
    "tool_choice": "toolChoice",
    "top_p": "topP",
  });
});

/** @internal */
export type ChatGenerationParams$Outbound = {
  messages: Array<Message$Outbound>;
  model: string;
  frequency_penalty?: number | null | undefined;
  logit_bias?: { [k: string]: number } | null | undefined;
  logprobs?: boolean | null | undefined;
  top_logprobs?: number | null | undefined;
  max_completion_tokens?: number | null | undefined;
  max_tokens?: number | null | undefined;
  metadata?: { [k: string]: string } | undefined;
  presence_penalty?: number | null | undefined;
  reasoning?: Reasoning$Outbound | undefined;
  response_format?:
    | ResponseFormatJSONSchema$Outbound
    | ResponseFormatTextGrammar$Outbound
    | ChatGenerationParamsResponseFormatText$Outbound
    | ChatGenerationParamsResponseFormatJSONObject$Outbound
    | ChatGenerationParamsResponseFormatPython$Outbound
    | undefined;
  seed?: number | null | undefined;
  stop?: string | Array<string> | null | undefined;
  stream?: boolean | null | undefined;
  stream_options?: ChatStreamOptions$Outbound | null | undefined;
  temperature?: number | null | undefined;
  tool_choice?: any | undefined;
  tools?: Array<Tool$Outbound> | undefined;
  top_p?: number | null | undefined;
  user?: string | undefined;
};

/** @internal */
export const ChatGenerationParams$outboundSchema: z.ZodType<
  ChatGenerationParams$Outbound,
  z.ZodTypeDef,
  ChatGenerationParams
> = z.object({
  messages: z.array(Message$outboundSchema),
  model: z.string(),
  frequencyPenalty: z.nullable(z.number()).optional(),
  logitBias: z.nullable(z.record(z.number())).optional(),
  logprobs: z.nullable(z.boolean()).optional(),
  topLogprobs: z.nullable(z.number()).optional(),
  maxCompletionTokens: z.nullable(z.number()).optional(),
  maxTokens: z.nullable(z.number()).optional(),
  metadata: z.record(z.string()).optional(),
  presencePenalty: z.nullable(z.number()).optional(),
  reasoning: z.lazy(() => Reasoning$outboundSchema).optional(),
  responseFormat: z.union([
    ResponseFormatJSONSchema$outboundSchema,
    ResponseFormatTextGrammar$outboundSchema,
    z.lazy(() => ChatGenerationParamsResponseFormatText$outboundSchema),
    z.lazy(() => ChatGenerationParamsResponseFormatJSONObject$outboundSchema),
    z.lazy(() => ChatGenerationParamsResponseFormatPython$outboundSchema),
  ]).optional(),
  seed: z.nullable(z.number().int()).optional(),
  stop: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
  stream: z.nullable(z.boolean()).optional(),
  streamOptions: z.nullable(ChatStreamOptions$outboundSchema).optional(),
  temperature: z.nullable(z.number()).optional(),
  toolChoice: z.any().optional(),
  tools: z.array(Tool$outboundSchema).optional(),
  topP: z.nullable(z.number()).optional(),
  user: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    frequencyPenalty: "frequency_penalty",
    logitBias: "logit_bias",
    topLogprobs: "top_logprobs",
    maxCompletionTokens: "max_completion_tokens",
    maxTokens: "max_tokens",
    presencePenalty: "presence_penalty",
    responseFormat: "response_format",
    streamOptions: "stream_options",
    toolChoice: "tool_choice",
    topP: "top_p",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatGenerationParams$ {
  /** @deprecated use `ChatGenerationParams$inboundSchema` instead. */
  export const inboundSchema = ChatGenerationParams$inboundSchema;
  /** @deprecated use `ChatGenerationParams$outboundSchema` instead. */
  export const outboundSchema = ChatGenerationParams$outboundSchema;
  /** @deprecated use `ChatGenerationParams$Outbound` instead. */
  export type Outbound = ChatGenerationParams$Outbound;
}

export function chatGenerationParamsToJSON(
  chatGenerationParams: ChatGenerationParams,
): string {
  return JSON.stringify(
    ChatGenerationParams$outboundSchema.parse(chatGenerationParams),
  );
}

export function chatGenerationParamsFromJSON(
  jsonString: string,
): SafeParseResult<ChatGenerationParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatGenerationParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatGenerationParams' from JSON`,
  );
}
