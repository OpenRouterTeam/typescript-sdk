/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v4";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const OpenResponsesReasoningSummaryTextDeltaEventType = {
  ResponseReasoningSummaryTextDelta: "response.reasoning_summary_text.delta",
} as const;
export type OpenResponsesReasoningSummaryTextDeltaEventType = ClosedEnum<
  typeof OpenResponsesReasoningSummaryTextDeltaEventType
>;

/**
 * Event emitted when reasoning summary text delta is streamed
 */
export type OpenResponsesReasoningSummaryTextDeltaEvent = {
  type: OpenResponsesReasoningSummaryTextDeltaEventType;
  itemId: string;
  outputIndex: number;
  summaryIndex: number;
  delta: string;
  sequenceNumber: number;
};

/** @internal */
export const OpenResponsesReasoningSummaryTextDeltaEventType$inboundSchema:
  z.ZodEnum<typeof OpenResponsesReasoningSummaryTextDeltaEventType> = z.enum(
    OpenResponsesReasoningSummaryTextDeltaEventType,
  );

/** @internal */
export const OpenResponsesReasoningSummaryTextDeltaEventType$outboundSchema:
  z.ZodEnum<typeof OpenResponsesReasoningSummaryTextDeltaEventType> =
    OpenResponsesReasoningSummaryTextDeltaEventType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesReasoningSummaryTextDeltaEventType$ {
  /** @deprecated use `OpenResponsesReasoningSummaryTextDeltaEventType$inboundSchema` instead. */
  export const inboundSchema =
    OpenResponsesReasoningSummaryTextDeltaEventType$inboundSchema;
  /** @deprecated use `OpenResponsesReasoningSummaryTextDeltaEventType$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesReasoningSummaryTextDeltaEventType$outboundSchema;
}

/** @internal */
export const OpenResponsesReasoningSummaryTextDeltaEvent$inboundSchema:
  z.ZodType<OpenResponsesReasoningSummaryTextDeltaEvent, unknown> = z.object({
    type: OpenResponsesReasoningSummaryTextDeltaEventType$inboundSchema,
    item_id: z.string(),
    output_index: z.number(),
    summary_index: z.number(),
    delta: z.string(),
    sequence_number: z.number(),
  }).transform((v) => {
    return remap$(v, {
      "item_id": "itemId",
      "output_index": "outputIndex",
      "summary_index": "summaryIndex",
      "sequence_number": "sequenceNumber",
    });
  });

/** @internal */
export type OpenResponsesReasoningSummaryTextDeltaEvent$Outbound = {
  type: string;
  item_id: string;
  output_index: number;
  summary_index: number;
  delta: string;
  sequence_number: number;
};

/** @internal */
export const OpenResponsesReasoningSummaryTextDeltaEvent$outboundSchema:
  z.ZodType<
    OpenResponsesReasoningSummaryTextDeltaEvent$Outbound,
    OpenResponsesReasoningSummaryTextDeltaEvent
  > = z.object({
    type: OpenResponsesReasoningSummaryTextDeltaEventType$outboundSchema,
    itemId: z.string(),
    outputIndex: z.number(),
    summaryIndex: z.number(),
    delta: z.string(),
    sequenceNumber: z.number(),
  }).transform((v) => {
    return remap$(v, {
      itemId: "item_id",
      outputIndex: "output_index",
      summaryIndex: "summary_index",
      sequenceNumber: "sequence_number",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesReasoningSummaryTextDeltaEvent$ {
  /** @deprecated use `OpenResponsesReasoningSummaryTextDeltaEvent$inboundSchema` instead. */
  export const inboundSchema =
    OpenResponsesReasoningSummaryTextDeltaEvent$inboundSchema;
  /** @deprecated use `OpenResponsesReasoningSummaryTextDeltaEvent$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesReasoningSummaryTextDeltaEvent$outboundSchema;
  /** @deprecated use `OpenResponsesReasoningSummaryTextDeltaEvent$Outbound` instead. */
  export type Outbound = OpenResponsesReasoningSummaryTextDeltaEvent$Outbound;
}

export function openResponsesReasoningSummaryTextDeltaEventToJSON(
  openResponsesReasoningSummaryTextDeltaEvent:
    OpenResponsesReasoningSummaryTextDeltaEvent,
): string {
  return JSON.stringify(
    OpenResponsesReasoningSummaryTextDeltaEvent$outboundSchema.parse(
      openResponsesReasoningSummaryTextDeltaEvent,
    ),
  );
}

export function openResponsesReasoningSummaryTextDeltaEventFromJSON(
  jsonString: string,
): SafeParseResult<
  OpenResponsesReasoningSummaryTextDeltaEvent,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      OpenResponsesReasoningSummaryTextDeltaEvent$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'OpenResponsesReasoningSummaryTextDeltaEvent' from JSON`,
  );
}
