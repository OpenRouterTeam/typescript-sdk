/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  FileCitationAnnotation,
  FileCitationAnnotation$inboundSchema,
  FileCitationAnnotation$Outbound,
  FileCitationAnnotation$outboundSchema,
} from "./filecitationannotation.js";
import {
  FilePathAnnotation,
  FilePathAnnotation$inboundSchema,
  FilePathAnnotation$Outbound,
  FilePathAnnotation$outboundSchema,
} from "./filepathannotation.js";
import {
  URLCitationAnnotation,
  URLCitationAnnotation$inboundSchema,
  URLCitationAnnotation$Outbound,
  URLCitationAnnotation$outboundSchema,
} from "./urlcitationannotation.js";

export const OpenResponsesOutputTextType = {
  OutputText: "output_text",
} as const;
export type OpenResponsesOutputTextType = ClosedEnum<
  typeof OpenResponsesOutputTextType
>;

export type OpenResponsesOutputTextAnnotation =
  | URLCitationAnnotation
  | FileCitationAnnotation
  | FilePathAnnotation;

export type OpenResponsesOutputText = {
  type: OpenResponsesOutputTextType;
  text: string;
  annotations?:
    | Array<URLCitationAnnotation | FileCitationAnnotation | FilePathAnnotation>
    | undefined;
};

/** @internal */
export const OpenResponsesOutputTextType$inboundSchema: z.ZodNativeEnum<
  typeof OpenResponsesOutputTextType
> = z.nativeEnum(OpenResponsesOutputTextType);

/** @internal */
export const OpenResponsesOutputTextType$outboundSchema: z.ZodNativeEnum<
  typeof OpenResponsesOutputTextType
> = OpenResponsesOutputTextType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesOutputTextType$ {
  /** @deprecated use `OpenResponsesOutputTextType$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesOutputTextType$inboundSchema;
  /** @deprecated use `OpenResponsesOutputTextType$outboundSchema` instead. */
  export const outboundSchema = OpenResponsesOutputTextType$outboundSchema;
}

/** @internal */
export const OpenResponsesOutputTextAnnotation$inboundSchema: z.ZodType<
  OpenResponsesOutputTextAnnotation,
  z.ZodTypeDef,
  unknown
> = z.union([
  URLCitationAnnotation$inboundSchema,
  FileCitationAnnotation$inboundSchema,
  FilePathAnnotation$inboundSchema,
]);

/** @internal */
export type OpenResponsesOutputTextAnnotation$Outbound =
  | URLCitationAnnotation$Outbound
  | FileCitationAnnotation$Outbound
  | FilePathAnnotation$Outbound;

/** @internal */
export const OpenResponsesOutputTextAnnotation$outboundSchema: z.ZodType<
  OpenResponsesOutputTextAnnotation$Outbound,
  z.ZodTypeDef,
  OpenResponsesOutputTextAnnotation
> = z.union([
  URLCitationAnnotation$outboundSchema,
  FileCitationAnnotation$outboundSchema,
  FilePathAnnotation$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesOutputTextAnnotation$ {
  /** @deprecated use `OpenResponsesOutputTextAnnotation$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesOutputTextAnnotation$inboundSchema;
  /** @deprecated use `OpenResponsesOutputTextAnnotation$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesOutputTextAnnotation$outboundSchema;
  /** @deprecated use `OpenResponsesOutputTextAnnotation$Outbound` instead. */
  export type Outbound = OpenResponsesOutputTextAnnotation$Outbound;
}

export function openResponsesOutputTextAnnotationToJSON(
  openResponsesOutputTextAnnotation: OpenResponsesOutputTextAnnotation,
): string {
  return JSON.stringify(
    OpenResponsesOutputTextAnnotation$outboundSchema.parse(
      openResponsesOutputTextAnnotation,
    ),
  );
}

export function openResponsesOutputTextAnnotationFromJSON(
  jsonString: string,
): SafeParseResult<OpenResponsesOutputTextAnnotation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenResponsesOutputTextAnnotation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenResponsesOutputTextAnnotation' from JSON`,
  );
}

/** @internal */
export const OpenResponsesOutputText$inboundSchema: z.ZodType<
  OpenResponsesOutputText,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: OpenResponsesOutputTextType$inboundSchema,
  text: z.string(),
  annotations: z.array(
    z.union([
      URLCitationAnnotation$inboundSchema,
      FileCitationAnnotation$inboundSchema,
      FilePathAnnotation$inboundSchema,
    ]),
  ).optional(),
});

/** @internal */
export type OpenResponsesOutputText$Outbound = {
  type: string;
  text: string;
  annotations?:
    | Array<
      | URLCitationAnnotation$Outbound
      | FileCitationAnnotation$Outbound
      | FilePathAnnotation$Outbound
    >
    | undefined;
};

/** @internal */
export const OpenResponsesOutputText$outboundSchema: z.ZodType<
  OpenResponsesOutputText$Outbound,
  z.ZodTypeDef,
  OpenResponsesOutputText
> = z.object({
  type: OpenResponsesOutputTextType$outboundSchema,
  text: z.string(),
  annotations: z.array(
    z.union([
      URLCitationAnnotation$outboundSchema,
      FileCitationAnnotation$outboundSchema,
      FilePathAnnotation$outboundSchema,
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesOutputText$ {
  /** @deprecated use `OpenResponsesOutputText$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesOutputText$inboundSchema;
  /** @deprecated use `OpenResponsesOutputText$outboundSchema` instead. */
  export const outboundSchema = OpenResponsesOutputText$outboundSchema;
  /** @deprecated use `OpenResponsesOutputText$Outbound` instead. */
  export type Outbound = OpenResponsesOutputText$Outbound;
}

export function openResponsesOutputTextToJSON(
  openResponsesOutputText: OpenResponsesOutputText,
): string {
  return JSON.stringify(
    OpenResponsesOutputText$outboundSchema.parse(openResponsesOutputText),
  );
}

export function openResponsesOutputTextFromJSON(
  jsonString: string,
): SafeParseResult<OpenResponsesOutputText, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenResponsesOutputText$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenResponsesOutputText' from JSON`,
  );
}
