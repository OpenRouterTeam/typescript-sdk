/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const ResponseFormatJSONSchemaType = {
  JsonSchema: "json_schema",
} as const;
export type ResponseFormatJSONSchemaType = ClosedEnum<
  typeof ResponseFormatJSONSchemaType
>;

/**
 * JSON Schema response format
 */
export type ResponseFormatJSONSchema = {
  type: ResponseFormatJSONSchemaType;
  name: string;
  description?: string | undefined;
  strict?: boolean | null | undefined;
  schema: { [k: string]: any | null };
};

/** @internal */
export const ResponseFormatJSONSchemaType$inboundSchema: z.ZodNativeEnum<
  typeof ResponseFormatJSONSchemaType
> = z.nativeEnum(ResponseFormatJSONSchemaType);

/** @internal */
export const ResponseFormatJSONSchemaType$outboundSchema: z.ZodNativeEnum<
  typeof ResponseFormatJSONSchemaType
> = ResponseFormatJSONSchemaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseFormatJSONSchemaType$ {
  /** @deprecated use `ResponseFormatJSONSchemaType$inboundSchema` instead. */
  export const inboundSchema = ResponseFormatJSONSchemaType$inboundSchema;
  /** @deprecated use `ResponseFormatJSONSchemaType$outboundSchema` instead. */
  export const outboundSchema = ResponseFormatJSONSchemaType$outboundSchema;
}

/** @internal */
export const ResponseFormatJSONSchema$inboundSchema: z.ZodType<
  ResponseFormatJSONSchema,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ResponseFormatJSONSchemaType$inboundSchema,
  name: z.string(),
  description: z.string().optional(),
  strict: z.nullable(z.boolean()).optional(),
  schema: z.record(z.nullable(z.any())),
});

/** @internal */
export type ResponseFormatJSONSchema$Outbound = {
  type: string;
  name: string;
  description?: string | undefined;
  strict?: boolean | null | undefined;
  schema: { [k: string]: any | null };
};

/** @internal */
export const ResponseFormatJSONSchema$outboundSchema: z.ZodType<
  ResponseFormatJSONSchema$Outbound,
  z.ZodTypeDef,
  ResponseFormatJSONSchema
> = z.object({
  type: ResponseFormatJSONSchemaType$outboundSchema,
  name: z.string(),
  description: z.string().optional(),
  strict: z.nullable(z.boolean()).optional(),
  schema: z.record(z.nullable(z.any())),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseFormatJSONSchema$ {
  /** @deprecated use `ResponseFormatJSONSchema$inboundSchema` instead. */
  export const inboundSchema = ResponseFormatJSONSchema$inboundSchema;
  /** @deprecated use `ResponseFormatJSONSchema$outboundSchema` instead. */
  export const outboundSchema = ResponseFormatJSONSchema$outboundSchema;
  /** @deprecated use `ResponseFormatJSONSchema$Outbound` instead. */
  export type Outbound = ResponseFormatJSONSchema$Outbound;
}

export function responseFormatJSONSchemaToJSON(
  responseFormatJSONSchema: ResponseFormatJSONSchema,
): string {
  return JSON.stringify(
    ResponseFormatJSONSchema$outboundSchema.parse(responseFormatJSONSchema),
  );
}

export function responseFormatJSONSchemaFromJSON(
  jsonString: string,
): SafeParseResult<ResponseFormatJSONSchema, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseFormatJSONSchema$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseFormatJSONSchema' from JSON`,
  );
}
