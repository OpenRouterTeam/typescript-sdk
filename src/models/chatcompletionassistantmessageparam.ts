/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ChatCompletionContentPart,
  ChatCompletionContentPart$inboundSchema,
  ChatCompletionContentPart$Outbound,
  ChatCompletionContentPart$outboundSchema,
} from "./chatcompletioncontentpart.js";
import {
  ChatCompletionMessageToolCall,
  ChatCompletionMessageToolCall$inboundSchema,
  ChatCompletionMessageToolCall$Outbound,
  ChatCompletionMessageToolCall$outboundSchema,
} from "./chatcompletionmessagetoolcall.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const ChatCompletionAssistantMessageParamRole = {
  Assistant: "assistant",
} as const;
export type ChatCompletionAssistantMessageParamRole = ClosedEnum<
  typeof ChatCompletionAssistantMessageParamRole
>;

/**
 * Assistant message content
 */
export type ChatCompletionAssistantMessageParamContent =
  | string
  | Array<ChatCompletionContentPart>
  | any;

/**
 * Assistant message with tool calls and audio support
 */
export type ChatCompletionAssistantMessageParam = {
  role: ChatCompletionAssistantMessageParamRole;
  /**
   * Assistant message content
   */
  content?: string | Array<ChatCompletionContentPart> | any | null | undefined;
  /**
   * Optional name for the assistant
   */
  name?: string | undefined;
  /**
   * Tool calls made by the assistant
   */
  toolCalls?: Array<ChatCompletionMessageToolCall> | undefined;
  /**
   * Refusal message if content was refused
   */
  refusal?: string | null | undefined;
};

/** @internal */
export const ChatCompletionAssistantMessageParamRole$inboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionAssistantMessageParamRole> = z
    .nativeEnum(ChatCompletionAssistantMessageParamRole);

/** @internal */
export const ChatCompletionAssistantMessageParamRole$outboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionAssistantMessageParamRole> =
    ChatCompletionAssistantMessageParamRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionAssistantMessageParamRole$ {
  /** @deprecated use `ChatCompletionAssistantMessageParamRole$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionAssistantMessageParamRole$inboundSchema;
  /** @deprecated use `ChatCompletionAssistantMessageParamRole$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionAssistantMessageParamRole$outboundSchema;
}

/** @internal */
export const ChatCompletionAssistantMessageParamContent$inboundSchema:
  z.ZodType<ChatCompletionAssistantMessageParamContent, z.ZodTypeDef, unknown> =
    z.union([
      z.string(),
      z.array(ChatCompletionContentPart$inboundSchema),
      z.any(),
    ]);

/** @internal */
export type ChatCompletionAssistantMessageParamContent$Outbound =
  | string
  | Array<ChatCompletionContentPart$Outbound>
  | any;

/** @internal */
export const ChatCompletionAssistantMessageParamContent$outboundSchema:
  z.ZodType<
    ChatCompletionAssistantMessageParamContent$Outbound,
    z.ZodTypeDef,
    ChatCompletionAssistantMessageParamContent
  > = z.union([
    z.string(),
    z.array(ChatCompletionContentPart$outboundSchema),
    z.any(),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionAssistantMessageParamContent$ {
  /** @deprecated use `ChatCompletionAssistantMessageParamContent$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionAssistantMessageParamContent$inboundSchema;
  /** @deprecated use `ChatCompletionAssistantMessageParamContent$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionAssistantMessageParamContent$outboundSchema;
  /** @deprecated use `ChatCompletionAssistantMessageParamContent$Outbound` instead. */
  export type Outbound = ChatCompletionAssistantMessageParamContent$Outbound;
}

export function chatCompletionAssistantMessageParamContentToJSON(
  chatCompletionAssistantMessageParamContent:
    ChatCompletionAssistantMessageParamContent,
): string {
  return JSON.stringify(
    ChatCompletionAssistantMessageParamContent$outboundSchema.parse(
      chatCompletionAssistantMessageParamContent,
    ),
  );
}

export function chatCompletionAssistantMessageParamContentFromJSON(
  jsonString: string,
): SafeParseResult<
  ChatCompletionAssistantMessageParamContent,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ChatCompletionAssistantMessageParamContent$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ChatCompletionAssistantMessageParamContent' from JSON`,
  );
}

/** @internal */
export const ChatCompletionAssistantMessageParam$inboundSchema: z.ZodType<
  ChatCompletionAssistantMessageParam,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: ChatCompletionAssistantMessageParamRole$inboundSchema,
  content: z.nullable(
    z.union([
      z.string(),
      z.array(ChatCompletionContentPart$inboundSchema),
      z.any(),
    ]),
  ).optional(),
  name: z.string().optional(),
  tool_calls: z.array(ChatCompletionMessageToolCall$inboundSchema).optional(),
  refusal: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type ChatCompletionAssistantMessageParam$Outbound = {
  role: string;
  content?:
    | string
    | Array<ChatCompletionContentPart$Outbound>
    | any
    | null
    | undefined;
  name?: string | undefined;
  tool_calls?: Array<ChatCompletionMessageToolCall$Outbound> | undefined;
  refusal?: string | null | undefined;
};

/** @internal */
export const ChatCompletionAssistantMessageParam$outboundSchema: z.ZodType<
  ChatCompletionAssistantMessageParam$Outbound,
  z.ZodTypeDef,
  ChatCompletionAssistantMessageParam
> = z.object({
  role: ChatCompletionAssistantMessageParamRole$outboundSchema,
  content: z.nullable(
    z.union([
      z.string(),
      z.array(ChatCompletionContentPart$outboundSchema),
      z.any(),
    ]),
  ).optional(),
  name: z.string().optional(),
  toolCalls: z.array(ChatCompletionMessageToolCall$outboundSchema).optional(),
  refusal: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionAssistantMessageParam$ {
  /** @deprecated use `ChatCompletionAssistantMessageParam$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionAssistantMessageParam$inboundSchema;
  /** @deprecated use `ChatCompletionAssistantMessageParam$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionAssistantMessageParam$outboundSchema;
  /** @deprecated use `ChatCompletionAssistantMessageParam$Outbound` instead. */
  export type Outbound = ChatCompletionAssistantMessageParam$Outbound;
}

export function chatCompletionAssistantMessageParamToJSON(
  chatCompletionAssistantMessageParam: ChatCompletionAssistantMessageParam,
): string {
  return JSON.stringify(
    ChatCompletionAssistantMessageParam$outboundSchema.parse(
      chatCompletionAssistantMessageParam,
    ),
  );
}

export function chatCompletionAssistantMessageParamFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionAssistantMessageParam, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ChatCompletionAssistantMessageParam$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionAssistantMessageParam' from JSON`,
  );
}
