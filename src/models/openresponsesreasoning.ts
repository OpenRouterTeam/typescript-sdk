/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  ClosedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ReasoningSummaryText,
  ReasoningSummaryText$inboundSchema,
  ReasoningSummaryText$Outbound,
  ReasoningSummaryText$outboundSchema,
} from "./reasoningsummarytext.js";
import {
  ReasoningTextContent,
  ReasoningTextContent$inboundSchema,
  ReasoningTextContent$Outbound,
  ReasoningTextContent$outboundSchema,
} from "./reasoningtextcontent.js";

export const OpenResponsesReasoningType = {
  Reasoning: "reasoning",
} as const;
export type OpenResponsesReasoningType = ClosedEnum<
  typeof OpenResponsesReasoningType
>;

export const OpenResponsesReasoningFormat = {
  Unknown: "unknown",
  OpenaiResponsesV1: "openai-responses-v1",
  XaiResponsesV1: "xai-responses-v1",
  AnthropicClaudeV1: "anthropic-claude-v1",
} as const;
export type OpenResponsesReasoningFormat = OpenEnum<
  typeof OpenResponsesReasoningFormat
>;

/**
 * Reasoning output item with signature and format extensions
 */
export type OpenResponsesReasoning = {
  type: OpenResponsesReasoningType;
  id: string;
  content?: Array<ReasoningTextContent> | undefined;
  summary: Array<ReasoningSummaryText>;
  encryptedContent?: string | null | undefined;
  signature?: string | null | undefined;
  format?: OpenResponsesReasoningFormat | null | undefined;
};

/** @internal */
export const OpenResponsesReasoningType$inboundSchema: z.ZodNativeEnum<
  typeof OpenResponsesReasoningType
> = z.nativeEnum(OpenResponsesReasoningType);

/** @internal */
export const OpenResponsesReasoningType$outboundSchema: z.ZodNativeEnum<
  typeof OpenResponsesReasoningType
> = OpenResponsesReasoningType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesReasoningType$ {
  /** @deprecated use `OpenResponsesReasoningType$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesReasoningType$inboundSchema;
  /** @deprecated use `OpenResponsesReasoningType$outboundSchema` instead. */
  export const outboundSchema = OpenResponsesReasoningType$outboundSchema;
}

/** @internal */
export const OpenResponsesReasoningFormat$inboundSchema: z.ZodType<
  OpenResponsesReasoningFormat,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OpenResponsesReasoningFormat),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OpenResponsesReasoningFormat$outboundSchema: z.ZodType<
  OpenResponsesReasoningFormat,
  z.ZodTypeDef,
  OpenResponsesReasoningFormat
> = z.union([
  z.nativeEnum(OpenResponsesReasoningFormat),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesReasoningFormat$ {
  /** @deprecated use `OpenResponsesReasoningFormat$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesReasoningFormat$inboundSchema;
  /** @deprecated use `OpenResponsesReasoningFormat$outboundSchema` instead. */
  export const outboundSchema = OpenResponsesReasoningFormat$outboundSchema;
}

/** @internal */
export const OpenResponsesReasoning$inboundSchema: z.ZodType<
  OpenResponsesReasoning,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: OpenResponsesReasoningType$inboundSchema,
  id: z.string(),
  content: z.array(ReasoningTextContent$inboundSchema).optional(),
  summary: z.array(ReasoningSummaryText$inboundSchema),
  encrypted_content: z.nullable(z.string()).optional(),
  signature: z.nullable(z.string()).optional(),
  format: z.nullable(OpenResponsesReasoningFormat$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "encrypted_content": "encryptedContent",
  });
});

/** @internal */
export type OpenResponsesReasoning$Outbound = {
  type: string;
  id: string;
  content?: Array<ReasoningTextContent$Outbound> | undefined;
  summary: Array<ReasoningSummaryText$Outbound>;
  encrypted_content?: string | null | undefined;
  signature?: string | null | undefined;
  format?: string | null | undefined;
};

/** @internal */
export const OpenResponsesReasoning$outboundSchema: z.ZodType<
  OpenResponsesReasoning$Outbound,
  z.ZodTypeDef,
  OpenResponsesReasoning
> = z.object({
  type: OpenResponsesReasoningType$outboundSchema,
  id: z.string(),
  content: z.array(ReasoningTextContent$outboundSchema).optional(),
  summary: z.array(ReasoningSummaryText$outboundSchema),
  encryptedContent: z.nullable(z.string()).optional(),
  signature: z.nullable(z.string()).optional(),
  format: z.nullable(OpenResponsesReasoningFormat$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    encryptedContent: "encrypted_content",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesReasoning$ {
  /** @deprecated use `OpenResponsesReasoning$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesReasoning$inboundSchema;
  /** @deprecated use `OpenResponsesReasoning$outboundSchema` instead. */
  export const outboundSchema = OpenResponsesReasoning$outboundSchema;
  /** @deprecated use `OpenResponsesReasoning$Outbound` instead. */
  export type Outbound = OpenResponsesReasoning$Outbound;
}

export function openResponsesReasoningToJSON(
  openResponsesReasoning: OpenResponsesReasoning,
): string {
  return JSON.stringify(
    OpenResponsesReasoning$outboundSchema.parse(openResponsesReasoning),
  );
}

export function openResponsesReasoningFromJSON(
  jsonString: string,
): SafeParseResult<OpenResponsesReasoning, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenResponsesReasoning$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenResponsesReasoning' from JSON`,
  );
}
