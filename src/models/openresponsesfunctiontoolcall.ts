/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ToolCallStatus,
  ToolCallStatus$inboundSchema,
  ToolCallStatus$outboundSchema,
} from "./toolcallstatus.js";

export const OpenResponsesFunctionToolCallType = {
  FunctionCall: "function_call",
} as const;
export type OpenResponsesFunctionToolCallType = ClosedEnum<
  typeof OpenResponsesFunctionToolCallType
>;

/**
 * A function call initiated by the model
 */
export type OpenResponsesFunctionToolCall = {
  type: OpenResponsesFunctionToolCallType;
  callId: string;
  name: string;
  arguments: string;
  id: string;
  status?: ToolCallStatus | undefined;
};

/** @internal */
export const OpenResponsesFunctionToolCallType$inboundSchema: z.ZodNativeEnum<
  typeof OpenResponsesFunctionToolCallType
> = z.nativeEnum(OpenResponsesFunctionToolCallType);

/** @internal */
export const OpenResponsesFunctionToolCallType$outboundSchema: z.ZodNativeEnum<
  typeof OpenResponsesFunctionToolCallType
> = OpenResponsesFunctionToolCallType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesFunctionToolCallType$ {
  /** @deprecated use `OpenResponsesFunctionToolCallType$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesFunctionToolCallType$inboundSchema;
  /** @deprecated use `OpenResponsesFunctionToolCallType$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesFunctionToolCallType$outboundSchema;
}

/** @internal */
export const OpenResponsesFunctionToolCall$inboundSchema: z.ZodType<
  OpenResponsesFunctionToolCall,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: OpenResponsesFunctionToolCallType$inboundSchema,
  call_id: z.string(),
  name: z.string(),
  arguments: z.string(),
  id: z.string(),
  status: ToolCallStatus$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "call_id": "callId",
  });
});

/** @internal */
export type OpenResponsesFunctionToolCall$Outbound = {
  type: string;
  call_id: string;
  name: string;
  arguments: string;
  id: string;
  status?: string | undefined;
};

/** @internal */
export const OpenResponsesFunctionToolCall$outboundSchema: z.ZodType<
  OpenResponsesFunctionToolCall$Outbound,
  z.ZodTypeDef,
  OpenResponsesFunctionToolCall
> = z.object({
  type: OpenResponsesFunctionToolCallType$outboundSchema,
  callId: z.string(),
  name: z.string(),
  arguments: z.string(),
  id: z.string(),
  status: ToolCallStatus$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    callId: "call_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesFunctionToolCall$ {
  /** @deprecated use `OpenResponsesFunctionToolCall$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesFunctionToolCall$inboundSchema;
  /** @deprecated use `OpenResponsesFunctionToolCall$outboundSchema` instead. */
  export const outboundSchema = OpenResponsesFunctionToolCall$outboundSchema;
  /** @deprecated use `OpenResponsesFunctionToolCall$Outbound` instead. */
  export type Outbound = OpenResponsesFunctionToolCall$Outbound;
}

export function openResponsesFunctionToolCallToJSON(
  openResponsesFunctionToolCall: OpenResponsesFunctionToolCall,
): string {
  return JSON.stringify(
    OpenResponsesFunctionToolCall$outboundSchema.parse(
      openResponsesFunctionToolCall,
    ),
  );
}

export function openResponsesFunctionToolCallFromJSON(
  jsonString: string,
): SafeParseResult<OpenResponsesFunctionToolCall, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenResponsesFunctionToolCall$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenResponsesFunctionToolCall' from JSON`,
  );
}
