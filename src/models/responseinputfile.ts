/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const ResponseInputFileType = {
  InputFile: "input_file",
} as const;
export type ResponseInputFileType = ClosedEnum<typeof ResponseInputFileType>;

/**
 * File input content
 */
export type ResponseInputFile = {
  type: ResponseInputFileType;
  fileId?: string | null | undefined;
  fileData?: string | undefined;
  filename?: string | undefined;
  fileUrl?: string | undefined;
};

/** @internal */
export const ResponseInputFileType$inboundSchema: z.ZodNativeEnum<
  typeof ResponseInputFileType
> = z.nativeEnum(ResponseInputFileType);

/** @internal */
export const ResponseInputFileType$outboundSchema: z.ZodNativeEnum<
  typeof ResponseInputFileType
> = ResponseInputFileType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseInputFileType$ {
  /** @deprecated use `ResponseInputFileType$inboundSchema` instead. */
  export const inboundSchema = ResponseInputFileType$inboundSchema;
  /** @deprecated use `ResponseInputFileType$outboundSchema` instead. */
  export const outboundSchema = ResponseInputFileType$outboundSchema;
}

/** @internal */
export const ResponseInputFile$inboundSchema: z.ZodType<
  ResponseInputFile,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ResponseInputFileType$inboundSchema,
  file_id: z.nullable(z.string()).optional(),
  file_data: z.string().optional(),
  filename: z.string().optional(),
  file_url: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "file_id": "fileId",
    "file_data": "fileData",
    "file_url": "fileUrl",
  });
});

/** @internal */
export type ResponseInputFile$Outbound = {
  type: string;
  file_id?: string | null | undefined;
  file_data?: string | undefined;
  filename?: string | undefined;
  file_url?: string | undefined;
};

/** @internal */
export const ResponseInputFile$outboundSchema: z.ZodType<
  ResponseInputFile$Outbound,
  z.ZodTypeDef,
  ResponseInputFile
> = z.object({
  type: ResponseInputFileType$outboundSchema,
  fileId: z.nullable(z.string()).optional(),
  fileData: z.string().optional(),
  filename: z.string().optional(),
  fileUrl: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    fileId: "file_id",
    fileData: "file_data",
    fileUrl: "file_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseInputFile$ {
  /** @deprecated use `ResponseInputFile$inboundSchema` instead. */
  export const inboundSchema = ResponseInputFile$inboundSchema;
  /** @deprecated use `ResponseInputFile$outboundSchema` instead. */
  export const outboundSchema = ResponseInputFile$outboundSchema;
  /** @deprecated use `ResponseInputFile$Outbound` instead. */
  export type Outbound = ResponseInputFile$Outbound;
}

export function responseInputFileToJSON(
  responseInputFile: ResponseInputFile,
): string {
  return JSON.stringify(
    ResponseInputFile$outboundSchema.parse(responseInputFile),
  );
}

export function responseInputFileFromJSON(
  jsonString: string,
): SafeParseResult<ResponseInputFile, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseInputFile$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseInputFile' from JSON`,
  );
}
