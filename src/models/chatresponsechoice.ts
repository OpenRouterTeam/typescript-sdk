/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  AssistantMessage,
  AssistantMessage$inboundSchema,
  AssistantMessage$Outbound,
  AssistantMessage$outboundSchema,
} from "./assistantmessage.js";
import {
  ChatMessageTokenLogprobs,
  ChatMessageTokenLogprobs$inboundSchema,
  ChatMessageTokenLogprobs$Outbound,
  ChatMessageTokenLogprobs$outboundSchema,
} from "./chatmessagetokenlogprobs.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const ChatResponseChoiceFinishReason = {
  ToolCalls: "tool_calls",
  Stop: "stop",
  Length: "length",
  ContentFilter: "content_filter",
  Error: "error",
} as const;
export type ChatResponseChoiceFinishReason = ClosedEnum<
  typeof ChatResponseChoiceFinishReason
>;

export type ChatResponseChoice = {
  finishReason: ChatResponseChoiceFinishReason | null;
  index: number;
  message: AssistantMessage;
  logprobs?: ChatMessageTokenLogprobs | null | undefined;
};

/** @internal */
export const ChatResponseChoiceFinishReason$inboundSchema: z.ZodNativeEnum<
  typeof ChatResponseChoiceFinishReason
> = z.nativeEnum(ChatResponseChoiceFinishReason);

/** @internal */
export const ChatResponseChoiceFinishReason$outboundSchema: z.ZodNativeEnum<
  typeof ChatResponseChoiceFinishReason
> = ChatResponseChoiceFinishReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatResponseChoiceFinishReason$ {
  /** @deprecated use `ChatResponseChoiceFinishReason$inboundSchema` instead. */
  export const inboundSchema = ChatResponseChoiceFinishReason$inboundSchema;
  /** @deprecated use `ChatResponseChoiceFinishReason$outboundSchema` instead. */
  export const outboundSchema = ChatResponseChoiceFinishReason$outboundSchema;
}

/** @internal */
export const ChatResponseChoice$inboundSchema: z.ZodType<
  ChatResponseChoice,
  z.ZodTypeDef,
  unknown
> = z.object({
  finish_reason: z.nullable(ChatResponseChoiceFinishReason$inboundSchema),
  index: z.number(),
  message: AssistantMessage$inboundSchema,
  logprobs: z.nullable(ChatMessageTokenLogprobs$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "finish_reason": "finishReason",
  });
});

/** @internal */
export type ChatResponseChoice$Outbound = {
  finish_reason: string | null;
  index: number;
  message: AssistantMessage$Outbound;
  logprobs?: ChatMessageTokenLogprobs$Outbound | null | undefined;
};

/** @internal */
export const ChatResponseChoice$outboundSchema: z.ZodType<
  ChatResponseChoice$Outbound,
  z.ZodTypeDef,
  ChatResponseChoice
> = z.object({
  finishReason: z.nullable(ChatResponseChoiceFinishReason$outboundSchema),
  index: z.number(),
  message: AssistantMessage$outboundSchema,
  logprobs: z.nullable(ChatMessageTokenLogprobs$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    finishReason: "finish_reason",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatResponseChoice$ {
  /** @deprecated use `ChatResponseChoice$inboundSchema` instead. */
  export const inboundSchema = ChatResponseChoice$inboundSchema;
  /** @deprecated use `ChatResponseChoice$outboundSchema` instead. */
  export const outboundSchema = ChatResponseChoice$outboundSchema;
  /** @deprecated use `ChatResponseChoice$Outbound` instead. */
  export type Outbound = ChatResponseChoice$Outbound;
}

export function chatResponseChoiceToJSON(
  chatResponseChoice: ChatResponseChoice,
): string {
  return JSON.stringify(
    ChatResponseChoice$outboundSchema.parse(chatResponseChoice),
  );
}

export function chatResponseChoiceFromJSON(
  jsonString: string,
): SafeParseResult<ChatResponseChoice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatResponseChoice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatResponseChoice' from JSON`,
  );
}
