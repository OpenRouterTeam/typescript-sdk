/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type CompletionCreateParamsPrompt =
  | string
  | Array<string>
  | Array<number>
  | Array<Array<number>>;

export type CompletionCreateParamsStop = string | Array<string>;

export type StreamOptions = {
  includeUsage?: boolean | null | undefined;
};

export type CompletionCreateParamsResponseFormatPython = {
  type: "python";
};

export type CompletionCreateParamsResponseFormatGrammar = {
  type: "grammar";
  grammar: string;
};

export type CompletionCreateParamsJsonSchema = {
  name: string;
  description?: string | undefined;
  schema?: { [k: string]: any } | undefined;
  strict?: boolean | null | undefined;
};

export type CompletionCreateParamsResponseFormatJSONSchema = {
  type: "json_schema";
  jsonSchema: CompletionCreateParamsJsonSchema;
};

export type CompletionCreateParamsResponseFormatJSONObject = {
  type: "json_object";
};

export type CompletionCreateParamsResponseFormatText = {
  type: "text";
};

export type CompletionCreateParamsResponseFormatUnion =
  | CompletionCreateParamsResponseFormatJSONSchema
  | CompletionCreateParamsResponseFormatGrammar
  | CompletionCreateParamsResponseFormatText
  | CompletionCreateParamsResponseFormatJSONObject
  | CompletionCreateParamsResponseFormatPython;

export type CompletionCreateParams = {
  model: string;
  prompt: string | Array<string> | Array<number> | Array<Array<number>>;
  bestOf?: number | null | undefined;
  echo?: boolean | null | undefined;
  frequencyPenalty?: number | null | undefined;
  logitBias?: { [k: string]: number } | null | undefined;
  logprobs?: number | null | undefined;
  maxTokens?: number | null | undefined;
  n?: number | null | undefined;
  presencePenalty?: number | null | undefined;
  seed?: number | null | undefined;
  stop?: string | Array<string> | null | undefined;
  stream?: boolean | null | undefined;
  streamOptions?: StreamOptions | null | undefined;
  suffix?: string | null | undefined;
  temperature?: number | null | undefined;
  topP?: number | null | undefined;
  user?: string | undefined;
  metadata?: { [k: string]: string } | null | undefined;
  responseFormat?:
    | CompletionCreateParamsResponseFormatJSONSchema
    | CompletionCreateParamsResponseFormatGrammar
    | CompletionCreateParamsResponseFormatText
    | CompletionCreateParamsResponseFormatJSONObject
    | CompletionCreateParamsResponseFormatPython
    | null
    | undefined;
};

/** @internal */
export const CompletionCreateParamsPrompt$inboundSchema: z.ZodType<
  CompletionCreateParamsPrompt,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.string()),
  z.array(z.number()),
  z.array(z.array(z.number())),
]);

/** @internal */
export type CompletionCreateParamsPrompt$Outbound =
  | string
  | Array<string>
  | Array<number>
  | Array<Array<number>>;

/** @internal */
export const CompletionCreateParamsPrompt$outboundSchema: z.ZodType<
  CompletionCreateParamsPrompt$Outbound,
  z.ZodTypeDef,
  CompletionCreateParamsPrompt
> = z.union([
  z.string(),
  z.array(z.string()),
  z.array(z.number()),
  z.array(z.array(z.number())),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompletionCreateParamsPrompt$ {
  /** @deprecated use `CompletionCreateParamsPrompt$inboundSchema` instead. */
  export const inboundSchema = CompletionCreateParamsPrompt$inboundSchema;
  /** @deprecated use `CompletionCreateParamsPrompt$outboundSchema` instead. */
  export const outboundSchema = CompletionCreateParamsPrompt$outboundSchema;
  /** @deprecated use `CompletionCreateParamsPrompt$Outbound` instead. */
  export type Outbound = CompletionCreateParamsPrompt$Outbound;
}

export function completionCreateParamsPromptToJSON(
  completionCreateParamsPrompt: CompletionCreateParamsPrompt,
): string {
  return JSON.stringify(
    CompletionCreateParamsPrompt$outboundSchema.parse(
      completionCreateParamsPrompt,
    ),
  );
}

export function completionCreateParamsPromptFromJSON(
  jsonString: string,
): SafeParseResult<CompletionCreateParamsPrompt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompletionCreateParamsPrompt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompletionCreateParamsPrompt' from JSON`,
  );
}

/** @internal */
export const CompletionCreateParamsStop$inboundSchema: z.ZodType<
  CompletionCreateParamsStop,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type CompletionCreateParamsStop$Outbound = string | Array<string>;

/** @internal */
export const CompletionCreateParamsStop$outboundSchema: z.ZodType<
  CompletionCreateParamsStop$Outbound,
  z.ZodTypeDef,
  CompletionCreateParamsStop
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompletionCreateParamsStop$ {
  /** @deprecated use `CompletionCreateParamsStop$inboundSchema` instead. */
  export const inboundSchema = CompletionCreateParamsStop$inboundSchema;
  /** @deprecated use `CompletionCreateParamsStop$outboundSchema` instead. */
  export const outboundSchema = CompletionCreateParamsStop$outboundSchema;
  /** @deprecated use `CompletionCreateParamsStop$Outbound` instead. */
  export type Outbound = CompletionCreateParamsStop$Outbound;
}

export function completionCreateParamsStopToJSON(
  completionCreateParamsStop: CompletionCreateParamsStop,
): string {
  return JSON.stringify(
    CompletionCreateParamsStop$outboundSchema.parse(completionCreateParamsStop),
  );
}

export function completionCreateParamsStopFromJSON(
  jsonString: string,
): SafeParseResult<CompletionCreateParamsStop, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompletionCreateParamsStop$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompletionCreateParamsStop' from JSON`,
  );
}

/** @internal */
export const StreamOptions$inboundSchema: z.ZodType<
  StreamOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  include_usage: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    "include_usage": "includeUsage",
  });
});

/** @internal */
export type StreamOptions$Outbound = {
  include_usage?: boolean | null | undefined;
};

/** @internal */
export const StreamOptions$outboundSchema: z.ZodType<
  StreamOptions$Outbound,
  z.ZodTypeDef,
  StreamOptions
> = z.object({
  includeUsage: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    includeUsage: "include_usage",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamOptions$ {
  /** @deprecated use `StreamOptions$inboundSchema` instead. */
  export const inboundSchema = StreamOptions$inboundSchema;
  /** @deprecated use `StreamOptions$outboundSchema` instead. */
  export const outboundSchema = StreamOptions$outboundSchema;
  /** @deprecated use `StreamOptions$Outbound` instead. */
  export type Outbound = StreamOptions$Outbound;
}

export function streamOptionsToJSON(streamOptions: StreamOptions): string {
  return JSON.stringify(StreamOptions$outboundSchema.parse(streamOptions));
}

export function streamOptionsFromJSON(
  jsonString: string,
): SafeParseResult<StreamOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamOptions' from JSON`,
  );
}

/** @internal */
export const CompletionCreateParamsResponseFormatPython$inboundSchema:
  z.ZodType<CompletionCreateParamsResponseFormatPython, z.ZodTypeDef, unknown> =
    z.object({
      type: z.literal("python"),
    });

/** @internal */
export type CompletionCreateParamsResponseFormatPython$Outbound = {
  type: "python";
};

/** @internal */
export const CompletionCreateParamsResponseFormatPython$outboundSchema:
  z.ZodType<
    CompletionCreateParamsResponseFormatPython$Outbound,
    z.ZodTypeDef,
    CompletionCreateParamsResponseFormatPython
  > = z.object({
    type: z.literal("python"),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompletionCreateParamsResponseFormatPython$ {
  /** @deprecated use `CompletionCreateParamsResponseFormatPython$inboundSchema` instead. */
  export const inboundSchema =
    CompletionCreateParamsResponseFormatPython$inboundSchema;
  /** @deprecated use `CompletionCreateParamsResponseFormatPython$outboundSchema` instead. */
  export const outboundSchema =
    CompletionCreateParamsResponseFormatPython$outboundSchema;
  /** @deprecated use `CompletionCreateParamsResponseFormatPython$Outbound` instead. */
  export type Outbound = CompletionCreateParamsResponseFormatPython$Outbound;
}

export function completionCreateParamsResponseFormatPythonToJSON(
  completionCreateParamsResponseFormatPython:
    CompletionCreateParamsResponseFormatPython,
): string {
  return JSON.stringify(
    CompletionCreateParamsResponseFormatPython$outboundSchema.parse(
      completionCreateParamsResponseFormatPython,
    ),
  );
}

export function completionCreateParamsResponseFormatPythonFromJSON(
  jsonString: string,
): SafeParseResult<
  CompletionCreateParamsResponseFormatPython,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CompletionCreateParamsResponseFormatPython$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CompletionCreateParamsResponseFormatPython' from JSON`,
  );
}

/** @internal */
export const CompletionCreateParamsResponseFormatGrammar$inboundSchema:
  z.ZodType<
    CompletionCreateParamsResponseFormatGrammar,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: z.literal("grammar"),
    grammar: z.string(),
  });

/** @internal */
export type CompletionCreateParamsResponseFormatGrammar$Outbound = {
  type: "grammar";
  grammar: string;
};

/** @internal */
export const CompletionCreateParamsResponseFormatGrammar$outboundSchema:
  z.ZodType<
    CompletionCreateParamsResponseFormatGrammar$Outbound,
    z.ZodTypeDef,
    CompletionCreateParamsResponseFormatGrammar
  > = z.object({
    type: z.literal("grammar"),
    grammar: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompletionCreateParamsResponseFormatGrammar$ {
  /** @deprecated use `CompletionCreateParamsResponseFormatGrammar$inboundSchema` instead. */
  export const inboundSchema =
    CompletionCreateParamsResponseFormatGrammar$inboundSchema;
  /** @deprecated use `CompletionCreateParamsResponseFormatGrammar$outboundSchema` instead. */
  export const outboundSchema =
    CompletionCreateParamsResponseFormatGrammar$outboundSchema;
  /** @deprecated use `CompletionCreateParamsResponseFormatGrammar$Outbound` instead. */
  export type Outbound = CompletionCreateParamsResponseFormatGrammar$Outbound;
}

export function completionCreateParamsResponseFormatGrammarToJSON(
  completionCreateParamsResponseFormatGrammar:
    CompletionCreateParamsResponseFormatGrammar,
): string {
  return JSON.stringify(
    CompletionCreateParamsResponseFormatGrammar$outboundSchema.parse(
      completionCreateParamsResponseFormatGrammar,
    ),
  );
}

export function completionCreateParamsResponseFormatGrammarFromJSON(
  jsonString: string,
): SafeParseResult<
  CompletionCreateParamsResponseFormatGrammar,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CompletionCreateParamsResponseFormatGrammar$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CompletionCreateParamsResponseFormatGrammar' from JSON`,
  );
}

/** @internal */
export const CompletionCreateParamsJsonSchema$inboundSchema: z.ZodType<
  CompletionCreateParamsJsonSchema,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  schema: z.record(z.any()).optional(),
  strict: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type CompletionCreateParamsJsonSchema$Outbound = {
  name: string;
  description?: string | undefined;
  schema?: { [k: string]: any } | undefined;
  strict?: boolean | null | undefined;
};

/** @internal */
export const CompletionCreateParamsJsonSchema$outboundSchema: z.ZodType<
  CompletionCreateParamsJsonSchema$Outbound,
  z.ZodTypeDef,
  CompletionCreateParamsJsonSchema
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  schema: z.record(z.any()).optional(),
  strict: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompletionCreateParamsJsonSchema$ {
  /** @deprecated use `CompletionCreateParamsJsonSchema$inboundSchema` instead. */
  export const inboundSchema = CompletionCreateParamsJsonSchema$inboundSchema;
  /** @deprecated use `CompletionCreateParamsJsonSchema$outboundSchema` instead. */
  export const outboundSchema = CompletionCreateParamsJsonSchema$outboundSchema;
  /** @deprecated use `CompletionCreateParamsJsonSchema$Outbound` instead. */
  export type Outbound = CompletionCreateParamsJsonSchema$Outbound;
}

export function completionCreateParamsJsonSchemaToJSON(
  completionCreateParamsJsonSchema: CompletionCreateParamsJsonSchema,
): string {
  return JSON.stringify(
    CompletionCreateParamsJsonSchema$outboundSchema.parse(
      completionCreateParamsJsonSchema,
    ),
  );
}

export function completionCreateParamsJsonSchemaFromJSON(
  jsonString: string,
): SafeParseResult<CompletionCreateParamsJsonSchema, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompletionCreateParamsJsonSchema$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompletionCreateParamsJsonSchema' from JSON`,
  );
}

/** @internal */
export const CompletionCreateParamsResponseFormatJSONSchema$inboundSchema:
  z.ZodType<
    CompletionCreateParamsResponseFormatJSONSchema,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: z.literal("json_schema"),
    json_schema: z.lazy(() => CompletionCreateParamsJsonSchema$inboundSchema),
  }).transform((v) => {
    return remap$(v, {
      "json_schema": "jsonSchema",
    });
  });

/** @internal */
export type CompletionCreateParamsResponseFormatJSONSchema$Outbound = {
  type: "json_schema";
  json_schema: CompletionCreateParamsJsonSchema$Outbound;
};

/** @internal */
export const CompletionCreateParamsResponseFormatJSONSchema$outboundSchema:
  z.ZodType<
    CompletionCreateParamsResponseFormatJSONSchema$Outbound,
    z.ZodTypeDef,
    CompletionCreateParamsResponseFormatJSONSchema
  > = z.object({
    type: z.literal("json_schema"),
    jsonSchema: z.lazy(() => CompletionCreateParamsJsonSchema$outboundSchema),
  }).transform((v) => {
    return remap$(v, {
      jsonSchema: "json_schema",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompletionCreateParamsResponseFormatJSONSchema$ {
  /** @deprecated use `CompletionCreateParamsResponseFormatJSONSchema$inboundSchema` instead. */
  export const inboundSchema =
    CompletionCreateParamsResponseFormatJSONSchema$inboundSchema;
  /** @deprecated use `CompletionCreateParamsResponseFormatJSONSchema$outboundSchema` instead. */
  export const outboundSchema =
    CompletionCreateParamsResponseFormatJSONSchema$outboundSchema;
  /** @deprecated use `CompletionCreateParamsResponseFormatJSONSchema$Outbound` instead. */
  export type Outbound =
    CompletionCreateParamsResponseFormatJSONSchema$Outbound;
}

export function completionCreateParamsResponseFormatJSONSchemaToJSON(
  completionCreateParamsResponseFormatJSONSchema:
    CompletionCreateParamsResponseFormatJSONSchema,
): string {
  return JSON.stringify(
    CompletionCreateParamsResponseFormatJSONSchema$outboundSchema.parse(
      completionCreateParamsResponseFormatJSONSchema,
    ),
  );
}

export function completionCreateParamsResponseFormatJSONSchemaFromJSON(
  jsonString: string,
): SafeParseResult<
  CompletionCreateParamsResponseFormatJSONSchema,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CompletionCreateParamsResponseFormatJSONSchema$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CompletionCreateParamsResponseFormatJSONSchema' from JSON`,
  );
}

/** @internal */
export const CompletionCreateParamsResponseFormatJSONObject$inboundSchema:
  z.ZodType<
    CompletionCreateParamsResponseFormatJSONObject,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: z.literal("json_object"),
  });

/** @internal */
export type CompletionCreateParamsResponseFormatJSONObject$Outbound = {
  type: "json_object";
};

/** @internal */
export const CompletionCreateParamsResponseFormatJSONObject$outboundSchema:
  z.ZodType<
    CompletionCreateParamsResponseFormatJSONObject$Outbound,
    z.ZodTypeDef,
    CompletionCreateParamsResponseFormatJSONObject
  > = z.object({
    type: z.literal("json_object"),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompletionCreateParamsResponseFormatJSONObject$ {
  /** @deprecated use `CompletionCreateParamsResponseFormatJSONObject$inboundSchema` instead. */
  export const inboundSchema =
    CompletionCreateParamsResponseFormatJSONObject$inboundSchema;
  /** @deprecated use `CompletionCreateParamsResponseFormatJSONObject$outboundSchema` instead. */
  export const outboundSchema =
    CompletionCreateParamsResponseFormatJSONObject$outboundSchema;
  /** @deprecated use `CompletionCreateParamsResponseFormatJSONObject$Outbound` instead. */
  export type Outbound =
    CompletionCreateParamsResponseFormatJSONObject$Outbound;
}

export function completionCreateParamsResponseFormatJSONObjectToJSON(
  completionCreateParamsResponseFormatJSONObject:
    CompletionCreateParamsResponseFormatJSONObject,
): string {
  return JSON.stringify(
    CompletionCreateParamsResponseFormatJSONObject$outboundSchema.parse(
      completionCreateParamsResponseFormatJSONObject,
    ),
  );
}

export function completionCreateParamsResponseFormatJSONObjectFromJSON(
  jsonString: string,
): SafeParseResult<
  CompletionCreateParamsResponseFormatJSONObject,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CompletionCreateParamsResponseFormatJSONObject$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CompletionCreateParamsResponseFormatJSONObject' from JSON`,
  );
}

/** @internal */
export const CompletionCreateParamsResponseFormatText$inboundSchema: z.ZodType<
  CompletionCreateParamsResponseFormatText,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal("text"),
});

/** @internal */
export type CompletionCreateParamsResponseFormatText$Outbound = {
  type: "text";
};

/** @internal */
export const CompletionCreateParamsResponseFormatText$outboundSchema: z.ZodType<
  CompletionCreateParamsResponseFormatText$Outbound,
  z.ZodTypeDef,
  CompletionCreateParamsResponseFormatText
> = z.object({
  type: z.literal("text"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompletionCreateParamsResponseFormatText$ {
  /** @deprecated use `CompletionCreateParamsResponseFormatText$inboundSchema` instead. */
  export const inboundSchema =
    CompletionCreateParamsResponseFormatText$inboundSchema;
  /** @deprecated use `CompletionCreateParamsResponseFormatText$outboundSchema` instead. */
  export const outboundSchema =
    CompletionCreateParamsResponseFormatText$outboundSchema;
  /** @deprecated use `CompletionCreateParamsResponseFormatText$Outbound` instead. */
  export type Outbound = CompletionCreateParamsResponseFormatText$Outbound;
}

export function completionCreateParamsResponseFormatTextToJSON(
  completionCreateParamsResponseFormatText:
    CompletionCreateParamsResponseFormatText,
): string {
  return JSON.stringify(
    CompletionCreateParamsResponseFormatText$outboundSchema.parse(
      completionCreateParamsResponseFormatText,
    ),
  );
}

export function completionCreateParamsResponseFormatTextFromJSON(
  jsonString: string,
): SafeParseResult<
  CompletionCreateParamsResponseFormatText,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CompletionCreateParamsResponseFormatText$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CompletionCreateParamsResponseFormatText' from JSON`,
  );
}

/** @internal */
export const CompletionCreateParamsResponseFormatUnion$inboundSchema: z.ZodType<
  CompletionCreateParamsResponseFormatUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CompletionCreateParamsResponseFormatJSONSchema$inboundSchema),
  z.lazy(() => CompletionCreateParamsResponseFormatGrammar$inboundSchema),
  z.lazy(() => CompletionCreateParamsResponseFormatText$inboundSchema),
  z.lazy(() => CompletionCreateParamsResponseFormatJSONObject$inboundSchema),
  z.lazy(() => CompletionCreateParamsResponseFormatPython$inboundSchema),
]);

/** @internal */
export type CompletionCreateParamsResponseFormatUnion$Outbound =
  | CompletionCreateParamsResponseFormatJSONSchema$Outbound
  | CompletionCreateParamsResponseFormatGrammar$Outbound
  | CompletionCreateParamsResponseFormatText$Outbound
  | CompletionCreateParamsResponseFormatJSONObject$Outbound
  | CompletionCreateParamsResponseFormatPython$Outbound;

/** @internal */
export const CompletionCreateParamsResponseFormatUnion$outboundSchema:
  z.ZodType<
    CompletionCreateParamsResponseFormatUnion$Outbound,
    z.ZodTypeDef,
    CompletionCreateParamsResponseFormatUnion
  > = z.union([
    z.lazy(() => CompletionCreateParamsResponseFormatJSONSchema$outboundSchema),
    z.lazy(() => CompletionCreateParamsResponseFormatGrammar$outboundSchema),
    z.lazy(() => CompletionCreateParamsResponseFormatText$outboundSchema),
    z.lazy(() => CompletionCreateParamsResponseFormatJSONObject$outboundSchema),
    z.lazy(() => CompletionCreateParamsResponseFormatPython$outboundSchema),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompletionCreateParamsResponseFormatUnion$ {
  /** @deprecated use `CompletionCreateParamsResponseFormatUnion$inboundSchema` instead. */
  export const inboundSchema =
    CompletionCreateParamsResponseFormatUnion$inboundSchema;
  /** @deprecated use `CompletionCreateParamsResponseFormatUnion$outboundSchema` instead. */
  export const outboundSchema =
    CompletionCreateParamsResponseFormatUnion$outboundSchema;
  /** @deprecated use `CompletionCreateParamsResponseFormatUnion$Outbound` instead. */
  export type Outbound = CompletionCreateParamsResponseFormatUnion$Outbound;
}

export function completionCreateParamsResponseFormatUnionToJSON(
  completionCreateParamsResponseFormatUnion:
    CompletionCreateParamsResponseFormatUnion,
): string {
  return JSON.stringify(
    CompletionCreateParamsResponseFormatUnion$outboundSchema.parse(
      completionCreateParamsResponseFormatUnion,
    ),
  );
}

export function completionCreateParamsResponseFormatUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  CompletionCreateParamsResponseFormatUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CompletionCreateParamsResponseFormatUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CompletionCreateParamsResponseFormatUnion' from JSON`,
  );
}

/** @internal */
export const CompletionCreateParams$inboundSchema: z.ZodType<
  CompletionCreateParams,
  z.ZodTypeDef,
  unknown
> = z.object({
  model: z.string(),
  prompt: z.union([
    z.string(),
    z.array(z.string()),
    z.array(z.number()),
    z.array(z.array(z.number())),
  ]),
  best_of: z.nullable(z.number().int()).optional(),
  echo: z.nullable(z.boolean()).optional(),
  frequency_penalty: z.nullable(z.number()).optional(),
  logit_bias: z.nullable(z.record(z.number())).optional(),
  logprobs: z.nullable(z.number().int()).optional(),
  max_tokens: z.nullable(z.number().int()).optional(),
  n: z.nullable(z.number().int()).optional(),
  presence_penalty: z.nullable(z.number()).optional(),
  seed: z.nullable(z.number().int()).optional(),
  stop: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
  stream: z.nullable(z.boolean()).optional(),
  stream_options: z.nullable(z.lazy(() => StreamOptions$inboundSchema))
    .optional(),
  suffix: z.nullable(z.string()).optional(),
  temperature: z.nullable(z.number()).optional(),
  top_p: z.nullable(z.number()).optional(),
  user: z.string().optional(),
  metadata: z.nullable(z.record(z.string())).optional(),
  response_format: z.nullable(
    z.union([
      z.lazy(() =>
        CompletionCreateParamsResponseFormatJSONSchema$inboundSchema
      ),
      z.lazy(() => CompletionCreateParamsResponseFormatGrammar$inboundSchema),
      z.lazy(() => CompletionCreateParamsResponseFormatText$inboundSchema),
      z.lazy(() =>
        CompletionCreateParamsResponseFormatJSONObject$inboundSchema
      ),
      z.lazy(() => CompletionCreateParamsResponseFormatPython$inboundSchema),
    ]),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "best_of": "bestOf",
    "frequency_penalty": "frequencyPenalty",
    "logit_bias": "logitBias",
    "max_tokens": "maxTokens",
    "presence_penalty": "presencePenalty",
    "stream_options": "streamOptions",
    "top_p": "topP",
    "response_format": "responseFormat",
  });
});

/** @internal */
export type CompletionCreateParams$Outbound = {
  model: string;
  prompt: string | Array<string> | Array<number> | Array<Array<number>>;
  best_of?: number | null | undefined;
  echo?: boolean | null | undefined;
  frequency_penalty?: number | null | undefined;
  logit_bias?: { [k: string]: number } | null | undefined;
  logprobs?: number | null | undefined;
  max_tokens?: number | null | undefined;
  n?: number | null | undefined;
  presence_penalty?: number | null | undefined;
  seed?: number | null | undefined;
  stop?: string | Array<string> | null | undefined;
  stream?: boolean | null | undefined;
  stream_options?: StreamOptions$Outbound | null | undefined;
  suffix?: string | null | undefined;
  temperature?: number | null | undefined;
  top_p?: number | null | undefined;
  user?: string | undefined;
  metadata?: { [k: string]: string } | null | undefined;
  response_format?:
    | CompletionCreateParamsResponseFormatJSONSchema$Outbound
    | CompletionCreateParamsResponseFormatGrammar$Outbound
    | CompletionCreateParamsResponseFormatText$Outbound
    | CompletionCreateParamsResponseFormatJSONObject$Outbound
    | CompletionCreateParamsResponseFormatPython$Outbound
    | null
    | undefined;
};

/** @internal */
export const CompletionCreateParams$outboundSchema: z.ZodType<
  CompletionCreateParams$Outbound,
  z.ZodTypeDef,
  CompletionCreateParams
> = z.object({
  model: z.string(),
  prompt: z.union([
    z.string(),
    z.array(z.string()),
    z.array(z.number()),
    z.array(z.array(z.number())),
  ]),
  bestOf: z.nullable(z.number().int()).optional(),
  echo: z.nullable(z.boolean()).optional(),
  frequencyPenalty: z.nullable(z.number()).optional(),
  logitBias: z.nullable(z.record(z.number())).optional(),
  logprobs: z.nullable(z.number().int()).optional(),
  maxTokens: z.nullable(z.number().int()).optional(),
  n: z.nullable(z.number().int()).optional(),
  presencePenalty: z.nullable(z.number()).optional(),
  seed: z.nullable(z.number().int()).optional(),
  stop: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
  stream: z.nullable(z.boolean()).optional(),
  streamOptions: z.nullable(z.lazy(() => StreamOptions$outboundSchema))
    .optional(),
  suffix: z.nullable(z.string()).optional(),
  temperature: z.nullable(z.number()).optional(),
  topP: z.nullable(z.number()).optional(),
  user: z.string().optional(),
  metadata: z.nullable(z.record(z.string())).optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() =>
        CompletionCreateParamsResponseFormatJSONSchema$outboundSchema
      ),
      z.lazy(() => CompletionCreateParamsResponseFormatGrammar$outboundSchema),
      z.lazy(() => CompletionCreateParamsResponseFormatText$outboundSchema),
      z.lazy(() =>
        CompletionCreateParamsResponseFormatJSONObject$outboundSchema
      ),
      z.lazy(() => CompletionCreateParamsResponseFormatPython$outboundSchema),
    ]),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    bestOf: "best_of",
    frequencyPenalty: "frequency_penalty",
    logitBias: "logit_bias",
    maxTokens: "max_tokens",
    presencePenalty: "presence_penalty",
    streamOptions: "stream_options",
    topP: "top_p",
    responseFormat: "response_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompletionCreateParams$ {
  /** @deprecated use `CompletionCreateParams$inboundSchema` instead. */
  export const inboundSchema = CompletionCreateParams$inboundSchema;
  /** @deprecated use `CompletionCreateParams$outboundSchema` instead. */
  export const outboundSchema = CompletionCreateParams$outboundSchema;
  /** @deprecated use `CompletionCreateParams$Outbound` instead. */
  export type Outbound = CompletionCreateParams$Outbound;
}

export function completionCreateParamsToJSON(
  completionCreateParams: CompletionCreateParams,
): string {
  return JSON.stringify(
    CompletionCreateParams$outboundSchema.parse(completionCreateParams),
  );
}

export function completionCreateParamsFromJSON(
  jsonString: string,
): SafeParseResult<CompletionCreateParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompletionCreateParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompletionCreateParams' from JSON`,
  );
}
