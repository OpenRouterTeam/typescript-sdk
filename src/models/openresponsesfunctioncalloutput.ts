/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v4";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ToolCallStatus,
  ToolCallStatus$inboundSchema,
  ToolCallStatus$outboundSchema,
} from "./toolcallstatus.js";

export const OpenResponsesFunctionCallOutputType = {
  FunctionCallOutput: "function_call_output",
} as const;
export type OpenResponsesFunctionCallOutputType = ClosedEnum<
  typeof OpenResponsesFunctionCallOutputType
>;

/**
 * The output from a function call execution
 */
export type OpenResponsesFunctionCallOutput = {
  type: OpenResponsesFunctionCallOutputType;
  id: string;
  callId: string;
  output: string;
  status?: ToolCallStatus | undefined;
};

/** @internal */
export const OpenResponsesFunctionCallOutputType$inboundSchema: z.ZodEnum<
  typeof OpenResponsesFunctionCallOutputType
> = z.enum(OpenResponsesFunctionCallOutputType);

/** @internal */
export const OpenResponsesFunctionCallOutputType$outboundSchema: z.ZodEnum<
  typeof OpenResponsesFunctionCallOutputType
> = OpenResponsesFunctionCallOutputType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesFunctionCallOutputType$ {
  /** @deprecated use `OpenResponsesFunctionCallOutputType$inboundSchema` instead. */
  export const inboundSchema =
    OpenResponsesFunctionCallOutputType$inboundSchema;
  /** @deprecated use `OpenResponsesFunctionCallOutputType$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesFunctionCallOutputType$outboundSchema;
}

/** @internal */
export const OpenResponsesFunctionCallOutput$inboundSchema: z.ZodType<
  OpenResponsesFunctionCallOutput,
  unknown
> = z.object({
  type: OpenResponsesFunctionCallOutputType$inboundSchema,
  id: z.string(),
  call_id: z.string(),
  output: z.string(),
  status: ToolCallStatus$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "call_id": "callId",
  });
});

/** @internal */
export type OpenResponsesFunctionCallOutput$Outbound = {
  type: string;
  id: string;
  call_id: string;
  output: string;
  status?: string | undefined;
};

/** @internal */
export const OpenResponsesFunctionCallOutput$outboundSchema: z.ZodType<
  OpenResponsesFunctionCallOutput$Outbound,
  OpenResponsesFunctionCallOutput
> = z.object({
  type: OpenResponsesFunctionCallOutputType$outboundSchema,
  id: z.string(),
  callId: z.string(),
  output: z.string(),
  status: ToolCallStatus$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    callId: "call_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesFunctionCallOutput$ {
  /** @deprecated use `OpenResponsesFunctionCallOutput$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesFunctionCallOutput$inboundSchema;
  /** @deprecated use `OpenResponsesFunctionCallOutput$outboundSchema` instead. */
  export const outboundSchema = OpenResponsesFunctionCallOutput$outboundSchema;
  /** @deprecated use `OpenResponsesFunctionCallOutput$Outbound` instead. */
  export type Outbound = OpenResponsesFunctionCallOutput$Outbound;
}

export function openResponsesFunctionCallOutputToJSON(
  openResponsesFunctionCallOutput: OpenResponsesFunctionCallOutput,
): string {
  return JSON.stringify(
    OpenResponsesFunctionCallOutput$outboundSchema.parse(
      openResponsesFunctionCallOutput,
    ),
  );
}

export function openResponsesFunctionCallOutputFromJSON(
  jsonString: string,
): SafeParseResult<OpenResponsesFunctionCallOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenResponsesFunctionCallOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenResponsesFunctionCallOutput' from JSON`,
  );
}
