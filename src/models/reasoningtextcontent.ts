/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v4";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const ReasoningTextContentType = {
  ReasoningText: "reasoning_text",
} as const;
export type ReasoningTextContentType = ClosedEnum<
  typeof ReasoningTextContentType
>;

export type ReasoningTextContent = {
  type: ReasoningTextContentType;
  text: string;
};

/** @internal */
export const ReasoningTextContentType$inboundSchema: z.ZodEnum<
  typeof ReasoningTextContentType
> = z.enum(ReasoningTextContentType);

/** @internal */
export const ReasoningTextContentType$outboundSchema: z.ZodEnum<
  typeof ReasoningTextContentType
> = ReasoningTextContentType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReasoningTextContentType$ {
  /** @deprecated use `ReasoningTextContentType$inboundSchema` instead. */
  export const inboundSchema = ReasoningTextContentType$inboundSchema;
  /** @deprecated use `ReasoningTextContentType$outboundSchema` instead. */
  export const outboundSchema = ReasoningTextContentType$outboundSchema;
}

/** @internal */
export const ReasoningTextContent$inboundSchema: z.ZodType<
  ReasoningTextContent,
  unknown
> = z.object({
  type: ReasoningTextContentType$inboundSchema,
  text: z.string(),
});

/** @internal */
export type ReasoningTextContent$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const ReasoningTextContent$outboundSchema: z.ZodType<
  ReasoningTextContent$Outbound,
  ReasoningTextContent
> = z.object({
  type: ReasoningTextContentType$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReasoningTextContent$ {
  /** @deprecated use `ReasoningTextContent$inboundSchema` instead. */
  export const inboundSchema = ReasoningTextContent$inboundSchema;
  /** @deprecated use `ReasoningTextContent$outboundSchema` instead. */
  export const outboundSchema = ReasoningTextContent$outboundSchema;
  /** @deprecated use `ReasoningTextContent$Outbound` instead. */
  export type Outbound = ReasoningTextContent$Outbound;
}

export function reasoningTextContentToJSON(
  reasoningTextContent: ReasoningTextContent,
): string {
  return JSON.stringify(
    ReasoningTextContent$outboundSchema.parse(reasoningTextContent),
  );
}

export function reasoningTextContentFromJSON(
  jsonString: string,
): SafeParseResult<ReasoningTextContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReasoningTextContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReasoningTextContent' from JSON`,
  );
}
