/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  OpenAIResponsesRefusalContent,
  OpenAIResponsesRefusalContent$inboundSchema,
  OpenAIResponsesRefusalContent$Outbound,
  OpenAIResponsesRefusalContent$outboundSchema,
} from "./openairesponsesrefusalcontent.js";
import {
  ResponseOutputText,
  ResponseOutputText$inboundSchema,
  ResponseOutputText$Outbound,
  ResponseOutputText$outboundSchema,
} from "./responseoutputtext.js";

export const OutputMessageRole = {
  Assistant: "assistant",
} as const;
export type OutputMessageRole = ClosedEnum<typeof OutputMessageRole>;

export const OutputMessageType = {
  Message: "message",
} as const;
export type OutputMessageType = ClosedEnum<typeof OutputMessageType>;

export const OutputMessageStatusInProgress = {
  InProgress: "in_progress",
} as const;
export type OutputMessageStatusInProgress = ClosedEnum<
  typeof OutputMessageStatusInProgress
>;

export const OutputMessageStatusIncomplete = {
  Incomplete: "incomplete",
} as const;
export type OutputMessageStatusIncomplete = ClosedEnum<
  typeof OutputMessageStatusIncomplete
>;

export const OutputMessageStatusCompleted = {
  Completed: "completed",
} as const;
export type OutputMessageStatusCompleted = ClosedEnum<
  typeof OutputMessageStatusCompleted
>;

export type OutputMessageStatusUnion =
  | OutputMessageStatusCompleted
  | OutputMessageStatusIncomplete
  | OutputMessageStatusInProgress;

export type OutputMessageContent =
  | ResponseOutputText
  | OpenAIResponsesRefusalContent;

export type OutputMessage = {
  id: string;
  role: OutputMessageRole;
  type: OutputMessageType;
  status?:
    | OutputMessageStatusCompleted
    | OutputMessageStatusIncomplete
    | OutputMessageStatusInProgress
    | undefined;
  content: Array<ResponseOutputText | OpenAIResponsesRefusalContent>;
};

/** @internal */
export const OutputMessageRole$inboundSchema: z.ZodNativeEnum<
  typeof OutputMessageRole
> = z.nativeEnum(OutputMessageRole);

/** @internal */
export const OutputMessageRole$outboundSchema: z.ZodNativeEnum<
  typeof OutputMessageRole
> = OutputMessageRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputMessageRole$ {
  /** @deprecated use `OutputMessageRole$inboundSchema` instead. */
  export const inboundSchema = OutputMessageRole$inboundSchema;
  /** @deprecated use `OutputMessageRole$outboundSchema` instead. */
  export const outboundSchema = OutputMessageRole$outboundSchema;
}

/** @internal */
export const OutputMessageType$inboundSchema: z.ZodNativeEnum<
  typeof OutputMessageType
> = z.nativeEnum(OutputMessageType);

/** @internal */
export const OutputMessageType$outboundSchema: z.ZodNativeEnum<
  typeof OutputMessageType
> = OutputMessageType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputMessageType$ {
  /** @deprecated use `OutputMessageType$inboundSchema` instead. */
  export const inboundSchema = OutputMessageType$inboundSchema;
  /** @deprecated use `OutputMessageType$outboundSchema` instead. */
  export const outboundSchema = OutputMessageType$outboundSchema;
}

/** @internal */
export const OutputMessageStatusInProgress$inboundSchema: z.ZodNativeEnum<
  typeof OutputMessageStatusInProgress
> = z.nativeEnum(OutputMessageStatusInProgress);

/** @internal */
export const OutputMessageStatusInProgress$outboundSchema: z.ZodNativeEnum<
  typeof OutputMessageStatusInProgress
> = OutputMessageStatusInProgress$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputMessageStatusInProgress$ {
  /** @deprecated use `OutputMessageStatusInProgress$inboundSchema` instead. */
  export const inboundSchema = OutputMessageStatusInProgress$inboundSchema;
  /** @deprecated use `OutputMessageStatusInProgress$outboundSchema` instead. */
  export const outboundSchema = OutputMessageStatusInProgress$outboundSchema;
}

/** @internal */
export const OutputMessageStatusIncomplete$inboundSchema: z.ZodNativeEnum<
  typeof OutputMessageStatusIncomplete
> = z.nativeEnum(OutputMessageStatusIncomplete);

/** @internal */
export const OutputMessageStatusIncomplete$outboundSchema: z.ZodNativeEnum<
  typeof OutputMessageStatusIncomplete
> = OutputMessageStatusIncomplete$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputMessageStatusIncomplete$ {
  /** @deprecated use `OutputMessageStatusIncomplete$inboundSchema` instead. */
  export const inboundSchema = OutputMessageStatusIncomplete$inboundSchema;
  /** @deprecated use `OutputMessageStatusIncomplete$outboundSchema` instead. */
  export const outboundSchema = OutputMessageStatusIncomplete$outboundSchema;
}

/** @internal */
export const OutputMessageStatusCompleted$inboundSchema: z.ZodNativeEnum<
  typeof OutputMessageStatusCompleted
> = z.nativeEnum(OutputMessageStatusCompleted);

/** @internal */
export const OutputMessageStatusCompleted$outboundSchema: z.ZodNativeEnum<
  typeof OutputMessageStatusCompleted
> = OutputMessageStatusCompleted$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputMessageStatusCompleted$ {
  /** @deprecated use `OutputMessageStatusCompleted$inboundSchema` instead. */
  export const inboundSchema = OutputMessageStatusCompleted$inboundSchema;
  /** @deprecated use `OutputMessageStatusCompleted$outboundSchema` instead. */
  export const outboundSchema = OutputMessageStatusCompleted$outboundSchema;
}

/** @internal */
export const OutputMessageStatusUnion$inboundSchema: z.ZodType<
  OutputMessageStatusUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  OutputMessageStatusCompleted$inboundSchema,
  OutputMessageStatusIncomplete$inboundSchema,
  OutputMessageStatusInProgress$inboundSchema,
]);

/** @internal */
export type OutputMessageStatusUnion$Outbound = string | string | string;

/** @internal */
export const OutputMessageStatusUnion$outboundSchema: z.ZodType<
  OutputMessageStatusUnion$Outbound,
  z.ZodTypeDef,
  OutputMessageStatusUnion
> = z.union([
  OutputMessageStatusCompleted$outboundSchema,
  OutputMessageStatusIncomplete$outboundSchema,
  OutputMessageStatusInProgress$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputMessageStatusUnion$ {
  /** @deprecated use `OutputMessageStatusUnion$inboundSchema` instead. */
  export const inboundSchema = OutputMessageStatusUnion$inboundSchema;
  /** @deprecated use `OutputMessageStatusUnion$outboundSchema` instead. */
  export const outboundSchema = OutputMessageStatusUnion$outboundSchema;
  /** @deprecated use `OutputMessageStatusUnion$Outbound` instead. */
  export type Outbound = OutputMessageStatusUnion$Outbound;
}

export function outputMessageStatusUnionToJSON(
  outputMessageStatusUnion: OutputMessageStatusUnion,
): string {
  return JSON.stringify(
    OutputMessageStatusUnion$outboundSchema.parse(outputMessageStatusUnion),
  );
}

export function outputMessageStatusUnionFromJSON(
  jsonString: string,
): SafeParseResult<OutputMessageStatusUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputMessageStatusUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputMessageStatusUnion' from JSON`,
  );
}

/** @internal */
export const OutputMessageContent$inboundSchema: z.ZodType<
  OutputMessageContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  ResponseOutputText$inboundSchema,
  OpenAIResponsesRefusalContent$inboundSchema,
]);

/** @internal */
export type OutputMessageContent$Outbound =
  | ResponseOutputText$Outbound
  | OpenAIResponsesRefusalContent$Outbound;

/** @internal */
export const OutputMessageContent$outboundSchema: z.ZodType<
  OutputMessageContent$Outbound,
  z.ZodTypeDef,
  OutputMessageContent
> = z.union([
  ResponseOutputText$outboundSchema,
  OpenAIResponsesRefusalContent$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputMessageContent$ {
  /** @deprecated use `OutputMessageContent$inboundSchema` instead. */
  export const inboundSchema = OutputMessageContent$inboundSchema;
  /** @deprecated use `OutputMessageContent$outboundSchema` instead. */
  export const outboundSchema = OutputMessageContent$outboundSchema;
  /** @deprecated use `OutputMessageContent$Outbound` instead. */
  export type Outbound = OutputMessageContent$Outbound;
}

export function outputMessageContentToJSON(
  outputMessageContent: OutputMessageContent,
): string {
  return JSON.stringify(
    OutputMessageContent$outboundSchema.parse(outputMessageContent),
  );
}

export function outputMessageContentFromJSON(
  jsonString: string,
): SafeParseResult<OutputMessageContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputMessageContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputMessageContent' from JSON`,
  );
}

/** @internal */
export const OutputMessage$inboundSchema: z.ZodType<
  OutputMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  role: OutputMessageRole$inboundSchema,
  type: OutputMessageType$inboundSchema,
  status: z.union([
    OutputMessageStatusCompleted$inboundSchema,
    OutputMessageStatusIncomplete$inboundSchema,
    OutputMessageStatusInProgress$inboundSchema,
  ]).optional(),
  content: z.array(
    z.union([
      ResponseOutputText$inboundSchema,
      OpenAIResponsesRefusalContent$inboundSchema,
    ]),
  ),
});

/** @internal */
export type OutputMessage$Outbound = {
  id: string;
  role: string;
  type: string;
  status?: string | string | string | undefined;
  content: Array<
    ResponseOutputText$Outbound | OpenAIResponsesRefusalContent$Outbound
  >;
};

/** @internal */
export const OutputMessage$outboundSchema: z.ZodType<
  OutputMessage$Outbound,
  z.ZodTypeDef,
  OutputMessage
> = z.object({
  id: z.string(),
  role: OutputMessageRole$outboundSchema,
  type: OutputMessageType$outboundSchema,
  status: z.union([
    OutputMessageStatusCompleted$outboundSchema,
    OutputMessageStatusIncomplete$outboundSchema,
    OutputMessageStatusInProgress$outboundSchema,
  ]).optional(),
  content: z.array(
    z.union([
      ResponseOutputText$outboundSchema,
      OpenAIResponsesRefusalContent$outboundSchema,
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputMessage$ {
  /** @deprecated use `OutputMessage$inboundSchema` instead. */
  export const inboundSchema = OutputMessage$inboundSchema;
  /** @deprecated use `OutputMessage$outboundSchema` instead. */
  export const outboundSchema = OutputMessage$outboundSchema;
  /** @deprecated use `OutputMessage$Outbound` instead. */
  export type Outbound = OutputMessage$Outbound;
}

export function outputMessageToJSON(outputMessage: OutputMessage): string {
  return JSON.stringify(OutputMessage$outboundSchema.parse(outputMessage));
}

export function outputMessageFromJSON(
  jsonString: string,
): SafeParseResult<OutputMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputMessage' from JSON`,
  );
}
