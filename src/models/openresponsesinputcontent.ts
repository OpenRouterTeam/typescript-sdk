/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v4";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  OpenResponsesInputFile,
  OpenResponsesInputFile$inboundSchema,
  OpenResponsesInputFile$Outbound,
  OpenResponsesInputFile$outboundSchema,
} from "./openresponsesinputfile.js";
import {
  OpenResponsesInputImage,
  OpenResponsesInputImage$inboundSchema,
  OpenResponsesInputImage$Outbound,
  OpenResponsesInputImage$outboundSchema,
} from "./openresponsesinputimage.js";
import {
  OpenResponsesInputText,
  OpenResponsesInputText$inboundSchema,
  OpenResponsesInputText$Outbound,
  OpenResponsesInputText$outboundSchema,
} from "./openresponsesinputtext.js";

/**
 * Content item in a response input message
 */
export type OpenResponsesInputContent =
  | (OpenResponsesInputText & { type: "input_text" })
  | (OpenResponsesInputImage & { type: "input_image" })
  | (OpenResponsesInputFile & { type: "input_file" });

/** @internal */
export const OpenResponsesInputContent$inboundSchema: z.ZodType<
  OpenResponsesInputContent,
  unknown
> = z.union([
  OpenResponsesInputText$inboundSchema.and(
    z.object({ type: z.literal("input_text") }).transform((v) => ({
      type: v.type,
    })),
  ),
  OpenResponsesInputImage$inboundSchema.and(
    z.object({ type: z.literal("input_image") }).transform((v) => ({
      type: v.type,
    })),
  ),
  OpenResponsesInputFile$inboundSchema.and(
    z.object({ type: z.literal("input_file") }).transform((v) => ({
      type: v.type,
    })),
  ),
]);

/** @internal */
export type OpenResponsesInputContent$Outbound =
  | (OpenResponsesInputText$Outbound & { type: "input_text" })
  | (OpenResponsesInputImage$Outbound & { type: "input_image" })
  | (OpenResponsesInputFile$Outbound & { type: "input_file" });

/** @internal */
export const OpenResponsesInputContent$outboundSchema: z.ZodType<
  OpenResponsesInputContent$Outbound,
  OpenResponsesInputContent
> = z.union([
  OpenResponsesInputText$outboundSchema.and(
    z.object({ type: z.literal("input_text") }).transform((v) => ({
      type: v.type,
    })),
  ),
  OpenResponsesInputImage$outboundSchema.and(
    z.object({ type: z.literal("input_image") }).transform((v) => ({
      type: v.type,
    })),
  ),
  OpenResponsesInputFile$outboundSchema.and(
    z.object({ type: z.literal("input_file") }).transform((v) => ({
      type: v.type,
    })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesInputContent$ {
  /** @deprecated use `OpenResponsesInputContent$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesInputContent$inboundSchema;
  /** @deprecated use `OpenResponsesInputContent$outboundSchema` instead. */
  export const outboundSchema = OpenResponsesInputContent$outboundSchema;
  /** @deprecated use `OpenResponsesInputContent$Outbound` instead. */
  export type Outbound = OpenResponsesInputContent$Outbound;
}

export function openResponsesInputContentToJSON(
  openResponsesInputContent: OpenResponsesInputContent,
): string {
  return JSON.stringify(
    OpenResponsesInputContent$outboundSchema.parse(openResponsesInputContent),
  );
}

export function openResponsesInputContentFromJSON(
  jsonString: string,
): SafeParseResult<OpenResponsesInputContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenResponsesInputContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenResponsesInputContent' from JSON`,
  );
}
