/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const ResponsesAnnotationFilePathType = {
  FilePath: "file_path",
} as const;
export type ResponsesAnnotationFilePathType = ClosedEnum<
  typeof ResponsesAnnotationFilePathType
>;

export type ResponsesAnnotationFilePath = {
  type: ResponsesAnnotationFilePathType;
  fileId: string;
  index: number;
};

/** @internal */
export const ResponsesAnnotationFilePathType$inboundSchema: z.ZodNativeEnum<
  typeof ResponsesAnnotationFilePathType
> = z.nativeEnum(ResponsesAnnotationFilePathType);

/** @internal */
export const ResponsesAnnotationFilePathType$outboundSchema: z.ZodNativeEnum<
  typeof ResponsesAnnotationFilePathType
> = ResponsesAnnotationFilePathType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesAnnotationFilePathType$ {
  /** @deprecated use `ResponsesAnnotationFilePathType$inboundSchema` instead. */
  export const inboundSchema = ResponsesAnnotationFilePathType$inboundSchema;
  /** @deprecated use `ResponsesAnnotationFilePathType$outboundSchema` instead. */
  export const outboundSchema = ResponsesAnnotationFilePathType$outboundSchema;
}

/** @internal */
export const ResponsesAnnotationFilePath$inboundSchema: z.ZodType<
  ResponsesAnnotationFilePath,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ResponsesAnnotationFilePathType$inboundSchema,
  file_id: z.string(),
  index: z.number(),
}).transform((v) => {
  return remap$(v, {
    "file_id": "fileId",
  });
});

/** @internal */
export type ResponsesAnnotationFilePath$Outbound = {
  type: string;
  file_id: string;
  index: number;
};

/** @internal */
export const ResponsesAnnotationFilePath$outboundSchema: z.ZodType<
  ResponsesAnnotationFilePath$Outbound,
  z.ZodTypeDef,
  ResponsesAnnotationFilePath
> = z.object({
  type: ResponsesAnnotationFilePathType$outboundSchema,
  fileId: z.string(),
  index: z.number(),
}).transform((v) => {
  return remap$(v, {
    fileId: "file_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesAnnotationFilePath$ {
  /** @deprecated use `ResponsesAnnotationFilePath$inboundSchema` instead. */
  export const inboundSchema = ResponsesAnnotationFilePath$inboundSchema;
  /** @deprecated use `ResponsesAnnotationFilePath$outboundSchema` instead. */
  export const outboundSchema = ResponsesAnnotationFilePath$outboundSchema;
  /** @deprecated use `ResponsesAnnotationFilePath$Outbound` instead. */
  export type Outbound = ResponsesAnnotationFilePath$Outbound;
}

export function responsesAnnotationFilePathToJSON(
  responsesAnnotationFilePath: ResponsesAnnotationFilePath,
): string {
  return JSON.stringify(
    ResponsesAnnotationFilePath$outboundSchema.parse(
      responsesAnnotationFilePath,
    ),
  );
}

export function responsesAnnotationFilePathFromJSON(
  jsonString: string,
): SafeParseResult<ResponsesAnnotationFilePath, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponsesAnnotationFilePath$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponsesAnnotationFilePath' from JSON`,
  );
}
