/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ChatCompletionAssistantMessageParam,
  ChatCompletionAssistantMessageParam$inboundSchema,
  ChatCompletionAssistantMessageParam$Outbound,
  ChatCompletionAssistantMessageParam$outboundSchema,
} from "./chatcompletionassistantmessageparam.js";
import {
  ChatCompletionSystemMessageParam,
  ChatCompletionSystemMessageParam$inboundSchema,
  ChatCompletionSystemMessageParam$Outbound,
  ChatCompletionSystemMessageParam$outboundSchema,
} from "./chatcompletionsystemmessageparam.js";
import {
  ChatCompletionToolMessageParam,
  ChatCompletionToolMessageParam$inboundSchema,
  ChatCompletionToolMessageParam$Outbound,
  ChatCompletionToolMessageParam$outboundSchema,
} from "./chatcompletiontoolmessageparam.js";
import {
  ChatCompletionUserMessageParam,
  ChatCompletionUserMessageParam$inboundSchema,
  ChatCompletionUserMessageParam$Outbound,
  ChatCompletionUserMessageParam$outboundSchema,
} from "./chatcompletionusermessageparam.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ChatCompletionMessageParam =
  | (ChatCompletionToolMessageParam & { role: "tool" })
  | (ChatCompletionSystemMessageParam & { role: "system" })
  | (ChatCompletionUserMessageParam & { role: "user" })
  | (ChatCompletionAssistantMessageParam & { role: "assistant" });

/** @internal */
export const ChatCompletionMessageParam$inboundSchema: z.ZodType<
  ChatCompletionMessageParam,
  z.ZodTypeDef,
  unknown
> = z.union([
  ChatCompletionToolMessageParam$inboundSchema.and(
    z.object({ role: z.literal("tool") }).transform((v) => ({ role: v.role })),
  ),
  ChatCompletionSystemMessageParam$inboundSchema.and(
    z.object({ role: z.literal("system") }).transform((v) => ({
      role: v.role,
    })),
  ),
  ChatCompletionUserMessageParam$inboundSchema.and(
    z.object({ role: z.literal("user") }).transform((v) => ({ role: v.role })),
  ),
  ChatCompletionAssistantMessageParam$inboundSchema.and(
    z.object({ role: z.literal("assistant") }).transform((v) => ({
      role: v.role,
    })),
  ),
]);

/** @internal */
export type ChatCompletionMessageParam$Outbound =
  | (ChatCompletionToolMessageParam$Outbound & { role: "tool" })
  | (ChatCompletionSystemMessageParam$Outbound & { role: "system" })
  | (ChatCompletionUserMessageParam$Outbound & { role: "user" })
  | (ChatCompletionAssistantMessageParam$Outbound & { role: "assistant" });

/** @internal */
export const ChatCompletionMessageParam$outboundSchema: z.ZodType<
  ChatCompletionMessageParam$Outbound,
  z.ZodTypeDef,
  ChatCompletionMessageParam
> = z.union([
  ChatCompletionToolMessageParam$outboundSchema.and(
    z.object({ role: z.literal("tool") }).transform((v) => ({ role: v.role })),
  ),
  ChatCompletionSystemMessageParam$outboundSchema.and(
    z.object({ role: z.literal("system") }).transform((v) => ({
      role: v.role,
    })),
  ),
  ChatCompletionUserMessageParam$outboundSchema.and(
    z.object({ role: z.literal("user") }).transform((v) => ({ role: v.role })),
  ),
  ChatCompletionAssistantMessageParam$outboundSchema.and(
    z.object({ role: z.literal("assistant") }).transform((v) => ({
      role: v.role,
    })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionMessageParam$ {
  /** @deprecated use `ChatCompletionMessageParam$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionMessageParam$inboundSchema;
  /** @deprecated use `ChatCompletionMessageParam$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionMessageParam$outboundSchema;
  /** @deprecated use `ChatCompletionMessageParam$Outbound` instead. */
  export type Outbound = ChatCompletionMessageParam$Outbound;
}

export function chatCompletionMessageParamToJSON(
  chatCompletionMessageParam: ChatCompletionMessageParam,
): string {
  return JSON.stringify(
    ChatCompletionMessageParam$outboundSchema.parse(chatCompletionMessageParam),
  );
}

export function chatCompletionMessageParamFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionMessageParam, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionMessageParam$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionMessageParam' from JSON`,
  );
}
