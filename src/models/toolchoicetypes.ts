/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ToolChoiceTypeUnion,
  ToolChoiceTypeUnion$inboundSchema,
  ToolChoiceTypeUnion$Outbound,
  ToolChoiceTypeUnion$outboundSchema,
} from "./toolchoicetypeunion.js";

/**
 * Tool choice by type
 */
export type ToolChoiceTypes = {
  type: ToolChoiceTypeUnion;
};

/** @internal */
export const ToolChoiceTypes$inboundSchema: z.ZodType<
  ToolChoiceTypes,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ToolChoiceTypeUnion$inboundSchema,
});

/** @internal */
export type ToolChoiceTypes$Outbound = {
  type: ToolChoiceTypeUnion$Outbound;
};

/** @internal */
export const ToolChoiceTypes$outboundSchema: z.ZodType<
  ToolChoiceTypes$Outbound,
  z.ZodTypeDef,
  ToolChoiceTypes
> = z.object({
  type: ToolChoiceTypeUnion$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolChoiceTypes$ {
  /** @deprecated use `ToolChoiceTypes$inboundSchema` instead. */
  export const inboundSchema = ToolChoiceTypes$inboundSchema;
  /** @deprecated use `ToolChoiceTypes$outboundSchema` instead. */
  export const outboundSchema = ToolChoiceTypes$outboundSchema;
  /** @deprecated use `ToolChoiceTypes$Outbound` instead. */
  export type Outbound = ToolChoiceTypes$Outbound;
}

export function toolChoiceTypesToJSON(
  toolChoiceTypes: ToolChoiceTypes,
): string {
  return JSON.stringify(ToolChoiceTypes$outboundSchema.parse(toolChoiceTypes));
}

export function toolChoiceTypesFromJSON(
  jsonString: string,
): SafeParseResult<ToolChoiceTypes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolChoiceTypes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolChoiceTypes' from JSON`,
  );
}
