/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v4";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const TypeCodeInterpreter = {
  CodeInterpreter: "code_interpreter",
} as const;
export type TypeCodeInterpreter = ClosedEnum<typeof TypeCodeInterpreter>;

export const TypeComputerUsePreview = {
  ComputerUsePreview: "computer_use_preview",
} as const;
export type TypeComputerUsePreview = ClosedEnum<typeof TypeComputerUsePreview>;

export const ToolChoiceTypesTypeWebSearchPreview20250311 = {
  WebSearchPreview20250311: "web_search_preview_2025_03_11",
} as const;
export type ToolChoiceTypesTypeWebSearchPreview20250311 = ClosedEnum<
  typeof ToolChoiceTypesTypeWebSearchPreview20250311
>;

export const ToolChoiceTypesTypeWebSearchPreview = {
  WebSearchPreview: "web_search_preview",
} as const;
export type ToolChoiceTypesTypeWebSearchPreview = ClosedEnum<
  typeof ToolChoiceTypesTypeWebSearchPreview
>;

export const TypeFileSearch = {
  FileSearch: "file_search",
} as const;
export type TypeFileSearch = ClosedEnum<typeof TypeFileSearch>;

export type Type =
  | TypeFileSearch
  | ToolChoiceTypesTypeWebSearchPreview
  | ToolChoiceTypesTypeWebSearchPreview20250311
  | TypeComputerUsePreview
  | TypeCodeInterpreter;

/**
 * Force the model to call a tool of a specific type
 */
export type ToolChoiceTypes = {
  type:
    | TypeFileSearch
    | ToolChoiceTypesTypeWebSearchPreview
    | ToolChoiceTypesTypeWebSearchPreview20250311
    | TypeComputerUsePreview
    | TypeCodeInterpreter;
};

/** @internal */
export const TypeCodeInterpreter$inboundSchema: z.ZodEnum<
  typeof TypeCodeInterpreter
> = z.enum(TypeCodeInterpreter);

/** @internal */
export const TypeCodeInterpreter$outboundSchema: z.ZodEnum<
  typeof TypeCodeInterpreter
> = TypeCodeInterpreter$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeCodeInterpreter$ {
  /** @deprecated use `TypeCodeInterpreter$inboundSchema` instead. */
  export const inboundSchema = TypeCodeInterpreter$inboundSchema;
  /** @deprecated use `TypeCodeInterpreter$outboundSchema` instead. */
  export const outboundSchema = TypeCodeInterpreter$outboundSchema;
}

/** @internal */
export const TypeComputerUsePreview$inboundSchema: z.ZodEnum<
  typeof TypeComputerUsePreview
> = z.enum(TypeComputerUsePreview);

/** @internal */
export const TypeComputerUsePreview$outboundSchema: z.ZodEnum<
  typeof TypeComputerUsePreview
> = TypeComputerUsePreview$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeComputerUsePreview$ {
  /** @deprecated use `TypeComputerUsePreview$inboundSchema` instead. */
  export const inboundSchema = TypeComputerUsePreview$inboundSchema;
  /** @deprecated use `TypeComputerUsePreview$outboundSchema` instead. */
  export const outboundSchema = TypeComputerUsePreview$outboundSchema;
}

/** @internal */
export const ToolChoiceTypesTypeWebSearchPreview20250311$inboundSchema:
  z.ZodEnum<typeof ToolChoiceTypesTypeWebSearchPreview20250311> = z.enum(
    ToolChoiceTypesTypeWebSearchPreview20250311,
  );

/** @internal */
export const ToolChoiceTypesTypeWebSearchPreview20250311$outboundSchema:
  z.ZodEnum<typeof ToolChoiceTypesTypeWebSearchPreview20250311> =
    ToolChoiceTypesTypeWebSearchPreview20250311$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolChoiceTypesTypeWebSearchPreview20250311$ {
  /** @deprecated use `ToolChoiceTypesTypeWebSearchPreview20250311$inboundSchema` instead. */
  export const inboundSchema =
    ToolChoiceTypesTypeWebSearchPreview20250311$inboundSchema;
  /** @deprecated use `ToolChoiceTypesTypeWebSearchPreview20250311$outboundSchema` instead. */
  export const outboundSchema =
    ToolChoiceTypesTypeWebSearchPreview20250311$outboundSchema;
}

/** @internal */
export const ToolChoiceTypesTypeWebSearchPreview$inboundSchema: z.ZodEnum<
  typeof ToolChoiceTypesTypeWebSearchPreview
> = z.enum(ToolChoiceTypesTypeWebSearchPreview);

/** @internal */
export const ToolChoiceTypesTypeWebSearchPreview$outboundSchema: z.ZodEnum<
  typeof ToolChoiceTypesTypeWebSearchPreview
> = ToolChoiceTypesTypeWebSearchPreview$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolChoiceTypesTypeWebSearchPreview$ {
  /** @deprecated use `ToolChoiceTypesTypeWebSearchPreview$inboundSchema` instead. */
  export const inboundSchema =
    ToolChoiceTypesTypeWebSearchPreview$inboundSchema;
  /** @deprecated use `ToolChoiceTypesTypeWebSearchPreview$outboundSchema` instead. */
  export const outboundSchema =
    ToolChoiceTypesTypeWebSearchPreview$outboundSchema;
}

/** @internal */
export const TypeFileSearch$inboundSchema: z.ZodEnum<typeof TypeFileSearch> = z
  .enum(TypeFileSearch);

/** @internal */
export const TypeFileSearch$outboundSchema: z.ZodEnum<typeof TypeFileSearch> =
  TypeFileSearch$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeFileSearch$ {
  /** @deprecated use `TypeFileSearch$inboundSchema` instead. */
  export const inboundSchema = TypeFileSearch$inboundSchema;
  /** @deprecated use `TypeFileSearch$outboundSchema` instead. */
  export const outboundSchema = TypeFileSearch$outboundSchema;
}

/** @internal */
export const Type$inboundSchema: z.ZodType<Type, unknown> = z.union([
  TypeFileSearch$inboundSchema,
  ToolChoiceTypesTypeWebSearchPreview$inboundSchema,
  ToolChoiceTypesTypeWebSearchPreview20250311$inboundSchema,
  TypeComputerUsePreview$inboundSchema,
  TypeCodeInterpreter$inboundSchema,
]);

/** @internal */
export type Type$Outbound = string | string | string | string | string;

/** @internal */
export const Type$outboundSchema: z.ZodType<Type$Outbound, Type> = z.union([
  TypeFileSearch$outboundSchema,
  ToolChoiceTypesTypeWebSearchPreview$outboundSchema,
  ToolChoiceTypesTypeWebSearchPreview20250311$outboundSchema,
  TypeComputerUsePreview$outboundSchema,
  TypeCodeInterpreter$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Type$ {
  /** @deprecated use `Type$inboundSchema` instead. */
  export const inboundSchema = Type$inboundSchema;
  /** @deprecated use `Type$outboundSchema` instead. */
  export const outboundSchema = Type$outboundSchema;
  /** @deprecated use `Type$Outbound` instead. */
  export type Outbound = Type$Outbound;
}

export function typeToJSON(type: Type): string {
  return JSON.stringify(Type$outboundSchema.parse(type));
}

export function typeFromJSON(
  jsonString: string,
): SafeParseResult<Type, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Type$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Type' from JSON`,
  );
}

/** @internal */
export const ToolChoiceTypes$inboundSchema: z.ZodType<
  ToolChoiceTypes,
  unknown
> = z.object({
  type: z.union([
    TypeFileSearch$inboundSchema,
    ToolChoiceTypesTypeWebSearchPreview$inboundSchema,
    ToolChoiceTypesTypeWebSearchPreview20250311$inboundSchema,
    TypeComputerUsePreview$inboundSchema,
    TypeCodeInterpreter$inboundSchema,
  ]),
});

/** @internal */
export type ToolChoiceTypes$Outbound = {
  type: string | string | string | string | string;
};

/** @internal */
export const ToolChoiceTypes$outboundSchema: z.ZodType<
  ToolChoiceTypes$Outbound,
  ToolChoiceTypes
> = z.object({
  type: z.union([
    TypeFileSearch$outboundSchema,
    ToolChoiceTypesTypeWebSearchPreview$outboundSchema,
    ToolChoiceTypesTypeWebSearchPreview20250311$outboundSchema,
    TypeComputerUsePreview$outboundSchema,
    TypeCodeInterpreter$outboundSchema,
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolChoiceTypes$ {
  /** @deprecated use `ToolChoiceTypes$inboundSchema` instead. */
  export const inboundSchema = ToolChoiceTypes$inboundSchema;
  /** @deprecated use `ToolChoiceTypes$outboundSchema` instead. */
  export const outboundSchema = ToolChoiceTypes$outboundSchema;
  /** @deprecated use `ToolChoiceTypes$Outbound` instead. */
  export type Outbound = ToolChoiceTypes$Outbound;
}

export function toolChoiceTypesToJSON(
  toolChoiceTypes: ToolChoiceTypes,
): string {
  return JSON.stringify(ToolChoiceTypes$outboundSchema.parse(toolChoiceTypes));
}

export function toolChoiceTypesFromJSON(
  jsonString: string,
): SafeParseResult<ToolChoiceTypes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolChoiceTypes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolChoiceTypes' from JSON`,
  );
}
