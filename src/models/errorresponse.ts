/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const ErrorResponseCode = {
  OneHundred: 100,
  OneHundredAndOne: 101,
  OneHundredAndTwo: 102,
  TwoHundred: 200,
  TwoHundredAndOne: 201,
  TwoHundredAndTwo: 202,
  TwoHundredAndThree: 203,
  TwoHundredAndFour: 204,
  TwoHundredAndFive: 205,
  TwoHundredAndSix: 206,
  TwoHundredAndSeven: 207,
  TwoHundredAndEight: 208,
  ThreeHundred: 300,
  ThreeHundredAndOne: 301,
  ThreeHundredAndTwo: 302,
  ThreeHundredAndThree: 303,
  ThreeHundredAndFour: 304,
  ThreeHundredAndFive: 305,
  ThreeHundredAndSeven: 307,
  ThreeHundredAndEight: 308,
  FourHundred: 400,
  FourHundredAndOne: 401,
  FourHundredAndTwo: 402,
  FourHundredAndThree: 403,
  FourHundredAndFour: 404,
  FourHundredAndFive: 405,
  FourHundredAndSix: 406,
  FourHundredAndSeven: 407,
  FourHundredAndEight: 408,
  FourHundredAndNine: 409,
  FourHundredAndTen: 410,
  FourHundredAndEleven: 411,
  FourHundredAndTwelve: 412,
  FourHundredAndThirteen: 413,
  FourHundredAndFourteen: 414,
  FourHundredAndFifteen: 415,
  FourHundredAndSixteen: 416,
  FourHundredAndSeventeen: 417,
  FourHundredAndEighteen: 418,
  FourHundredAndTwentyTwo: 422,
  FourHundredAndTwentyThree: 423,
  FourHundredAndTwentyFour: 424,
  FourHundredAndTwentyFive: 425,
  FourHundredAndTwentySix: 426,
  FourHundredAndTwentyEight: 428,
  FourHundredAndTwentyNine: 429,
  FourHundredAndThirtyOne: 431,
  FourHundredAndFiftyOne: 451,
  FourHundredAndNinetyEight: 498,
  FourHundredAndNinetyNine: 499,
  FiveHundred: 500,
  FiveHundredAndOne: 501,
  FiveHundredAndTwo: 502,
  FiveHundredAndThree: 503,
  FiveHundredAndFour: 504,
  FiveHundredAndFive: 505,
  FiveHundredAndSix: 506,
  FiveHundredAndSeven: 507,
  FiveHundredAndEight: 508,
  FiveHundredAndTen: 510,
  FiveHundredAndEleven: 511,
  FiveHundredAndTwenty: 520,
  FiveHundredAndTwentyOne: 521,
  FiveHundredAndTwentyTwo: 522,
  FiveHundredAndTwentyThree: 523,
  FiveHundredAndTwentyFour: 524,
  FiveHundredAndTwentyFive: 525,
  FiveHundredAndTwentySix: 526,
  FiveHundredAndTwentyNine: 529,
  FiveHundredAndThirty: 530,
} as const;
export type ErrorResponseCode = OpenEnum<typeof ErrorResponseCode>;

export type ErrorResponseError = {
  code: ErrorResponseCode;
  message: string;
  metadata?: { [k: string]: any | null } | null | undefined;
};

/** @internal */
export const ErrorResponseCode$inboundSchema: z.ZodType<
  ErrorResponseCode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ErrorResponseCode),
    z.number().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ErrorResponseCode$outboundSchema: z.ZodType<
  ErrorResponseCode,
  z.ZodTypeDef,
  ErrorResponseCode
> = z.union([
  z.nativeEnum(ErrorResponseCode),
  z.number().and(z.custom<Unrecognized<number>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorResponseCode$ {
  /** @deprecated use `ErrorResponseCode$inboundSchema` instead. */
  export const inboundSchema = ErrorResponseCode$inboundSchema;
  /** @deprecated use `ErrorResponseCode$outboundSchema` instead. */
  export const outboundSchema = ErrorResponseCode$outboundSchema;
}

/** @internal */
export const ErrorResponseError$inboundSchema: z.ZodType<
  ErrorResponseError,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: ErrorResponseCode$inboundSchema,
  message: z.string(),
  metadata: z.nullable(z.record(z.nullable(z.any()))).optional(),
});

/** @internal */
export type ErrorResponseError$Outbound = {
  code: number;
  message: string;
  metadata?: { [k: string]: any | null } | null | undefined;
};

/** @internal */
export const ErrorResponseError$outboundSchema: z.ZodType<
  ErrorResponseError$Outbound,
  z.ZodTypeDef,
  ErrorResponseError
> = z.object({
  code: ErrorResponseCode$outboundSchema,
  message: z.string(),
  metadata: z.nullable(z.record(z.nullable(z.any()))).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorResponseError$ {
  /** @deprecated use `ErrorResponseError$inboundSchema` instead. */
  export const inboundSchema = ErrorResponseError$inboundSchema;
  /** @deprecated use `ErrorResponseError$outboundSchema` instead. */
  export const outboundSchema = ErrorResponseError$outboundSchema;
  /** @deprecated use `ErrorResponseError$Outbound` instead. */
  export type Outbound = ErrorResponseError$Outbound;
}

export function errorResponseErrorToJSON(
  errorResponseError: ErrorResponseError,
): string {
  return JSON.stringify(
    ErrorResponseError$outboundSchema.parse(errorResponseError),
  );
}

export function errorResponseErrorFromJSON(
  jsonString: string,
): SafeParseResult<ErrorResponseError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ErrorResponseError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ErrorResponseError' from JSON`,
  );
}
