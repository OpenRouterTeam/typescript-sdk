/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ChatCompletionMessageParam,
  ChatCompletionMessageParam$inboundSchema,
  ChatCompletionMessageParam$Outbound,
  ChatCompletionMessageParam$outboundSchema,
} from "./chatcompletionmessageparam.js";
import {
  ChatCompletionTool,
  ChatCompletionTool$inboundSchema,
  ChatCompletionTool$Outbound,
  ChatCompletionTool$outboundSchema,
} from "./chatcompletiontool.js";
import {
  ChatCompletionToolChoiceOption,
  ChatCompletionToolChoiceOption$inboundSchema,
  ChatCompletionToolChoiceOption$Outbound,
  ChatCompletionToolChoiceOption$outboundSchema,
} from "./chatcompletiontoolchoiceoption.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ResponseFormatJsonSchemaSchema,
  ResponseFormatJsonSchemaSchema$inboundSchema,
  ResponseFormatJsonSchemaSchema$Outbound,
  ResponseFormatJsonSchemaSchema$outboundSchema,
} from "./responseformatjsonschemaschema.js";

/**
 * OpenAI-style reasoning effort setting
 */
export const ChatStreamCompletionCreateParamsEffort = {
  High: "high",
  Medium: "medium",
  Low: "low",
  Minimal: "minimal",
} as const;
/**
 * OpenAI-style reasoning effort setting
 */
export type ChatStreamCompletionCreateParamsEffort = ClosedEnum<
  typeof ChatStreamCompletionCreateParamsEffort
>;

/**
 * Reasoning configuration
 */
export type ChatStreamCompletionCreateParamsReasoning = {
  /**
   * Enables reasoning with default settings. Only work for some models.
   */
  enabled?: boolean | undefined;
  /**
   * OpenAI-style reasoning effort setting
   */
  effort?: ChatStreamCompletionCreateParamsEffort | null | undefined;
  /**
   * non-OpenAI-style reasoning effort setting
   */
  maxTokens?: number | null | undefined;
  exclude?: boolean | undefined;
};

export const ChatStreamCompletionCreateParamsTypePython = {
  Python: "python",
} as const;
export type ChatStreamCompletionCreateParamsTypePython = ClosedEnum<
  typeof ChatStreamCompletionCreateParamsTypePython
>;

/**
 * Python code response format
 */
export type ChatStreamCompletionCreateParamsResponseFormatPython = {
  type: ChatStreamCompletionCreateParamsTypePython;
};

export const ChatStreamCompletionCreateParamsTypeGrammar = {
  Grammar: "grammar",
} as const;
export type ChatStreamCompletionCreateParamsTypeGrammar = ClosedEnum<
  typeof ChatStreamCompletionCreateParamsTypeGrammar
>;

/**
 * Custom grammar response format
 */
export type ChatStreamCompletionCreateParamsResponseFormatGrammar = {
  type: ChatStreamCompletionCreateParamsTypeGrammar;
  /**
   * Custom grammar for text generation
   */
  grammar: string;
};

export const ChatStreamCompletionCreateParamsTypeJSONSchema = {
  JsonSchema: "json_schema",
} as const;
export type ChatStreamCompletionCreateParamsTypeJSONSchema = ClosedEnum<
  typeof ChatStreamCompletionCreateParamsTypeJSONSchema
>;

export type ChatStreamCompletionCreateParamsJsonSchema = {
  /**
   * Schema name (a-z, A-Z, 0-9, underscores, dashes, max 64 chars)
   */
  name: string;
  /**
   * Schema description for the model
   */
  description?: string | undefined;
  /**
   * The schema for the response format, described as a JSON Schema object
   */
  schema?: ResponseFormatJsonSchemaSchema | undefined;
  /**
   * Enable strict schema adherence
   */
  strict?: boolean | null | undefined;
};

/**
 * JSON Schema response format for structured outputs
 */
export type ChatStreamCompletionCreateParamsResponseFormatJSONSchema = {
  type: ChatStreamCompletionCreateParamsTypeJSONSchema;
  jsonSchema: ChatStreamCompletionCreateParamsJsonSchema;
};

export const ChatStreamCompletionCreateParamsTypeJSONObject = {
  JsonObject: "json_object",
} as const;
export type ChatStreamCompletionCreateParamsTypeJSONObject = ClosedEnum<
  typeof ChatStreamCompletionCreateParamsTypeJSONObject
>;

/**
 * JSON object response format
 */
export type ChatStreamCompletionCreateParamsResponseFormatJSONObject = {
  type: ChatStreamCompletionCreateParamsTypeJSONObject;
};

export const ChatStreamCompletionCreateParamsTypeText = {
  Text: "text",
} as const;
export type ChatStreamCompletionCreateParamsTypeText = ClosedEnum<
  typeof ChatStreamCompletionCreateParamsTypeText
>;

/**
 * Default text response format
 */
export type ChatStreamCompletionCreateParamsResponseFormatText = {
  type: ChatStreamCompletionCreateParamsTypeText;
};

/**
 * Response format configuration
 */
export type ChatStreamCompletionCreateParamsResponseFormatUnion =
  | ChatStreamCompletionCreateParamsResponseFormatJSONSchema
  | ChatStreamCompletionCreateParamsResponseFormatGrammar
  | ChatStreamCompletionCreateParamsResponseFormatText
  | ChatStreamCompletionCreateParamsResponseFormatJSONObject
  | ChatStreamCompletionCreateParamsResponseFormatPython;

/**
 * Stop sequences (up to 4)
 */
export type ChatStreamCompletionCreateParamsStop = string | Array<string> | any;

/**
 * Streaming configuration options
 */
export type ChatStreamCompletionCreateParamsStreamOptions = {
  /**
   * Include usage information in streaming response
   */
  includeUsage?: boolean | undefined;
};

/**
 * Reasoning effort
 */
export const ChatStreamCompletionCreateParamsReasoningEffort = {
  High: "high",
  Medium: "medium",
  Low: "low",
  Minimal: "minimal",
} as const;
/**
 * Reasoning effort
 */
export type ChatStreamCompletionCreateParamsReasoningEffort = ClosedEnum<
  typeof ChatStreamCompletionCreateParamsReasoningEffort
>;

/**
 * Data collection setting. If no available model provider meets the requirement, your request will return an error.
 *
 * @remarks
 * - allow: (default) allow providers which store user data non-transiently and may train on it
 * - deny: use only providers which do not collect user data.
 */
export const ChatStreamCompletionCreateParamsDataCollection = {
  Deny: "deny",
  Allow: "allow",
} as const;
/**
 * Data collection setting. If no available model provider meets the requirement, your request will return an error.
 *
 * @remarks
 * - allow: (default) allow providers which store user data non-transiently and may train on it
 * - deny: use only providers which do not collect user data.
 */
export type ChatStreamCompletionCreateParamsDataCollection = ClosedEnum<
  typeof ChatStreamCompletionCreateParamsDataCollection
>;

export const ChatStreamCompletionCreateParamsOrderEnum = {
  AnyScale: "AnyScale",
  CentML: "Cent-ML",
  HuggingFace: "HuggingFace",
  Hyperbolic2: "Hyperbolic 2",
  Lepton: "Lepton",
  Lynn2: "Lynn 2",
  Lynn: "Lynn",
  Mancer: "Mancer",
  Modal: "Modal",
  OctoAI: "OctoAI",
  Recursal: "Recursal",
  Reflection: "Reflection",
  Replicate: "Replicate",
  SambaNova2: "SambaNova 2",
  SFCompute: "SF Compute",
  Together2: "Together 2",
  OneDotAI: "01.AI",
  Ai21: "AI21",
  AionLabs: "AionLabs",
  Alibaba: "Alibaba",
  AmazonBedrock: "Amazon Bedrock",
  Anthropic: "Anthropic",
  AtlasCloud: "AtlasCloud",
  Atoma: "Atoma",
  Avian: "Avian",
  Azure: "Azure",
  BaseTen: "BaseTen",
  Cerebras: "Cerebras",
  Chutes: "Chutes",
  Cloudflare: "Cloudflare",
  Cohere: "Cohere",
  CrofAI: "CrofAI",
  Crusoe: "Crusoe",
  DeepInfra: "DeepInfra",
  DeepSeek: "DeepSeek",
  Enfer: "Enfer",
  Featherless: "Featherless",
  Fireworks: "Fireworks",
  Friendli: "Friendli",
  GMICloud: "GMICloud",
  Google: "Google",
  GoogleAIStudio: "Google AI Studio",
  Groq: "Groq",
  Hyperbolic: "Hyperbolic",
  Inception: "Inception",
  InferenceNet: "InferenceNet",
  Infermatic: "Infermatic",
  Inflection: "Inflection",
  InoCloud: "InoCloud",
  Kluster: "Kluster",
  Lambda: "Lambda",
  Liquid: "Liquid",
  Mancer2: "Mancer 2",
  Meta: "Meta",
  Minimax: "Minimax",
  Mistral: "Mistral",
  MoonshotAI: "Moonshot AI",
  Morph: "Morph",
  NCompass: "NCompass",
  Nebius: "Nebius",
  NextBit: "NextBit",
  Nineteen: "Nineteen",
  Novita: "Novita",
  OpenAI: "OpenAI",
  OpenInference: "OpenInference",
  Parasail: "Parasail",
  Perplexity: "Perplexity",
  Phala: "Phala",
  SambaNova: "SambaNova",
  Stealth: "Stealth",
  Switchpoint: "Switchpoint",
  Targon: "Targon",
  Together: "Together",
  Ubicloud: "Ubicloud",
  Venice: "Venice",
  WandB: "WandB",
  XAI: "xAI",
  ZAi: "Z.AI",
} as const;
export type ChatStreamCompletionCreateParamsOrderEnum = ClosedEnum<
  typeof ChatStreamCompletionCreateParamsOrderEnum
>;

export type ChatStreamCompletionCreateParamsOrderUnion =
  | ChatStreamCompletionCreateParamsOrderEnum
  | string;

export const ChatStreamCompletionCreateParamsOnlyEnum = {
  AnyScale: "AnyScale",
  CentML: "Cent-ML",
  HuggingFace: "HuggingFace",
  Hyperbolic2: "Hyperbolic 2",
  Lepton: "Lepton",
  Lynn2: "Lynn 2",
  Lynn: "Lynn",
  Mancer: "Mancer",
  Modal: "Modal",
  OctoAI: "OctoAI",
  Recursal: "Recursal",
  Reflection: "Reflection",
  Replicate: "Replicate",
  SambaNova2: "SambaNova 2",
  SFCompute: "SF Compute",
  Together2: "Together 2",
  OneDotAI: "01.AI",
  Ai21: "AI21",
  AionLabs: "AionLabs",
  Alibaba: "Alibaba",
  AmazonBedrock: "Amazon Bedrock",
  Anthropic: "Anthropic",
  AtlasCloud: "AtlasCloud",
  Atoma: "Atoma",
  Avian: "Avian",
  Azure: "Azure",
  BaseTen: "BaseTen",
  Cerebras: "Cerebras",
  Chutes: "Chutes",
  Cloudflare: "Cloudflare",
  Cohere: "Cohere",
  CrofAI: "CrofAI",
  Crusoe: "Crusoe",
  DeepInfra: "DeepInfra",
  DeepSeek: "DeepSeek",
  Enfer: "Enfer",
  Featherless: "Featherless",
  Fireworks: "Fireworks",
  Friendli: "Friendli",
  GMICloud: "GMICloud",
  Google: "Google",
  GoogleAIStudio: "Google AI Studio",
  Groq: "Groq",
  Hyperbolic: "Hyperbolic",
  Inception: "Inception",
  InferenceNet: "InferenceNet",
  Infermatic: "Infermatic",
  Inflection: "Inflection",
  InoCloud: "InoCloud",
  Kluster: "Kluster",
  Lambda: "Lambda",
  Liquid: "Liquid",
  Mancer2: "Mancer 2",
  Meta: "Meta",
  Minimax: "Minimax",
  Mistral: "Mistral",
  MoonshotAI: "Moonshot AI",
  Morph: "Morph",
  NCompass: "NCompass",
  Nebius: "Nebius",
  NextBit: "NextBit",
  Nineteen: "Nineteen",
  Novita: "Novita",
  OpenAI: "OpenAI",
  OpenInference: "OpenInference",
  Parasail: "Parasail",
  Perplexity: "Perplexity",
  Phala: "Phala",
  SambaNova: "SambaNova",
  Stealth: "Stealth",
  Switchpoint: "Switchpoint",
  Targon: "Targon",
  Together: "Together",
  Ubicloud: "Ubicloud",
  Venice: "Venice",
  WandB: "WandB",
  XAI: "xAI",
  ZAi: "Z.AI",
} as const;
export type ChatStreamCompletionCreateParamsOnlyEnum = ClosedEnum<
  typeof ChatStreamCompletionCreateParamsOnlyEnum
>;

export type ChatStreamCompletionCreateParamsOnlyUnion =
  | ChatStreamCompletionCreateParamsOnlyEnum
  | string;

export const ChatStreamCompletionCreateParamsIgnoreEnum = {
  AnyScale: "AnyScale",
  CentML: "Cent-ML",
  HuggingFace: "HuggingFace",
  Hyperbolic2: "Hyperbolic 2",
  Lepton: "Lepton",
  Lynn2: "Lynn 2",
  Lynn: "Lynn",
  Mancer: "Mancer",
  Modal: "Modal",
  OctoAI: "OctoAI",
  Recursal: "Recursal",
  Reflection: "Reflection",
  Replicate: "Replicate",
  SambaNova2: "SambaNova 2",
  SFCompute: "SF Compute",
  Together2: "Together 2",
  OneDotAI: "01.AI",
  Ai21: "AI21",
  AionLabs: "AionLabs",
  Alibaba: "Alibaba",
  AmazonBedrock: "Amazon Bedrock",
  Anthropic: "Anthropic",
  AtlasCloud: "AtlasCloud",
  Atoma: "Atoma",
  Avian: "Avian",
  Azure: "Azure",
  BaseTen: "BaseTen",
  Cerebras: "Cerebras",
  Chutes: "Chutes",
  Cloudflare: "Cloudflare",
  Cohere: "Cohere",
  CrofAI: "CrofAI",
  Crusoe: "Crusoe",
  DeepInfra: "DeepInfra",
  DeepSeek: "DeepSeek",
  Enfer: "Enfer",
  Featherless: "Featherless",
  Fireworks: "Fireworks",
  Friendli: "Friendli",
  GMICloud: "GMICloud",
  Google: "Google",
  GoogleAIStudio: "Google AI Studio",
  Groq: "Groq",
  Hyperbolic: "Hyperbolic",
  Inception: "Inception",
  InferenceNet: "InferenceNet",
  Infermatic: "Infermatic",
  Inflection: "Inflection",
  InoCloud: "InoCloud",
  Kluster: "Kluster",
  Lambda: "Lambda",
  Liquid: "Liquid",
  Mancer2: "Mancer 2",
  Meta: "Meta",
  Minimax: "Minimax",
  Mistral: "Mistral",
  MoonshotAI: "Moonshot AI",
  Morph: "Morph",
  NCompass: "NCompass",
  Nebius: "Nebius",
  NextBit: "NextBit",
  Nineteen: "Nineteen",
  Novita: "Novita",
  OpenAI: "OpenAI",
  OpenInference: "OpenInference",
  Parasail: "Parasail",
  Perplexity: "Perplexity",
  Phala: "Phala",
  SambaNova: "SambaNova",
  Stealth: "Stealth",
  Switchpoint: "Switchpoint",
  Targon: "Targon",
  Together: "Together",
  Ubicloud: "Ubicloud",
  Venice: "Venice",
  WandB: "WandB",
  XAI: "xAI",
  ZAi: "Z.AI",
} as const;
export type ChatStreamCompletionCreateParamsIgnoreEnum = ClosedEnum<
  typeof ChatStreamCompletionCreateParamsIgnoreEnum
>;

export type ChatStreamCompletionCreateParamsIgnoreUnion =
  | ChatStreamCompletionCreateParamsIgnoreEnum
  | string;

export const ChatStreamCompletionCreateParamsQuantization = {
  Int4: "int4",
  Int8: "int8",
  Fp4: "fp4",
  Fp6: "fp6",
  Fp8: "fp8",
  Fp16: "fp16",
  Bf16: "bf16",
  Fp32: "fp32",
  Unknown: "unknown",
} as const;
export type ChatStreamCompletionCreateParamsQuantization = ClosedEnum<
  typeof ChatStreamCompletionCreateParamsQuantization
>;

/**
 * The sorting strategy to use for this request, if "order" is not specified. When set, no load balancing is performed.
 */
export const ChatStreamCompletionCreateParamsSort = {
  Price: "price",
  Throughput: "throughput",
  Latency: "latency",
} as const;
/**
 * The sorting strategy to use for this request, if "order" is not specified. When set, no load balancing is performed.
 */
export type ChatStreamCompletionCreateParamsSort = ClosedEnum<
  typeof ChatStreamCompletionCreateParamsSort
>;

export type ChatStreamCompletionCreateParamsPrompt = number | string | any;

export type ChatStreamCompletionCreateParamsCompletion = number | string | any;

export type ChatStreamCompletionCreateParamsImage = number | string | any;

export type ChatStreamCompletionCreateParamsAudio = number | string | any;

export type ChatStreamCompletionCreateParamsRequest = number | string | any;

/**
 * The object specifying the maximum price you want to pay for this request. USD price per million tokens, for prompt and completion.
 */
export type ChatStreamCompletionCreateParamsMaxPrice = {
  prompt?: number | string | any | undefined;
  completion?: number | string | any | undefined;
  image?: number | string | any | undefined;
  audio?: number | string | any | undefined;
  request?: number | string | any | undefined;
};

/**
 * When multiple model providers are available, optionally indicate your routing preference.
 */
export type ChatStreamCompletionCreateParamsProvider = {
  /**
   * Whether to allow backup providers to serve requests
   *
   * @remarks
   * - true: (default) when the primary provider (or your custom providers in "order") is unavailable, use the next best provider.
   * - false: use only the primary/custom provider, and return the upstream error if it's unavailable.
   */
  allowFallbacks?: boolean | null | undefined;
  /**
   * Whether to filter providers to only those that support the parameters you've provided. If this setting is omitted or set to false, then providers will receive only the parameters they support, and ignore the rest.
   */
  requireParameters?: boolean | null | undefined;
  /**
   * Data collection setting. If no available model provider meets the requirement, your request will return an error.
   *
   * @remarks
   * - allow: (default) allow providers which store user data non-transiently and may train on it
   * - deny: use only providers which do not collect user data.
   */
  dataCollection?:
    | ChatStreamCompletionCreateParamsDataCollection
    | null
    | undefined;
  /**
   * An ordered list of provider slugs. The router will attempt to use the first provider in the subset of this list that supports your requested model, and fall back to the next if it is unavailable. If no providers are available, the request will fail with an error message.
   */
  order?:
    | Array<ChatStreamCompletionCreateParamsOrderEnum | string>
    | null
    | undefined;
  /**
   * List of provider slugs to allow. If provided, this list is merged with your account-wide allowed provider settings for this request.
   */
  only?:
    | Array<ChatStreamCompletionCreateParamsOnlyEnum | string>
    | null
    | undefined;
  /**
   * List of provider slugs to ignore. If provided, this list is merged with your account-wide ignored provider settings for this request.
   */
  ignore?:
    | Array<ChatStreamCompletionCreateParamsIgnoreEnum | string>
    | null
    | undefined;
  /**
   * A list of quantization levels to filter the provider by.
   */
  quantizations?:
    | Array<ChatStreamCompletionCreateParamsQuantization>
    | null
    | undefined;
  /**
   * The sorting strategy to use for this request, if "order" is not specified. When set, no load balancing is performed.
   */
  sort?: ChatStreamCompletionCreateParamsSort | null | undefined;
  /**
   * The object specifying the maximum price you want to pay for this request. USD price per million tokens, for prompt and completion.
   */
  maxPrice?: ChatStreamCompletionCreateParamsMaxPrice | undefined;
};

export const ChatStreamCompletionCreateParamsIdFileParser = {
  FileParser: "file-parser",
} as const;
export type ChatStreamCompletionCreateParamsIdFileParser = ClosedEnum<
  typeof ChatStreamCompletionCreateParamsIdFileParser
>;

export const ChatStreamCompletionCreateParamsPdfEngine = {
  MistralOcr: "mistral-ocr",
  PdfText: "pdf-text",
  Native: "native",
} as const;
export type ChatStreamCompletionCreateParamsPdfEngine = ClosedEnum<
  typeof ChatStreamCompletionCreateParamsPdfEngine
>;

export type ChatStreamCompletionCreateParamsPdf = {
  engine?: ChatStreamCompletionCreateParamsPdfEngine | undefined;
};

export type ChatStreamCompletionCreateParamsPluginFileParser = {
  id: ChatStreamCompletionCreateParamsIdFileParser;
  maxFiles?: number | undefined;
  pdf?: ChatStreamCompletionCreateParamsPdf | undefined;
};

export const ChatStreamCompletionCreateParamsIdChainOfThought = {
  ChainOfThought: "chain-of-thought",
} as const;
export type ChatStreamCompletionCreateParamsIdChainOfThought = ClosedEnum<
  typeof ChatStreamCompletionCreateParamsIdChainOfThought
>;

export type ChatStreamCompletionCreateParamsPluginChainOfThought = {
  id: ChatStreamCompletionCreateParamsIdChainOfThought;
};

export const ChatStreamCompletionCreateParamsIdWeb = {
  Web: "web",
} as const;
export type ChatStreamCompletionCreateParamsIdWeb = ClosedEnum<
  typeof ChatStreamCompletionCreateParamsIdWeb
>;

export const ChatStreamCompletionCreateParamsEngine = {
  Native: "native",
  Exa: "exa",
} as const;
export type ChatStreamCompletionCreateParamsEngine = ClosedEnum<
  typeof ChatStreamCompletionCreateParamsEngine
>;

export type ChatStreamCompletionCreateParamsPluginWeb = {
  id: ChatStreamCompletionCreateParamsIdWeb;
  maxResults?: number | undefined;
  searchPrompt?: string | undefined;
  engine?: ChatStreamCompletionCreateParamsEngine | undefined;
};

export const ChatStreamCompletionCreateParamsIdModeration = {
  Moderation: "moderation",
} as const;
export type ChatStreamCompletionCreateParamsIdModeration = ClosedEnum<
  typeof ChatStreamCompletionCreateParamsIdModeration
>;

export type ChatStreamCompletionCreateParamsPluginModeration = {
  id: ChatStreamCompletionCreateParamsIdModeration;
};

export type ChatStreamCompletionCreateParamsPluginUnion =
  | ChatStreamCompletionCreateParamsPluginModeration
  | ChatStreamCompletionCreateParamsPluginWeb
  | ChatStreamCompletionCreateParamsPluginChainOfThought
  | ChatStreamCompletionCreateParamsPluginFileParser;

/**
 * Chat completion request parameters
 */
export type ChatStreamCompletionCreateParams = {
  /**
   * List of messages for the conversation
   */
  messages: Array<ChatCompletionMessageParam>;
  /**
   * Model to use for completion
   */
  model?: string | undefined;
  /**
   * Frequency penalty (-2.0 to 2.0)
   */
  frequencyPenalty?: number | null | undefined;
  /**
   * Token logit bias adjustments
   */
  logitBias?: { [k: string]: number } | null | undefined;
  /**
   * Return log probabilities
   */
  logprobs?: boolean | null | undefined;
  /**
   * Number of top log probabilities to return (0-20)
   */
  topLogprobs?: number | null | undefined;
  /**
   * Maximum tokens in completion
   */
  maxCompletionTokens?: number | null | undefined;
  /**
   * Maximum tokens (deprecated, use max_completion_tokens)
   */
  maxTokens?: number | null | undefined;
  /**
   * Key-value pairs for additional object information (max 16 pairs, 64 char keys, 512 char values)
   */
  metadata?: { [k: string]: string } | undefined;
  /**
   * Presence penalty (-2.0 to 2.0)
   */
  presencePenalty?: number | null | undefined;
  /**
   * Reasoning configuration
   */
  reasoning?: ChatStreamCompletionCreateParamsReasoning | null | undefined;
  /**
   * Response format configuration
   */
  responseFormat?:
    | ChatStreamCompletionCreateParamsResponseFormatJSONSchema
    | ChatStreamCompletionCreateParamsResponseFormatGrammar
    | ChatStreamCompletionCreateParamsResponseFormatText
    | ChatStreamCompletionCreateParamsResponseFormatJSONObject
    | ChatStreamCompletionCreateParamsResponseFormatPython
    | undefined;
  /**
   * Random seed for deterministic outputs
   */
  seed?: number | null | undefined;
  /**
   * Stop sequences (up to 4)
   */
  stop?: string | Array<string> | any | null | undefined;
  /**
   * Enable streaming response
   */
  stream?: boolean | undefined;
  streamOptions?:
    | ChatStreamCompletionCreateParamsStreamOptions
    | null
    | undefined;
  /**
   * Sampling temperature (0-2)
   */
  temperature?: number | null | undefined;
  /**
   * Tool choice configuration
   */
  toolChoice?: ChatCompletionToolChoiceOption | undefined;
  /**
   * Available tools for function calling
   */
  tools?: Array<ChatCompletionTool> | undefined;
  /**
   * Nucleus sampling parameter (0-1)
   */
  topP?: number | null | undefined;
  /**
   * Unique user identifier
   */
  user?: string | undefined;
  /**
   * Order of models to fallback to for this request
   */
  models?: Array<string> | null | undefined;
  /**
   * Reasoning effort
   */
  reasoningEffort?:
    | ChatStreamCompletionCreateParamsReasoningEffort
    | null
    | undefined;
  /**
   * When multiple model providers are available, optionally indicate your routing preference.
   */
  provider?: ChatStreamCompletionCreateParamsProvider | null | undefined;
  /**
   * Plugins you want to enable for this request, including their settings.
   */
  plugins?:
    | Array<
      | ChatStreamCompletionCreateParamsPluginModeration
      | ChatStreamCompletionCreateParamsPluginWeb
      | ChatStreamCompletionCreateParamsPluginChainOfThought
      | ChatStreamCompletionCreateParamsPluginFileParser
    >
    | undefined;
};

/** @internal */
export const ChatStreamCompletionCreateParamsEffort$inboundSchema:
  z.ZodNativeEnum<typeof ChatStreamCompletionCreateParamsEffort> = z.nativeEnum(
    ChatStreamCompletionCreateParamsEffort,
  );

/** @internal */
export const ChatStreamCompletionCreateParamsEffort$outboundSchema:
  z.ZodNativeEnum<typeof ChatStreamCompletionCreateParamsEffort> =
    ChatStreamCompletionCreateParamsEffort$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatStreamCompletionCreateParamsEffort$ {
  /** @deprecated use `ChatStreamCompletionCreateParamsEffort$inboundSchema` instead. */
  export const inboundSchema =
    ChatStreamCompletionCreateParamsEffort$inboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsEffort$outboundSchema` instead. */
  export const outboundSchema =
    ChatStreamCompletionCreateParamsEffort$outboundSchema;
}

/** @internal */
export const ChatStreamCompletionCreateParamsReasoning$inboundSchema: z.ZodType<
  ChatStreamCompletionCreateParamsReasoning,
  z.ZodTypeDef,
  unknown
> = z.object({
  enabled: z.boolean().optional(),
  effort: z.nullable(ChatStreamCompletionCreateParamsEffort$inboundSchema)
    .optional(),
  max_tokens: z.nullable(z.number()).optional(),
  exclude: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "max_tokens": "maxTokens",
  });
});

/** @internal */
export type ChatStreamCompletionCreateParamsReasoning$Outbound = {
  enabled?: boolean | undefined;
  effort?: string | null | undefined;
  max_tokens?: number | null | undefined;
  exclude: boolean;
};

/** @internal */
export const ChatStreamCompletionCreateParamsReasoning$outboundSchema:
  z.ZodType<
    ChatStreamCompletionCreateParamsReasoning$Outbound,
    z.ZodTypeDef,
    ChatStreamCompletionCreateParamsReasoning
  > = z.object({
    enabled: z.boolean().optional(),
    effort: z.nullable(ChatStreamCompletionCreateParamsEffort$outboundSchema)
      .optional(),
    maxTokens: z.nullable(z.number()).optional(),
    exclude: z.boolean().default(false),
  }).transform((v) => {
    return remap$(v, {
      maxTokens: "max_tokens",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatStreamCompletionCreateParamsReasoning$ {
  /** @deprecated use `ChatStreamCompletionCreateParamsReasoning$inboundSchema` instead. */
  export const inboundSchema =
    ChatStreamCompletionCreateParamsReasoning$inboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsReasoning$outboundSchema` instead. */
  export const outboundSchema =
    ChatStreamCompletionCreateParamsReasoning$outboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsReasoning$Outbound` instead. */
  export type Outbound = ChatStreamCompletionCreateParamsReasoning$Outbound;
}

export function chatStreamCompletionCreateParamsReasoningToJSON(
  chatStreamCompletionCreateParamsReasoning:
    ChatStreamCompletionCreateParamsReasoning,
): string {
  return JSON.stringify(
    ChatStreamCompletionCreateParamsReasoning$outboundSchema.parse(
      chatStreamCompletionCreateParamsReasoning,
    ),
  );
}

export function chatStreamCompletionCreateParamsReasoningFromJSON(
  jsonString: string,
): SafeParseResult<
  ChatStreamCompletionCreateParamsReasoning,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ChatStreamCompletionCreateParamsReasoning$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ChatStreamCompletionCreateParamsReasoning' from JSON`,
  );
}

/** @internal */
export const ChatStreamCompletionCreateParamsTypePython$inboundSchema:
  z.ZodNativeEnum<typeof ChatStreamCompletionCreateParamsTypePython> = z
    .nativeEnum(ChatStreamCompletionCreateParamsTypePython);

/** @internal */
export const ChatStreamCompletionCreateParamsTypePython$outboundSchema:
  z.ZodNativeEnum<typeof ChatStreamCompletionCreateParamsTypePython> =
    ChatStreamCompletionCreateParamsTypePython$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatStreamCompletionCreateParamsTypePython$ {
  /** @deprecated use `ChatStreamCompletionCreateParamsTypePython$inboundSchema` instead. */
  export const inboundSchema =
    ChatStreamCompletionCreateParamsTypePython$inboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsTypePython$outboundSchema` instead. */
  export const outboundSchema =
    ChatStreamCompletionCreateParamsTypePython$outboundSchema;
}

/** @internal */
export const ChatStreamCompletionCreateParamsResponseFormatPython$inboundSchema:
  z.ZodType<
    ChatStreamCompletionCreateParamsResponseFormatPython,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: ChatStreamCompletionCreateParamsTypePython$inboundSchema,
  });

/** @internal */
export type ChatStreamCompletionCreateParamsResponseFormatPython$Outbound = {
  type: string;
};

/** @internal */
export const ChatStreamCompletionCreateParamsResponseFormatPython$outboundSchema:
  z.ZodType<
    ChatStreamCompletionCreateParamsResponseFormatPython$Outbound,
    z.ZodTypeDef,
    ChatStreamCompletionCreateParamsResponseFormatPython
  > = z.object({
    type: ChatStreamCompletionCreateParamsTypePython$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatStreamCompletionCreateParamsResponseFormatPython$ {
  /** @deprecated use `ChatStreamCompletionCreateParamsResponseFormatPython$inboundSchema` instead. */
  export const inboundSchema =
    ChatStreamCompletionCreateParamsResponseFormatPython$inboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsResponseFormatPython$outboundSchema` instead. */
  export const outboundSchema =
    ChatStreamCompletionCreateParamsResponseFormatPython$outboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsResponseFormatPython$Outbound` instead. */
  export type Outbound =
    ChatStreamCompletionCreateParamsResponseFormatPython$Outbound;
}

export function chatStreamCompletionCreateParamsResponseFormatPythonToJSON(
  chatStreamCompletionCreateParamsResponseFormatPython:
    ChatStreamCompletionCreateParamsResponseFormatPython,
): string {
  return JSON.stringify(
    ChatStreamCompletionCreateParamsResponseFormatPython$outboundSchema.parse(
      chatStreamCompletionCreateParamsResponseFormatPython,
    ),
  );
}

export function chatStreamCompletionCreateParamsResponseFormatPythonFromJSON(
  jsonString: string,
): SafeParseResult<
  ChatStreamCompletionCreateParamsResponseFormatPython,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ChatStreamCompletionCreateParamsResponseFormatPython$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ChatStreamCompletionCreateParamsResponseFormatPython' from JSON`,
  );
}

/** @internal */
export const ChatStreamCompletionCreateParamsTypeGrammar$inboundSchema:
  z.ZodNativeEnum<typeof ChatStreamCompletionCreateParamsTypeGrammar> = z
    .nativeEnum(ChatStreamCompletionCreateParamsTypeGrammar);

/** @internal */
export const ChatStreamCompletionCreateParamsTypeGrammar$outboundSchema:
  z.ZodNativeEnum<typeof ChatStreamCompletionCreateParamsTypeGrammar> =
    ChatStreamCompletionCreateParamsTypeGrammar$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatStreamCompletionCreateParamsTypeGrammar$ {
  /** @deprecated use `ChatStreamCompletionCreateParamsTypeGrammar$inboundSchema` instead. */
  export const inboundSchema =
    ChatStreamCompletionCreateParamsTypeGrammar$inboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsTypeGrammar$outboundSchema` instead. */
  export const outboundSchema =
    ChatStreamCompletionCreateParamsTypeGrammar$outboundSchema;
}

/** @internal */
export const ChatStreamCompletionCreateParamsResponseFormatGrammar$inboundSchema:
  z.ZodType<
    ChatStreamCompletionCreateParamsResponseFormatGrammar,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: ChatStreamCompletionCreateParamsTypeGrammar$inboundSchema,
    grammar: z.string(),
  });

/** @internal */
export type ChatStreamCompletionCreateParamsResponseFormatGrammar$Outbound = {
  type: string;
  grammar: string;
};

/** @internal */
export const ChatStreamCompletionCreateParamsResponseFormatGrammar$outboundSchema:
  z.ZodType<
    ChatStreamCompletionCreateParamsResponseFormatGrammar$Outbound,
    z.ZodTypeDef,
    ChatStreamCompletionCreateParamsResponseFormatGrammar
  > = z.object({
    type: ChatStreamCompletionCreateParamsTypeGrammar$outboundSchema,
    grammar: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatStreamCompletionCreateParamsResponseFormatGrammar$ {
  /** @deprecated use `ChatStreamCompletionCreateParamsResponseFormatGrammar$inboundSchema` instead. */
  export const inboundSchema =
    ChatStreamCompletionCreateParamsResponseFormatGrammar$inboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsResponseFormatGrammar$outboundSchema` instead. */
  export const outboundSchema =
    ChatStreamCompletionCreateParamsResponseFormatGrammar$outboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsResponseFormatGrammar$Outbound` instead. */
  export type Outbound =
    ChatStreamCompletionCreateParamsResponseFormatGrammar$Outbound;
}

export function chatStreamCompletionCreateParamsResponseFormatGrammarToJSON(
  chatStreamCompletionCreateParamsResponseFormatGrammar:
    ChatStreamCompletionCreateParamsResponseFormatGrammar,
): string {
  return JSON.stringify(
    ChatStreamCompletionCreateParamsResponseFormatGrammar$outboundSchema.parse(
      chatStreamCompletionCreateParamsResponseFormatGrammar,
    ),
  );
}

export function chatStreamCompletionCreateParamsResponseFormatGrammarFromJSON(
  jsonString: string,
): SafeParseResult<
  ChatStreamCompletionCreateParamsResponseFormatGrammar,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ChatStreamCompletionCreateParamsResponseFormatGrammar$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ChatStreamCompletionCreateParamsResponseFormatGrammar' from JSON`,
  );
}

/** @internal */
export const ChatStreamCompletionCreateParamsTypeJSONSchema$inboundSchema:
  z.ZodNativeEnum<typeof ChatStreamCompletionCreateParamsTypeJSONSchema> = z
    .nativeEnum(ChatStreamCompletionCreateParamsTypeJSONSchema);

/** @internal */
export const ChatStreamCompletionCreateParamsTypeJSONSchema$outboundSchema:
  z.ZodNativeEnum<typeof ChatStreamCompletionCreateParamsTypeJSONSchema> =
    ChatStreamCompletionCreateParamsTypeJSONSchema$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatStreamCompletionCreateParamsTypeJSONSchema$ {
  /** @deprecated use `ChatStreamCompletionCreateParamsTypeJSONSchema$inboundSchema` instead. */
  export const inboundSchema =
    ChatStreamCompletionCreateParamsTypeJSONSchema$inboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsTypeJSONSchema$outboundSchema` instead. */
  export const outboundSchema =
    ChatStreamCompletionCreateParamsTypeJSONSchema$outboundSchema;
}

/** @internal */
export const ChatStreamCompletionCreateParamsJsonSchema$inboundSchema:
  z.ZodType<ChatStreamCompletionCreateParamsJsonSchema, z.ZodTypeDef, unknown> =
    z.object({
      name: z.string(),
      description: z.string().optional(),
      schema: ResponseFormatJsonSchemaSchema$inboundSchema.optional(),
      strict: z.nullable(z.boolean()).optional(),
    });

/** @internal */
export type ChatStreamCompletionCreateParamsJsonSchema$Outbound = {
  name: string;
  description?: string | undefined;
  schema?: ResponseFormatJsonSchemaSchema$Outbound | undefined;
  strict?: boolean | null | undefined;
};

/** @internal */
export const ChatStreamCompletionCreateParamsJsonSchema$outboundSchema:
  z.ZodType<
    ChatStreamCompletionCreateParamsJsonSchema$Outbound,
    z.ZodTypeDef,
    ChatStreamCompletionCreateParamsJsonSchema
  > = z.object({
    name: z.string(),
    description: z.string().optional(),
    schema: ResponseFormatJsonSchemaSchema$outboundSchema.optional(),
    strict: z.nullable(z.boolean()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatStreamCompletionCreateParamsJsonSchema$ {
  /** @deprecated use `ChatStreamCompletionCreateParamsJsonSchema$inboundSchema` instead. */
  export const inboundSchema =
    ChatStreamCompletionCreateParamsJsonSchema$inboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsJsonSchema$outboundSchema` instead. */
  export const outboundSchema =
    ChatStreamCompletionCreateParamsJsonSchema$outboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsJsonSchema$Outbound` instead. */
  export type Outbound = ChatStreamCompletionCreateParamsJsonSchema$Outbound;
}

export function chatStreamCompletionCreateParamsJsonSchemaToJSON(
  chatStreamCompletionCreateParamsJsonSchema:
    ChatStreamCompletionCreateParamsJsonSchema,
): string {
  return JSON.stringify(
    ChatStreamCompletionCreateParamsJsonSchema$outboundSchema.parse(
      chatStreamCompletionCreateParamsJsonSchema,
    ),
  );
}

export function chatStreamCompletionCreateParamsJsonSchemaFromJSON(
  jsonString: string,
): SafeParseResult<
  ChatStreamCompletionCreateParamsJsonSchema,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ChatStreamCompletionCreateParamsJsonSchema$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ChatStreamCompletionCreateParamsJsonSchema' from JSON`,
  );
}

/** @internal */
export const ChatStreamCompletionCreateParamsResponseFormatJSONSchema$inboundSchema:
  z.ZodType<
    ChatStreamCompletionCreateParamsResponseFormatJSONSchema,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: ChatStreamCompletionCreateParamsTypeJSONSchema$inboundSchema,
    json_schema: z.lazy(() =>
      ChatStreamCompletionCreateParamsJsonSchema$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "json_schema": "jsonSchema",
    });
  });

/** @internal */
export type ChatStreamCompletionCreateParamsResponseFormatJSONSchema$Outbound =
  {
    type: string;
    json_schema: ChatStreamCompletionCreateParamsJsonSchema$Outbound;
  };

/** @internal */
export const ChatStreamCompletionCreateParamsResponseFormatJSONSchema$outboundSchema:
  z.ZodType<
    ChatStreamCompletionCreateParamsResponseFormatJSONSchema$Outbound,
    z.ZodTypeDef,
    ChatStreamCompletionCreateParamsResponseFormatJSONSchema
  > = z.object({
    type: ChatStreamCompletionCreateParamsTypeJSONSchema$outboundSchema,
    jsonSchema: z.lazy(() =>
      ChatStreamCompletionCreateParamsJsonSchema$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      jsonSchema: "json_schema",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatStreamCompletionCreateParamsResponseFormatJSONSchema$ {
  /** @deprecated use `ChatStreamCompletionCreateParamsResponseFormatJSONSchema$inboundSchema` instead. */
  export const inboundSchema =
    ChatStreamCompletionCreateParamsResponseFormatJSONSchema$inboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsResponseFormatJSONSchema$outboundSchema` instead. */
  export const outboundSchema =
    ChatStreamCompletionCreateParamsResponseFormatJSONSchema$outboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsResponseFormatJSONSchema$Outbound` instead. */
  export type Outbound =
    ChatStreamCompletionCreateParamsResponseFormatJSONSchema$Outbound;
}

export function chatStreamCompletionCreateParamsResponseFormatJSONSchemaToJSON(
  chatStreamCompletionCreateParamsResponseFormatJSONSchema:
    ChatStreamCompletionCreateParamsResponseFormatJSONSchema,
): string {
  return JSON.stringify(
    ChatStreamCompletionCreateParamsResponseFormatJSONSchema$outboundSchema
      .parse(chatStreamCompletionCreateParamsResponseFormatJSONSchema),
  );
}

export function chatStreamCompletionCreateParamsResponseFormatJSONSchemaFromJSON(
  jsonString: string,
): SafeParseResult<
  ChatStreamCompletionCreateParamsResponseFormatJSONSchema,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ChatStreamCompletionCreateParamsResponseFormatJSONSchema$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'ChatStreamCompletionCreateParamsResponseFormatJSONSchema' from JSON`,
  );
}

/** @internal */
export const ChatStreamCompletionCreateParamsTypeJSONObject$inboundSchema:
  z.ZodNativeEnum<typeof ChatStreamCompletionCreateParamsTypeJSONObject> = z
    .nativeEnum(ChatStreamCompletionCreateParamsTypeJSONObject);

/** @internal */
export const ChatStreamCompletionCreateParamsTypeJSONObject$outboundSchema:
  z.ZodNativeEnum<typeof ChatStreamCompletionCreateParamsTypeJSONObject> =
    ChatStreamCompletionCreateParamsTypeJSONObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatStreamCompletionCreateParamsTypeJSONObject$ {
  /** @deprecated use `ChatStreamCompletionCreateParamsTypeJSONObject$inboundSchema` instead. */
  export const inboundSchema =
    ChatStreamCompletionCreateParamsTypeJSONObject$inboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsTypeJSONObject$outboundSchema` instead. */
  export const outboundSchema =
    ChatStreamCompletionCreateParamsTypeJSONObject$outboundSchema;
}

/** @internal */
export const ChatStreamCompletionCreateParamsResponseFormatJSONObject$inboundSchema:
  z.ZodType<
    ChatStreamCompletionCreateParamsResponseFormatJSONObject,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: ChatStreamCompletionCreateParamsTypeJSONObject$inboundSchema,
  });

/** @internal */
export type ChatStreamCompletionCreateParamsResponseFormatJSONObject$Outbound =
  {
    type: string;
  };

/** @internal */
export const ChatStreamCompletionCreateParamsResponseFormatJSONObject$outboundSchema:
  z.ZodType<
    ChatStreamCompletionCreateParamsResponseFormatJSONObject$Outbound,
    z.ZodTypeDef,
    ChatStreamCompletionCreateParamsResponseFormatJSONObject
  > = z.object({
    type: ChatStreamCompletionCreateParamsTypeJSONObject$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatStreamCompletionCreateParamsResponseFormatJSONObject$ {
  /** @deprecated use `ChatStreamCompletionCreateParamsResponseFormatJSONObject$inboundSchema` instead. */
  export const inboundSchema =
    ChatStreamCompletionCreateParamsResponseFormatJSONObject$inboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsResponseFormatJSONObject$outboundSchema` instead. */
  export const outboundSchema =
    ChatStreamCompletionCreateParamsResponseFormatJSONObject$outboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsResponseFormatJSONObject$Outbound` instead. */
  export type Outbound =
    ChatStreamCompletionCreateParamsResponseFormatJSONObject$Outbound;
}

export function chatStreamCompletionCreateParamsResponseFormatJSONObjectToJSON(
  chatStreamCompletionCreateParamsResponseFormatJSONObject:
    ChatStreamCompletionCreateParamsResponseFormatJSONObject,
): string {
  return JSON.stringify(
    ChatStreamCompletionCreateParamsResponseFormatJSONObject$outboundSchema
      .parse(chatStreamCompletionCreateParamsResponseFormatJSONObject),
  );
}

export function chatStreamCompletionCreateParamsResponseFormatJSONObjectFromJSON(
  jsonString: string,
): SafeParseResult<
  ChatStreamCompletionCreateParamsResponseFormatJSONObject,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ChatStreamCompletionCreateParamsResponseFormatJSONObject$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'ChatStreamCompletionCreateParamsResponseFormatJSONObject' from JSON`,
  );
}

/** @internal */
export const ChatStreamCompletionCreateParamsTypeText$inboundSchema:
  z.ZodNativeEnum<typeof ChatStreamCompletionCreateParamsTypeText> = z
    .nativeEnum(ChatStreamCompletionCreateParamsTypeText);

/** @internal */
export const ChatStreamCompletionCreateParamsTypeText$outboundSchema:
  z.ZodNativeEnum<typeof ChatStreamCompletionCreateParamsTypeText> =
    ChatStreamCompletionCreateParamsTypeText$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatStreamCompletionCreateParamsTypeText$ {
  /** @deprecated use `ChatStreamCompletionCreateParamsTypeText$inboundSchema` instead. */
  export const inboundSchema =
    ChatStreamCompletionCreateParamsTypeText$inboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsTypeText$outboundSchema` instead. */
  export const outboundSchema =
    ChatStreamCompletionCreateParamsTypeText$outboundSchema;
}

/** @internal */
export const ChatStreamCompletionCreateParamsResponseFormatText$inboundSchema:
  z.ZodType<
    ChatStreamCompletionCreateParamsResponseFormatText,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: ChatStreamCompletionCreateParamsTypeText$inboundSchema,
  });

/** @internal */
export type ChatStreamCompletionCreateParamsResponseFormatText$Outbound = {
  type: string;
};

/** @internal */
export const ChatStreamCompletionCreateParamsResponseFormatText$outboundSchema:
  z.ZodType<
    ChatStreamCompletionCreateParamsResponseFormatText$Outbound,
    z.ZodTypeDef,
    ChatStreamCompletionCreateParamsResponseFormatText
  > = z.object({
    type: ChatStreamCompletionCreateParamsTypeText$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatStreamCompletionCreateParamsResponseFormatText$ {
  /** @deprecated use `ChatStreamCompletionCreateParamsResponseFormatText$inboundSchema` instead. */
  export const inboundSchema =
    ChatStreamCompletionCreateParamsResponseFormatText$inboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsResponseFormatText$outboundSchema` instead. */
  export const outboundSchema =
    ChatStreamCompletionCreateParamsResponseFormatText$outboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsResponseFormatText$Outbound` instead. */
  export type Outbound =
    ChatStreamCompletionCreateParamsResponseFormatText$Outbound;
}

export function chatStreamCompletionCreateParamsResponseFormatTextToJSON(
  chatStreamCompletionCreateParamsResponseFormatText:
    ChatStreamCompletionCreateParamsResponseFormatText,
): string {
  return JSON.stringify(
    ChatStreamCompletionCreateParamsResponseFormatText$outboundSchema.parse(
      chatStreamCompletionCreateParamsResponseFormatText,
    ),
  );
}

export function chatStreamCompletionCreateParamsResponseFormatTextFromJSON(
  jsonString: string,
): SafeParseResult<
  ChatStreamCompletionCreateParamsResponseFormatText,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ChatStreamCompletionCreateParamsResponseFormatText$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ChatStreamCompletionCreateParamsResponseFormatText' from JSON`,
  );
}

/** @internal */
export const ChatStreamCompletionCreateParamsResponseFormatUnion$inboundSchema:
  z.ZodType<
    ChatStreamCompletionCreateParamsResponseFormatUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      ChatStreamCompletionCreateParamsResponseFormatJSONSchema$inboundSchema
    ),
    z.lazy(() =>
      ChatStreamCompletionCreateParamsResponseFormatGrammar$inboundSchema
    ),
    z.lazy(() =>
      ChatStreamCompletionCreateParamsResponseFormatText$inboundSchema
    ),
    z.lazy(() =>
      ChatStreamCompletionCreateParamsResponseFormatJSONObject$inboundSchema
    ),
    z.lazy(() =>
      ChatStreamCompletionCreateParamsResponseFormatPython$inboundSchema
    ),
  ]);

/** @internal */
export type ChatStreamCompletionCreateParamsResponseFormatUnion$Outbound =
  | ChatStreamCompletionCreateParamsResponseFormatJSONSchema$Outbound
  | ChatStreamCompletionCreateParamsResponseFormatGrammar$Outbound
  | ChatStreamCompletionCreateParamsResponseFormatText$Outbound
  | ChatStreamCompletionCreateParamsResponseFormatJSONObject$Outbound
  | ChatStreamCompletionCreateParamsResponseFormatPython$Outbound;

/** @internal */
export const ChatStreamCompletionCreateParamsResponseFormatUnion$outboundSchema:
  z.ZodType<
    ChatStreamCompletionCreateParamsResponseFormatUnion$Outbound,
    z.ZodTypeDef,
    ChatStreamCompletionCreateParamsResponseFormatUnion
  > = z.union([
    z.lazy(() =>
      ChatStreamCompletionCreateParamsResponseFormatJSONSchema$outboundSchema
    ),
    z.lazy(() =>
      ChatStreamCompletionCreateParamsResponseFormatGrammar$outboundSchema
    ),
    z.lazy(() =>
      ChatStreamCompletionCreateParamsResponseFormatText$outboundSchema
    ),
    z.lazy(() =>
      ChatStreamCompletionCreateParamsResponseFormatJSONObject$outboundSchema
    ),
    z.lazy(() =>
      ChatStreamCompletionCreateParamsResponseFormatPython$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatStreamCompletionCreateParamsResponseFormatUnion$ {
  /** @deprecated use `ChatStreamCompletionCreateParamsResponseFormatUnion$inboundSchema` instead. */
  export const inboundSchema =
    ChatStreamCompletionCreateParamsResponseFormatUnion$inboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsResponseFormatUnion$outboundSchema` instead. */
  export const outboundSchema =
    ChatStreamCompletionCreateParamsResponseFormatUnion$outboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsResponseFormatUnion$Outbound` instead. */
  export type Outbound =
    ChatStreamCompletionCreateParamsResponseFormatUnion$Outbound;
}

export function chatStreamCompletionCreateParamsResponseFormatUnionToJSON(
  chatStreamCompletionCreateParamsResponseFormatUnion:
    ChatStreamCompletionCreateParamsResponseFormatUnion,
): string {
  return JSON.stringify(
    ChatStreamCompletionCreateParamsResponseFormatUnion$outboundSchema.parse(
      chatStreamCompletionCreateParamsResponseFormatUnion,
    ),
  );
}

export function chatStreamCompletionCreateParamsResponseFormatUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  ChatStreamCompletionCreateParamsResponseFormatUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ChatStreamCompletionCreateParamsResponseFormatUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ChatStreamCompletionCreateParamsResponseFormatUnion' from JSON`,
  );
}

/** @internal */
export const ChatStreamCompletionCreateParamsStop$inboundSchema: z.ZodType<
  ChatStreamCompletionCreateParamsStop,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string()), z.any()]);

/** @internal */
export type ChatStreamCompletionCreateParamsStop$Outbound =
  | string
  | Array<string>
  | any;

/** @internal */
export const ChatStreamCompletionCreateParamsStop$outboundSchema: z.ZodType<
  ChatStreamCompletionCreateParamsStop$Outbound,
  z.ZodTypeDef,
  ChatStreamCompletionCreateParamsStop
> = z.union([z.string(), z.array(z.string()), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatStreamCompletionCreateParamsStop$ {
  /** @deprecated use `ChatStreamCompletionCreateParamsStop$inboundSchema` instead. */
  export const inboundSchema =
    ChatStreamCompletionCreateParamsStop$inboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsStop$outboundSchema` instead. */
  export const outboundSchema =
    ChatStreamCompletionCreateParamsStop$outboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsStop$Outbound` instead. */
  export type Outbound = ChatStreamCompletionCreateParamsStop$Outbound;
}

export function chatStreamCompletionCreateParamsStopToJSON(
  chatStreamCompletionCreateParamsStop: ChatStreamCompletionCreateParamsStop,
): string {
  return JSON.stringify(
    ChatStreamCompletionCreateParamsStop$outboundSchema.parse(
      chatStreamCompletionCreateParamsStop,
    ),
  );
}

export function chatStreamCompletionCreateParamsStopFromJSON(
  jsonString: string,
): SafeParseResult<ChatStreamCompletionCreateParamsStop, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ChatStreamCompletionCreateParamsStop$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatStreamCompletionCreateParamsStop' from JSON`,
  );
}

/** @internal */
export const ChatStreamCompletionCreateParamsStreamOptions$inboundSchema:
  z.ZodType<
    ChatStreamCompletionCreateParamsStreamOptions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    include_usage: z.boolean().optional(),
  }).transform((v) => {
    return remap$(v, {
      "include_usage": "includeUsage",
    });
  });

/** @internal */
export type ChatStreamCompletionCreateParamsStreamOptions$Outbound = {
  include_usage?: boolean | undefined;
};

/** @internal */
export const ChatStreamCompletionCreateParamsStreamOptions$outboundSchema:
  z.ZodType<
    ChatStreamCompletionCreateParamsStreamOptions$Outbound,
    z.ZodTypeDef,
    ChatStreamCompletionCreateParamsStreamOptions
  > = z.object({
    includeUsage: z.boolean().optional(),
  }).transform((v) => {
    return remap$(v, {
      includeUsage: "include_usage",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatStreamCompletionCreateParamsStreamOptions$ {
  /** @deprecated use `ChatStreamCompletionCreateParamsStreamOptions$inboundSchema` instead. */
  export const inboundSchema =
    ChatStreamCompletionCreateParamsStreamOptions$inboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsStreamOptions$outboundSchema` instead. */
  export const outboundSchema =
    ChatStreamCompletionCreateParamsStreamOptions$outboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsStreamOptions$Outbound` instead. */
  export type Outbound = ChatStreamCompletionCreateParamsStreamOptions$Outbound;
}

export function chatStreamCompletionCreateParamsStreamOptionsToJSON(
  chatStreamCompletionCreateParamsStreamOptions:
    ChatStreamCompletionCreateParamsStreamOptions,
): string {
  return JSON.stringify(
    ChatStreamCompletionCreateParamsStreamOptions$outboundSchema.parse(
      chatStreamCompletionCreateParamsStreamOptions,
    ),
  );
}

export function chatStreamCompletionCreateParamsStreamOptionsFromJSON(
  jsonString: string,
): SafeParseResult<
  ChatStreamCompletionCreateParamsStreamOptions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ChatStreamCompletionCreateParamsStreamOptions$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ChatStreamCompletionCreateParamsStreamOptions' from JSON`,
  );
}

/** @internal */
export const ChatStreamCompletionCreateParamsReasoningEffort$inboundSchema:
  z.ZodNativeEnum<typeof ChatStreamCompletionCreateParamsReasoningEffort> = z
    .nativeEnum(ChatStreamCompletionCreateParamsReasoningEffort);

/** @internal */
export const ChatStreamCompletionCreateParamsReasoningEffort$outboundSchema:
  z.ZodNativeEnum<typeof ChatStreamCompletionCreateParamsReasoningEffort> =
    ChatStreamCompletionCreateParamsReasoningEffort$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatStreamCompletionCreateParamsReasoningEffort$ {
  /** @deprecated use `ChatStreamCompletionCreateParamsReasoningEffort$inboundSchema` instead. */
  export const inboundSchema =
    ChatStreamCompletionCreateParamsReasoningEffort$inboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsReasoningEffort$outboundSchema` instead. */
  export const outboundSchema =
    ChatStreamCompletionCreateParamsReasoningEffort$outboundSchema;
}

/** @internal */
export const ChatStreamCompletionCreateParamsDataCollection$inboundSchema:
  z.ZodNativeEnum<typeof ChatStreamCompletionCreateParamsDataCollection> = z
    .nativeEnum(ChatStreamCompletionCreateParamsDataCollection);

/** @internal */
export const ChatStreamCompletionCreateParamsDataCollection$outboundSchema:
  z.ZodNativeEnum<typeof ChatStreamCompletionCreateParamsDataCollection> =
    ChatStreamCompletionCreateParamsDataCollection$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatStreamCompletionCreateParamsDataCollection$ {
  /** @deprecated use `ChatStreamCompletionCreateParamsDataCollection$inboundSchema` instead. */
  export const inboundSchema =
    ChatStreamCompletionCreateParamsDataCollection$inboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsDataCollection$outboundSchema` instead. */
  export const outboundSchema =
    ChatStreamCompletionCreateParamsDataCollection$outboundSchema;
}

/** @internal */
export const ChatStreamCompletionCreateParamsOrderEnum$inboundSchema:
  z.ZodNativeEnum<typeof ChatStreamCompletionCreateParamsOrderEnum> = z
    .nativeEnum(ChatStreamCompletionCreateParamsOrderEnum);

/** @internal */
export const ChatStreamCompletionCreateParamsOrderEnum$outboundSchema:
  z.ZodNativeEnum<typeof ChatStreamCompletionCreateParamsOrderEnum> =
    ChatStreamCompletionCreateParamsOrderEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatStreamCompletionCreateParamsOrderEnum$ {
  /** @deprecated use `ChatStreamCompletionCreateParamsOrderEnum$inboundSchema` instead. */
  export const inboundSchema =
    ChatStreamCompletionCreateParamsOrderEnum$inboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsOrderEnum$outboundSchema` instead. */
  export const outboundSchema =
    ChatStreamCompletionCreateParamsOrderEnum$outboundSchema;
}

/** @internal */
export const ChatStreamCompletionCreateParamsOrderUnion$inboundSchema:
  z.ZodType<ChatStreamCompletionCreateParamsOrderUnion, z.ZodTypeDef, unknown> =
    z.union([
      ChatStreamCompletionCreateParamsOrderEnum$inboundSchema,
      z.string(),
    ]);

/** @internal */
export type ChatStreamCompletionCreateParamsOrderUnion$Outbound =
  | string
  | string;

/** @internal */
export const ChatStreamCompletionCreateParamsOrderUnion$outboundSchema:
  z.ZodType<
    ChatStreamCompletionCreateParamsOrderUnion$Outbound,
    z.ZodTypeDef,
    ChatStreamCompletionCreateParamsOrderUnion
  > = z.union([
    ChatStreamCompletionCreateParamsOrderEnum$outboundSchema,
    z.string(),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatStreamCompletionCreateParamsOrderUnion$ {
  /** @deprecated use `ChatStreamCompletionCreateParamsOrderUnion$inboundSchema` instead. */
  export const inboundSchema =
    ChatStreamCompletionCreateParamsOrderUnion$inboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsOrderUnion$outboundSchema` instead. */
  export const outboundSchema =
    ChatStreamCompletionCreateParamsOrderUnion$outboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsOrderUnion$Outbound` instead. */
  export type Outbound = ChatStreamCompletionCreateParamsOrderUnion$Outbound;
}

export function chatStreamCompletionCreateParamsOrderUnionToJSON(
  chatStreamCompletionCreateParamsOrderUnion:
    ChatStreamCompletionCreateParamsOrderUnion,
): string {
  return JSON.stringify(
    ChatStreamCompletionCreateParamsOrderUnion$outboundSchema.parse(
      chatStreamCompletionCreateParamsOrderUnion,
    ),
  );
}

export function chatStreamCompletionCreateParamsOrderUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  ChatStreamCompletionCreateParamsOrderUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ChatStreamCompletionCreateParamsOrderUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ChatStreamCompletionCreateParamsOrderUnion' from JSON`,
  );
}

/** @internal */
export const ChatStreamCompletionCreateParamsOnlyEnum$inboundSchema:
  z.ZodNativeEnum<typeof ChatStreamCompletionCreateParamsOnlyEnum> = z
    .nativeEnum(ChatStreamCompletionCreateParamsOnlyEnum);

/** @internal */
export const ChatStreamCompletionCreateParamsOnlyEnum$outboundSchema:
  z.ZodNativeEnum<typeof ChatStreamCompletionCreateParamsOnlyEnum> =
    ChatStreamCompletionCreateParamsOnlyEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatStreamCompletionCreateParamsOnlyEnum$ {
  /** @deprecated use `ChatStreamCompletionCreateParamsOnlyEnum$inboundSchema` instead. */
  export const inboundSchema =
    ChatStreamCompletionCreateParamsOnlyEnum$inboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsOnlyEnum$outboundSchema` instead. */
  export const outboundSchema =
    ChatStreamCompletionCreateParamsOnlyEnum$outboundSchema;
}

/** @internal */
export const ChatStreamCompletionCreateParamsOnlyUnion$inboundSchema: z.ZodType<
  ChatStreamCompletionCreateParamsOnlyUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  ChatStreamCompletionCreateParamsOnlyEnum$inboundSchema,
  z.string(),
]);

/** @internal */
export type ChatStreamCompletionCreateParamsOnlyUnion$Outbound =
  | string
  | string;

/** @internal */
export const ChatStreamCompletionCreateParamsOnlyUnion$outboundSchema:
  z.ZodType<
    ChatStreamCompletionCreateParamsOnlyUnion$Outbound,
    z.ZodTypeDef,
    ChatStreamCompletionCreateParamsOnlyUnion
  > = z.union([
    ChatStreamCompletionCreateParamsOnlyEnum$outboundSchema,
    z.string(),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatStreamCompletionCreateParamsOnlyUnion$ {
  /** @deprecated use `ChatStreamCompletionCreateParamsOnlyUnion$inboundSchema` instead. */
  export const inboundSchema =
    ChatStreamCompletionCreateParamsOnlyUnion$inboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsOnlyUnion$outboundSchema` instead. */
  export const outboundSchema =
    ChatStreamCompletionCreateParamsOnlyUnion$outboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsOnlyUnion$Outbound` instead. */
  export type Outbound = ChatStreamCompletionCreateParamsOnlyUnion$Outbound;
}

export function chatStreamCompletionCreateParamsOnlyUnionToJSON(
  chatStreamCompletionCreateParamsOnlyUnion:
    ChatStreamCompletionCreateParamsOnlyUnion,
): string {
  return JSON.stringify(
    ChatStreamCompletionCreateParamsOnlyUnion$outboundSchema.parse(
      chatStreamCompletionCreateParamsOnlyUnion,
    ),
  );
}

export function chatStreamCompletionCreateParamsOnlyUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  ChatStreamCompletionCreateParamsOnlyUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ChatStreamCompletionCreateParamsOnlyUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ChatStreamCompletionCreateParamsOnlyUnion' from JSON`,
  );
}

/** @internal */
export const ChatStreamCompletionCreateParamsIgnoreEnum$inboundSchema:
  z.ZodNativeEnum<typeof ChatStreamCompletionCreateParamsIgnoreEnum> = z
    .nativeEnum(ChatStreamCompletionCreateParamsIgnoreEnum);

/** @internal */
export const ChatStreamCompletionCreateParamsIgnoreEnum$outboundSchema:
  z.ZodNativeEnum<typeof ChatStreamCompletionCreateParamsIgnoreEnum> =
    ChatStreamCompletionCreateParamsIgnoreEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatStreamCompletionCreateParamsIgnoreEnum$ {
  /** @deprecated use `ChatStreamCompletionCreateParamsIgnoreEnum$inboundSchema` instead. */
  export const inboundSchema =
    ChatStreamCompletionCreateParamsIgnoreEnum$inboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsIgnoreEnum$outboundSchema` instead. */
  export const outboundSchema =
    ChatStreamCompletionCreateParamsIgnoreEnum$outboundSchema;
}

/** @internal */
export const ChatStreamCompletionCreateParamsIgnoreUnion$inboundSchema:
  z.ZodType<
    ChatStreamCompletionCreateParamsIgnoreUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    ChatStreamCompletionCreateParamsIgnoreEnum$inboundSchema,
    z.string(),
  ]);

/** @internal */
export type ChatStreamCompletionCreateParamsIgnoreUnion$Outbound =
  | string
  | string;

/** @internal */
export const ChatStreamCompletionCreateParamsIgnoreUnion$outboundSchema:
  z.ZodType<
    ChatStreamCompletionCreateParamsIgnoreUnion$Outbound,
    z.ZodTypeDef,
    ChatStreamCompletionCreateParamsIgnoreUnion
  > = z.union([
    ChatStreamCompletionCreateParamsIgnoreEnum$outboundSchema,
    z.string(),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatStreamCompletionCreateParamsIgnoreUnion$ {
  /** @deprecated use `ChatStreamCompletionCreateParamsIgnoreUnion$inboundSchema` instead. */
  export const inboundSchema =
    ChatStreamCompletionCreateParamsIgnoreUnion$inboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsIgnoreUnion$outboundSchema` instead. */
  export const outboundSchema =
    ChatStreamCompletionCreateParamsIgnoreUnion$outboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsIgnoreUnion$Outbound` instead. */
  export type Outbound = ChatStreamCompletionCreateParamsIgnoreUnion$Outbound;
}

export function chatStreamCompletionCreateParamsIgnoreUnionToJSON(
  chatStreamCompletionCreateParamsIgnoreUnion:
    ChatStreamCompletionCreateParamsIgnoreUnion,
): string {
  return JSON.stringify(
    ChatStreamCompletionCreateParamsIgnoreUnion$outboundSchema.parse(
      chatStreamCompletionCreateParamsIgnoreUnion,
    ),
  );
}

export function chatStreamCompletionCreateParamsIgnoreUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  ChatStreamCompletionCreateParamsIgnoreUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ChatStreamCompletionCreateParamsIgnoreUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ChatStreamCompletionCreateParamsIgnoreUnion' from JSON`,
  );
}

/** @internal */
export const ChatStreamCompletionCreateParamsQuantization$inboundSchema:
  z.ZodNativeEnum<typeof ChatStreamCompletionCreateParamsQuantization> = z
    .nativeEnum(ChatStreamCompletionCreateParamsQuantization);

/** @internal */
export const ChatStreamCompletionCreateParamsQuantization$outboundSchema:
  z.ZodNativeEnum<typeof ChatStreamCompletionCreateParamsQuantization> =
    ChatStreamCompletionCreateParamsQuantization$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatStreamCompletionCreateParamsQuantization$ {
  /** @deprecated use `ChatStreamCompletionCreateParamsQuantization$inboundSchema` instead. */
  export const inboundSchema =
    ChatStreamCompletionCreateParamsQuantization$inboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsQuantization$outboundSchema` instead. */
  export const outboundSchema =
    ChatStreamCompletionCreateParamsQuantization$outboundSchema;
}

/** @internal */
export const ChatStreamCompletionCreateParamsSort$inboundSchema:
  z.ZodNativeEnum<typeof ChatStreamCompletionCreateParamsSort> = z.nativeEnum(
    ChatStreamCompletionCreateParamsSort,
  );

/** @internal */
export const ChatStreamCompletionCreateParamsSort$outboundSchema:
  z.ZodNativeEnum<typeof ChatStreamCompletionCreateParamsSort> =
    ChatStreamCompletionCreateParamsSort$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatStreamCompletionCreateParamsSort$ {
  /** @deprecated use `ChatStreamCompletionCreateParamsSort$inboundSchema` instead. */
  export const inboundSchema =
    ChatStreamCompletionCreateParamsSort$inboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsSort$outboundSchema` instead. */
  export const outboundSchema =
    ChatStreamCompletionCreateParamsSort$outboundSchema;
}

/** @internal */
export const ChatStreamCompletionCreateParamsPrompt$inboundSchema: z.ZodType<
  ChatStreamCompletionCreateParamsPrompt,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type ChatStreamCompletionCreateParamsPrompt$Outbound =
  | number
  | string
  | any;

/** @internal */
export const ChatStreamCompletionCreateParamsPrompt$outboundSchema: z.ZodType<
  ChatStreamCompletionCreateParamsPrompt$Outbound,
  z.ZodTypeDef,
  ChatStreamCompletionCreateParamsPrompt
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatStreamCompletionCreateParamsPrompt$ {
  /** @deprecated use `ChatStreamCompletionCreateParamsPrompt$inboundSchema` instead. */
  export const inboundSchema =
    ChatStreamCompletionCreateParamsPrompt$inboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsPrompt$outboundSchema` instead. */
  export const outboundSchema =
    ChatStreamCompletionCreateParamsPrompt$outboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsPrompt$Outbound` instead. */
  export type Outbound = ChatStreamCompletionCreateParamsPrompt$Outbound;
}

export function chatStreamCompletionCreateParamsPromptToJSON(
  chatStreamCompletionCreateParamsPrompt:
    ChatStreamCompletionCreateParamsPrompt,
): string {
  return JSON.stringify(
    ChatStreamCompletionCreateParamsPrompt$outboundSchema.parse(
      chatStreamCompletionCreateParamsPrompt,
    ),
  );
}

export function chatStreamCompletionCreateParamsPromptFromJSON(
  jsonString: string,
): SafeParseResult<ChatStreamCompletionCreateParamsPrompt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ChatStreamCompletionCreateParamsPrompt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatStreamCompletionCreateParamsPrompt' from JSON`,
  );
}

/** @internal */
export const ChatStreamCompletionCreateParamsCompletion$inboundSchema:
  z.ZodType<ChatStreamCompletionCreateParamsCompletion, z.ZodTypeDef, unknown> =
    z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type ChatStreamCompletionCreateParamsCompletion$Outbound =
  | number
  | string
  | any;

/** @internal */
export const ChatStreamCompletionCreateParamsCompletion$outboundSchema:
  z.ZodType<
    ChatStreamCompletionCreateParamsCompletion$Outbound,
    z.ZodTypeDef,
    ChatStreamCompletionCreateParamsCompletion
  > = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatStreamCompletionCreateParamsCompletion$ {
  /** @deprecated use `ChatStreamCompletionCreateParamsCompletion$inboundSchema` instead. */
  export const inboundSchema =
    ChatStreamCompletionCreateParamsCompletion$inboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsCompletion$outboundSchema` instead. */
  export const outboundSchema =
    ChatStreamCompletionCreateParamsCompletion$outboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsCompletion$Outbound` instead. */
  export type Outbound = ChatStreamCompletionCreateParamsCompletion$Outbound;
}

export function chatStreamCompletionCreateParamsCompletionToJSON(
  chatStreamCompletionCreateParamsCompletion:
    ChatStreamCompletionCreateParamsCompletion,
): string {
  return JSON.stringify(
    ChatStreamCompletionCreateParamsCompletion$outboundSchema.parse(
      chatStreamCompletionCreateParamsCompletion,
    ),
  );
}

export function chatStreamCompletionCreateParamsCompletionFromJSON(
  jsonString: string,
): SafeParseResult<
  ChatStreamCompletionCreateParamsCompletion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ChatStreamCompletionCreateParamsCompletion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ChatStreamCompletionCreateParamsCompletion' from JSON`,
  );
}

/** @internal */
export const ChatStreamCompletionCreateParamsImage$inboundSchema: z.ZodType<
  ChatStreamCompletionCreateParamsImage,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type ChatStreamCompletionCreateParamsImage$Outbound =
  | number
  | string
  | any;

/** @internal */
export const ChatStreamCompletionCreateParamsImage$outboundSchema: z.ZodType<
  ChatStreamCompletionCreateParamsImage$Outbound,
  z.ZodTypeDef,
  ChatStreamCompletionCreateParamsImage
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatStreamCompletionCreateParamsImage$ {
  /** @deprecated use `ChatStreamCompletionCreateParamsImage$inboundSchema` instead. */
  export const inboundSchema =
    ChatStreamCompletionCreateParamsImage$inboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsImage$outboundSchema` instead. */
  export const outboundSchema =
    ChatStreamCompletionCreateParamsImage$outboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsImage$Outbound` instead. */
  export type Outbound = ChatStreamCompletionCreateParamsImage$Outbound;
}

export function chatStreamCompletionCreateParamsImageToJSON(
  chatStreamCompletionCreateParamsImage: ChatStreamCompletionCreateParamsImage,
): string {
  return JSON.stringify(
    ChatStreamCompletionCreateParamsImage$outboundSchema.parse(
      chatStreamCompletionCreateParamsImage,
    ),
  );
}

export function chatStreamCompletionCreateParamsImageFromJSON(
  jsonString: string,
): SafeParseResult<ChatStreamCompletionCreateParamsImage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ChatStreamCompletionCreateParamsImage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatStreamCompletionCreateParamsImage' from JSON`,
  );
}

/** @internal */
export const ChatStreamCompletionCreateParamsAudio$inboundSchema: z.ZodType<
  ChatStreamCompletionCreateParamsAudio,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type ChatStreamCompletionCreateParamsAudio$Outbound =
  | number
  | string
  | any;

/** @internal */
export const ChatStreamCompletionCreateParamsAudio$outboundSchema: z.ZodType<
  ChatStreamCompletionCreateParamsAudio$Outbound,
  z.ZodTypeDef,
  ChatStreamCompletionCreateParamsAudio
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatStreamCompletionCreateParamsAudio$ {
  /** @deprecated use `ChatStreamCompletionCreateParamsAudio$inboundSchema` instead. */
  export const inboundSchema =
    ChatStreamCompletionCreateParamsAudio$inboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsAudio$outboundSchema` instead. */
  export const outboundSchema =
    ChatStreamCompletionCreateParamsAudio$outboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsAudio$Outbound` instead. */
  export type Outbound = ChatStreamCompletionCreateParamsAudio$Outbound;
}

export function chatStreamCompletionCreateParamsAudioToJSON(
  chatStreamCompletionCreateParamsAudio: ChatStreamCompletionCreateParamsAudio,
): string {
  return JSON.stringify(
    ChatStreamCompletionCreateParamsAudio$outboundSchema.parse(
      chatStreamCompletionCreateParamsAudio,
    ),
  );
}

export function chatStreamCompletionCreateParamsAudioFromJSON(
  jsonString: string,
): SafeParseResult<ChatStreamCompletionCreateParamsAudio, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ChatStreamCompletionCreateParamsAudio$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatStreamCompletionCreateParamsAudio' from JSON`,
  );
}

/** @internal */
export const ChatStreamCompletionCreateParamsRequest$inboundSchema: z.ZodType<
  ChatStreamCompletionCreateParamsRequest,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type ChatStreamCompletionCreateParamsRequest$Outbound =
  | number
  | string
  | any;

/** @internal */
export const ChatStreamCompletionCreateParamsRequest$outboundSchema: z.ZodType<
  ChatStreamCompletionCreateParamsRequest$Outbound,
  z.ZodTypeDef,
  ChatStreamCompletionCreateParamsRequest
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatStreamCompletionCreateParamsRequest$ {
  /** @deprecated use `ChatStreamCompletionCreateParamsRequest$inboundSchema` instead. */
  export const inboundSchema =
    ChatStreamCompletionCreateParamsRequest$inboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsRequest$outboundSchema` instead. */
  export const outboundSchema =
    ChatStreamCompletionCreateParamsRequest$outboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsRequest$Outbound` instead. */
  export type Outbound = ChatStreamCompletionCreateParamsRequest$Outbound;
}

export function chatStreamCompletionCreateParamsRequestToJSON(
  chatStreamCompletionCreateParamsRequest:
    ChatStreamCompletionCreateParamsRequest,
): string {
  return JSON.stringify(
    ChatStreamCompletionCreateParamsRequest$outboundSchema.parse(
      chatStreamCompletionCreateParamsRequest,
    ),
  );
}

export function chatStreamCompletionCreateParamsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  ChatStreamCompletionCreateParamsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ChatStreamCompletionCreateParamsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ChatStreamCompletionCreateParamsRequest' from JSON`,
  );
}

/** @internal */
export const ChatStreamCompletionCreateParamsMaxPrice$inboundSchema: z.ZodType<
  ChatStreamCompletionCreateParamsMaxPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  prompt: z.union([z.number(), z.string(), z.any()]).optional(),
  completion: z.union([z.number(), z.string(), z.any()]).optional(),
  image: z.union([z.number(), z.string(), z.any()]).optional(),
  audio: z.union([z.number(), z.string(), z.any()]).optional(),
  request: z.union([z.number(), z.string(), z.any()]).optional(),
});

/** @internal */
export type ChatStreamCompletionCreateParamsMaxPrice$Outbound = {
  prompt?: number | string | any | undefined;
  completion?: number | string | any | undefined;
  image?: number | string | any | undefined;
  audio?: number | string | any | undefined;
  request?: number | string | any | undefined;
};

/** @internal */
export const ChatStreamCompletionCreateParamsMaxPrice$outboundSchema: z.ZodType<
  ChatStreamCompletionCreateParamsMaxPrice$Outbound,
  z.ZodTypeDef,
  ChatStreamCompletionCreateParamsMaxPrice
> = z.object({
  prompt: z.union([z.number(), z.string(), z.any()]).optional(),
  completion: z.union([z.number(), z.string(), z.any()]).optional(),
  image: z.union([z.number(), z.string(), z.any()]).optional(),
  audio: z.union([z.number(), z.string(), z.any()]).optional(),
  request: z.union([z.number(), z.string(), z.any()]).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatStreamCompletionCreateParamsMaxPrice$ {
  /** @deprecated use `ChatStreamCompletionCreateParamsMaxPrice$inboundSchema` instead. */
  export const inboundSchema =
    ChatStreamCompletionCreateParamsMaxPrice$inboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsMaxPrice$outboundSchema` instead. */
  export const outboundSchema =
    ChatStreamCompletionCreateParamsMaxPrice$outboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsMaxPrice$Outbound` instead. */
  export type Outbound = ChatStreamCompletionCreateParamsMaxPrice$Outbound;
}

export function chatStreamCompletionCreateParamsMaxPriceToJSON(
  chatStreamCompletionCreateParamsMaxPrice:
    ChatStreamCompletionCreateParamsMaxPrice,
): string {
  return JSON.stringify(
    ChatStreamCompletionCreateParamsMaxPrice$outboundSchema.parse(
      chatStreamCompletionCreateParamsMaxPrice,
    ),
  );
}

export function chatStreamCompletionCreateParamsMaxPriceFromJSON(
  jsonString: string,
): SafeParseResult<
  ChatStreamCompletionCreateParamsMaxPrice,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ChatStreamCompletionCreateParamsMaxPrice$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ChatStreamCompletionCreateParamsMaxPrice' from JSON`,
  );
}

/** @internal */
export const ChatStreamCompletionCreateParamsProvider$inboundSchema: z.ZodType<
  ChatStreamCompletionCreateParamsProvider,
  z.ZodTypeDef,
  unknown
> = z.object({
  allow_fallbacks: z.nullable(z.boolean()).optional(),
  require_parameters: z.nullable(z.boolean()).optional(),
  data_collection: z.nullable(
    ChatStreamCompletionCreateParamsDataCollection$inboundSchema,
  ).optional(),
  order: z.nullable(
    z.array(
      z.union([
        ChatStreamCompletionCreateParamsOrderEnum$inboundSchema,
        z.string(),
      ]),
    ),
  ).optional(),
  only: z.nullable(
    z.array(
      z.union([
        ChatStreamCompletionCreateParamsOnlyEnum$inboundSchema,
        z.string(),
      ]),
    ),
  ).optional(),
  ignore: z.nullable(
    z.array(
      z.union([
        ChatStreamCompletionCreateParamsIgnoreEnum$inboundSchema,
        z.string(),
      ]),
    ),
  ).optional(),
  quantizations: z.nullable(
    z.array(ChatStreamCompletionCreateParamsQuantization$inboundSchema),
  ).optional(),
  sort: z.nullable(ChatStreamCompletionCreateParamsSort$inboundSchema)
    .optional(),
  max_price: z.lazy(() =>
    ChatStreamCompletionCreateParamsMaxPrice$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "allow_fallbacks": "allowFallbacks",
    "require_parameters": "requireParameters",
    "data_collection": "dataCollection",
    "max_price": "maxPrice",
  });
});

/** @internal */
export type ChatStreamCompletionCreateParamsProvider$Outbound = {
  allow_fallbacks?: boolean | null | undefined;
  require_parameters?: boolean | null | undefined;
  data_collection?: string | null | undefined;
  order?: Array<string | string> | null | undefined;
  only?: Array<string | string> | null | undefined;
  ignore?: Array<string | string> | null | undefined;
  quantizations?: Array<string> | null | undefined;
  sort?: string | null | undefined;
  max_price?: ChatStreamCompletionCreateParamsMaxPrice$Outbound | undefined;
};

/** @internal */
export const ChatStreamCompletionCreateParamsProvider$outboundSchema: z.ZodType<
  ChatStreamCompletionCreateParamsProvider$Outbound,
  z.ZodTypeDef,
  ChatStreamCompletionCreateParamsProvider
> = z.object({
  allowFallbacks: z.nullable(z.boolean()).optional(),
  requireParameters: z.nullable(z.boolean()).optional(),
  dataCollection: z.nullable(
    ChatStreamCompletionCreateParamsDataCollection$outboundSchema,
  ).optional(),
  order: z.nullable(
    z.array(
      z.union([
        ChatStreamCompletionCreateParamsOrderEnum$outboundSchema,
        z.string(),
      ]),
    ),
  ).optional(),
  only: z.nullable(
    z.array(
      z.union([
        ChatStreamCompletionCreateParamsOnlyEnum$outboundSchema,
        z.string(),
      ]),
    ),
  ).optional(),
  ignore: z.nullable(
    z.array(
      z.union([
        ChatStreamCompletionCreateParamsIgnoreEnum$outboundSchema,
        z.string(),
      ]),
    ),
  ).optional(),
  quantizations: z.nullable(
    z.array(ChatStreamCompletionCreateParamsQuantization$outboundSchema),
  ).optional(),
  sort: z.nullable(ChatStreamCompletionCreateParamsSort$outboundSchema)
    .optional(),
  maxPrice: z.lazy(() =>
    ChatStreamCompletionCreateParamsMaxPrice$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    allowFallbacks: "allow_fallbacks",
    requireParameters: "require_parameters",
    dataCollection: "data_collection",
    maxPrice: "max_price",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatStreamCompletionCreateParamsProvider$ {
  /** @deprecated use `ChatStreamCompletionCreateParamsProvider$inboundSchema` instead. */
  export const inboundSchema =
    ChatStreamCompletionCreateParamsProvider$inboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsProvider$outboundSchema` instead. */
  export const outboundSchema =
    ChatStreamCompletionCreateParamsProvider$outboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsProvider$Outbound` instead. */
  export type Outbound = ChatStreamCompletionCreateParamsProvider$Outbound;
}

export function chatStreamCompletionCreateParamsProviderToJSON(
  chatStreamCompletionCreateParamsProvider:
    ChatStreamCompletionCreateParamsProvider,
): string {
  return JSON.stringify(
    ChatStreamCompletionCreateParamsProvider$outboundSchema.parse(
      chatStreamCompletionCreateParamsProvider,
    ),
  );
}

export function chatStreamCompletionCreateParamsProviderFromJSON(
  jsonString: string,
): SafeParseResult<
  ChatStreamCompletionCreateParamsProvider,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ChatStreamCompletionCreateParamsProvider$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ChatStreamCompletionCreateParamsProvider' from JSON`,
  );
}

/** @internal */
export const ChatStreamCompletionCreateParamsIdFileParser$inboundSchema:
  z.ZodNativeEnum<typeof ChatStreamCompletionCreateParamsIdFileParser> = z
    .nativeEnum(ChatStreamCompletionCreateParamsIdFileParser);

/** @internal */
export const ChatStreamCompletionCreateParamsIdFileParser$outboundSchema:
  z.ZodNativeEnum<typeof ChatStreamCompletionCreateParamsIdFileParser> =
    ChatStreamCompletionCreateParamsIdFileParser$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatStreamCompletionCreateParamsIdFileParser$ {
  /** @deprecated use `ChatStreamCompletionCreateParamsIdFileParser$inboundSchema` instead. */
  export const inboundSchema =
    ChatStreamCompletionCreateParamsIdFileParser$inboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsIdFileParser$outboundSchema` instead. */
  export const outboundSchema =
    ChatStreamCompletionCreateParamsIdFileParser$outboundSchema;
}

/** @internal */
export const ChatStreamCompletionCreateParamsPdfEngine$inboundSchema:
  z.ZodNativeEnum<typeof ChatStreamCompletionCreateParamsPdfEngine> = z
    .nativeEnum(ChatStreamCompletionCreateParamsPdfEngine);

/** @internal */
export const ChatStreamCompletionCreateParamsPdfEngine$outboundSchema:
  z.ZodNativeEnum<typeof ChatStreamCompletionCreateParamsPdfEngine> =
    ChatStreamCompletionCreateParamsPdfEngine$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatStreamCompletionCreateParamsPdfEngine$ {
  /** @deprecated use `ChatStreamCompletionCreateParamsPdfEngine$inboundSchema` instead. */
  export const inboundSchema =
    ChatStreamCompletionCreateParamsPdfEngine$inboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsPdfEngine$outboundSchema` instead. */
  export const outboundSchema =
    ChatStreamCompletionCreateParamsPdfEngine$outboundSchema;
}

/** @internal */
export const ChatStreamCompletionCreateParamsPdf$inboundSchema: z.ZodType<
  ChatStreamCompletionCreateParamsPdf,
  z.ZodTypeDef,
  unknown
> = z.object({
  engine: ChatStreamCompletionCreateParamsPdfEngine$inboundSchema.optional(),
});

/** @internal */
export type ChatStreamCompletionCreateParamsPdf$Outbound = {
  engine?: string | undefined;
};

/** @internal */
export const ChatStreamCompletionCreateParamsPdf$outboundSchema: z.ZodType<
  ChatStreamCompletionCreateParamsPdf$Outbound,
  z.ZodTypeDef,
  ChatStreamCompletionCreateParamsPdf
> = z.object({
  engine: ChatStreamCompletionCreateParamsPdfEngine$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatStreamCompletionCreateParamsPdf$ {
  /** @deprecated use `ChatStreamCompletionCreateParamsPdf$inboundSchema` instead. */
  export const inboundSchema =
    ChatStreamCompletionCreateParamsPdf$inboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsPdf$outboundSchema` instead. */
  export const outboundSchema =
    ChatStreamCompletionCreateParamsPdf$outboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsPdf$Outbound` instead. */
  export type Outbound = ChatStreamCompletionCreateParamsPdf$Outbound;
}

export function chatStreamCompletionCreateParamsPdfToJSON(
  chatStreamCompletionCreateParamsPdf: ChatStreamCompletionCreateParamsPdf,
): string {
  return JSON.stringify(
    ChatStreamCompletionCreateParamsPdf$outboundSchema.parse(
      chatStreamCompletionCreateParamsPdf,
    ),
  );
}

export function chatStreamCompletionCreateParamsPdfFromJSON(
  jsonString: string,
): SafeParseResult<ChatStreamCompletionCreateParamsPdf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ChatStreamCompletionCreateParamsPdf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatStreamCompletionCreateParamsPdf' from JSON`,
  );
}

/** @internal */
export const ChatStreamCompletionCreateParamsPluginFileParser$inboundSchema:
  z.ZodType<
    ChatStreamCompletionCreateParamsPluginFileParser,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: ChatStreamCompletionCreateParamsIdFileParser$inboundSchema,
    max_files: z.number().optional(),
    pdf: z.lazy(() => ChatStreamCompletionCreateParamsPdf$inboundSchema)
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      "max_files": "maxFiles",
    });
  });

/** @internal */
export type ChatStreamCompletionCreateParamsPluginFileParser$Outbound = {
  id: string;
  max_files?: number | undefined;
  pdf?: ChatStreamCompletionCreateParamsPdf$Outbound | undefined;
};

/** @internal */
export const ChatStreamCompletionCreateParamsPluginFileParser$outboundSchema:
  z.ZodType<
    ChatStreamCompletionCreateParamsPluginFileParser$Outbound,
    z.ZodTypeDef,
    ChatStreamCompletionCreateParamsPluginFileParser
  > = z.object({
    id: ChatStreamCompletionCreateParamsIdFileParser$outboundSchema,
    maxFiles: z.number().optional(),
    pdf: z.lazy(() => ChatStreamCompletionCreateParamsPdf$outboundSchema)
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      maxFiles: "max_files",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatStreamCompletionCreateParamsPluginFileParser$ {
  /** @deprecated use `ChatStreamCompletionCreateParamsPluginFileParser$inboundSchema` instead. */
  export const inboundSchema =
    ChatStreamCompletionCreateParamsPluginFileParser$inboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsPluginFileParser$outboundSchema` instead. */
  export const outboundSchema =
    ChatStreamCompletionCreateParamsPluginFileParser$outboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsPluginFileParser$Outbound` instead. */
  export type Outbound =
    ChatStreamCompletionCreateParamsPluginFileParser$Outbound;
}

export function chatStreamCompletionCreateParamsPluginFileParserToJSON(
  chatStreamCompletionCreateParamsPluginFileParser:
    ChatStreamCompletionCreateParamsPluginFileParser,
): string {
  return JSON.stringify(
    ChatStreamCompletionCreateParamsPluginFileParser$outboundSchema.parse(
      chatStreamCompletionCreateParamsPluginFileParser,
    ),
  );
}

export function chatStreamCompletionCreateParamsPluginFileParserFromJSON(
  jsonString: string,
): SafeParseResult<
  ChatStreamCompletionCreateParamsPluginFileParser,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ChatStreamCompletionCreateParamsPluginFileParser$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ChatStreamCompletionCreateParamsPluginFileParser' from JSON`,
  );
}

/** @internal */
export const ChatStreamCompletionCreateParamsIdChainOfThought$inboundSchema:
  z.ZodNativeEnum<typeof ChatStreamCompletionCreateParamsIdChainOfThought> = z
    .nativeEnum(ChatStreamCompletionCreateParamsIdChainOfThought);

/** @internal */
export const ChatStreamCompletionCreateParamsIdChainOfThought$outboundSchema:
  z.ZodNativeEnum<typeof ChatStreamCompletionCreateParamsIdChainOfThought> =
    ChatStreamCompletionCreateParamsIdChainOfThought$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatStreamCompletionCreateParamsIdChainOfThought$ {
  /** @deprecated use `ChatStreamCompletionCreateParamsIdChainOfThought$inboundSchema` instead. */
  export const inboundSchema =
    ChatStreamCompletionCreateParamsIdChainOfThought$inboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsIdChainOfThought$outboundSchema` instead. */
  export const outboundSchema =
    ChatStreamCompletionCreateParamsIdChainOfThought$outboundSchema;
}

/** @internal */
export const ChatStreamCompletionCreateParamsPluginChainOfThought$inboundSchema:
  z.ZodType<
    ChatStreamCompletionCreateParamsPluginChainOfThought,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: ChatStreamCompletionCreateParamsIdChainOfThought$inboundSchema,
  });

/** @internal */
export type ChatStreamCompletionCreateParamsPluginChainOfThought$Outbound = {
  id: string;
};

/** @internal */
export const ChatStreamCompletionCreateParamsPluginChainOfThought$outboundSchema:
  z.ZodType<
    ChatStreamCompletionCreateParamsPluginChainOfThought$Outbound,
    z.ZodTypeDef,
    ChatStreamCompletionCreateParamsPluginChainOfThought
  > = z.object({
    id: ChatStreamCompletionCreateParamsIdChainOfThought$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatStreamCompletionCreateParamsPluginChainOfThought$ {
  /** @deprecated use `ChatStreamCompletionCreateParamsPluginChainOfThought$inboundSchema` instead. */
  export const inboundSchema =
    ChatStreamCompletionCreateParamsPluginChainOfThought$inboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsPluginChainOfThought$outboundSchema` instead. */
  export const outboundSchema =
    ChatStreamCompletionCreateParamsPluginChainOfThought$outboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsPluginChainOfThought$Outbound` instead. */
  export type Outbound =
    ChatStreamCompletionCreateParamsPluginChainOfThought$Outbound;
}

export function chatStreamCompletionCreateParamsPluginChainOfThoughtToJSON(
  chatStreamCompletionCreateParamsPluginChainOfThought:
    ChatStreamCompletionCreateParamsPluginChainOfThought,
): string {
  return JSON.stringify(
    ChatStreamCompletionCreateParamsPluginChainOfThought$outboundSchema.parse(
      chatStreamCompletionCreateParamsPluginChainOfThought,
    ),
  );
}

export function chatStreamCompletionCreateParamsPluginChainOfThoughtFromJSON(
  jsonString: string,
): SafeParseResult<
  ChatStreamCompletionCreateParamsPluginChainOfThought,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ChatStreamCompletionCreateParamsPluginChainOfThought$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ChatStreamCompletionCreateParamsPluginChainOfThought' from JSON`,
  );
}

/** @internal */
export const ChatStreamCompletionCreateParamsIdWeb$inboundSchema:
  z.ZodNativeEnum<typeof ChatStreamCompletionCreateParamsIdWeb> = z.nativeEnum(
    ChatStreamCompletionCreateParamsIdWeb,
  );

/** @internal */
export const ChatStreamCompletionCreateParamsIdWeb$outboundSchema:
  z.ZodNativeEnum<typeof ChatStreamCompletionCreateParamsIdWeb> =
    ChatStreamCompletionCreateParamsIdWeb$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatStreamCompletionCreateParamsIdWeb$ {
  /** @deprecated use `ChatStreamCompletionCreateParamsIdWeb$inboundSchema` instead. */
  export const inboundSchema =
    ChatStreamCompletionCreateParamsIdWeb$inboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsIdWeb$outboundSchema` instead. */
  export const outboundSchema =
    ChatStreamCompletionCreateParamsIdWeb$outboundSchema;
}

/** @internal */
export const ChatStreamCompletionCreateParamsEngine$inboundSchema:
  z.ZodNativeEnum<typeof ChatStreamCompletionCreateParamsEngine> = z.nativeEnum(
    ChatStreamCompletionCreateParamsEngine,
  );

/** @internal */
export const ChatStreamCompletionCreateParamsEngine$outboundSchema:
  z.ZodNativeEnum<typeof ChatStreamCompletionCreateParamsEngine> =
    ChatStreamCompletionCreateParamsEngine$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatStreamCompletionCreateParamsEngine$ {
  /** @deprecated use `ChatStreamCompletionCreateParamsEngine$inboundSchema` instead. */
  export const inboundSchema =
    ChatStreamCompletionCreateParamsEngine$inboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsEngine$outboundSchema` instead. */
  export const outboundSchema =
    ChatStreamCompletionCreateParamsEngine$outboundSchema;
}

/** @internal */
export const ChatStreamCompletionCreateParamsPluginWeb$inboundSchema: z.ZodType<
  ChatStreamCompletionCreateParamsPluginWeb,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: ChatStreamCompletionCreateParamsIdWeb$inboundSchema,
  max_results: z.number().optional(),
  search_prompt: z.string().optional(),
  engine: ChatStreamCompletionCreateParamsEngine$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "max_results": "maxResults",
    "search_prompt": "searchPrompt",
  });
});

/** @internal */
export type ChatStreamCompletionCreateParamsPluginWeb$Outbound = {
  id: string;
  max_results?: number | undefined;
  search_prompt?: string | undefined;
  engine?: string | undefined;
};

/** @internal */
export const ChatStreamCompletionCreateParamsPluginWeb$outboundSchema:
  z.ZodType<
    ChatStreamCompletionCreateParamsPluginWeb$Outbound,
    z.ZodTypeDef,
    ChatStreamCompletionCreateParamsPluginWeb
  > = z.object({
    id: ChatStreamCompletionCreateParamsIdWeb$outboundSchema,
    maxResults: z.number().optional(),
    searchPrompt: z.string().optional(),
    engine: ChatStreamCompletionCreateParamsEngine$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      maxResults: "max_results",
      searchPrompt: "search_prompt",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatStreamCompletionCreateParamsPluginWeb$ {
  /** @deprecated use `ChatStreamCompletionCreateParamsPluginWeb$inboundSchema` instead. */
  export const inboundSchema =
    ChatStreamCompletionCreateParamsPluginWeb$inboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsPluginWeb$outboundSchema` instead. */
  export const outboundSchema =
    ChatStreamCompletionCreateParamsPluginWeb$outboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsPluginWeb$Outbound` instead. */
  export type Outbound = ChatStreamCompletionCreateParamsPluginWeb$Outbound;
}

export function chatStreamCompletionCreateParamsPluginWebToJSON(
  chatStreamCompletionCreateParamsPluginWeb:
    ChatStreamCompletionCreateParamsPluginWeb,
): string {
  return JSON.stringify(
    ChatStreamCompletionCreateParamsPluginWeb$outboundSchema.parse(
      chatStreamCompletionCreateParamsPluginWeb,
    ),
  );
}

export function chatStreamCompletionCreateParamsPluginWebFromJSON(
  jsonString: string,
): SafeParseResult<
  ChatStreamCompletionCreateParamsPluginWeb,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ChatStreamCompletionCreateParamsPluginWeb$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ChatStreamCompletionCreateParamsPluginWeb' from JSON`,
  );
}

/** @internal */
export const ChatStreamCompletionCreateParamsIdModeration$inboundSchema:
  z.ZodNativeEnum<typeof ChatStreamCompletionCreateParamsIdModeration> = z
    .nativeEnum(ChatStreamCompletionCreateParamsIdModeration);

/** @internal */
export const ChatStreamCompletionCreateParamsIdModeration$outboundSchema:
  z.ZodNativeEnum<typeof ChatStreamCompletionCreateParamsIdModeration> =
    ChatStreamCompletionCreateParamsIdModeration$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatStreamCompletionCreateParamsIdModeration$ {
  /** @deprecated use `ChatStreamCompletionCreateParamsIdModeration$inboundSchema` instead. */
  export const inboundSchema =
    ChatStreamCompletionCreateParamsIdModeration$inboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsIdModeration$outboundSchema` instead. */
  export const outboundSchema =
    ChatStreamCompletionCreateParamsIdModeration$outboundSchema;
}

/** @internal */
export const ChatStreamCompletionCreateParamsPluginModeration$inboundSchema:
  z.ZodType<
    ChatStreamCompletionCreateParamsPluginModeration,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: ChatStreamCompletionCreateParamsIdModeration$inboundSchema,
  });

/** @internal */
export type ChatStreamCompletionCreateParamsPluginModeration$Outbound = {
  id: string;
};

/** @internal */
export const ChatStreamCompletionCreateParamsPluginModeration$outboundSchema:
  z.ZodType<
    ChatStreamCompletionCreateParamsPluginModeration$Outbound,
    z.ZodTypeDef,
    ChatStreamCompletionCreateParamsPluginModeration
  > = z.object({
    id: ChatStreamCompletionCreateParamsIdModeration$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatStreamCompletionCreateParamsPluginModeration$ {
  /** @deprecated use `ChatStreamCompletionCreateParamsPluginModeration$inboundSchema` instead. */
  export const inboundSchema =
    ChatStreamCompletionCreateParamsPluginModeration$inboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsPluginModeration$outboundSchema` instead. */
  export const outboundSchema =
    ChatStreamCompletionCreateParamsPluginModeration$outboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsPluginModeration$Outbound` instead. */
  export type Outbound =
    ChatStreamCompletionCreateParamsPluginModeration$Outbound;
}

export function chatStreamCompletionCreateParamsPluginModerationToJSON(
  chatStreamCompletionCreateParamsPluginModeration:
    ChatStreamCompletionCreateParamsPluginModeration,
): string {
  return JSON.stringify(
    ChatStreamCompletionCreateParamsPluginModeration$outboundSchema.parse(
      chatStreamCompletionCreateParamsPluginModeration,
    ),
  );
}

export function chatStreamCompletionCreateParamsPluginModerationFromJSON(
  jsonString: string,
): SafeParseResult<
  ChatStreamCompletionCreateParamsPluginModeration,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ChatStreamCompletionCreateParamsPluginModeration$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ChatStreamCompletionCreateParamsPluginModeration' from JSON`,
  );
}

/** @internal */
export const ChatStreamCompletionCreateParamsPluginUnion$inboundSchema:
  z.ZodType<
    ChatStreamCompletionCreateParamsPluginUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      ChatStreamCompletionCreateParamsPluginModeration$inboundSchema
    ),
    z.lazy(() => ChatStreamCompletionCreateParamsPluginWeb$inboundSchema),
    z.lazy(() =>
      ChatStreamCompletionCreateParamsPluginChainOfThought$inboundSchema
    ),
    z.lazy(() =>
      ChatStreamCompletionCreateParamsPluginFileParser$inboundSchema
    ),
  ]);

/** @internal */
export type ChatStreamCompletionCreateParamsPluginUnion$Outbound =
  | ChatStreamCompletionCreateParamsPluginModeration$Outbound
  | ChatStreamCompletionCreateParamsPluginWeb$Outbound
  | ChatStreamCompletionCreateParamsPluginChainOfThought$Outbound
  | ChatStreamCompletionCreateParamsPluginFileParser$Outbound;

/** @internal */
export const ChatStreamCompletionCreateParamsPluginUnion$outboundSchema:
  z.ZodType<
    ChatStreamCompletionCreateParamsPluginUnion$Outbound,
    z.ZodTypeDef,
    ChatStreamCompletionCreateParamsPluginUnion
  > = z.union([
    z.lazy(() =>
      ChatStreamCompletionCreateParamsPluginModeration$outboundSchema
    ),
    z.lazy(() => ChatStreamCompletionCreateParamsPluginWeb$outboundSchema),
    z.lazy(() =>
      ChatStreamCompletionCreateParamsPluginChainOfThought$outboundSchema
    ),
    z.lazy(() =>
      ChatStreamCompletionCreateParamsPluginFileParser$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatStreamCompletionCreateParamsPluginUnion$ {
  /** @deprecated use `ChatStreamCompletionCreateParamsPluginUnion$inboundSchema` instead. */
  export const inboundSchema =
    ChatStreamCompletionCreateParamsPluginUnion$inboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsPluginUnion$outboundSchema` instead. */
  export const outboundSchema =
    ChatStreamCompletionCreateParamsPluginUnion$outboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParamsPluginUnion$Outbound` instead. */
  export type Outbound = ChatStreamCompletionCreateParamsPluginUnion$Outbound;
}

export function chatStreamCompletionCreateParamsPluginUnionToJSON(
  chatStreamCompletionCreateParamsPluginUnion:
    ChatStreamCompletionCreateParamsPluginUnion,
): string {
  return JSON.stringify(
    ChatStreamCompletionCreateParamsPluginUnion$outboundSchema.parse(
      chatStreamCompletionCreateParamsPluginUnion,
    ),
  );
}

export function chatStreamCompletionCreateParamsPluginUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  ChatStreamCompletionCreateParamsPluginUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ChatStreamCompletionCreateParamsPluginUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ChatStreamCompletionCreateParamsPluginUnion' from JSON`,
  );
}

/** @internal */
export const ChatStreamCompletionCreateParams$inboundSchema: z.ZodType<
  ChatStreamCompletionCreateParams,
  z.ZodTypeDef,
  unknown
> = z.object({
  messages: z.array(ChatCompletionMessageParam$inboundSchema),
  model: z.string().optional(),
  frequency_penalty: z.nullable(z.number()).optional(),
  logit_bias: z.nullable(z.record(z.number())).optional(),
  logprobs: z.nullable(z.boolean()).optional(),
  top_logprobs: z.nullable(z.number()).optional(),
  max_completion_tokens: z.nullable(z.number()).optional(),
  max_tokens: z.nullable(z.number()).optional(),
  metadata: z.record(z.string()).optional(),
  presence_penalty: z.nullable(z.number()).optional(),
  reasoning: z.nullable(
    z.lazy(() => ChatStreamCompletionCreateParamsReasoning$inboundSchema),
  ).optional(),
  response_format: z.union([
    z.lazy(() =>
      ChatStreamCompletionCreateParamsResponseFormatJSONSchema$inboundSchema
    ),
    z.lazy(() =>
      ChatStreamCompletionCreateParamsResponseFormatGrammar$inboundSchema
    ),
    z.lazy(() =>
      ChatStreamCompletionCreateParamsResponseFormatText$inboundSchema
    ),
    z.lazy(() =>
      ChatStreamCompletionCreateParamsResponseFormatJSONObject$inboundSchema
    ),
    z.lazy(() =>
      ChatStreamCompletionCreateParamsResponseFormatPython$inboundSchema
    ),
  ]).optional(),
  seed: z.nullable(z.number().int()).optional(),
  stop: z.nullable(z.union([z.string(), z.array(z.string()), z.any()]))
    .optional(),
  stream: z.boolean().default(true),
  stream_options: z.nullable(
    z.lazy(() => ChatStreamCompletionCreateParamsStreamOptions$inboundSchema),
  ).optional(),
  temperature: z.nullable(z.number().default(1)),
  tool_choice: ChatCompletionToolChoiceOption$inboundSchema.optional(),
  tools: z.array(ChatCompletionTool$inboundSchema).optional(),
  top_p: z.nullable(z.number().default(1)),
  user: z.string().optional(),
  models: z.nullable(z.array(z.string())).optional(),
  reasoning_effort: z.nullable(
    ChatStreamCompletionCreateParamsReasoningEffort$inboundSchema,
  ).optional(),
  provider: z.nullable(
    z.lazy(() => ChatStreamCompletionCreateParamsProvider$inboundSchema),
  ).optional(),
  plugins: z.array(
    z.union([
      z.lazy(() =>
        ChatStreamCompletionCreateParamsPluginModeration$inboundSchema
      ),
      z.lazy(() => ChatStreamCompletionCreateParamsPluginWeb$inboundSchema),
      z.lazy(() =>
        ChatStreamCompletionCreateParamsPluginChainOfThought$inboundSchema
      ),
      z.lazy(() =>
        ChatStreamCompletionCreateParamsPluginFileParser$inboundSchema
      ),
    ]),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "frequency_penalty": "frequencyPenalty",
    "logit_bias": "logitBias",
    "top_logprobs": "topLogprobs",
    "max_completion_tokens": "maxCompletionTokens",
    "max_tokens": "maxTokens",
    "presence_penalty": "presencePenalty",
    "response_format": "responseFormat",
    "stream_options": "streamOptions",
    "tool_choice": "toolChoice",
    "top_p": "topP",
    "reasoning_effort": "reasoningEffort",
  });
});

/** @internal */
export type ChatStreamCompletionCreateParams$Outbound = {
  messages: Array<ChatCompletionMessageParam$Outbound>;
  model?: string | undefined;
  frequency_penalty?: number | null | undefined;
  logit_bias?: { [k: string]: number } | null | undefined;
  logprobs?: boolean | null | undefined;
  top_logprobs?: number | null | undefined;
  max_completion_tokens?: number | null | undefined;
  max_tokens?: number | null | undefined;
  metadata?: { [k: string]: string } | undefined;
  presence_penalty?: number | null | undefined;
  reasoning?:
    | ChatStreamCompletionCreateParamsReasoning$Outbound
    | null
    | undefined;
  response_format?:
    | ChatStreamCompletionCreateParamsResponseFormatJSONSchema$Outbound
    | ChatStreamCompletionCreateParamsResponseFormatGrammar$Outbound
    | ChatStreamCompletionCreateParamsResponseFormatText$Outbound
    | ChatStreamCompletionCreateParamsResponseFormatJSONObject$Outbound
    | ChatStreamCompletionCreateParamsResponseFormatPython$Outbound
    | undefined;
  seed?: number | null | undefined;
  stop?: string | Array<string> | any | null | undefined;
  stream: boolean;
  stream_options?:
    | ChatStreamCompletionCreateParamsStreamOptions$Outbound
    | null
    | undefined;
  temperature: number | null;
  tool_choice?: ChatCompletionToolChoiceOption$Outbound | undefined;
  tools?: Array<ChatCompletionTool$Outbound> | undefined;
  top_p: number | null;
  user?: string | undefined;
  models?: Array<string> | null | undefined;
  reasoning_effort?: string | null | undefined;
  provider?:
    | ChatStreamCompletionCreateParamsProvider$Outbound
    | null
    | undefined;
  plugins?:
    | Array<
      | ChatStreamCompletionCreateParamsPluginModeration$Outbound
      | ChatStreamCompletionCreateParamsPluginWeb$Outbound
      | ChatStreamCompletionCreateParamsPluginChainOfThought$Outbound
      | ChatStreamCompletionCreateParamsPluginFileParser$Outbound
    >
    | undefined;
};

/** @internal */
export const ChatStreamCompletionCreateParams$outboundSchema: z.ZodType<
  ChatStreamCompletionCreateParams$Outbound,
  z.ZodTypeDef,
  ChatStreamCompletionCreateParams
> = z.object({
  messages: z.array(ChatCompletionMessageParam$outboundSchema),
  model: z.string().optional(),
  frequencyPenalty: z.nullable(z.number()).optional(),
  logitBias: z.nullable(z.record(z.number())).optional(),
  logprobs: z.nullable(z.boolean()).optional(),
  topLogprobs: z.nullable(z.number()).optional(),
  maxCompletionTokens: z.nullable(z.number()).optional(),
  maxTokens: z.nullable(z.number()).optional(),
  metadata: z.record(z.string()).optional(),
  presencePenalty: z.nullable(z.number()).optional(),
  reasoning: z.nullable(
    z.lazy(() => ChatStreamCompletionCreateParamsReasoning$outboundSchema),
  ).optional(),
  responseFormat: z.union([
    z.lazy(() =>
      ChatStreamCompletionCreateParamsResponseFormatJSONSchema$outboundSchema
    ),
    z.lazy(() =>
      ChatStreamCompletionCreateParamsResponseFormatGrammar$outboundSchema
    ),
    z.lazy(() =>
      ChatStreamCompletionCreateParamsResponseFormatText$outboundSchema
    ),
    z.lazy(() =>
      ChatStreamCompletionCreateParamsResponseFormatJSONObject$outboundSchema
    ),
    z.lazy(() =>
      ChatStreamCompletionCreateParamsResponseFormatPython$outboundSchema
    ),
  ]).optional(),
  seed: z.nullable(z.number().int()).optional(),
  stop: z.nullable(z.union([z.string(), z.array(z.string()), z.any()]))
    .optional(),
  stream: z.boolean().default(true),
  streamOptions: z.nullable(
    z.lazy(() => ChatStreamCompletionCreateParamsStreamOptions$outboundSchema),
  ).optional(),
  temperature: z.nullable(z.number().default(1)),
  toolChoice: ChatCompletionToolChoiceOption$outboundSchema.optional(),
  tools: z.array(ChatCompletionTool$outboundSchema).optional(),
  topP: z.nullable(z.number().default(1)),
  user: z.string().optional(),
  models: z.nullable(z.array(z.string())).optional(),
  reasoningEffort: z.nullable(
    ChatStreamCompletionCreateParamsReasoningEffort$outboundSchema,
  ).optional(),
  provider: z.nullable(
    z.lazy(() => ChatStreamCompletionCreateParamsProvider$outboundSchema),
  ).optional(),
  plugins: z.array(
    z.union([
      z.lazy(() =>
        ChatStreamCompletionCreateParamsPluginModeration$outboundSchema
      ),
      z.lazy(() => ChatStreamCompletionCreateParamsPluginWeb$outboundSchema),
      z.lazy(() =>
        ChatStreamCompletionCreateParamsPluginChainOfThought$outboundSchema
      ),
      z.lazy(() =>
        ChatStreamCompletionCreateParamsPluginFileParser$outboundSchema
      ),
    ]),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    frequencyPenalty: "frequency_penalty",
    logitBias: "logit_bias",
    topLogprobs: "top_logprobs",
    maxCompletionTokens: "max_completion_tokens",
    maxTokens: "max_tokens",
    presencePenalty: "presence_penalty",
    responseFormat: "response_format",
    streamOptions: "stream_options",
    toolChoice: "tool_choice",
    topP: "top_p",
    reasoningEffort: "reasoning_effort",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatStreamCompletionCreateParams$ {
  /** @deprecated use `ChatStreamCompletionCreateParams$inboundSchema` instead. */
  export const inboundSchema = ChatStreamCompletionCreateParams$inboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParams$outboundSchema` instead. */
  export const outboundSchema = ChatStreamCompletionCreateParams$outboundSchema;
  /** @deprecated use `ChatStreamCompletionCreateParams$Outbound` instead. */
  export type Outbound = ChatStreamCompletionCreateParams$Outbound;
}

export function chatStreamCompletionCreateParamsToJSON(
  chatStreamCompletionCreateParams: ChatStreamCompletionCreateParams,
): string {
  return JSON.stringify(
    ChatStreamCompletionCreateParams$outboundSchema.parse(
      chatStreamCompletionCreateParams,
    ),
  );
}

export function chatStreamCompletionCreateParamsFromJSON(
  jsonString: string,
): SafeParseResult<ChatStreamCompletionCreateParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatStreamCompletionCreateParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatStreamCompletionCreateParams' from JSON`,
  );
}
