/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  ClosedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const OpenResponsesInputImageType = {
  InputImage: "input_image",
} as const;
export type OpenResponsesInputImageType = ClosedEnum<
  typeof OpenResponsesInputImageType
>;

export const OpenResponsesInputImageDetail = {
  Auto: "auto",
  High: "high",
  Low: "low",
} as const;
export type OpenResponsesInputImageDetail = OpenEnum<
  typeof OpenResponsesInputImageDetail
>;

/**
 * Image input content item
 */
export type OpenResponsesInputImage = {
  type: OpenResponsesInputImageType;
  detail: OpenResponsesInputImageDetail;
  imageUrl?: string | null | undefined;
};

/** @internal */
export const OpenResponsesInputImageType$inboundSchema: z.ZodNativeEnum<
  typeof OpenResponsesInputImageType
> = z.nativeEnum(OpenResponsesInputImageType);

/** @internal */
export const OpenResponsesInputImageType$outboundSchema: z.ZodNativeEnum<
  typeof OpenResponsesInputImageType
> = OpenResponsesInputImageType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesInputImageType$ {
  /** @deprecated use `OpenResponsesInputImageType$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesInputImageType$inboundSchema;
  /** @deprecated use `OpenResponsesInputImageType$outboundSchema` instead. */
  export const outboundSchema = OpenResponsesInputImageType$outboundSchema;
}

/** @internal */
export const OpenResponsesInputImageDetail$inboundSchema: z.ZodType<
  OpenResponsesInputImageDetail,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OpenResponsesInputImageDetail),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OpenResponsesInputImageDetail$outboundSchema: z.ZodType<
  OpenResponsesInputImageDetail,
  z.ZodTypeDef,
  OpenResponsesInputImageDetail
> = z.union([
  z.nativeEnum(OpenResponsesInputImageDetail),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesInputImageDetail$ {
  /** @deprecated use `OpenResponsesInputImageDetail$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesInputImageDetail$inboundSchema;
  /** @deprecated use `OpenResponsesInputImageDetail$outboundSchema` instead. */
  export const outboundSchema = OpenResponsesInputImageDetail$outboundSchema;
}

/** @internal */
export const OpenResponsesInputImage$inboundSchema: z.ZodType<
  OpenResponsesInputImage,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: OpenResponsesInputImageType$inboundSchema,
  detail: OpenResponsesInputImageDetail$inboundSchema,
  image_url: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type OpenResponsesInputImage$Outbound = {
  type: string;
  detail: string;
  image_url?: string | null | undefined;
};

/** @internal */
export const OpenResponsesInputImage$outboundSchema: z.ZodType<
  OpenResponsesInputImage$Outbound,
  z.ZodTypeDef,
  OpenResponsesInputImage
> = z.object({
  type: OpenResponsesInputImageType$outboundSchema,
  detail: OpenResponsesInputImageDetail$outboundSchema,
  imageUrl: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesInputImage$ {
  /** @deprecated use `OpenResponsesInputImage$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesInputImage$inboundSchema;
  /** @deprecated use `OpenResponsesInputImage$outboundSchema` instead. */
  export const outboundSchema = OpenResponsesInputImage$outboundSchema;
  /** @deprecated use `OpenResponsesInputImage$Outbound` instead. */
  export type Outbound = OpenResponsesInputImage$Outbound;
}

export function openResponsesInputImageToJSON(
  openResponsesInputImage: OpenResponsesInputImage,
): string {
  return JSON.stringify(
    OpenResponsesInputImage$outboundSchema.parse(openResponsesInputImage),
  );
}

export function openResponsesInputImageFromJSON(
  jsonString: string,
): SafeParseResult<OpenResponsesInputImage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenResponsesInputImage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenResponsesInputImage' from JSON`,
  );
}
