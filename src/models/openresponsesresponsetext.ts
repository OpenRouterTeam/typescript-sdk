/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ResponseFormatTextConfig,
  ResponseFormatTextConfig$inboundSchema,
  ResponseFormatTextConfig$Outbound,
  ResponseFormatTextConfig$outboundSchema,
} from "./responseformattextconfig.js";

export const OpenResponsesResponseTextVerbosity = {
  High: "high",
  Low: "low",
  Medium: "medium",
} as const;
export type OpenResponsesResponseTextVerbosity = OpenEnum<
  typeof OpenResponsesResponseTextVerbosity
>;

/**
 * Text output configuration including format and verbosity
 */
export type OpenResponsesResponseText = {
  /**
   * Text response format configuration
   */
  format?: ResponseFormatTextConfig | undefined;
  verbosity?: OpenResponsesResponseTextVerbosity | null | undefined;
};

/** @internal */
export const OpenResponsesResponseTextVerbosity$inboundSchema: z.ZodType<
  OpenResponsesResponseTextVerbosity,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OpenResponsesResponseTextVerbosity),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OpenResponsesResponseTextVerbosity$outboundSchema: z.ZodType<
  OpenResponsesResponseTextVerbosity,
  z.ZodTypeDef,
  OpenResponsesResponseTextVerbosity
> = z.union([
  z.nativeEnum(OpenResponsesResponseTextVerbosity),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesResponseTextVerbosity$ {
  /** @deprecated use `OpenResponsesResponseTextVerbosity$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesResponseTextVerbosity$inboundSchema;
  /** @deprecated use `OpenResponsesResponseTextVerbosity$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesResponseTextVerbosity$outboundSchema;
}

/** @internal */
export const OpenResponsesResponseText$inboundSchema: z.ZodType<
  OpenResponsesResponseText,
  z.ZodTypeDef,
  unknown
> = z.object({
  format: ResponseFormatTextConfig$inboundSchema.optional(),
  verbosity: z.nullable(OpenResponsesResponseTextVerbosity$inboundSchema)
    .optional(),
});

/** @internal */
export type OpenResponsesResponseText$Outbound = {
  format?: ResponseFormatTextConfig$Outbound | undefined;
  verbosity?: string | null | undefined;
};

/** @internal */
export const OpenResponsesResponseText$outboundSchema: z.ZodType<
  OpenResponsesResponseText$Outbound,
  z.ZodTypeDef,
  OpenResponsesResponseText
> = z.object({
  format: ResponseFormatTextConfig$outboundSchema.optional(),
  verbosity: z.nullable(OpenResponsesResponseTextVerbosity$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesResponseText$ {
  /** @deprecated use `OpenResponsesResponseText$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesResponseText$inboundSchema;
  /** @deprecated use `OpenResponsesResponseText$outboundSchema` instead. */
  export const outboundSchema = OpenResponsesResponseText$outboundSchema;
  /** @deprecated use `OpenResponsesResponseText$Outbound` instead. */
  export type Outbound = OpenResponsesResponseText$Outbound;
}

export function openResponsesResponseTextToJSON(
  openResponsesResponseText: OpenResponsesResponseText,
): string {
  return JSON.stringify(
    OpenResponsesResponseText$outboundSchema.parse(openResponsesResponseText),
  );
}

export function openResponsesResponseTextFromJSON(
  jsonString: string,
): SafeParseResult<OpenResponsesResponseText, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenResponsesResponseText$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenResponsesResponseText' from JSON`,
  );
}
