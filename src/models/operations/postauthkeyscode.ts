/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

/**
 * The method used to generate the code challenge
 */
export const PostAuthKeysCodeCodeChallengeMethod = {
  S256: "S256",
  Plain: "plain",
} as const;
/**
 * The method used to generate the code challenge
 */
export type PostAuthKeysCodeCodeChallengeMethod = ClosedEnum<
  typeof PostAuthKeysCodeCodeChallengeMethod
>;

export type PostAuthKeysCodeRequest = {
  /**
   * The callback URL to redirect to after authorization. Note, only https URLs on ports 443 and 3000 are allowed.
   */
  callbackUrl: string;
  /**
   * PKCE code challenge for enhanced security
   */
  codeChallenge?: string | undefined;
  /**
   * The method used to generate the code challenge
   */
  codeChallengeMethod?: PostAuthKeysCodeCodeChallengeMethod | undefined;
  /**
   * Credit limit for the API key to be created
   */
  limit?: string | undefined;
};

export type PostAuthKeysCodeData = {
  /**
   * The authorization code ID to use in the exchange request
   */
  id: string;
  /**
   * The application ID associated with this auth code
   */
  appId: number;
  /**
   * ISO 8601 timestamp of when the auth code was created
   */
  createdAt: string;
};

/**
 * Successfully created authorization code
 */
export type PostAuthKeysCodeResponseBody = {
  data: PostAuthKeysCodeData;
};

export type PostAuthKeysCodeResponse =
  | PostAuthKeysCodeResponseBody
  | models.ErrorResponse;

/** @internal */
export const PostAuthKeysCodeCodeChallengeMethod$inboundSchema: z.ZodNativeEnum<
  typeof PostAuthKeysCodeCodeChallengeMethod
> = z.nativeEnum(PostAuthKeysCodeCodeChallengeMethod);

/** @internal */
export const PostAuthKeysCodeCodeChallengeMethod$outboundSchema:
  z.ZodNativeEnum<typeof PostAuthKeysCodeCodeChallengeMethod> =
    PostAuthKeysCodeCodeChallengeMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostAuthKeysCodeCodeChallengeMethod$ {
  /** @deprecated use `PostAuthKeysCodeCodeChallengeMethod$inboundSchema` instead. */
  export const inboundSchema =
    PostAuthKeysCodeCodeChallengeMethod$inboundSchema;
  /** @deprecated use `PostAuthKeysCodeCodeChallengeMethod$outboundSchema` instead. */
  export const outboundSchema =
    PostAuthKeysCodeCodeChallengeMethod$outboundSchema;
}

/** @internal */
export const PostAuthKeysCodeRequest$inboundSchema: z.ZodType<
  PostAuthKeysCodeRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  callback_url: z.string(),
  code_challenge: z.string().optional(),
  code_challenge_method: PostAuthKeysCodeCodeChallengeMethod$inboundSchema
    .optional(),
  limit: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "callback_url": "callbackUrl",
    "code_challenge": "codeChallenge",
    "code_challenge_method": "codeChallengeMethod",
  });
});

/** @internal */
export type PostAuthKeysCodeRequest$Outbound = {
  callback_url: string;
  code_challenge?: string | undefined;
  code_challenge_method?: string | undefined;
  limit?: string | undefined;
};

/** @internal */
export const PostAuthKeysCodeRequest$outboundSchema: z.ZodType<
  PostAuthKeysCodeRequest$Outbound,
  z.ZodTypeDef,
  PostAuthKeysCodeRequest
> = z.object({
  callbackUrl: z.string(),
  codeChallenge: z.string().optional(),
  codeChallengeMethod: PostAuthKeysCodeCodeChallengeMethod$outboundSchema
    .optional(),
  limit: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    callbackUrl: "callback_url",
    codeChallenge: "code_challenge",
    codeChallengeMethod: "code_challenge_method",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostAuthKeysCodeRequest$ {
  /** @deprecated use `PostAuthKeysCodeRequest$inboundSchema` instead. */
  export const inboundSchema = PostAuthKeysCodeRequest$inboundSchema;
  /** @deprecated use `PostAuthKeysCodeRequest$outboundSchema` instead. */
  export const outboundSchema = PostAuthKeysCodeRequest$outboundSchema;
  /** @deprecated use `PostAuthKeysCodeRequest$Outbound` instead. */
  export type Outbound = PostAuthKeysCodeRequest$Outbound;
}

export function postAuthKeysCodeRequestToJSON(
  postAuthKeysCodeRequest: PostAuthKeysCodeRequest,
): string {
  return JSON.stringify(
    PostAuthKeysCodeRequest$outboundSchema.parse(postAuthKeysCodeRequest),
  );
}

export function postAuthKeysCodeRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostAuthKeysCodeRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostAuthKeysCodeRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostAuthKeysCodeRequest' from JSON`,
  );
}

/** @internal */
export const PostAuthKeysCodeData$inboundSchema: z.ZodType<
  PostAuthKeysCodeData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  app_id: z.number(),
  created_at: z.string(),
}).transform((v) => {
  return remap$(v, {
    "app_id": "appId",
    "created_at": "createdAt",
  });
});

/** @internal */
export type PostAuthKeysCodeData$Outbound = {
  id: string;
  app_id: number;
  created_at: string;
};

/** @internal */
export const PostAuthKeysCodeData$outboundSchema: z.ZodType<
  PostAuthKeysCodeData$Outbound,
  z.ZodTypeDef,
  PostAuthKeysCodeData
> = z.object({
  id: z.string(),
  appId: z.number(),
  createdAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    appId: "app_id",
    createdAt: "created_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostAuthKeysCodeData$ {
  /** @deprecated use `PostAuthKeysCodeData$inboundSchema` instead. */
  export const inboundSchema = PostAuthKeysCodeData$inboundSchema;
  /** @deprecated use `PostAuthKeysCodeData$outboundSchema` instead. */
  export const outboundSchema = PostAuthKeysCodeData$outboundSchema;
  /** @deprecated use `PostAuthKeysCodeData$Outbound` instead. */
  export type Outbound = PostAuthKeysCodeData$Outbound;
}

export function postAuthKeysCodeDataToJSON(
  postAuthKeysCodeData: PostAuthKeysCodeData,
): string {
  return JSON.stringify(
    PostAuthKeysCodeData$outboundSchema.parse(postAuthKeysCodeData),
  );
}

export function postAuthKeysCodeDataFromJSON(
  jsonString: string,
): SafeParseResult<PostAuthKeysCodeData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostAuthKeysCodeData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostAuthKeysCodeData' from JSON`,
  );
}

/** @internal */
export const PostAuthKeysCodeResponseBody$inboundSchema: z.ZodType<
  PostAuthKeysCodeResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => PostAuthKeysCodeData$inboundSchema),
});

/** @internal */
export type PostAuthKeysCodeResponseBody$Outbound = {
  data: PostAuthKeysCodeData$Outbound;
};

/** @internal */
export const PostAuthKeysCodeResponseBody$outboundSchema: z.ZodType<
  PostAuthKeysCodeResponseBody$Outbound,
  z.ZodTypeDef,
  PostAuthKeysCodeResponseBody
> = z.object({
  data: z.lazy(() => PostAuthKeysCodeData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostAuthKeysCodeResponseBody$ {
  /** @deprecated use `PostAuthKeysCodeResponseBody$inboundSchema` instead. */
  export const inboundSchema = PostAuthKeysCodeResponseBody$inboundSchema;
  /** @deprecated use `PostAuthKeysCodeResponseBody$outboundSchema` instead. */
  export const outboundSchema = PostAuthKeysCodeResponseBody$outboundSchema;
  /** @deprecated use `PostAuthKeysCodeResponseBody$Outbound` instead. */
  export type Outbound = PostAuthKeysCodeResponseBody$Outbound;
}

export function postAuthKeysCodeResponseBodyToJSON(
  postAuthKeysCodeResponseBody: PostAuthKeysCodeResponseBody,
): string {
  return JSON.stringify(
    PostAuthKeysCodeResponseBody$outboundSchema.parse(
      postAuthKeysCodeResponseBody,
    ),
  );
}

export function postAuthKeysCodeResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostAuthKeysCodeResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostAuthKeysCodeResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostAuthKeysCodeResponseBody' from JSON`,
  );
}

/** @internal */
export const PostAuthKeysCodeResponse$inboundSchema: z.ZodType<
  PostAuthKeysCodeResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => PostAuthKeysCodeResponseBody$inboundSchema),
  models.ErrorResponse$inboundSchema,
]);

/** @internal */
export type PostAuthKeysCodeResponse$Outbound =
  | PostAuthKeysCodeResponseBody$Outbound
  | models.ErrorResponse$Outbound;

/** @internal */
export const PostAuthKeysCodeResponse$outboundSchema: z.ZodType<
  PostAuthKeysCodeResponse$Outbound,
  z.ZodTypeDef,
  PostAuthKeysCodeResponse
> = z.union([
  z.lazy(() => PostAuthKeysCodeResponseBody$outboundSchema),
  models.ErrorResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostAuthKeysCodeResponse$ {
  /** @deprecated use `PostAuthKeysCodeResponse$inboundSchema` instead. */
  export const inboundSchema = PostAuthKeysCodeResponse$inboundSchema;
  /** @deprecated use `PostAuthKeysCodeResponse$outboundSchema` instead. */
  export const outboundSchema = PostAuthKeysCodeResponse$outboundSchema;
  /** @deprecated use `PostAuthKeysCodeResponse$Outbound` instead. */
  export type Outbound = PostAuthKeysCodeResponse$Outbound;
}

export function postAuthKeysCodeResponseToJSON(
  postAuthKeysCodeResponse: PostAuthKeysCodeResponse,
): string {
  return JSON.stringify(
    PostAuthKeysCodeResponse$outboundSchema.parse(postAuthKeysCodeResponse),
  );
}

export function postAuthKeysCodeResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostAuthKeysCodeResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostAuthKeysCodeResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostAuthKeysCodeResponse' from JSON`,
  );
}
