/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Error details
 */
export type GetProvidersError = {
  /**
   * Error code
   */
  code: number;
  /**
   * Error message
   */
  message: string;
};

export type GetProvidersData = {
  /**
   * Display name of the provider
   */
  name: string;
  /**
   * URL-friendly identifier for the provider
   */
  slug: string;
  /**
   * URL to the provider's privacy policy
   */
  privacyPolicyUrl: string | null;
  /**
   * URL to the provider's terms of service
   */
  termsOfServiceUrl?: string | null | undefined;
  /**
   * URL to the provider's status page
   */
  statusPageUrl?: string | null | undefined;
};

/**
 * Returns a list of providers
 */
export type GetProvidersResponse = {
  data: Array<GetProvidersData>;
};

/** @internal */
export const GetProvidersError$inboundSchema: z.ZodType<
  GetProvidersError,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.number(),
  message: z.string(),
});

/** @internal */
export type GetProvidersError$Outbound = {
  code: number;
  message: string;
};

/** @internal */
export const GetProvidersError$outboundSchema: z.ZodType<
  GetProvidersError$Outbound,
  z.ZodTypeDef,
  GetProvidersError
> = z.object({
  code: z.number(),
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProvidersError$ {
  /** @deprecated use `GetProvidersError$inboundSchema` instead. */
  export const inboundSchema = GetProvidersError$inboundSchema;
  /** @deprecated use `GetProvidersError$outboundSchema` instead. */
  export const outboundSchema = GetProvidersError$outboundSchema;
  /** @deprecated use `GetProvidersError$Outbound` instead. */
  export type Outbound = GetProvidersError$Outbound;
}

export function getProvidersErrorToJSON(
  getProvidersError: GetProvidersError,
): string {
  return JSON.stringify(
    GetProvidersError$outboundSchema.parse(getProvidersError),
  );
}

export function getProvidersErrorFromJSON(
  jsonString: string,
): SafeParseResult<GetProvidersError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProvidersError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProvidersError' from JSON`,
  );
}

/** @internal */
export const GetProvidersData$inboundSchema: z.ZodType<
  GetProvidersData,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  slug: z.string(),
  privacy_policy_url: z.nullable(z.string()),
  terms_of_service_url: z.nullable(z.string()).optional(),
  status_page_url: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "privacy_policy_url": "privacyPolicyUrl",
    "terms_of_service_url": "termsOfServiceUrl",
    "status_page_url": "statusPageUrl",
  });
});

/** @internal */
export type GetProvidersData$Outbound = {
  name: string;
  slug: string;
  privacy_policy_url: string | null;
  terms_of_service_url?: string | null | undefined;
  status_page_url?: string | null | undefined;
};

/** @internal */
export const GetProvidersData$outboundSchema: z.ZodType<
  GetProvidersData$Outbound,
  z.ZodTypeDef,
  GetProvidersData
> = z.object({
  name: z.string(),
  slug: z.string(),
  privacyPolicyUrl: z.nullable(z.string()),
  termsOfServiceUrl: z.nullable(z.string()).optional(),
  statusPageUrl: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    privacyPolicyUrl: "privacy_policy_url",
    termsOfServiceUrl: "terms_of_service_url",
    statusPageUrl: "status_page_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProvidersData$ {
  /** @deprecated use `GetProvidersData$inboundSchema` instead. */
  export const inboundSchema = GetProvidersData$inboundSchema;
  /** @deprecated use `GetProvidersData$outboundSchema` instead. */
  export const outboundSchema = GetProvidersData$outboundSchema;
  /** @deprecated use `GetProvidersData$Outbound` instead. */
  export type Outbound = GetProvidersData$Outbound;
}

export function getProvidersDataToJSON(
  getProvidersData: GetProvidersData,
): string {
  return JSON.stringify(
    GetProvidersData$outboundSchema.parse(getProvidersData),
  );
}

export function getProvidersDataFromJSON(
  jsonString: string,
): SafeParseResult<GetProvidersData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProvidersData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProvidersData' from JSON`,
  );
}

/** @internal */
export const GetProvidersResponse$inboundSchema: z.ZodType<
  GetProvidersResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(z.lazy(() => GetProvidersData$inboundSchema)),
});

/** @internal */
export type GetProvidersResponse$Outbound = {
  data: Array<GetProvidersData$Outbound>;
};

/** @internal */
export const GetProvidersResponse$outboundSchema: z.ZodType<
  GetProvidersResponse$Outbound,
  z.ZodTypeDef,
  GetProvidersResponse
> = z.object({
  data: z.array(z.lazy(() => GetProvidersData$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProvidersResponse$ {
  /** @deprecated use `GetProvidersResponse$inboundSchema` instead. */
  export const inboundSchema = GetProvidersResponse$inboundSchema;
  /** @deprecated use `GetProvidersResponse$outboundSchema` instead. */
  export const outboundSchema = GetProvidersResponse$outboundSchema;
  /** @deprecated use `GetProvidersResponse$Outbound` instead. */
  export type Outbound = GetProvidersResponse$Outbound;
}

export function getProvidersResponseToJSON(
  getProvidersResponse: GetProvidersResponse,
): string {
  return JSON.stringify(
    GetProvidersResponse$outboundSchema.parse(getProvidersResponse),
  );
}

export function getProvidersResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetProvidersResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProvidersResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProvidersResponse' from JSON`,
  );
}
