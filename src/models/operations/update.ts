/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

/**
 * New limit reset type for the API key (daily, weekly, monthly, or null for no reset). Resets happen automatically at midnight UTC, and weeks are Monday through Sunday.
 */
export const UpdateLimitReset = {
  Daily: "daily",
  Weekly: "weekly",
  Monthly: "monthly",
} as const;
/**
 * New limit reset type for the API key (daily, weekly, monthly, or null for no reset). Resets happen automatically at midnight UTC, and weeks are Monday through Sunday.
 */
export type UpdateLimitReset = OpenEnum<typeof UpdateLimitReset>;

export type UpdateRequestBody = {
  /**
   * New name for the API key
   */
  name?: string | undefined;
  /**
   * Whether to disable the API key
   */
  disabled?: boolean | undefined;
  /**
   * New spending limit for the API key in USD
   */
  limit?: number | null | undefined;
  /**
   * New limit reset type for the API key (daily, weekly, monthly, or null for no reset). Resets happen automatically at midnight UTC, and weeks are Monday through Sunday.
   */
  limitReset?: UpdateLimitReset | null | undefined;
  /**
   * Whether to include BYOK usage in the limit
   */
  includeByokInLimit?: boolean | undefined;
};

export type UpdateRequest = {
  hash: string;
  requestBody: UpdateRequestBody;
};

/**
 * API key updated successfully
 */
export type UpdateResponse = {
  /**
   * The updated API key information
   */
  data: models.UpdateAPIKeyData;
};

/** @internal */
export const UpdateLimitReset$inboundSchema: z.ZodType<
  UpdateLimitReset,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(UpdateLimitReset),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const UpdateLimitReset$outboundSchema: z.ZodType<
  UpdateLimitReset,
  z.ZodTypeDef,
  UpdateLimitReset
> = z.union([
  z.nativeEnum(UpdateLimitReset),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateLimitReset$ {
  /** @deprecated use `UpdateLimitReset$inboundSchema` instead. */
  export const inboundSchema = UpdateLimitReset$inboundSchema;
  /** @deprecated use `UpdateLimitReset$outboundSchema` instead. */
  export const outboundSchema = UpdateLimitReset$outboundSchema;
}

/** @internal */
export const UpdateRequestBody$inboundSchema: z.ZodType<
  UpdateRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  disabled: z.boolean().optional(),
  limit: z.nullable(z.number()).optional(),
  limit_reset: z.nullable(UpdateLimitReset$inboundSchema).optional(),
  include_byok_in_limit: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "limit_reset": "limitReset",
    "include_byok_in_limit": "includeByokInLimit",
  });
});

/** @internal */
export type UpdateRequestBody$Outbound = {
  name?: string | undefined;
  disabled?: boolean | undefined;
  limit?: number | null | undefined;
  limit_reset?: string | null | undefined;
  include_byok_in_limit?: boolean | undefined;
};

/** @internal */
export const UpdateRequestBody$outboundSchema: z.ZodType<
  UpdateRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateRequestBody
> = z.object({
  name: z.string().optional(),
  disabled: z.boolean().optional(),
  limit: z.nullable(z.number()).optional(),
  limitReset: z.nullable(UpdateLimitReset$outboundSchema).optional(),
  includeByokInLimit: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    limitReset: "limit_reset",
    includeByokInLimit: "include_byok_in_limit",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateRequestBody$ {
  /** @deprecated use `UpdateRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateRequestBody$inboundSchema;
  /** @deprecated use `UpdateRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateRequestBody$outboundSchema;
  /** @deprecated use `UpdateRequestBody$Outbound` instead. */
  export type Outbound = UpdateRequestBody$Outbound;
}

export function updateRequestBodyToJSON(
  updateRequestBody: UpdateRequestBody,
): string {
  return JSON.stringify(
    UpdateRequestBody$outboundSchema.parse(updateRequestBody),
  );
}

export function updateRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateRequest$inboundSchema: z.ZodType<
  UpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  hash: z.string(),
  RequestBody: z.lazy(() => UpdateRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateRequest$Outbound = {
  hash: string;
  RequestBody: UpdateRequestBody$Outbound;
};

/** @internal */
export const UpdateRequest$outboundSchema: z.ZodType<
  UpdateRequest$Outbound,
  z.ZodTypeDef,
  UpdateRequest
> = z.object({
  hash: z.string(),
  requestBody: z.lazy(() => UpdateRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateRequest$ {
  /** @deprecated use `UpdateRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateRequest$inboundSchema;
  /** @deprecated use `UpdateRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateRequest$outboundSchema;
  /** @deprecated use `UpdateRequest$Outbound` instead. */
  export type Outbound = UpdateRequest$Outbound;
}

export function updateRequestToJSON(updateRequest: UpdateRequest): string {
  return JSON.stringify(UpdateRequest$outboundSchema.parse(updateRequest));
}

export function updateRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateRequest' from JSON`,
  );
}

/** @internal */
export const UpdateResponse$inboundSchema: z.ZodType<
  UpdateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: models.UpdateAPIKeyData$inboundSchema,
});

/** @internal */
export type UpdateResponse$Outbound = {
  data: models.UpdateAPIKeyData$Outbound;
};

/** @internal */
export const UpdateResponse$outboundSchema: z.ZodType<
  UpdateResponse$Outbound,
  z.ZodTypeDef,
  UpdateResponse
> = z.object({
  data: models.UpdateAPIKeyData$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateResponse$ {
  /** @deprecated use `UpdateResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateResponse$inboundSchema;
  /** @deprecated use `UpdateResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateResponse$outboundSchema;
  /** @deprecated use `UpdateResponse$Outbound` instead. */
  export type Outbound = UpdateResponse$Outbound;
}

export function updateResponseToJSON(updateResponse: UpdateResponse): string {
  return JSON.stringify(UpdateResponse$outboundSchema.parse(updateResponse));
}

export function updateResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateResponse' from JSON`,
  );
}
