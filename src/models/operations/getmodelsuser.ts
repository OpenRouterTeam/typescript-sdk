/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GetModelsUserPrompt = number | string | any;

export type GetModelsUserCompletion = number | string | any;

export type ModelsGetModelsUserRequest = number | string | any;

export type GetModelsUserImage = number | string | any;

export type GetModelsUserImageOutput = number | string | any;

export type GetModelsUserAudio = number | string | any;

export type GetModelsUserInputAudioCache = number | string | any;

export type GetModelsUserWebSearch = number | string | any;

export type GetModelsUserInternalReasoning = number | string | any;

export type GetModelsUserInputCacheRead = number | string | any;

export type GetModelsUserInputCacheWrite = number | string | any;

/**
 * Pricing information for the model
 */
export type GetModelsUserPricing = {
  prompt?: number | string | any | undefined;
  completion?: number | string | any | undefined;
  request?: number | string | any | undefined;
  image?: number | string | any | undefined;
  imageOutput?: number | string | any | undefined;
  audio?: number | string | any | undefined;
  inputAudioCache?: number | string | any | undefined;
  webSearch?: number | string | any | undefined;
  internalReasoning?: number | string | any | undefined;
  inputCacheRead?: number | string | any | undefined;
  inputCacheWrite?: number | string | any | undefined;
  discount?: number | undefined;
};

/**
 * Tokenizer type used by the model
 */
export const GetModelsUserTokenizer = {
  Router: "Router",
  Media: "Media",
  Other: "Other",
  Gpt: "GPT",
  Claude: "Claude",
  Gemini: "Gemini",
  Grok: "Grok",
  Cohere: "Cohere",
  Nova: "Nova",
  Qwen: "Qwen",
  Yi: "Yi",
  DeepSeek: "DeepSeek",
  Mistral: "Mistral",
  Llama2: "Llama2",
  Llama3: "Llama3",
  Llama4: "Llama4",
  PaLM: "PaLM",
  Rwkv: "RWKV",
  Qwen3: "Qwen3",
} as const;
/**
 * Tokenizer type used by the model
 */
export type GetModelsUserTokenizer = ClosedEnum<typeof GetModelsUserTokenizer>;

/**
 * Instruction format type
 */
export const GetModelsUserInstructType = {
  None: "none",
  Airoboros: "airoboros",
  Alpaca: "alpaca",
  AlpacaModif: "alpaca-modif",
  Chatml: "chatml",
  Claude: "claude",
  CodeLlama: "code-llama",
  Gemma: "gemma",
  Llama2: "llama2",
  Llama3: "llama3",
  Mistral: "mistral",
  Nemotron: "nemotron",
  Neural: "neural",
  Openchat: "openchat",
  Phi3: "phi3",
  Rwkv: "rwkv",
  Vicuna: "vicuna",
  Zephyr: "zephyr",
  DeepseekR1: "deepseek-r1",
  DeepseekV31: "deepseek-v3.1",
  Qwq: "qwq",
  Qwen3: "qwen3",
} as const;
/**
 * Instruction format type
 */
export type GetModelsUserInstructType = ClosedEnum<
  typeof GetModelsUserInstructType
>;

export const GetModelsUserInputModality = {
  Text: "text",
  Image: "image",
  File: "file",
  Audio: "audio",
} as const;
export type GetModelsUserInputModality = ClosedEnum<
  typeof GetModelsUserInputModality
>;

export const GetModelsUserOutputModality = {
  Text: "text",
  Image: "image",
  Embeddings: "embeddings",
} as const;
export type GetModelsUserOutputModality = ClosedEnum<
  typeof GetModelsUserOutputModality
>;

/**
 * Model architecture information
 */
export type GetModelsUserArchitecture = {
  /**
   * Tokenizer type used by the model
   */
  tokenizer?: GetModelsUserTokenizer | undefined;
  /**
   * Instruction format type
   */
  instructType?: GetModelsUserInstructType | null | undefined;
  /**
   * Primary modality of the model
   */
  modality: string | null;
  /**
   * Supported input modalities
   */
  inputModalities: Array<GetModelsUserInputModality>;
  /**
   * Supported output modalities
   */
  outputModalities: Array<GetModelsUserOutputModality>;
};

/**
 * Information about the top provider for this model
 */
export type GetModelsUserTopProvider = {
  /**
   * Context length from the top provider
   */
  contextLength?: number | null | undefined;
  /**
   * Maximum completion tokens from the top provider
   */
  maxCompletionTokens?: number | null | undefined;
  /**
   * Whether the top provider moderates content
   */
  isModerated: boolean;
};

/**
 * Per-request token limits
 */
export type GetModelsUserPerRequestLimits = {
  /**
   * Maximum prompt tokens per request
   */
  promptTokens?: any | undefined;
  /**
   * Maximum completion tokens per request
   */
  completionTokens?: any | undefined;
};

export const GetModelsUserSupportedParameter = {
  Temperature: "temperature",
  TopP: "top_p",
  TopK: "top_k",
  MinP: "min_p",
  TopA: "top_a",
  FrequencyPenalty: "frequency_penalty",
  PresencePenalty: "presence_penalty",
  RepetitionPenalty: "repetition_penalty",
  MaxTokens: "max_tokens",
  LogitBias: "logit_bias",
  Logprobs: "logprobs",
  TopLogprobs: "top_logprobs",
  Seed: "seed",
  ResponseFormat: "response_format",
  StructuredOutputs: "structured_outputs",
  Stop: "stop",
  Tools: "tools",
  ToolChoice: "tool_choice",
  ParallelToolCalls: "parallel_tool_calls",
  IncludeReasoning: "include_reasoning",
  Reasoning: "reasoning",
  WebSearchOptions: "web_search_options",
  Verbosity: "verbosity",
} as const;
export type GetModelsUserSupportedParameter = ClosedEnum<
  typeof GetModelsUserSupportedParameter
>;

export type GetModelsUserData = {
  /**
   * Unique identifier for the model
   */
  id: string;
  /**
   * Canonical slug for the model
   */
  canonicalSlug: string;
  /**
   * Hugging Face model identifier, if applicable
   */
  huggingFaceId?: string | null | undefined;
  /**
   * Display name of the model
   */
  name: string;
  /**
   * Unix timestamp of when the model was created
   */
  created: number;
  /**
   * Description of the model
   */
  description?: string | undefined;
  /**
   * Pricing information for the model
   */
  pricing: GetModelsUserPricing;
  /**
   * Maximum context length in tokens
   */
  contextLength: number | null;
  /**
   * Model architecture information
   */
  architecture: GetModelsUserArchitecture;
  /**
   * Information about the top provider for this model
   */
  topProvider: GetModelsUserTopProvider;
  /**
   * Per-request token limits
   */
  perRequestLimits: GetModelsUserPerRequestLimits | null;
  /**
   * List of supported parameters for this model
   */
  supportedParameters: Array<GetModelsUserSupportedParameter>;
};

/**
 * Returns a list of models filtered by user provider preferences
 */
export type GetModelsUserResponseBody = {
  /**
   * List of available models
   */
  data: Array<GetModelsUserData>;
};

export type GetModelsUserResponse =
  | GetModelsUserResponseBody
  | models.ErrorResponse;

/** @internal */
export const GetModelsUserPrompt$inboundSchema: z.ZodType<
  GetModelsUserPrompt,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type GetModelsUserPrompt$Outbound = number | string | any;

/** @internal */
export const GetModelsUserPrompt$outboundSchema: z.ZodType<
  GetModelsUserPrompt$Outbound,
  z.ZodTypeDef,
  GetModelsUserPrompt
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsUserPrompt$ {
  /** @deprecated use `GetModelsUserPrompt$inboundSchema` instead. */
  export const inboundSchema = GetModelsUserPrompt$inboundSchema;
  /** @deprecated use `GetModelsUserPrompt$outboundSchema` instead. */
  export const outboundSchema = GetModelsUserPrompt$outboundSchema;
  /** @deprecated use `GetModelsUserPrompt$Outbound` instead. */
  export type Outbound = GetModelsUserPrompt$Outbound;
}

export function getModelsUserPromptToJSON(
  getModelsUserPrompt: GetModelsUserPrompt,
): string {
  return JSON.stringify(
    GetModelsUserPrompt$outboundSchema.parse(getModelsUserPrompt),
  );
}

export function getModelsUserPromptFromJSON(
  jsonString: string,
): SafeParseResult<GetModelsUserPrompt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetModelsUserPrompt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetModelsUserPrompt' from JSON`,
  );
}

/** @internal */
export const GetModelsUserCompletion$inboundSchema: z.ZodType<
  GetModelsUserCompletion,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type GetModelsUserCompletion$Outbound = number | string | any;

/** @internal */
export const GetModelsUserCompletion$outboundSchema: z.ZodType<
  GetModelsUserCompletion$Outbound,
  z.ZodTypeDef,
  GetModelsUserCompletion
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsUserCompletion$ {
  /** @deprecated use `GetModelsUserCompletion$inboundSchema` instead. */
  export const inboundSchema = GetModelsUserCompletion$inboundSchema;
  /** @deprecated use `GetModelsUserCompletion$outboundSchema` instead. */
  export const outboundSchema = GetModelsUserCompletion$outboundSchema;
  /** @deprecated use `GetModelsUserCompletion$Outbound` instead. */
  export type Outbound = GetModelsUserCompletion$Outbound;
}

export function getModelsUserCompletionToJSON(
  getModelsUserCompletion: GetModelsUserCompletion,
): string {
  return JSON.stringify(
    GetModelsUserCompletion$outboundSchema.parse(getModelsUserCompletion),
  );
}

export function getModelsUserCompletionFromJSON(
  jsonString: string,
): SafeParseResult<GetModelsUserCompletion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetModelsUserCompletion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetModelsUserCompletion' from JSON`,
  );
}

/** @internal */
export const ModelsGetModelsUserRequest$inboundSchema: z.ZodType<
  ModelsGetModelsUserRequest,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type ModelsGetModelsUserRequest$Outbound = number | string | any;

/** @internal */
export const ModelsGetModelsUserRequest$outboundSchema: z.ZodType<
  ModelsGetModelsUserRequest$Outbound,
  z.ZodTypeDef,
  ModelsGetModelsUserRequest
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModelsGetModelsUserRequest$ {
  /** @deprecated use `ModelsGetModelsUserRequest$inboundSchema` instead. */
  export const inboundSchema = ModelsGetModelsUserRequest$inboundSchema;
  /** @deprecated use `ModelsGetModelsUserRequest$outboundSchema` instead. */
  export const outboundSchema = ModelsGetModelsUserRequest$outboundSchema;
  /** @deprecated use `ModelsGetModelsUserRequest$Outbound` instead. */
  export type Outbound = ModelsGetModelsUserRequest$Outbound;
}

export function modelsGetModelsUserRequestToJSON(
  modelsGetModelsUserRequest: ModelsGetModelsUserRequest,
): string {
  return JSON.stringify(
    ModelsGetModelsUserRequest$outboundSchema.parse(modelsGetModelsUserRequest),
  );
}

export function modelsGetModelsUserRequestFromJSON(
  jsonString: string,
): SafeParseResult<ModelsGetModelsUserRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ModelsGetModelsUserRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ModelsGetModelsUserRequest' from JSON`,
  );
}

/** @internal */
export const GetModelsUserImage$inboundSchema: z.ZodType<
  GetModelsUserImage,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type GetModelsUserImage$Outbound = number | string | any;

/** @internal */
export const GetModelsUserImage$outboundSchema: z.ZodType<
  GetModelsUserImage$Outbound,
  z.ZodTypeDef,
  GetModelsUserImage
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsUserImage$ {
  /** @deprecated use `GetModelsUserImage$inboundSchema` instead. */
  export const inboundSchema = GetModelsUserImage$inboundSchema;
  /** @deprecated use `GetModelsUserImage$outboundSchema` instead. */
  export const outboundSchema = GetModelsUserImage$outboundSchema;
  /** @deprecated use `GetModelsUserImage$Outbound` instead. */
  export type Outbound = GetModelsUserImage$Outbound;
}

export function getModelsUserImageToJSON(
  getModelsUserImage: GetModelsUserImage,
): string {
  return JSON.stringify(
    GetModelsUserImage$outboundSchema.parse(getModelsUserImage),
  );
}

export function getModelsUserImageFromJSON(
  jsonString: string,
): SafeParseResult<GetModelsUserImage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetModelsUserImage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetModelsUserImage' from JSON`,
  );
}

/** @internal */
export const GetModelsUserImageOutput$inboundSchema: z.ZodType<
  GetModelsUserImageOutput,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type GetModelsUserImageOutput$Outbound = number | string | any;

/** @internal */
export const GetModelsUserImageOutput$outboundSchema: z.ZodType<
  GetModelsUserImageOutput$Outbound,
  z.ZodTypeDef,
  GetModelsUserImageOutput
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsUserImageOutput$ {
  /** @deprecated use `GetModelsUserImageOutput$inboundSchema` instead. */
  export const inboundSchema = GetModelsUserImageOutput$inboundSchema;
  /** @deprecated use `GetModelsUserImageOutput$outboundSchema` instead. */
  export const outboundSchema = GetModelsUserImageOutput$outboundSchema;
  /** @deprecated use `GetModelsUserImageOutput$Outbound` instead. */
  export type Outbound = GetModelsUserImageOutput$Outbound;
}

export function getModelsUserImageOutputToJSON(
  getModelsUserImageOutput: GetModelsUserImageOutput,
): string {
  return JSON.stringify(
    GetModelsUserImageOutput$outboundSchema.parse(getModelsUserImageOutput),
  );
}

export function getModelsUserImageOutputFromJSON(
  jsonString: string,
): SafeParseResult<GetModelsUserImageOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetModelsUserImageOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetModelsUserImageOutput' from JSON`,
  );
}

/** @internal */
export const GetModelsUserAudio$inboundSchema: z.ZodType<
  GetModelsUserAudio,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type GetModelsUserAudio$Outbound = number | string | any;

/** @internal */
export const GetModelsUserAudio$outboundSchema: z.ZodType<
  GetModelsUserAudio$Outbound,
  z.ZodTypeDef,
  GetModelsUserAudio
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsUserAudio$ {
  /** @deprecated use `GetModelsUserAudio$inboundSchema` instead. */
  export const inboundSchema = GetModelsUserAudio$inboundSchema;
  /** @deprecated use `GetModelsUserAudio$outboundSchema` instead. */
  export const outboundSchema = GetModelsUserAudio$outboundSchema;
  /** @deprecated use `GetModelsUserAudio$Outbound` instead. */
  export type Outbound = GetModelsUserAudio$Outbound;
}

export function getModelsUserAudioToJSON(
  getModelsUserAudio: GetModelsUserAudio,
): string {
  return JSON.stringify(
    GetModelsUserAudio$outboundSchema.parse(getModelsUserAudio),
  );
}

export function getModelsUserAudioFromJSON(
  jsonString: string,
): SafeParseResult<GetModelsUserAudio, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetModelsUserAudio$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetModelsUserAudio' from JSON`,
  );
}

/** @internal */
export const GetModelsUserInputAudioCache$inboundSchema: z.ZodType<
  GetModelsUserInputAudioCache,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type GetModelsUserInputAudioCache$Outbound = number | string | any;

/** @internal */
export const GetModelsUserInputAudioCache$outboundSchema: z.ZodType<
  GetModelsUserInputAudioCache$Outbound,
  z.ZodTypeDef,
  GetModelsUserInputAudioCache
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsUserInputAudioCache$ {
  /** @deprecated use `GetModelsUserInputAudioCache$inboundSchema` instead. */
  export const inboundSchema = GetModelsUserInputAudioCache$inboundSchema;
  /** @deprecated use `GetModelsUserInputAudioCache$outboundSchema` instead. */
  export const outboundSchema = GetModelsUserInputAudioCache$outboundSchema;
  /** @deprecated use `GetModelsUserInputAudioCache$Outbound` instead. */
  export type Outbound = GetModelsUserInputAudioCache$Outbound;
}

export function getModelsUserInputAudioCacheToJSON(
  getModelsUserInputAudioCache: GetModelsUserInputAudioCache,
): string {
  return JSON.stringify(
    GetModelsUserInputAudioCache$outboundSchema.parse(
      getModelsUserInputAudioCache,
    ),
  );
}

export function getModelsUserInputAudioCacheFromJSON(
  jsonString: string,
): SafeParseResult<GetModelsUserInputAudioCache, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetModelsUserInputAudioCache$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetModelsUserInputAudioCache' from JSON`,
  );
}

/** @internal */
export const GetModelsUserWebSearch$inboundSchema: z.ZodType<
  GetModelsUserWebSearch,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type GetModelsUserWebSearch$Outbound = number | string | any;

/** @internal */
export const GetModelsUserWebSearch$outboundSchema: z.ZodType<
  GetModelsUserWebSearch$Outbound,
  z.ZodTypeDef,
  GetModelsUserWebSearch
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsUserWebSearch$ {
  /** @deprecated use `GetModelsUserWebSearch$inboundSchema` instead. */
  export const inboundSchema = GetModelsUserWebSearch$inboundSchema;
  /** @deprecated use `GetModelsUserWebSearch$outboundSchema` instead. */
  export const outboundSchema = GetModelsUserWebSearch$outboundSchema;
  /** @deprecated use `GetModelsUserWebSearch$Outbound` instead. */
  export type Outbound = GetModelsUserWebSearch$Outbound;
}

export function getModelsUserWebSearchToJSON(
  getModelsUserWebSearch: GetModelsUserWebSearch,
): string {
  return JSON.stringify(
    GetModelsUserWebSearch$outboundSchema.parse(getModelsUserWebSearch),
  );
}

export function getModelsUserWebSearchFromJSON(
  jsonString: string,
): SafeParseResult<GetModelsUserWebSearch, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetModelsUserWebSearch$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetModelsUserWebSearch' from JSON`,
  );
}

/** @internal */
export const GetModelsUserInternalReasoning$inboundSchema: z.ZodType<
  GetModelsUserInternalReasoning,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type GetModelsUserInternalReasoning$Outbound = number | string | any;

/** @internal */
export const GetModelsUserInternalReasoning$outboundSchema: z.ZodType<
  GetModelsUserInternalReasoning$Outbound,
  z.ZodTypeDef,
  GetModelsUserInternalReasoning
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsUserInternalReasoning$ {
  /** @deprecated use `GetModelsUserInternalReasoning$inboundSchema` instead. */
  export const inboundSchema = GetModelsUserInternalReasoning$inboundSchema;
  /** @deprecated use `GetModelsUserInternalReasoning$outboundSchema` instead. */
  export const outboundSchema = GetModelsUserInternalReasoning$outboundSchema;
  /** @deprecated use `GetModelsUserInternalReasoning$Outbound` instead. */
  export type Outbound = GetModelsUserInternalReasoning$Outbound;
}

export function getModelsUserInternalReasoningToJSON(
  getModelsUserInternalReasoning: GetModelsUserInternalReasoning,
): string {
  return JSON.stringify(
    GetModelsUserInternalReasoning$outboundSchema.parse(
      getModelsUserInternalReasoning,
    ),
  );
}

export function getModelsUserInternalReasoningFromJSON(
  jsonString: string,
): SafeParseResult<GetModelsUserInternalReasoning, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetModelsUserInternalReasoning$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetModelsUserInternalReasoning' from JSON`,
  );
}

/** @internal */
export const GetModelsUserInputCacheRead$inboundSchema: z.ZodType<
  GetModelsUserInputCacheRead,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type GetModelsUserInputCacheRead$Outbound = number | string | any;

/** @internal */
export const GetModelsUserInputCacheRead$outboundSchema: z.ZodType<
  GetModelsUserInputCacheRead$Outbound,
  z.ZodTypeDef,
  GetModelsUserInputCacheRead
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsUserInputCacheRead$ {
  /** @deprecated use `GetModelsUserInputCacheRead$inboundSchema` instead. */
  export const inboundSchema = GetModelsUserInputCacheRead$inboundSchema;
  /** @deprecated use `GetModelsUserInputCacheRead$outboundSchema` instead. */
  export const outboundSchema = GetModelsUserInputCacheRead$outboundSchema;
  /** @deprecated use `GetModelsUserInputCacheRead$Outbound` instead. */
  export type Outbound = GetModelsUserInputCacheRead$Outbound;
}

export function getModelsUserInputCacheReadToJSON(
  getModelsUserInputCacheRead: GetModelsUserInputCacheRead,
): string {
  return JSON.stringify(
    GetModelsUserInputCacheRead$outboundSchema.parse(
      getModelsUserInputCacheRead,
    ),
  );
}

export function getModelsUserInputCacheReadFromJSON(
  jsonString: string,
): SafeParseResult<GetModelsUserInputCacheRead, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetModelsUserInputCacheRead$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetModelsUserInputCacheRead' from JSON`,
  );
}

/** @internal */
export const GetModelsUserInputCacheWrite$inboundSchema: z.ZodType<
  GetModelsUserInputCacheWrite,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type GetModelsUserInputCacheWrite$Outbound = number | string | any;

/** @internal */
export const GetModelsUserInputCacheWrite$outboundSchema: z.ZodType<
  GetModelsUserInputCacheWrite$Outbound,
  z.ZodTypeDef,
  GetModelsUserInputCacheWrite
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsUserInputCacheWrite$ {
  /** @deprecated use `GetModelsUserInputCacheWrite$inboundSchema` instead. */
  export const inboundSchema = GetModelsUserInputCacheWrite$inboundSchema;
  /** @deprecated use `GetModelsUserInputCacheWrite$outboundSchema` instead. */
  export const outboundSchema = GetModelsUserInputCacheWrite$outboundSchema;
  /** @deprecated use `GetModelsUserInputCacheWrite$Outbound` instead. */
  export type Outbound = GetModelsUserInputCacheWrite$Outbound;
}

export function getModelsUserInputCacheWriteToJSON(
  getModelsUserInputCacheWrite: GetModelsUserInputCacheWrite,
): string {
  return JSON.stringify(
    GetModelsUserInputCacheWrite$outboundSchema.parse(
      getModelsUserInputCacheWrite,
    ),
  );
}

export function getModelsUserInputCacheWriteFromJSON(
  jsonString: string,
): SafeParseResult<GetModelsUserInputCacheWrite, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetModelsUserInputCacheWrite$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetModelsUserInputCacheWrite' from JSON`,
  );
}

/** @internal */
export const GetModelsUserPricing$inboundSchema: z.ZodType<
  GetModelsUserPricing,
  z.ZodTypeDef,
  unknown
> = z.object({
  prompt: z.union([z.number(), z.string(), z.any()]).optional(),
  completion: z.union([z.number(), z.string(), z.any()]).optional(),
  request: z.union([z.number(), z.string(), z.any()]).optional(),
  image: z.union([z.number(), z.string(), z.any()]).optional(),
  image_output: z.union([z.number(), z.string(), z.any()]).optional(),
  audio: z.union([z.number(), z.string(), z.any()]).optional(),
  input_audio_cache: z.union([z.number(), z.string(), z.any()]).optional(),
  web_search: z.union([z.number(), z.string(), z.any()]).optional(),
  internal_reasoning: z.union([z.number(), z.string(), z.any()]).optional(),
  input_cache_read: z.union([z.number(), z.string(), z.any()]).optional(),
  input_cache_write: z.union([z.number(), z.string(), z.any()]).optional(),
  discount: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "image_output": "imageOutput",
    "input_audio_cache": "inputAudioCache",
    "web_search": "webSearch",
    "internal_reasoning": "internalReasoning",
    "input_cache_read": "inputCacheRead",
    "input_cache_write": "inputCacheWrite",
  });
});

/** @internal */
export type GetModelsUserPricing$Outbound = {
  prompt?: number | string | any | undefined;
  completion?: number | string | any | undefined;
  request?: number | string | any | undefined;
  image?: number | string | any | undefined;
  image_output?: number | string | any | undefined;
  audio?: number | string | any | undefined;
  input_audio_cache?: number | string | any | undefined;
  web_search?: number | string | any | undefined;
  internal_reasoning?: number | string | any | undefined;
  input_cache_read?: number | string | any | undefined;
  input_cache_write?: number | string | any | undefined;
  discount?: number | undefined;
};

/** @internal */
export const GetModelsUserPricing$outboundSchema: z.ZodType<
  GetModelsUserPricing$Outbound,
  z.ZodTypeDef,
  GetModelsUserPricing
> = z.object({
  prompt: z.union([z.number(), z.string(), z.any()]).optional(),
  completion: z.union([z.number(), z.string(), z.any()]).optional(),
  request: z.union([z.number(), z.string(), z.any()]).optional(),
  image: z.union([z.number(), z.string(), z.any()]).optional(),
  imageOutput: z.union([z.number(), z.string(), z.any()]).optional(),
  audio: z.union([z.number(), z.string(), z.any()]).optional(),
  inputAudioCache: z.union([z.number(), z.string(), z.any()]).optional(),
  webSearch: z.union([z.number(), z.string(), z.any()]).optional(),
  internalReasoning: z.union([z.number(), z.string(), z.any()]).optional(),
  inputCacheRead: z.union([z.number(), z.string(), z.any()]).optional(),
  inputCacheWrite: z.union([z.number(), z.string(), z.any()]).optional(),
  discount: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    imageOutput: "image_output",
    inputAudioCache: "input_audio_cache",
    webSearch: "web_search",
    internalReasoning: "internal_reasoning",
    inputCacheRead: "input_cache_read",
    inputCacheWrite: "input_cache_write",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsUserPricing$ {
  /** @deprecated use `GetModelsUserPricing$inboundSchema` instead. */
  export const inboundSchema = GetModelsUserPricing$inboundSchema;
  /** @deprecated use `GetModelsUserPricing$outboundSchema` instead. */
  export const outboundSchema = GetModelsUserPricing$outboundSchema;
  /** @deprecated use `GetModelsUserPricing$Outbound` instead. */
  export type Outbound = GetModelsUserPricing$Outbound;
}

export function getModelsUserPricingToJSON(
  getModelsUserPricing: GetModelsUserPricing,
): string {
  return JSON.stringify(
    GetModelsUserPricing$outboundSchema.parse(getModelsUserPricing),
  );
}

export function getModelsUserPricingFromJSON(
  jsonString: string,
): SafeParseResult<GetModelsUserPricing, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetModelsUserPricing$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetModelsUserPricing' from JSON`,
  );
}

/** @internal */
export const GetModelsUserTokenizer$inboundSchema: z.ZodNativeEnum<
  typeof GetModelsUserTokenizer
> = z.nativeEnum(GetModelsUserTokenizer);

/** @internal */
export const GetModelsUserTokenizer$outboundSchema: z.ZodNativeEnum<
  typeof GetModelsUserTokenizer
> = GetModelsUserTokenizer$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsUserTokenizer$ {
  /** @deprecated use `GetModelsUserTokenizer$inboundSchema` instead. */
  export const inboundSchema = GetModelsUserTokenizer$inboundSchema;
  /** @deprecated use `GetModelsUserTokenizer$outboundSchema` instead. */
  export const outboundSchema = GetModelsUserTokenizer$outboundSchema;
}

/** @internal */
export const GetModelsUserInstructType$inboundSchema: z.ZodNativeEnum<
  typeof GetModelsUserInstructType
> = z.nativeEnum(GetModelsUserInstructType);

/** @internal */
export const GetModelsUserInstructType$outboundSchema: z.ZodNativeEnum<
  typeof GetModelsUserInstructType
> = GetModelsUserInstructType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsUserInstructType$ {
  /** @deprecated use `GetModelsUserInstructType$inboundSchema` instead. */
  export const inboundSchema = GetModelsUserInstructType$inboundSchema;
  /** @deprecated use `GetModelsUserInstructType$outboundSchema` instead. */
  export const outboundSchema = GetModelsUserInstructType$outboundSchema;
}

/** @internal */
export const GetModelsUserInputModality$inboundSchema: z.ZodNativeEnum<
  typeof GetModelsUserInputModality
> = z.nativeEnum(GetModelsUserInputModality);

/** @internal */
export const GetModelsUserInputModality$outboundSchema: z.ZodNativeEnum<
  typeof GetModelsUserInputModality
> = GetModelsUserInputModality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsUserInputModality$ {
  /** @deprecated use `GetModelsUserInputModality$inboundSchema` instead. */
  export const inboundSchema = GetModelsUserInputModality$inboundSchema;
  /** @deprecated use `GetModelsUserInputModality$outboundSchema` instead. */
  export const outboundSchema = GetModelsUserInputModality$outboundSchema;
}

/** @internal */
export const GetModelsUserOutputModality$inboundSchema: z.ZodNativeEnum<
  typeof GetModelsUserOutputModality
> = z.nativeEnum(GetModelsUserOutputModality);

/** @internal */
export const GetModelsUserOutputModality$outboundSchema: z.ZodNativeEnum<
  typeof GetModelsUserOutputModality
> = GetModelsUserOutputModality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsUserOutputModality$ {
  /** @deprecated use `GetModelsUserOutputModality$inboundSchema` instead. */
  export const inboundSchema = GetModelsUserOutputModality$inboundSchema;
  /** @deprecated use `GetModelsUserOutputModality$outboundSchema` instead. */
  export const outboundSchema = GetModelsUserOutputModality$outboundSchema;
}

/** @internal */
export const GetModelsUserArchitecture$inboundSchema: z.ZodType<
  GetModelsUserArchitecture,
  z.ZodTypeDef,
  unknown
> = z.object({
  tokenizer: GetModelsUserTokenizer$inboundSchema.optional(),
  instruct_type: z.nullable(GetModelsUserInstructType$inboundSchema).optional(),
  modality: z.nullable(z.string()),
  input_modalities: z.array(GetModelsUserInputModality$inboundSchema),
  output_modalities: z.array(GetModelsUserOutputModality$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "instruct_type": "instructType",
    "input_modalities": "inputModalities",
    "output_modalities": "outputModalities",
  });
});

/** @internal */
export type GetModelsUserArchitecture$Outbound = {
  tokenizer?: string | undefined;
  instruct_type?: string | null | undefined;
  modality: string | null;
  input_modalities: Array<string>;
  output_modalities: Array<string>;
};

/** @internal */
export const GetModelsUserArchitecture$outboundSchema: z.ZodType<
  GetModelsUserArchitecture$Outbound,
  z.ZodTypeDef,
  GetModelsUserArchitecture
> = z.object({
  tokenizer: GetModelsUserTokenizer$outboundSchema.optional(),
  instructType: z.nullable(GetModelsUserInstructType$outboundSchema).optional(),
  modality: z.nullable(z.string()),
  inputModalities: z.array(GetModelsUserInputModality$outboundSchema),
  outputModalities: z.array(GetModelsUserOutputModality$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    instructType: "instruct_type",
    inputModalities: "input_modalities",
    outputModalities: "output_modalities",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsUserArchitecture$ {
  /** @deprecated use `GetModelsUserArchitecture$inboundSchema` instead. */
  export const inboundSchema = GetModelsUserArchitecture$inboundSchema;
  /** @deprecated use `GetModelsUserArchitecture$outboundSchema` instead. */
  export const outboundSchema = GetModelsUserArchitecture$outboundSchema;
  /** @deprecated use `GetModelsUserArchitecture$Outbound` instead. */
  export type Outbound = GetModelsUserArchitecture$Outbound;
}

export function getModelsUserArchitectureToJSON(
  getModelsUserArchitecture: GetModelsUserArchitecture,
): string {
  return JSON.stringify(
    GetModelsUserArchitecture$outboundSchema.parse(getModelsUserArchitecture),
  );
}

export function getModelsUserArchitectureFromJSON(
  jsonString: string,
): SafeParseResult<GetModelsUserArchitecture, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetModelsUserArchitecture$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetModelsUserArchitecture' from JSON`,
  );
}

/** @internal */
export const GetModelsUserTopProvider$inboundSchema: z.ZodType<
  GetModelsUserTopProvider,
  z.ZodTypeDef,
  unknown
> = z.object({
  context_length: z.nullable(z.number()).optional(),
  max_completion_tokens: z.nullable(z.number()).optional(),
  is_moderated: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "context_length": "contextLength",
    "max_completion_tokens": "maxCompletionTokens",
    "is_moderated": "isModerated",
  });
});

/** @internal */
export type GetModelsUserTopProvider$Outbound = {
  context_length?: number | null | undefined;
  max_completion_tokens?: number | null | undefined;
  is_moderated: boolean;
};

/** @internal */
export const GetModelsUserTopProvider$outboundSchema: z.ZodType<
  GetModelsUserTopProvider$Outbound,
  z.ZodTypeDef,
  GetModelsUserTopProvider
> = z.object({
  contextLength: z.nullable(z.number()).optional(),
  maxCompletionTokens: z.nullable(z.number()).optional(),
  isModerated: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    contextLength: "context_length",
    maxCompletionTokens: "max_completion_tokens",
    isModerated: "is_moderated",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsUserTopProvider$ {
  /** @deprecated use `GetModelsUserTopProvider$inboundSchema` instead. */
  export const inboundSchema = GetModelsUserTopProvider$inboundSchema;
  /** @deprecated use `GetModelsUserTopProvider$outboundSchema` instead. */
  export const outboundSchema = GetModelsUserTopProvider$outboundSchema;
  /** @deprecated use `GetModelsUserTopProvider$Outbound` instead. */
  export type Outbound = GetModelsUserTopProvider$Outbound;
}

export function getModelsUserTopProviderToJSON(
  getModelsUserTopProvider: GetModelsUserTopProvider,
): string {
  return JSON.stringify(
    GetModelsUserTopProvider$outboundSchema.parse(getModelsUserTopProvider),
  );
}

export function getModelsUserTopProviderFromJSON(
  jsonString: string,
): SafeParseResult<GetModelsUserTopProvider, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetModelsUserTopProvider$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetModelsUserTopProvider' from JSON`,
  );
}

/** @internal */
export const GetModelsUserPerRequestLimits$inboundSchema: z.ZodType<
  GetModelsUserPerRequestLimits,
  z.ZodTypeDef,
  unknown
> = z.object({
  prompt_tokens: z.any().optional(),
  completion_tokens: z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    "prompt_tokens": "promptTokens",
    "completion_tokens": "completionTokens",
  });
});

/** @internal */
export type GetModelsUserPerRequestLimits$Outbound = {
  prompt_tokens?: any | undefined;
  completion_tokens?: any | undefined;
};

/** @internal */
export const GetModelsUserPerRequestLimits$outboundSchema: z.ZodType<
  GetModelsUserPerRequestLimits$Outbound,
  z.ZodTypeDef,
  GetModelsUserPerRequestLimits
> = z.object({
  promptTokens: z.any().optional(),
  completionTokens: z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    promptTokens: "prompt_tokens",
    completionTokens: "completion_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsUserPerRequestLimits$ {
  /** @deprecated use `GetModelsUserPerRequestLimits$inboundSchema` instead. */
  export const inboundSchema = GetModelsUserPerRequestLimits$inboundSchema;
  /** @deprecated use `GetModelsUserPerRequestLimits$outboundSchema` instead. */
  export const outboundSchema = GetModelsUserPerRequestLimits$outboundSchema;
  /** @deprecated use `GetModelsUserPerRequestLimits$Outbound` instead. */
  export type Outbound = GetModelsUserPerRequestLimits$Outbound;
}

export function getModelsUserPerRequestLimitsToJSON(
  getModelsUserPerRequestLimits: GetModelsUserPerRequestLimits,
): string {
  return JSON.stringify(
    GetModelsUserPerRequestLimits$outboundSchema.parse(
      getModelsUserPerRequestLimits,
    ),
  );
}

export function getModelsUserPerRequestLimitsFromJSON(
  jsonString: string,
): SafeParseResult<GetModelsUserPerRequestLimits, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetModelsUserPerRequestLimits$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetModelsUserPerRequestLimits' from JSON`,
  );
}

/** @internal */
export const GetModelsUserSupportedParameter$inboundSchema: z.ZodNativeEnum<
  typeof GetModelsUserSupportedParameter
> = z.nativeEnum(GetModelsUserSupportedParameter);

/** @internal */
export const GetModelsUserSupportedParameter$outboundSchema: z.ZodNativeEnum<
  typeof GetModelsUserSupportedParameter
> = GetModelsUserSupportedParameter$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsUserSupportedParameter$ {
  /** @deprecated use `GetModelsUserSupportedParameter$inboundSchema` instead. */
  export const inboundSchema = GetModelsUserSupportedParameter$inboundSchema;
  /** @deprecated use `GetModelsUserSupportedParameter$outboundSchema` instead. */
  export const outboundSchema = GetModelsUserSupportedParameter$outboundSchema;
}

/** @internal */
export const GetModelsUserData$inboundSchema: z.ZodType<
  GetModelsUserData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  canonical_slug: z.string(),
  hugging_face_id: z.nullable(z.string()).optional(),
  name: z.string(),
  created: z.number(),
  description: z.string().optional(),
  pricing: z.lazy(() => GetModelsUserPricing$inboundSchema),
  context_length: z.nullable(z.number()),
  architecture: z.lazy(() => GetModelsUserArchitecture$inboundSchema),
  top_provider: z.lazy(() => GetModelsUserTopProvider$inboundSchema),
  per_request_limits: z.nullable(
    z.lazy(() => GetModelsUserPerRequestLimits$inboundSchema),
  ),
  supported_parameters: z.array(GetModelsUserSupportedParameter$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "canonical_slug": "canonicalSlug",
    "hugging_face_id": "huggingFaceId",
    "context_length": "contextLength",
    "top_provider": "topProvider",
    "per_request_limits": "perRequestLimits",
    "supported_parameters": "supportedParameters",
  });
});

/** @internal */
export type GetModelsUserData$Outbound = {
  id: string;
  canonical_slug: string;
  hugging_face_id?: string | null | undefined;
  name: string;
  created: number;
  description?: string | undefined;
  pricing: GetModelsUserPricing$Outbound;
  context_length: number | null;
  architecture: GetModelsUserArchitecture$Outbound;
  top_provider: GetModelsUserTopProvider$Outbound;
  per_request_limits: GetModelsUserPerRequestLimits$Outbound | null;
  supported_parameters: Array<string>;
};

/** @internal */
export const GetModelsUserData$outboundSchema: z.ZodType<
  GetModelsUserData$Outbound,
  z.ZodTypeDef,
  GetModelsUserData
> = z.object({
  id: z.string(),
  canonicalSlug: z.string(),
  huggingFaceId: z.nullable(z.string()).optional(),
  name: z.string(),
  created: z.number(),
  description: z.string().optional(),
  pricing: z.lazy(() => GetModelsUserPricing$outboundSchema),
  contextLength: z.nullable(z.number()),
  architecture: z.lazy(() => GetModelsUserArchitecture$outboundSchema),
  topProvider: z.lazy(() => GetModelsUserTopProvider$outboundSchema),
  perRequestLimits: z.nullable(
    z.lazy(() => GetModelsUserPerRequestLimits$outboundSchema),
  ),
  supportedParameters: z.array(GetModelsUserSupportedParameter$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    canonicalSlug: "canonical_slug",
    huggingFaceId: "hugging_face_id",
    contextLength: "context_length",
    topProvider: "top_provider",
    perRequestLimits: "per_request_limits",
    supportedParameters: "supported_parameters",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsUserData$ {
  /** @deprecated use `GetModelsUserData$inboundSchema` instead. */
  export const inboundSchema = GetModelsUserData$inboundSchema;
  /** @deprecated use `GetModelsUserData$outboundSchema` instead. */
  export const outboundSchema = GetModelsUserData$outboundSchema;
  /** @deprecated use `GetModelsUserData$Outbound` instead. */
  export type Outbound = GetModelsUserData$Outbound;
}

export function getModelsUserDataToJSON(
  getModelsUserData: GetModelsUserData,
): string {
  return JSON.stringify(
    GetModelsUserData$outboundSchema.parse(getModelsUserData),
  );
}

export function getModelsUserDataFromJSON(
  jsonString: string,
): SafeParseResult<GetModelsUserData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetModelsUserData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetModelsUserData' from JSON`,
  );
}

/** @internal */
export const GetModelsUserResponseBody$inboundSchema: z.ZodType<
  GetModelsUserResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(z.lazy(() => GetModelsUserData$inboundSchema)),
});

/** @internal */
export type GetModelsUserResponseBody$Outbound = {
  data: Array<GetModelsUserData$Outbound>;
};

/** @internal */
export const GetModelsUserResponseBody$outboundSchema: z.ZodType<
  GetModelsUserResponseBody$Outbound,
  z.ZodTypeDef,
  GetModelsUserResponseBody
> = z.object({
  data: z.array(z.lazy(() => GetModelsUserData$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsUserResponseBody$ {
  /** @deprecated use `GetModelsUserResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetModelsUserResponseBody$inboundSchema;
  /** @deprecated use `GetModelsUserResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetModelsUserResponseBody$outboundSchema;
  /** @deprecated use `GetModelsUserResponseBody$Outbound` instead. */
  export type Outbound = GetModelsUserResponseBody$Outbound;
}

export function getModelsUserResponseBodyToJSON(
  getModelsUserResponseBody: GetModelsUserResponseBody,
): string {
  return JSON.stringify(
    GetModelsUserResponseBody$outboundSchema.parse(getModelsUserResponseBody),
  );
}

export function getModelsUserResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetModelsUserResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetModelsUserResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetModelsUserResponseBody' from JSON`,
  );
}

/** @internal */
export const GetModelsUserResponse$inboundSchema: z.ZodType<
  GetModelsUserResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetModelsUserResponseBody$inboundSchema),
  models.ErrorResponse$inboundSchema,
]);

/** @internal */
export type GetModelsUserResponse$Outbound =
  | GetModelsUserResponseBody$Outbound
  | models.ErrorResponse$Outbound;

/** @internal */
export const GetModelsUserResponse$outboundSchema: z.ZodType<
  GetModelsUserResponse$Outbound,
  z.ZodTypeDef,
  GetModelsUserResponse
> = z.union([
  z.lazy(() => GetModelsUserResponseBody$outboundSchema),
  models.ErrorResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsUserResponse$ {
  /** @deprecated use `GetModelsUserResponse$inboundSchema` instead. */
  export const inboundSchema = GetModelsUserResponse$inboundSchema;
  /** @deprecated use `GetModelsUserResponse$outboundSchema` instead. */
  export const outboundSchema = GetModelsUserResponse$outboundSchema;
  /** @deprecated use `GetModelsUserResponse$Outbound` instead. */
  export type Outbound = GetModelsUserResponse$Outbound;
}

export function getModelsUserResponseToJSON(
  getModelsUserResponse: GetModelsUserResponse,
): string {
  return JSON.stringify(
    GetModelsUserResponse$outboundSchema.parse(getModelsUserResponse),
  );
}

export function getModelsUserResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetModelsUserResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetModelsUserResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetModelsUserResponse' from JSON`,
  );
}
