/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { EventStream } from "../../lib/event-streams.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type PostChatCompletionsResponse =
  | models.ChatCompletion
  | EventStream<models.ChatCompletionChunk>;

/** @internal */
export const PostChatCompletionsResponse$inboundSchema: z.ZodType<
  PostChatCompletionsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.ChatCompletion$inboundSchema,
  z
    .instanceof(ReadableStream<Uint8Array>)
    .transform(stream => {
      return new EventStream(stream, rawEvent => {
        if (rawEvent.data === "[DONE]") return { done: true };
        return {
          value: models.ChatCompletionChunk$inboundSchema.parse(rawEvent),
        };
      });
    }),
]);

/** @internal */
export type PostChatCompletionsResponse$Outbound =
  | models.ChatCompletion$Outbound
  | never;

/** @internal */
export const PostChatCompletionsResponse$outboundSchema: z.ZodType<
  PostChatCompletionsResponse$Outbound,
  z.ZodTypeDef,
  PostChatCompletionsResponse
> = z.union([models.ChatCompletion$outboundSchema, z.never()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostChatCompletionsResponse$ {
  /** @deprecated use `PostChatCompletionsResponse$inboundSchema` instead. */
  export const inboundSchema = PostChatCompletionsResponse$inboundSchema;
  /** @deprecated use `PostChatCompletionsResponse$outboundSchema` instead. */
  export const outboundSchema = PostChatCompletionsResponse$outboundSchema;
  /** @deprecated use `PostChatCompletionsResponse$Outbound` instead. */
  export type Outbound = PostChatCompletionsResponse$Outbound;
}

export function postChatCompletionsResponseToJSON(
  postChatCompletionsResponse: PostChatCompletionsResponse,
): string {
  return JSON.stringify(
    PostChatCompletionsResponse$outboundSchema.parse(
      postChatCompletionsResponse,
    ),
  );
}

export function postChatCompletionsResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostChatCompletionsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostChatCompletionsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostChatCompletionsResponse' from JSON`,
  );
}
