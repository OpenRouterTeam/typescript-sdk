/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * New limit reset type for the API key (daily, weekly, monthly, or null for no reset). Resets happen automatically at midnight UTC, and weeks are Monday through Sunday.
 */
export const UpdateKeysLimitReset = {
  Daily: "daily",
  Weekly: "weekly",
  Monthly: "monthly",
} as const;
/**
 * New limit reset type for the API key (daily, weekly, monthly, or null for no reset). Resets happen automatically at midnight UTC, and weeks are Monday through Sunday.
 */
export type UpdateKeysLimitReset = OpenEnum<typeof UpdateKeysLimitReset>;

export type UpdateKeysRequestBody = {
  /**
   * New name for the API key
   */
  name?: string | undefined;
  /**
   * Whether to disable the API key
   */
  disabled?: boolean | undefined;
  /**
   * New spending limit for the API key in USD
   */
  limit?: number | null | undefined;
  /**
   * New limit reset type for the API key (daily, weekly, monthly, or null for no reset). Resets happen automatically at midnight UTC, and weeks are Monday through Sunday.
   */
  limitReset?: UpdateKeysLimitReset | null | undefined;
  /**
   * Whether to include BYOK usage in the limit
   */
  includeByokInLimit?: boolean | undefined;
};

export type UpdateKeysRequest = {
  hash: string;
  requestBody: UpdateKeysRequestBody;
};

/**
 * The updated API key information
 */
export type UpdateKeysData = {
  /**
   * Unique hash identifier for the API key
   */
  hash: string;
  /**
   * Name of the API key
   */
  name: string;
  /**
   * Human-readable label for the API key
   */
  label: string;
  /**
   * Whether the API key is disabled
   */
  disabled: boolean;
  /**
   * Spending limit for the API key in USD
   */
  limit: number | null;
  /**
   * Remaining spending limit in USD
   */
  limitRemaining: number | null;
  /**
   * Type of limit reset for the API key
   */
  limitReset: string | null;
  /**
   * Whether to include external BYOK usage in the credit limit
   */
  includeByokInLimit: boolean;
  /**
   * Total OpenRouter credit usage (in USD) for the API key
   */
  usage: number;
  /**
   * OpenRouter credit usage (in USD) for the current UTC day
   */
  usageDaily: number;
  /**
   * OpenRouter credit usage (in USD) for the current UTC week (Monday-Sunday)
   */
  usageWeekly: number;
  /**
   * OpenRouter credit usage (in USD) for the current UTC month
   */
  usageMonthly: number;
  /**
   * Total external BYOK usage (in USD) for the API key
   */
  byokUsage: number;
  /**
   * External BYOK usage (in USD) for the current UTC day
   */
  byokUsageDaily: number;
  /**
   * External BYOK usage (in USD) for the current UTC week (Monday-Sunday)
   */
  byokUsageWeekly: number;
  /**
   * External BYOK usage (in USD) for current UTC month
   */
  byokUsageMonthly: number;
  /**
   * ISO 8601 timestamp of when the API key was created
   */
  createdAt: string;
  /**
   * ISO 8601 timestamp of when the API key was last updated
   */
  updatedAt: string | null;
};

/**
 * API key updated successfully
 */
export type UpdateKeysResponse = {
  /**
   * The updated API key information
   */
  data: UpdateKeysData;
};

/** @internal */
export const UpdateKeysLimitReset$inboundSchema: z.ZodType<
  UpdateKeysLimitReset,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(UpdateKeysLimitReset),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const UpdateKeysLimitReset$outboundSchema: z.ZodType<
  UpdateKeysLimitReset,
  z.ZodTypeDef,
  UpdateKeysLimitReset
> = z.union([
  z.nativeEnum(UpdateKeysLimitReset),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateKeysLimitReset$ {
  /** @deprecated use `UpdateKeysLimitReset$inboundSchema` instead. */
  export const inboundSchema = UpdateKeysLimitReset$inboundSchema;
  /** @deprecated use `UpdateKeysLimitReset$outboundSchema` instead. */
  export const outboundSchema = UpdateKeysLimitReset$outboundSchema;
}

/** @internal */
export const UpdateKeysRequestBody$inboundSchema: z.ZodType<
  UpdateKeysRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  disabled: z.boolean().optional(),
  limit: z.nullable(z.number()).optional(),
  limit_reset: z.nullable(UpdateKeysLimitReset$inboundSchema).optional(),
  include_byok_in_limit: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "limit_reset": "limitReset",
    "include_byok_in_limit": "includeByokInLimit",
  });
});

/** @internal */
export type UpdateKeysRequestBody$Outbound = {
  name?: string | undefined;
  disabled?: boolean | undefined;
  limit?: number | null | undefined;
  limit_reset?: string | null | undefined;
  include_byok_in_limit?: boolean | undefined;
};

/** @internal */
export const UpdateKeysRequestBody$outboundSchema: z.ZodType<
  UpdateKeysRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateKeysRequestBody
> = z.object({
  name: z.string().optional(),
  disabled: z.boolean().optional(),
  limit: z.nullable(z.number()).optional(),
  limitReset: z.nullable(UpdateKeysLimitReset$outboundSchema).optional(),
  includeByokInLimit: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    limitReset: "limit_reset",
    includeByokInLimit: "include_byok_in_limit",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateKeysRequestBody$ {
  /** @deprecated use `UpdateKeysRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateKeysRequestBody$inboundSchema;
  /** @deprecated use `UpdateKeysRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateKeysRequestBody$outboundSchema;
  /** @deprecated use `UpdateKeysRequestBody$Outbound` instead. */
  export type Outbound = UpdateKeysRequestBody$Outbound;
}

export function updateKeysRequestBodyToJSON(
  updateKeysRequestBody: UpdateKeysRequestBody,
): string {
  return JSON.stringify(
    UpdateKeysRequestBody$outboundSchema.parse(updateKeysRequestBody),
  );
}

export function updateKeysRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateKeysRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateKeysRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateKeysRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateKeysRequest$inboundSchema: z.ZodType<
  UpdateKeysRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  hash: z.string(),
  RequestBody: z.lazy(() => UpdateKeysRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateKeysRequest$Outbound = {
  hash: string;
  RequestBody: UpdateKeysRequestBody$Outbound;
};

/** @internal */
export const UpdateKeysRequest$outboundSchema: z.ZodType<
  UpdateKeysRequest$Outbound,
  z.ZodTypeDef,
  UpdateKeysRequest
> = z.object({
  hash: z.string(),
  requestBody: z.lazy(() => UpdateKeysRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateKeysRequest$ {
  /** @deprecated use `UpdateKeysRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateKeysRequest$inboundSchema;
  /** @deprecated use `UpdateKeysRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateKeysRequest$outboundSchema;
  /** @deprecated use `UpdateKeysRequest$Outbound` instead. */
  export type Outbound = UpdateKeysRequest$Outbound;
}

export function updateKeysRequestToJSON(
  updateKeysRequest: UpdateKeysRequest,
): string {
  return JSON.stringify(
    UpdateKeysRequest$outboundSchema.parse(updateKeysRequest),
  );
}

export function updateKeysRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateKeysRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateKeysRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateKeysRequest' from JSON`,
  );
}

/** @internal */
export const UpdateKeysData$inboundSchema: z.ZodType<
  UpdateKeysData,
  z.ZodTypeDef,
  unknown
> = z.object({
  hash: z.string(),
  name: z.string(),
  label: z.string(),
  disabled: z.boolean(),
  limit: z.nullable(z.number()),
  limit_remaining: z.nullable(z.number()),
  limit_reset: z.nullable(z.string()),
  include_byok_in_limit: z.boolean(),
  usage: z.number(),
  usage_daily: z.number(),
  usage_weekly: z.number(),
  usage_monthly: z.number(),
  byok_usage: z.number(),
  byok_usage_daily: z.number(),
  byok_usage_weekly: z.number(),
  byok_usage_monthly: z.number(),
  created_at: z.string(),
  updated_at: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    "limit_remaining": "limitRemaining",
    "limit_reset": "limitReset",
    "include_byok_in_limit": "includeByokInLimit",
    "usage_daily": "usageDaily",
    "usage_weekly": "usageWeekly",
    "usage_monthly": "usageMonthly",
    "byok_usage": "byokUsage",
    "byok_usage_daily": "byokUsageDaily",
    "byok_usage_weekly": "byokUsageWeekly",
    "byok_usage_monthly": "byokUsageMonthly",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type UpdateKeysData$Outbound = {
  hash: string;
  name: string;
  label: string;
  disabled: boolean;
  limit: number | null;
  limit_remaining: number | null;
  limit_reset: string | null;
  include_byok_in_limit: boolean;
  usage: number;
  usage_daily: number;
  usage_weekly: number;
  usage_monthly: number;
  byok_usage: number;
  byok_usage_daily: number;
  byok_usage_weekly: number;
  byok_usage_monthly: number;
  created_at: string;
  updated_at: string | null;
};

/** @internal */
export const UpdateKeysData$outboundSchema: z.ZodType<
  UpdateKeysData$Outbound,
  z.ZodTypeDef,
  UpdateKeysData
> = z.object({
  hash: z.string(),
  name: z.string(),
  label: z.string(),
  disabled: z.boolean(),
  limit: z.nullable(z.number()),
  limitRemaining: z.nullable(z.number()),
  limitReset: z.nullable(z.string()),
  includeByokInLimit: z.boolean(),
  usage: z.number(),
  usageDaily: z.number(),
  usageWeekly: z.number(),
  usageMonthly: z.number(),
  byokUsage: z.number(),
  byokUsageDaily: z.number(),
  byokUsageWeekly: z.number(),
  byokUsageMonthly: z.number(),
  createdAt: z.string(),
  updatedAt: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    limitRemaining: "limit_remaining",
    limitReset: "limit_reset",
    includeByokInLimit: "include_byok_in_limit",
    usageDaily: "usage_daily",
    usageWeekly: "usage_weekly",
    usageMonthly: "usage_monthly",
    byokUsage: "byok_usage",
    byokUsageDaily: "byok_usage_daily",
    byokUsageWeekly: "byok_usage_weekly",
    byokUsageMonthly: "byok_usage_monthly",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateKeysData$ {
  /** @deprecated use `UpdateKeysData$inboundSchema` instead. */
  export const inboundSchema = UpdateKeysData$inboundSchema;
  /** @deprecated use `UpdateKeysData$outboundSchema` instead. */
  export const outboundSchema = UpdateKeysData$outboundSchema;
  /** @deprecated use `UpdateKeysData$Outbound` instead. */
  export type Outbound = UpdateKeysData$Outbound;
}

export function updateKeysDataToJSON(updateKeysData: UpdateKeysData): string {
  return JSON.stringify(UpdateKeysData$outboundSchema.parse(updateKeysData));
}

export function updateKeysDataFromJSON(
  jsonString: string,
): SafeParseResult<UpdateKeysData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateKeysData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateKeysData' from JSON`,
  );
}

/** @internal */
export const UpdateKeysResponse$inboundSchema: z.ZodType<
  UpdateKeysResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => UpdateKeysData$inboundSchema),
});

/** @internal */
export type UpdateKeysResponse$Outbound = {
  data: UpdateKeysData$Outbound;
};

/** @internal */
export const UpdateKeysResponse$outboundSchema: z.ZodType<
  UpdateKeysResponse$Outbound,
  z.ZodTypeDef,
  UpdateKeysResponse
> = z.object({
  data: z.lazy(() => UpdateKeysData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateKeysResponse$ {
  /** @deprecated use `UpdateKeysResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateKeysResponse$inboundSchema;
  /** @deprecated use `UpdateKeysResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateKeysResponse$outboundSchema;
  /** @deprecated use `UpdateKeysResponse$Outbound` instead. */
  export type Outbound = UpdateKeysResponse$Outbound;
}

export function updateKeysResponseToJSON(
  updateKeysResponse: UpdateKeysResponse,
): string {
  return JSON.stringify(
    UpdateKeysResponse$outboundSchema.parse(updateKeysResponse),
  );
}

export function updateKeysResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateKeysResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateKeysResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateKeysResponse' from JSON`,
  );
}
