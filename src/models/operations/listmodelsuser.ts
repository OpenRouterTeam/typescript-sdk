/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ListModelsUserSecurity = {
  bearer: string;
};

export type ListModelsUserResponse =
  | models.ErrorResponse
  | models.ModelsListResponse;

/** @internal */
export const ListModelsUserSecurity$inboundSchema: z.ZodType<
  ListModelsUserSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  bearer: z.string(),
});

/** @internal */
export type ListModelsUserSecurity$Outbound = {
  bearer: string;
};

/** @internal */
export const ListModelsUserSecurity$outboundSchema: z.ZodType<
  ListModelsUserSecurity$Outbound,
  z.ZodTypeDef,
  ListModelsUserSecurity
> = z.object({
  bearer: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListModelsUserSecurity$ {
  /** @deprecated use `ListModelsUserSecurity$inboundSchema` instead. */
  export const inboundSchema = ListModelsUserSecurity$inboundSchema;
  /** @deprecated use `ListModelsUserSecurity$outboundSchema` instead. */
  export const outboundSchema = ListModelsUserSecurity$outboundSchema;
  /** @deprecated use `ListModelsUserSecurity$Outbound` instead. */
  export type Outbound = ListModelsUserSecurity$Outbound;
}

export function listModelsUserSecurityToJSON(
  listModelsUserSecurity: ListModelsUserSecurity,
): string {
  return JSON.stringify(
    ListModelsUserSecurity$outboundSchema.parse(listModelsUserSecurity),
  );
}

export function listModelsUserSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ListModelsUserSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListModelsUserSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListModelsUserSecurity' from JSON`,
  );
}

/** @internal */
export const ListModelsUserResponse$inboundSchema: z.ZodType<
  ListModelsUserResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.ErrorResponse$inboundSchema,
  models.ModelsListResponse$inboundSchema,
]);

/** @internal */
export type ListModelsUserResponse$Outbound =
  | models.ErrorResponse$Outbound
  | models.ModelsListResponse$Outbound;

/** @internal */
export const ListModelsUserResponse$outboundSchema: z.ZodType<
  ListModelsUserResponse$Outbound,
  z.ZodTypeDef,
  ListModelsUserResponse
> = z.union([
  models.ErrorResponse$outboundSchema,
  models.ModelsListResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListModelsUserResponse$ {
  /** @deprecated use `ListModelsUserResponse$inboundSchema` instead. */
  export const inboundSchema = ListModelsUserResponse$inboundSchema;
  /** @deprecated use `ListModelsUserResponse$outboundSchema` instead. */
  export const outboundSchema = ListModelsUserResponse$outboundSchema;
  /** @deprecated use `ListModelsUserResponse$Outbound` instead. */
  export type Outbound = ListModelsUserResponse$Outbound;
}

export function listModelsUserResponseToJSON(
  listModelsUserResponse: ListModelsUserResponse,
): string {
  return JSON.stringify(
    ListModelsUserResponse$outboundSchema.parse(listModelsUserResponse),
  );
}

export function listModelsUserResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListModelsUserResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListModelsUserResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListModelsUserResponse' from JSON`,
  );
}
