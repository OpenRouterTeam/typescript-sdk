/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ListModelsUserSecurity = {
  bearer: string;
};

/**
 * Returns a list of models filtered by user provider preferences
 */
export type ListModelsUserResponseBody = {
  /**
   * List of available models
   */
  data: Array<models.Model>;
};

export type ListModelsUserResponse =
  | ListModelsUserResponseBody
  | models.ErrorResponse;

/** @internal */
export const ListModelsUserSecurity$inboundSchema: z.ZodType<
  ListModelsUserSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  bearer: z.string(),
});

/** @internal */
export type ListModelsUserSecurity$Outbound = {
  bearer: string;
};

/** @internal */
export const ListModelsUserSecurity$outboundSchema: z.ZodType<
  ListModelsUserSecurity$Outbound,
  z.ZodTypeDef,
  ListModelsUserSecurity
> = z.object({
  bearer: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListModelsUserSecurity$ {
  /** @deprecated use `ListModelsUserSecurity$inboundSchema` instead. */
  export const inboundSchema = ListModelsUserSecurity$inboundSchema;
  /** @deprecated use `ListModelsUserSecurity$outboundSchema` instead. */
  export const outboundSchema = ListModelsUserSecurity$outboundSchema;
  /** @deprecated use `ListModelsUserSecurity$Outbound` instead. */
  export type Outbound = ListModelsUserSecurity$Outbound;
}

export function listModelsUserSecurityToJSON(
  listModelsUserSecurity: ListModelsUserSecurity,
): string {
  return JSON.stringify(
    ListModelsUserSecurity$outboundSchema.parse(listModelsUserSecurity),
  );
}

export function listModelsUserSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ListModelsUserSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListModelsUserSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListModelsUserSecurity' from JSON`,
  );
}

/** @internal */
export const ListModelsUserResponseBody$inboundSchema: z.ZodType<
  ListModelsUserResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(models.Model$inboundSchema),
});

/** @internal */
export type ListModelsUserResponseBody$Outbound = {
  data: Array<models.Model$Outbound>;
};

/** @internal */
export const ListModelsUserResponseBody$outboundSchema: z.ZodType<
  ListModelsUserResponseBody$Outbound,
  z.ZodTypeDef,
  ListModelsUserResponseBody
> = z.object({
  data: z.array(models.Model$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListModelsUserResponseBody$ {
  /** @deprecated use `ListModelsUserResponseBody$inboundSchema` instead. */
  export const inboundSchema = ListModelsUserResponseBody$inboundSchema;
  /** @deprecated use `ListModelsUserResponseBody$outboundSchema` instead. */
  export const outboundSchema = ListModelsUserResponseBody$outboundSchema;
  /** @deprecated use `ListModelsUserResponseBody$Outbound` instead. */
  export type Outbound = ListModelsUserResponseBody$Outbound;
}

export function listModelsUserResponseBodyToJSON(
  listModelsUserResponseBody: ListModelsUserResponseBody,
): string {
  return JSON.stringify(
    ListModelsUserResponseBody$outboundSchema.parse(listModelsUserResponseBody),
  );
}

export function listModelsUserResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ListModelsUserResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListModelsUserResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListModelsUserResponseBody' from JSON`,
  );
}

/** @internal */
export const ListModelsUserResponse$inboundSchema: z.ZodType<
  ListModelsUserResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ListModelsUserResponseBody$inboundSchema),
  models.ErrorResponse$inboundSchema,
]);

/** @internal */
export type ListModelsUserResponse$Outbound =
  | ListModelsUserResponseBody$Outbound
  | models.ErrorResponse$Outbound;

/** @internal */
export const ListModelsUserResponse$outboundSchema: z.ZodType<
  ListModelsUserResponse$Outbound,
  z.ZodTypeDef,
  ListModelsUserResponse
> = z.union([
  z.lazy(() => ListModelsUserResponseBody$outboundSchema),
  models.ErrorResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListModelsUserResponse$ {
  /** @deprecated use `ListModelsUserResponse$inboundSchema` instead. */
  export const inboundSchema = ListModelsUserResponse$inboundSchema;
  /** @deprecated use `ListModelsUserResponse$outboundSchema` instead. */
  export const outboundSchema = ListModelsUserResponse$outboundSchema;
  /** @deprecated use `ListModelsUserResponse$Outbound` instead. */
  export type Outbound = ListModelsUserResponse$Outbound;
}

export function listModelsUserResponseToJSON(
  listModelsUserResponse: ListModelsUserResponse,
): string {
  return JSON.stringify(
    ListModelsUserResponse$outboundSchema.parse(listModelsUserResponse),
  );
}

export function listModelsUserResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListModelsUserResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListModelsUserResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListModelsUserResponse' from JSON`,
  );
}
