/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v4";
import { EventStream } from "../../lib/event-streams.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

/**
 * Successful response
 */
export type CreateResponsesResponseBody = {
  /**
   * Union of all possible event types emitted during response streaming
   */
  data: models.OpenResponsesStreamEvent;
};

export type CreateResponsesResponse =
  | models.OpenResponsesNonStreamingResponse
  | EventStream<models.OpenResponsesStreamEvent>;

/** @internal */
export const CreateResponsesResponseBody$inboundSchema: z.ZodType<
  CreateResponsesResponseBody,
  unknown
> = z.object({
  data: z.string().transform((v, ctx) => {
    try {
      return JSON.parse(v);
    } catch (err) {
      ctx.addIssue({
        code: z.ZodIssueCode.custom,
        message: `malformed json: ${err}`,
      });
      return z.NEVER;
    }
  }).pipe(models.OpenResponsesStreamEvent$inboundSchema),
});

/** @internal */
export type CreateResponsesResponseBody$Outbound = {
  data: models.OpenResponsesStreamEvent$Outbound;
};

/** @internal */
export const CreateResponsesResponseBody$outboundSchema: z.ZodType<
  CreateResponsesResponseBody$Outbound,
  CreateResponsesResponseBody
> = z.object({
  data: models.OpenResponsesStreamEvent$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponsesResponseBody$ {
  /** @deprecated use `CreateResponsesResponseBody$inboundSchema` instead. */
  export const inboundSchema = CreateResponsesResponseBody$inboundSchema;
  /** @deprecated use `CreateResponsesResponseBody$outboundSchema` instead. */
  export const outboundSchema = CreateResponsesResponseBody$outboundSchema;
  /** @deprecated use `CreateResponsesResponseBody$Outbound` instead. */
  export type Outbound = CreateResponsesResponseBody$Outbound;
}

export function createResponsesResponseBodyToJSON(
  createResponsesResponseBody: CreateResponsesResponseBody,
): string {
  return JSON.stringify(
    CreateResponsesResponseBody$outboundSchema.parse(
      createResponsesResponseBody,
    ),
  );
}

export function createResponsesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateResponsesResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateResponsesResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateResponsesResponseBody' from JSON`,
  );
}

/** @internal */
export const CreateResponsesResponse$inboundSchema: z.ZodType<
  CreateResponsesResponse,
  unknown
> = z.union([
  models.OpenResponsesNonStreamingResponse$inboundSchema,
  z.custom<ReadableStream<Uint8Array>>(x => x instanceof ReadableStream)
    .transform(stream => {
      return new EventStream(stream, rawEvent => {
        if (rawEvent.data === "[DONE]") return { done: true };
        return {
          value: z.lazy(() => CreateResponsesResponseBody$inboundSchema).parse(
            rawEvent,
          )?.data,
        };
      });
    }),
]);

/** @internal */
export type CreateResponsesResponse$Outbound =
  | models.OpenResponsesNonStreamingResponse$Outbound
  | never;

/** @internal */
export const CreateResponsesResponse$outboundSchema: z.ZodType<
  CreateResponsesResponse$Outbound,
  CreateResponsesResponse
> = z.union([
  models.OpenResponsesNonStreamingResponse$outboundSchema,
  z.never(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponsesResponse$ {
  /** @deprecated use `CreateResponsesResponse$inboundSchema` instead. */
  export const inboundSchema = CreateResponsesResponse$inboundSchema;
  /** @deprecated use `CreateResponsesResponse$outboundSchema` instead. */
  export const outboundSchema = CreateResponsesResponse$outboundSchema;
  /** @deprecated use `CreateResponsesResponse$Outbound` instead. */
  export type Outbound = CreateResponsesResponse$Outbound;
}

export function createResponsesResponseToJSON(
  createResponsesResponse: CreateResponsesResponse,
): string {
  return JSON.stringify(
    CreateResponsesResponse$outboundSchema.parse(createResponsesResponse),
  );
}

export function createResponsesResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateResponsesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateResponsesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateResponsesResponse' from JSON`,
  );
}
