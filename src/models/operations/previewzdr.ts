/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PreviewZDRPrompt = number | string | any;

export type PreviewZDRCompletion = number | string | any;

export type EndpointsPreviewZDRRequest = number | string | any;

export type PreviewZDRImage = number | string | any;

export type PreviewZDRImageOutput = number | string | any;

export type PreviewZDRAudio = number | string | any;

export type PreviewZDRInputAudioCache = number | string | any;

export type PreviewZDRWebSearch = number | string | any;

export type PreviewZDRInternalReasoning = number | string | any;

export type PreviewZDRInputCacheRead = number | string | any;

export type PreviewZDRInputCacheWrite = number | string | any;

export type PreviewZDRPricing = {
  prompt?: number | string | any | undefined;
  completion?: number | string | any | undefined;
  request?: number | string | any | undefined;
  image?: number | string | any | undefined;
  imageOutput?: number | string | any | undefined;
  audio?: number | string | any | undefined;
  inputAudioCache?: number | string | any | undefined;
  webSearch?: number | string | any | undefined;
  internalReasoning?: number | string | any | undefined;
  inputCacheRead?: number | string | any | undefined;
  inputCacheWrite?: number | string | any | undefined;
  discount?: number | undefined;
};

export const PreviewZDRProviderName = {
  AnyScale: "AnyScale",
  CentML: "Cent-ML",
  HuggingFace: "HuggingFace",
  Hyperbolic2: "Hyperbolic 2",
  Lepton: "Lepton",
  Lynn2: "Lynn 2",
  Lynn: "Lynn",
  Mancer: "Mancer",
  Modal: "Modal",
  OctoAI: "OctoAI",
  Recursal: "Recursal",
  Reflection: "Reflection",
  Replicate: "Replicate",
  SambaNova2: "SambaNova 2",
  SFCompute: "SF Compute",
  Together2: "Together 2",
  OneDotAI: "01.AI",
  Ai21: "AI21",
  AionLabs: "AionLabs",
  Alibaba: "Alibaba",
  AmazonBedrock: "Amazon Bedrock",
  Anthropic: "Anthropic",
  AtlasCloud: "AtlasCloud",
  Atoma: "Atoma",
  Avian: "Avian",
  Azure: "Azure",
  BaseTen: "BaseTen",
  Cerebras: "Cerebras",
  Chutes: "Chutes",
  Cloudflare: "Cloudflare",
  Cohere: "Cohere",
  CrofAI: "CrofAI",
  Crusoe: "Crusoe",
  DeepInfra: "DeepInfra",
  DeepSeek: "DeepSeek",
  Enfer: "Enfer",
  Featherless: "Featherless",
  Fireworks: "Fireworks",
  Friendli: "Friendli",
  GMICloud: "GMICloud",
  Google: "Google",
  GoogleAIStudio: "Google AI Studio",
  Groq: "Groq",
  Hyperbolic: "Hyperbolic",
  Inception: "Inception",
  InferenceNet: "InferenceNet",
  Infermatic: "Infermatic",
  Inflection: "Inflection",
  InoCloud: "InoCloud",
  Kluster: "Kluster",
  Lambda: "Lambda",
  Liquid: "Liquid",
  Mancer2: "Mancer 2",
  Meta: "Meta",
  Minimax: "Minimax",
  Mistral: "Mistral",
  MoonshotAI: "Moonshot AI",
  Morph: "Morph",
  NCompass: "NCompass",
  Nebius: "Nebius",
  NextBit: "NextBit",
  Nineteen: "Nineteen",
  Novita: "Novita",
  Nvidia: "Nvidia",
  OpenAI: "OpenAI",
  OpenInference: "OpenInference",
  Parasail: "Parasail",
  Perplexity: "Perplexity",
  Phala: "Phala",
  Relace: "Relace",
  SambaNova: "SambaNova",
  SiliconFlow: "SiliconFlow",
  Stealth: "Stealth",
  Switchpoint: "Switchpoint",
  Targon: "Targon",
  Together: "Together",
  Ubicloud: "Ubicloud",
  Venice: "Venice",
  WandB: "WandB",
  XAI: "xAI",
  ZAi: "Z.AI",
  FakeProvider: "FakeProvider",
} as const;
export type PreviewZDRProviderName = ClosedEnum<typeof PreviewZDRProviderName>;

export const PreviewZDRQuantization = {
  Int4: "int4",
  Int8: "int8",
  Fp4: "fp4",
  Fp6: "fp6",
  Fp8: "fp8",
  Fp16: "fp16",
  Bf16: "bf16",
  Fp32: "fp32",
  Unknown: "unknown",
} as const;
export type PreviewZDRQuantization = ClosedEnum<typeof PreviewZDRQuantization>;

export const PreviewZDRSupportedParameter = {
  Temperature: "temperature",
  TopP: "top_p",
  TopK: "top_k",
  MinP: "min_p",
  TopA: "top_a",
  FrequencyPenalty: "frequency_penalty",
  PresencePenalty: "presence_penalty",
  RepetitionPenalty: "repetition_penalty",
  MaxTokens: "max_tokens",
  LogitBias: "logit_bias",
  Logprobs: "logprobs",
  TopLogprobs: "top_logprobs",
  Seed: "seed",
  ResponseFormat: "response_format",
  StructuredOutputs: "structured_outputs",
  Stop: "stop",
  Tools: "tools",
  ToolChoice: "tool_choice",
  ParallelToolCalls: "parallel_tool_calls",
  IncludeReasoning: "include_reasoning",
  Reasoning: "reasoning",
  WebSearchOptions: "web_search_options",
  Verbosity: "verbosity",
} as const;
export type PreviewZDRSupportedParameter = ClosedEnum<
  typeof PreviewZDRSupportedParameter
>;

export const PreviewZDRStatus = {
  Zero: 0,
  Minus1: -1,
  Minus2: -2,
  Minus3: -3,
  Minus5: -5,
  Minus10: -10,
} as const;
export type PreviewZDRStatus = ClosedEnum<typeof PreviewZDRStatus>;

export type PreviewZDRData = {
  name: string;
  modelName: string;
  contextLength: number;
  pricing: PreviewZDRPricing;
  providerName: PreviewZDRProviderName;
  tag: string;
  quantization: PreviewZDRQuantization | null;
  maxCompletionTokens: number | null;
  maxPromptTokens: number | null;
  supportedParameters: Array<PreviewZDRSupportedParameter>;
  status?: PreviewZDRStatus | undefined;
  uptimeLast30m: number | null;
  supportsImplicitCaching: boolean;
};

/**
 * Returns a list of endpoints
 */
export type PreviewZDRResponse = {
  data: Array<PreviewZDRData>;
};

/** @internal */
export const PreviewZDRPrompt$inboundSchema: z.ZodType<
  PreviewZDRPrompt,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type PreviewZDRPrompt$Outbound = number | string | any;

/** @internal */
export const PreviewZDRPrompt$outboundSchema: z.ZodType<
  PreviewZDRPrompt$Outbound,
  z.ZodTypeDef,
  PreviewZDRPrompt
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PreviewZDRPrompt$ {
  /** @deprecated use `PreviewZDRPrompt$inboundSchema` instead. */
  export const inboundSchema = PreviewZDRPrompt$inboundSchema;
  /** @deprecated use `PreviewZDRPrompt$outboundSchema` instead. */
  export const outboundSchema = PreviewZDRPrompt$outboundSchema;
  /** @deprecated use `PreviewZDRPrompt$Outbound` instead. */
  export type Outbound = PreviewZDRPrompt$Outbound;
}

export function previewZDRPromptToJSON(
  previewZDRPrompt: PreviewZDRPrompt,
): string {
  return JSON.stringify(
    PreviewZDRPrompt$outboundSchema.parse(previewZDRPrompt),
  );
}

export function previewZDRPromptFromJSON(
  jsonString: string,
): SafeParseResult<PreviewZDRPrompt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PreviewZDRPrompt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PreviewZDRPrompt' from JSON`,
  );
}

/** @internal */
export const PreviewZDRCompletion$inboundSchema: z.ZodType<
  PreviewZDRCompletion,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type PreviewZDRCompletion$Outbound = number | string | any;

/** @internal */
export const PreviewZDRCompletion$outboundSchema: z.ZodType<
  PreviewZDRCompletion$Outbound,
  z.ZodTypeDef,
  PreviewZDRCompletion
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PreviewZDRCompletion$ {
  /** @deprecated use `PreviewZDRCompletion$inboundSchema` instead. */
  export const inboundSchema = PreviewZDRCompletion$inboundSchema;
  /** @deprecated use `PreviewZDRCompletion$outboundSchema` instead. */
  export const outboundSchema = PreviewZDRCompletion$outboundSchema;
  /** @deprecated use `PreviewZDRCompletion$Outbound` instead. */
  export type Outbound = PreviewZDRCompletion$Outbound;
}

export function previewZDRCompletionToJSON(
  previewZDRCompletion: PreviewZDRCompletion,
): string {
  return JSON.stringify(
    PreviewZDRCompletion$outboundSchema.parse(previewZDRCompletion),
  );
}

export function previewZDRCompletionFromJSON(
  jsonString: string,
): SafeParseResult<PreviewZDRCompletion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PreviewZDRCompletion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PreviewZDRCompletion' from JSON`,
  );
}

/** @internal */
export const EndpointsPreviewZDRRequest$inboundSchema: z.ZodType<
  EndpointsPreviewZDRRequest,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type EndpointsPreviewZDRRequest$Outbound = number | string | any;

/** @internal */
export const EndpointsPreviewZDRRequest$outboundSchema: z.ZodType<
  EndpointsPreviewZDRRequest$Outbound,
  z.ZodTypeDef,
  EndpointsPreviewZDRRequest
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EndpointsPreviewZDRRequest$ {
  /** @deprecated use `EndpointsPreviewZDRRequest$inboundSchema` instead. */
  export const inboundSchema = EndpointsPreviewZDRRequest$inboundSchema;
  /** @deprecated use `EndpointsPreviewZDRRequest$outboundSchema` instead. */
  export const outboundSchema = EndpointsPreviewZDRRequest$outboundSchema;
  /** @deprecated use `EndpointsPreviewZDRRequest$Outbound` instead. */
  export type Outbound = EndpointsPreviewZDRRequest$Outbound;
}

export function endpointsPreviewZDRRequestToJSON(
  endpointsPreviewZDRRequest: EndpointsPreviewZDRRequest,
): string {
  return JSON.stringify(
    EndpointsPreviewZDRRequest$outboundSchema.parse(endpointsPreviewZDRRequest),
  );
}

export function endpointsPreviewZDRRequestFromJSON(
  jsonString: string,
): SafeParseResult<EndpointsPreviewZDRRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EndpointsPreviewZDRRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EndpointsPreviewZDRRequest' from JSON`,
  );
}

/** @internal */
export const PreviewZDRImage$inboundSchema: z.ZodType<
  PreviewZDRImage,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type PreviewZDRImage$Outbound = number | string | any;

/** @internal */
export const PreviewZDRImage$outboundSchema: z.ZodType<
  PreviewZDRImage$Outbound,
  z.ZodTypeDef,
  PreviewZDRImage
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PreviewZDRImage$ {
  /** @deprecated use `PreviewZDRImage$inboundSchema` instead. */
  export const inboundSchema = PreviewZDRImage$inboundSchema;
  /** @deprecated use `PreviewZDRImage$outboundSchema` instead. */
  export const outboundSchema = PreviewZDRImage$outboundSchema;
  /** @deprecated use `PreviewZDRImage$Outbound` instead. */
  export type Outbound = PreviewZDRImage$Outbound;
}

export function previewZDRImageToJSON(
  previewZDRImage: PreviewZDRImage,
): string {
  return JSON.stringify(PreviewZDRImage$outboundSchema.parse(previewZDRImage));
}

export function previewZDRImageFromJSON(
  jsonString: string,
): SafeParseResult<PreviewZDRImage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PreviewZDRImage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PreviewZDRImage' from JSON`,
  );
}

/** @internal */
export const PreviewZDRImageOutput$inboundSchema: z.ZodType<
  PreviewZDRImageOutput,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type PreviewZDRImageOutput$Outbound = number | string | any;

/** @internal */
export const PreviewZDRImageOutput$outboundSchema: z.ZodType<
  PreviewZDRImageOutput$Outbound,
  z.ZodTypeDef,
  PreviewZDRImageOutput
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PreviewZDRImageOutput$ {
  /** @deprecated use `PreviewZDRImageOutput$inboundSchema` instead. */
  export const inboundSchema = PreviewZDRImageOutput$inboundSchema;
  /** @deprecated use `PreviewZDRImageOutput$outboundSchema` instead. */
  export const outboundSchema = PreviewZDRImageOutput$outboundSchema;
  /** @deprecated use `PreviewZDRImageOutput$Outbound` instead. */
  export type Outbound = PreviewZDRImageOutput$Outbound;
}

export function previewZDRImageOutputToJSON(
  previewZDRImageOutput: PreviewZDRImageOutput,
): string {
  return JSON.stringify(
    PreviewZDRImageOutput$outboundSchema.parse(previewZDRImageOutput),
  );
}

export function previewZDRImageOutputFromJSON(
  jsonString: string,
): SafeParseResult<PreviewZDRImageOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PreviewZDRImageOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PreviewZDRImageOutput' from JSON`,
  );
}

/** @internal */
export const PreviewZDRAudio$inboundSchema: z.ZodType<
  PreviewZDRAudio,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type PreviewZDRAudio$Outbound = number | string | any;

/** @internal */
export const PreviewZDRAudio$outboundSchema: z.ZodType<
  PreviewZDRAudio$Outbound,
  z.ZodTypeDef,
  PreviewZDRAudio
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PreviewZDRAudio$ {
  /** @deprecated use `PreviewZDRAudio$inboundSchema` instead. */
  export const inboundSchema = PreviewZDRAudio$inboundSchema;
  /** @deprecated use `PreviewZDRAudio$outboundSchema` instead. */
  export const outboundSchema = PreviewZDRAudio$outboundSchema;
  /** @deprecated use `PreviewZDRAudio$Outbound` instead. */
  export type Outbound = PreviewZDRAudio$Outbound;
}

export function previewZDRAudioToJSON(
  previewZDRAudio: PreviewZDRAudio,
): string {
  return JSON.stringify(PreviewZDRAudio$outboundSchema.parse(previewZDRAudio));
}

export function previewZDRAudioFromJSON(
  jsonString: string,
): SafeParseResult<PreviewZDRAudio, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PreviewZDRAudio$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PreviewZDRAudio' from JSON`,
  );
}

/** @internal */
export const PreviewZDRInputAudioCache$inboundSchema: z.ZodType<
  PreviewZDRInputAudioCache,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type PreviewZDRInputAudioCache$Outbound = number | string | any;

/** @internal */
export const PreviewZDRInputAudioCache$outboundSchema: z.ZodType<
  PreviewZDRInputAudioCache$Outbound,
  z.ZodTypeDef,
  PreviewZDRInputAudioCache
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PreviewZDRInputAudioCache$ {
  /** @deprecated use `PreviewZDRInputAudioCache$inboundSchema` instead. */
  export const inboundSchema = PreviewZDRInputAudioCache$inboundSchema;
  /** @deprecated use `PreviewZDRInputAudioCache$outboundSchema` instead. */
  export const outboundSchema = PreviewZDRInputAudioCache$outboundSchema;
  /** @deprecated use `PreviewZDRInputAudioCache$Outbound` instead. */
  export type Outbound = PreviewZDRInputAudioCache$Outbound;
}

export function previewZDRInputAudioCacheToJSON(
  previewZDRInputAudioCache: PreviewZDRInputAudioCache,
): string {
  return JSON.stringify(
    PreviewZDRInputAudioCache$outboundSchema.parse(previewZDRInputAudioCache),
  );
}

export function previewZDRInputAudioCacheFromJSON(
  jsonString: string,
): SafeParseResult<PreviewZDRInputAudioCache, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PreviewZDRInputAudioCache$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PreviewZDRInputAudioCache' from JSON`,
  );
}

/** @internal */
export const PreviewZDRWebSearch$inboundSchema: z.ZodType<
  PreviewZDRWebSearch,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type PreviewZDRWebSearch$Outbound = number | string | any;

/** @internal */
export const PreviewZDRWebSearch$outboundSchema: z.ZodType<
  PreviewZDRWebSearch$Outbound,
  z.ZodTypeDef,
  PreviewZDRWebSearch
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PreviewZDRWebSearch$ {
  /** @deprecated use `PreviewZDRWebSearch$inboundSchema` instead. */
  export const inboundSchema = PreviewZDRWebSearch$inboundSchema;
  /** @deprecated use `PreviewZDRWebSearch$outboundSchema` instead. */
  export const outboundSchema = PreviewZDRWebSearch$outboundSchema;
  /** @deprecated use `PreviewZDRWebSearch$Outbound` instead. */
  export type Outbound = PreviewZDRWebSearch$Outbound;
}

export function previewZDRWebSearchToJSON(
  previewZDRWebSearch: PreviewZDRWebSearch,
): string {
  return JSON.stringify(
    PreviewZDRWebSearch$outboundSchema.parse(previewZDRWebSearch),
  );
}

export function previewZDRWebSearchFromJSON(
  jsonString: string,
): SafeParseResult<PreviewZDRWebSearch, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PreviewZDRWebSearch$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PreviewZDRWebSearch' from JSON`,
  );
}

/** @internal */
export const PreviewZDRInternalReasoning$inboundSchema: z.ZodType<
  PreviewZDRInternalReasoning,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type PreviewZDRInternalReasoning$Outbound = number | string | any;

/** @internal */
export const PreviewZDRInternalReasoning$outboundSchema: z.ZodType<
  PreviewZDRInternalReasoning$Outbound,
  z.ZodTypeDef,
  PreviewZDRInternalReasoning
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PreviewZDRInternalReasoning$ {
  /** @deprecated use `PreviewZDRInternalReasoning$inboundSchema` instead. */
  export const inboundSchema = PreviewZDRInternalReasoning$inboundSchema;
  /** @deprecated use `PreviewZDRInternalReasoning$outboundSchema` instead. */
  export const outboundSchema = PreviewZDRInternalReasoning$outboundSchema;
  /** @deprecated use `PreviewZDRInternalReasoning$Outbound` instead. */
  export type Outbound = PreviewZDRInternalReasoning$Outbound;
}

export function previewZDRInternalReasoningToJSON(
  previewZDRInternalReasoning: PreviewZDRInternalReasoning,
): string {
  return JSON.stringify(
    PreviewZDRInternalReasoning$outboundSchema.parse(
      previewZDRInternalReasoning,
    ),
  );
}

export function previewZDRInternalReasoningFromJSON(
  jsonString: string,
): SafeParseResult<PreviewZDRInternalReasoning, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PreviewZDRInternalReasoning$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PreviewZDRInternalReasoning' from JSON`,
  );
}

/** @internal */
export const PreviewZDRInputCacheRead$inboundSchema: z.ZodType<
  PreviewZDRInputCacheRead,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type PreviewZDRInputCacheRead$Outbound = number | string | any;

/** @internal */
export const PreviewZDRInputCacheRead$outboundSchema: z.ZodType<
  PreviewZDRInputCacheRead$Outbound,
  z.ZodTypeDef,
  PreviewZDRInputCacheRead
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PreviewZDRInputCacheRead$ {
  /** @deprecated use `PreviewZDRInputCacheRead$inboundSchema` instead. */
  export const inboundSchema = PreviewZDRInputCacheRead$inboundSchema;
  /** @deprecated use `PreviewZDRInputCacheRead$outboundSchema` instead. */
  export const outboundSchema = PreviewZDRInputCacheRead$outboundSchema;
  /** @deprecated use `PreviewZDRInputCacheRead$Outbound` instead. */
  export type Outbound = PreviewZDRInputCacheRead$Outbound;
}

export function previewZDRInputCacheReadToJSON(
  previewZDRInputCacheRead: PreviewZDRInputCacheRead,
): string {
  return JSON.stringify(
    PreviewZDRInputCacheRead$outboundSchema.parse(previewZDRInputCacheRead),
  );
}

export function previewZDRInputCacheReadFromJSON(
  jsonString: string,
): SafeParseResult<PreviewZDRInputCacheRead, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PreviewZDRInputCacheRead$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PreviewZDRInputCacheRead' from JSON`,
  );
}

/** @internal */
export const PreviewZDRInputCacheWrite$inboundSchema: z.ZodType<
  PreviewZDRInputCacheWrite,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type PreviewZDRInputCacheWrite$Outbound = number | string | any;

/** @internal */
export const PreviewZDRInputCacheWrite$outboundSchema: z.ZodType<
  PreviewZDRInputCacheWrite$Outbound,
  z.ZodTypeDef,
  PreviewZDRInputCacheWrite
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PreviewZDRInputCacheWrite$ {
  /** @deprecated use `PreviewZDRInputCacheWrite$inboundSchema` instead. */
  export const inboundSchema = PreviewZDRInputCacheWrite$inboundSchema;
  /** @deprecated use `PreviewZDRInputCacheWrite$outboundSchema` instead. */
  export const outboundSchema = PreviewZDRInputCacheWrite$outboundSchema;
  /** @deprecated use `PreviewZDRInputCacheWrite$Outbound` instead. */
  export type Outbound = PreviewZDRInputCacheWrite$Outbound;
}

export function previewZDRInputCacheWriteToJSON(
  previewZDRInputCacheWrite: PreviewZDRInputCacheWrite,
): string {
  return JSON.stringify(
    PreviewZDRInputCacheWrite$outboundSchema.parse(previewZDRInputCacheWrite),
  );
}

export function previewZDRInputCacheWriteFromJSON(
  jsonString: string,
): SafeParseResult<PreviewZDRInputCacheWrite, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PreviewZDRInputCacheWrite$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PreviewZDRInputCacheWrite' from JSON`,
  );
}

/** @internal */
export const PreviewZDRPricing$inboundSchema: z.ZodType<
  PreviewZDRPricing,
  z.ZodTypeDef,
  unknown
> = z.object({
  prompt: z.union([z.number(), z.string(), z.any()]).optional(),
  completion: z.union([z.number(), z.string(), z.any()]).optional(),
  request: z.union([z.number(), z.string(), z.any()]).optional(),
  image: z.union([z.number(), z.string(), z.any()]).optional(),
  image_output: z.union([z.number(), z.string(), z.any()]).optional(),
  audio: z.union([z.number(), z.string(), z.any()]).optional(),
  input_audio_cache: z.union([z.number(), z.string(), z.any()]).optional(),
  web_search: z.union([z.number(), z.string(), z.any()]).optional(),
  internal_reasoning: z.union([z.number(), z.string(), z.any()]).optional(),
  input_cache_read: z.union([z.number(), z.string(), z.any()]).optional(),
  input_cache_write: z.union([z.number(), z.string(), z.any()]).optional(),
  discount: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "image_output": "imageOutput",
    "input_audio_cache": "inputAudioCache",
    "web_search": "webSearch",
    "internal_reasoning": "internalReasoning",
    "input_cache_read": "inputCacheRead",
    "input_cache_write": "inputCacheWrite",
  });
});

/** @internal */
export type PreviewZDRPricing$Outbound = {
  prompt?: number | string | any | undefined;
  completion?: number | string | any | undefined;
  request?: number | string | any | undefined;
  image?: number | string | any | undefined;
  image_output?: number | string | any | undefined;
  audio?: number | string | any | undefined;
  input_audio_cache?: number | string | any | undefined;
  web_search?: number | string | any | undefined;
  internal_reasoning?: number | string | any | undefined;
  input_cache_read?: number | string | any | undefined;
  input_cache_write?: number | string | any | undefined;
  discount?: number | undefined;
};

/** @internal */
export const PreviewZDRPricing$outboundSchema: z.ZodType<
  PreviewZDRPricing$Outbound,
  z.ZodTypeDef,
  PreviewZDRPricing
> = z.object({
  prompt: z.union([z.number(), z.string(), z.any()]).optional(),
  completion: z.union([z.number(), z.string(), z.any()]).optional(),
  request: z.union([z.number(), z.string(), z.any()]).optional(),
  image: z.union([z.number(), z.string(), z.any()]).optional(),
  imageOutput: z.union([z.number(), z.string(), z.any()]).optional(),
  audio: z.union([z.number(), z.string(), z.any()]).optional(),
  inputAudioCache: z.union([z.number(), z.string(), z.any()]).optional(),
  webSearch: z.union([z.number(), z.string(), z.any()]).optional(),
  internalReasoning: z.union([z.number(), z.string(), z.any()]).optional(),
  inputCacheRead: z.union([z.number(), z.string(), z.any()]).optional(),
  inputCacheWrite: z.union([z.number(), z.string(), z.any()]).optional(),
  discount: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    imageOutput: "image_output",
    inputAudioCache: "input_audio_cache",
    webSearch: "web_search",
    internalReasoning: "internal_reasoning",
    inputCacheRead: "input_cache_read",
    inputCacheWrite: "input_cache_write",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PreviewZDRPricing$ {
  /** @deprecated use `PreviewZDRPricing$inboundSchema` instead. */
  export const inboundSchema = PreviewZDRPricing$inboundSchema;
  /** @deprecated use `PreviewZDRPricing$outboundSchema` instead. */
  export const outboundSchema = PreviewZDRPricing$outboundSchema;
  /** @deprecated use `PreviewZDRPricing$Outbound` instead. */
  export type Outbound = PreviewZDRPricing$Outbound;
}

export function previewZDRPricingToJSON(
  previewZDRPricing: PreviewZDRPricing,
): string {
  return JSON.stringify(
    PreviewZDRPricing$outboundSchema.parse(previewZDRPricing),
  );
}

export function previewZDRPricingFromJSON(
  jsonString: string,
): SafeParseResult<PreviewZDRPricing, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PreviewZDRPricing$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PreviewZDRPricing' from JSON`,
  );
}

/** @internal */
export const PreviewZDRProviderName$inboundSchema: z.ZodNativeEnum<
  typeof PreviewZDRProviderName
> = z.nativeEnum(PreviewZDRProviderName);

/** @internal */
export const PreviewZDRProviderName$outboundSchema: z.ZodNativeEnum<
  typeof PreviewZDRProviderName
> = PreviewZDRProviderName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PreviewZDRProviderName$ {
  /** @deprecated use `PreviewZDRProviderName$inboundSchema` instead. */
  export const inboundSchema = PreviewZDRProviderName$inboundSchema;
  /** @deprecated use `PreviewZDRProviderName$outboundSchema` instead. */
  export const outboundSchema = PreviewZDRProviderName$outboundSchema;
}

/** @internal */
export const PreviewZDRQuantization$inboundSchema: z.ZodNativeEnum<
  typeof PreviewZDRQuantization
> = z.nativeEnum(PreviewZDRQuantization);

/** @internal */
export const PreviewZDRQuantization$outboundSchema: z.ZodNativeEnum<
  typeof PreviewZDRQuantization
> = PreviewZDRQuantization$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PreviewZDRQuantization$ {
  /** @deprecated use `PreviewZDRQuantization$inboundSchema` instead. */
  export const inboundSchema = PreviewZDRQuantization$inboundSchema;
  /** @deprecated use `PreviewZDRQuantization$outboundSchema` instead. */
  export const outboundSchema = PreviewZDRQuantization$outboundSchema;
}

/** @internal */
export const PreviewZDRSupportedParameter$inboundSchema: z.ZodNativeEnum<
  typeof PreviewZDRSupportedParameter
> = z.nativeEnum(PreviewZDRSupportedParameter);

/** @internal */
export const PreviewZDRSupportedParameter$outboundSchema: z.ZodNativeEnum<
  typeof PreviewZDRSupportedParameter
> = PreviewZDRSupportedParameter$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PreviewZDRSupportedParameter$ {
  /** @deprecated use `PreviewZDRSupportedParameter$inboundSchema` instead. */
  export const inboundSchema = PreviewZDRSupportedParameter$inboundSchema;
  /** @deprecated use `PreviewZDRSupportedParameter$outboundSchema` instead. */
  export const outboundSchema = PreviewZDRSupportedParameter$outboundSchema;
}

/** @internal */
export const PreviewZDRStatus$inboundSchema: z.ZodNativeEnum<
  typeof PreviewZDRStatus
> = z.nativeEnum(PreviewZDRStatus);

/** @internal */
export const PreviewZDRStatus$outboundSchema: z.ZodNativeEnum<
  typeof PreviewZDRStatus
> = PreviewZDRStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PreviewZDRStatus$ {
  /** @deprecated use `PreviewZDRStatus$inboundSchema` instead. */
  export const inboundSchema = PreviewZDRStatus$inboundSchema;
  /** @deprecated use `PreviewZDRStatus$outboundSchema` instead. */
  export const outboundSchema = PreviewZDRStatus$outboundSchema;
}

/** @internal */
export const PreviewZDRData$inboundSchema: z.ZodType<
  PreviewZDRData,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  model_name: z.string(),
  context_length: z.number(),
  pricing: z.lazy(() => PreviewZDRPricing$inboundSchema),
  provider_name: PreviewZDRProviderName$inboundSchema,
  tag: z.string(),
  quantization: z.nullable(PreviewZDRQuantization$inboundSchema),
  max_completion_tokens: z.nullable(z.number()),
  max_prompt_tokens: z.nullable(z.number()),
  supported_parameters: z.array(PreviewZDRSupportedParameter$inboundSchema),
  status: PreviewZDRStatus$inboundSchema.optional(),
  uptime_last_30m: z.nullable(z.number()),
  supports_implicit_caching: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "model_name": "modelName",
    "context_length": "contextLength",
    "provider_name": "providerName",
    "max_completion_tokens": "maxCompletionTokens",
    "max_prompt_tokens": "maxPromptTokens",
    "supported_parameters": "supportedParameters",
    "uptime_last_30m": "uptimeLast30m",
    "supports_implicit_caching": "supportsImplicitCaching",
  });
});

/** @internal */
export type PreviewZDRData$Outbound = {
  name: string;
  model_name: string;
  context_length: number;
  pricing: PreviewZDRPricing$Outbound;
  provider_name: string;
  tag: string;
  quantization: string | null;
  max_completion_tokens: number | null;
  max_prompt_tokens: number | null;
  supported_parameters: Array<string>;
  status?: number | undefined;
  uptime_last_30m: number | null;
  supports_implicit_caching: boolean;
};

/** @internal */
export const PreviewZDRData$outboundSchema: z.ZodType<
  PreviewZDRData$Outbound,
  z.ZodTypeDef,
  PreviewZDRData
> = z.object({
  name: z.string(),
  modelName: z.string(),
  contextLength: z.number(),
  pricing: z.lazy(() => PreviewZDRPricing$outboundSchema),
  providerName: PreviewZDRProviderName$outboundSchema,
  tag: z.string(),
  quantization: z.nullable(PreviewZDRQuantization$outboundSchema),
  maxCompletionTokens: z.nullable(z.number()),
  maxPromptTokens: z.nullable(z.number()),
  supportedParameters: z.array(PreviewZDRSupportedParameter$outboundSchema),
  status: PreviewZDRStatus$outboundSchema.optional(),
  uptimeLast30m: z.nullable(z.number()),
  supportsImplicitCaching: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    modelName: "model_name",
    contextLength: "context_length",
    providerName: "provider_name",
    maxCompletionTokens: "max_completion_tokens",
    maxPromptTokens: "max_prompt_tokens",
    supportedParameters: "supported_parameters",
    uptimeLast30m: "uptime_last_30m",
    supportsImplicitCaching: "supports_implicit_caching",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PreviewZDRData$ {
  /** @deprecated use `PreviewZDRData$inboundSchema` instead. */
  export const inboundSchema = PreviewZDRData$inboundSchema;
  /** @deprecated use `PreviewZDRData$outboundSchema` instead. */
  export const outboundSchema = PreviewZDRData$outboundSchema;
  /** @deprecated use `PreviewZDRData$Outbound` instead. */
  export type Outbound = PreviewZDRData$Outbound;
}

export function previewZDRDataToJSON(previewZDRData: PreviewZDRData): string {
  return JSON.stringify(PreviewZDRData$outboundSchema.parse(previewZDRData));
}

export function previewZDRDataFromJSON(
  jsonString: string,
): SafeParseResult<PreviewZDRData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PreviewZDRData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PreviewZDRData' from JSON`,
  );
}

/** @internal */
export const PreviewZDRResponse$inboundSchema: z.ZodType<
  PreviewZDRResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(z.lazy(() => PreviewZDRData$inboundSchema)),
});

/** @internal */
export type PreviewZDRResponse$Outbound = {
  data: Array<PreviewZDRData$Outbound>;
};

/** @internal */
export const PreviewZDRResponse$outboundSchema: z.ZodType<
  PreviewZDRResponse$Outbound,
  z.ZodTypeDef,
  PreviewZDRResponse
> = z.object({
  data: z.array(z.lazy(() => PreviewZDRData$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PreviewZDRResponse$ {
  /** @deprecated use `PreviewZDRResponse$inboundSchema` instead. */
  export const inboundSchema = PreviewZDRResponse$inboundSchema;
  /** @deprecated use `PreviewZDRResponse$outboundSchema` instead. */
  export const outboundSchema = PreviewZDRResponse$outboundSchema;
  /** @deprecated use `PreviewZDRResponse$Outbound` instead. */
  export type Outbound = PreviewZDRResponse$Outbound;
}

export function previewZDRResponseToJSON(
  previewZDRResponse: PreviewZDRResponse,
): string {
  return JSON.stringify(
    PreviewZDRResponse$outboundSchema.parse(previewZDRResponse),
  );
}

export function previewZDRResponseFromJSON(
  jsonString: string,
): SafeParseResult<PreviewZDRResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PreviewZDRResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PreviewZDRResponse' from JSON`,
  );
}
