/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PostKeysRequest = {
  /**
   * Name for the new API key
   */
  name: string;
  /**
   * Optional spending limit for the API key in USD
   */
  limit?: number | null | undefined;
  /**
   * Whether to include BYOK usage in the limit
   */
  includeByokInLimit?: boolean | undefined;
};

/**
 * The created API key information
 */
export type PostKeysData = {
  /**
   * Unique hash identifier for the API key
   */
  hash: string;
  /**
   * Name of the API key
   */
  name: string;
  /**
   * Human-readable label for the API key
   */
  label: string;
  /**
   * Whether the API key is disabled
   */
  disabled: boolean;
  /**
   * Spending limit for the API key in USD
   */
  limit: number | null;
  /**
   * Current usage of the API key in USD
   */
  usage: number;
  /**
   * ISO 8601 timestamp of when the API key was created
   */
  createdAt: string;
  /**
   * ISO 8601 timestamp of when the API key was last updated
   */
  updatedAt: string | null;
};

/**
 * API key created successfully
 */
export type PostKeysResponse = {
  /**
   * The created API key information
   */
  data: PostKeysData;
  /**
   * The actual API key string (only shown once)
   */
  key: string;
};

/** @internal */
export const PostKeysRequest$inboundSchema: z.ZodType<
  PostKeysRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  limit: z.nullable(z.number()).optional(),
  include_byok_in_limit: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "include_byok_in_limit": "includeByokInLimit",
  });
});

/** @internal */
export type PostKeysRequest$Outbound = {
  name: string;
  limit?: number | null | undefined;
  include_byok_in_limit?: boolean | undefined;
};

/** @internal */
export const PostKeysRequest$outboundSchema: z.ZodType<
  PostKeysRequest$Outbound,
  z.ZodTypeDef,
  PostKeysRequest
> = z.object({
  name: z.string(),
  limit: z.nullable(z.number()).optional(),
  includeByokInLimit: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    includeByokInLimit: "include_byok_in_limit",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostKeysRequest$ {
  /** @deprecated use `PostKeysRequest$inboundSchema` instead. */
  export const inboundSchema = PostKeysRequest$inboundSchema;
  /** @deprecated use `PostKeysRequest$outboundSchema` instead. */
  export const outboundSchema = PostKeysRequest$outboundSchema;
  /** @deprecated use `PostKeysRequest$Outbound` instead. */
  export type Outbound = PostKeysRequest$Outbound;
}

export function postKeysRequestToJSON(
  postKeysRequest: PostKeysRequest,
): string {
  return JSON.stringify(PostKeysRequest$outboundSchema.parse(postKeysRequest));
}

export function postKeysRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostKeysRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostKeysRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostKeysRequest' from JSON`,
  );
}

/** @internal */
export const PostKeysData$inboundSchema: z.ZodType<
  PostKeysData,
  z.ZodTypeDef,
  unknown
> = z.object({
  hash: z.string(),
  name: z.string(),
  label: z.string(),
  disabled: z.boolean(),
  limit: z.nullable(z.number()),
  usage: z.number(),
  created_at: z.string(),
  updated_at: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type PostKeysData$Outbound = {
  hash: string;
  name: string;
  label: string;
  disabled: boolean;
  limit: number | null;
  usage: number;
  created_at: string;
  updated_at: string | null;
};

/** @internal */
export const PostKeysData$outboundSchema: z.ZodType<
  PostKeysData$Outbound,
  z.ZodTypeDef,
  PostKeysData
> = z.object({
  hash: z.string(),
  name: z.string(),
  label: z.string(),
  disabled: z.boolean(),
  limit: z.nullable(z.number()),
  usage: z.number(),
  createdAt: z.string(),
  updatedAt: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostKeysData$ {
  /** @deprecated use `PostKeysData$inboundSchema` instead. */
  export const inboundSchema = PostKeysData$inboundSchema;
  /** @deprecated use `PostKeysData$outboundSchema` instead. */
  export const outboundSchema = PostKeysData$outboundSchema;
  /** @deprecated use `PostKeysData$Outbound` instead. */
  export type Outbound = PostKeysData$Outbound;
}

export function postKeysDataToJSON(postKeysData: PostKeysData): string {
  return JSON.stringify(PostKeysData$outboundSchema.parse(postKeysData));
}

export function postKeysDataFromJSON(
  jsonString: string,
): SafeParseResult<PostKeysData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostKeysData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostKeysData' from JSON`,
  );
}

/** @internal */
export const PostKeysResponse$inboundSchema: z.ZodType<
  PostKeysResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => PostKeysData$inboundSchema),
  key: z.string(),
});

/** @internal */
export type PostKeysResponse$Outbound = {
  data: PostKeysData$Outbound;
  key: string;
};

/** @internal */
export const PostKeysResponse$outboundSchema: z.ZodType<
  PostKeysResponse$Outbound,
  z.ZodTypeDef,
  PostKeysResponse
> = z.object({
  data: z.lazy(() => PostKeysData$outboundSchema),
  key: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostKeysResponse$ {
  /** @deprecated use `PostKeysResponse$inboundSchema` instead. */
  export const inboundSchema = PostKeysResponse$inboundSchema;
  /** @deprecated use `PostKeysResponse$outboundSchema` instead. */
  export const outboundSchema = PostKeysResponse$outboundSchema;
  /** @deprecated use `PostKeysResponse$Outbound` instead. */
  export type Outbound = PostKeysResponse$Outbound;
}

export function postKeysResponseToJSON(
  postKeysResponse: PostKeysResponse,
): string {
  return JSON.stringify(
    PostKeysResponse$outboundSchema.parse(postKeysResponse),
  );
}

export function postKeysResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostKeysResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostKeysResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostKeysResponse' from JSON`,
  );
}
