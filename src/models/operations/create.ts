/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateRequest = {
  /**
   * Name for the new API key
   */
  name: string;
  /**
   * Optional spending limit for the API key in USD
   */
  limit?: number | null | undefined;
  /**
   * Whether to include BYOK usage in the limit
   */
  includeByokInLimit?: boolean | undefined;
};

/**
 * The created API key information
 */
export type CreateData = {
  /**
   * Unique hash identifier for the API key
   */
  hash: string;
  /**
   * Name of the API key
   */
  name: string;
  /**
   * Human-readable label for the API key
   */
  label: string;
  /**
   * Whether the API key is disabled
   */
  disabled: boolean;
  /**
   * Spending limit for the API key in USD
   */
  limit: number | null;
  /**
   * Current usage of the API key in USD
   */
  usage: number;
  /**
   * ISO 8601 timestamp of when the API key was created
   */
  createdAt: string;
  /**
   * ISO 8601 timestamp of when the API key was last updated
   */
  updatedAt: string | null;
};

/**
 * API key created successfully
 */
export type CreateResponse = {
  /**
   * The created API key information
   */
  data: CreateData;
  /**
   * The actual API key string (only shown once)
   */
  key: string;
};

/** @internal */
export const CreateRequest$inboundSchema: z.ZodType<
  CreateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  limit: z.nullable(z.number()).optional(),
  include_byok_in_limit: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "include_byok_in_limit": "includeByokInLimit",
  });
});

/** @internal */
export type CreateRequest$Outbound = {
  name: string;
  limit?: number | null | undefined;
  include_byok_in_limit?: boolean | undefined;
};

/** @internal */
export const CreateRequest$outboundSchema: z.ZodType<
  CreateRequest$Outbound,
  z.ZodTypeDef,
  CreateRequest
> = z.object({
  name: z.string(),
  limit: z.nullable(z.number()).optional(),
  includeByokInLimit: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    includeByokInLimit: "include_byok_in_limit",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRequest$ {
  /** @deprecated use `CreateRequest$inboundSchema` instead. */
  export const inboundSchema = CreateRequest$inboundSchema;
  /** @deprecated use `CreateRequest$outboundSchema` instead. */
  export const outboundSchema = CreateRequest$outboundSchema;
  /** @deprecated use `CreateRequest$Outbound` instead. */
  export type Outbound = CreateRequest$Outbound;
}

export function createRequestToJSON(createRequest: CreateRequest): string {
  return JSON.stringify(CreateRequest$outboundSchema.parse(createRequest));
}

export function createRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateRequest' from JSON`,
  );
}

/** @internal */
export const CreateData$inboundSchema: z.ZodType<
  CreateData,
  z.ZodTypeDef,
  unknown
> = z.object({
  hash: z.string(),
  name: z.string(),
  label: z.string(),
  disabled: z.boolean(),
  limit: z.nullable(z.number()),
  usage: z.number(),
  created_at: z.string(),
  updated_at: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type CreateData$Outbound = {
  hash: string;
  name: string;
  label: string;
  disabled: boolean;
  limit: number | null;
  usage: number;
  created_at: string;
  updated_at: string | null;
};

/** @internal */
export const CreateData$outboundSchema: z.ZodType<
  CreateData$Outbound,
  z.ZodTypeDef,
  CreateData
> = z.object({
  hash: z.string(),
  name: z.string(),
  label: z.string(),
  disabled: z.boolean(),
  limit: z.nullable(z.number()),
  usage: z.number(),
  createdAt: z.string(),
  updatedAt: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateData$ {
  /** @deprecated use `CreateData$inboundSchema` instead. */
  export const inboundSchema = CreateData$inboundSchema;
  /** @deprecated use `CreateData$outboundSchema` instead. */
  export const outboundSchema = CreateData$outboundSchema;
  /** @deprecated use `CreateData$Outbound` instead. */
  export type Outbound = CreateData$Outbound;
}

export function createDataToJSON(createData: CreateData): string {
  return JSON.stringify(CreateData$outboundSchema.parse(createData));
}

export function createDataFromJSON(
  jsonString: string,
): SafeParseResult<CreateData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateData' from JSON`,
  );
}

/** @internal */
export const CreateResponse$inboundSchema: z.ZodType<
  CreateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => CreateData$inboundSchema),
  key: z.string(),
});

/** @internal */
export type CreateResponse$Outbound = {
  data: CreateData$Outbound;
  key: string;
};

/** @internal */
export const CreateResponse$outboundSchema: z.ZodType<
  CreateResponse$Outbound,
  z.ZodTypeDef,
  CreateResponse
> = z.object({
  data: z.lazy(() => CreateData$outboundSchema),
  key: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponse$ {
  /** @deprecated use `CreateResponse$inboundSchema` instead. */
  export const inboundSchema = CreateResponse$inboundSchema;
  /** @deprecated use `CreateResponse$outboundSchema` instead. */
  export const outboundSchema = CreateResponse$outboundSchema;
  /** @deprecated use `CreateResponse$Outbound` instead. */
  export type Outbound = CreateResponse$Outbound;
}

export function createResponseToJSON(createResponse: CreateResponse): string {
  return JSON.stringify(CreateResponse$outboundSchema.parse(createResponse));
}

export function createResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateResponse' from JSON`,
  );
}
