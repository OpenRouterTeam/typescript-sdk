/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

/**
 * Type of limit reset for the API key (daily, weekly, monthly, or null for no reset). Resets happen automatically at midnight UTC, and weeks are Monday through Sunday.
 */
export const CreateLimitReset = {
  Daily: "daily",
  Weekly: "weekly",
  Monthly: "monthly",
} as const;
/**
 * Type of limit reset for the API key (daily, weekly, monthly, or null for no reset). Resets happen automatically at midnight UTC, and weeks are Monday through Sunday.
 */
export type CreateLimitReset = OpenEnum<typeof CreateLimitReset>;

export type CreateRequest = {
  /**
   * Name for the new API key
   */
  name: string;
  /**
   * Optional spending limit for the API key in USD
   */
  limit?: number | null | undefined;
  /**
   * Type of limit reset for the API key (daily, weekly, monthly, or null for no reset). Resets happen automatically at midnight UTC, and weeks are Monday through Sunday.
   */
  limitReset?: CreateLimitReset | null | undefined;
  /**
   * Whether to include BYOK usage in the limit
   */
  includeByokInLimit?: boolean | undefined;
};

/**
 * API key created successfully
 */
export type CreateResponse = {
  /**
   * The created API key information
   */
  data: models.CreateAPIKeyData;
  /**
   * The actual API key string (only shown once)
   */
  key: string;
};

/** @internal */
export const CreateLimitReset$inboundSchema: z.ZodType<
  CreateLimitReset,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(CreateLimitReset),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const CreateLimitReset$outboundSchema: z.ZodType<
  CreateLimitReset,
  z.ZodTypeDef,
  CreateLimitReset
> = z.union([
  z.nativeEnum(CreateLimitReset),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLimitReset$ {
  /** @deprecated use `CreateLimitReset$inboundSchema` instead. */
  export const inboundSchema = CreateLimitReset$inboundSchema;
  /** @deprecated use `CreateLimitReset$outboundSchema` instead. */
  export const outboundSchema = CreateLimitReset$outboundSchema;
}

/** @internal */
export const CreateRequest$inboundSchema: z.ZodType<
  CreateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  limit: z.nullable(z.number()).optional(),
  limit_reset: z.nullable(CreateLimitReset$inboundSchema).optional(),
  include_byok_in_limit: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "limit_reset": "limitReset",
    "include_byok_in_limit": "includeByokInLimit",
  });
});

/** @internal */
export type CreateRequest$Outbound = {
  name: string;
  limit?: number | null | undefined;
  limit_reset?: string | null | undefined;
  include_byok_in_limit?: boolean | undefined;
};

/** @internal */
export const CreateRequest$outboundSchema: z.ZodType<
  CreateRequest$Outbound,
  z.ZodTypeDef,
  CreateRequest
> = z.object({
  name: z.string(),
  limit: z.nullable(z.number()).optional(),
  limitReset: z.nullable(CreateLimitReset$outboundSchema).optional(),
  includeByokInLimit: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    limitReset: "limit_reset",
    includeByokInLimit: "include_byok_in_limit",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRequest$ {
  /** @deprecated use `CreateRequest$inboundSchema` instead. */
  export const inboundSchema = CreateRequest$inboundSchema;
  /** @deprecated use `CreateRequest$outboundSchema` instead. */
  export const outboundSchema = CreateRequest$outboundSchema;
  /** @deprecated use `CreateRequest$Outbound` instead. */
  export type Outbound = CreateRequest$Outbound;
}

export function createRequestToJSON(createRequest: CreateRequest): string {
  return JSON.stringify(CreateRequest$outboundSchema.parse(createRequest));
}

export function createRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateRequest' from JSON`,
  );
}

/** @internal */
export const CreateResponse$inboundSchema: z.ZodType<
  CreateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: models.CreateAPIKeyData$inboundSchema,
  key: z.string(),
});

/** @internal */
export type CreateResponse$Outbound = {
  data: models.CreateAPIKeyData$Outbound;
  key: string;
};

/** @internal */
export const CreateResponse$outboundSchema: z.ZodType<
  CreateResponse$Outbound,
  z.ZodTypeDef,
  CreateResponse
> = z.object({
  data: models.CreateAPIKeyData$outboundSchema,
  key: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponse$ {
  /** @deprecated use `CreateResponse$inboundSchema` instead. */
  export const inboundSchema = CreateResponse$inboundSchema;
  /** @deprecated use `CreateResponse$outboundSchema` instead. */
  export const outboundSchema = CreateResponse$outboundSchema;
  /** @deprecated use `CreateResponse$Outbound` instead. */
  export type Outbound = CreateResponse$Outbound;
}

export function createResponseToJSON(createResponse: CreateResponse): string {
  return JSON.stringify(CreateResponse$outboundSchema.parse(createResponse));
}

export function createResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateResponse' from JSON`,
  );
}
