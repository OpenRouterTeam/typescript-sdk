/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetEndpointsZdrPrompt = number | string | any;

export type GetEndpointsZdrCompletion = number | string | any;

export type EndpointsGetEndpointsZdrRequest = number | string | any;

export type GetEndpointsZdrImage = number | string | any;

export type GetEndpointsZdrImageOutput = number | string | any;

export type GetEndpointsZdrAudio = number | string | any;

export type GetEndpointsZdrInputAudioCache = number | string | any;

export type GetEndpointsZdrWebSearch = number | string | any;

export type GetEndpointsZdrInternalReasoning = number | string | any;

export type GetEndpointsZdrInputCacheRead = number | string | any;

export type GetEndpointsZdrInputCacheWrite = number | string | any;

export type GetEndpointsZdrPricing = {
  prompt?: number | string | any | undefined;
  completion?: number | string | any | undefined;
  request?: number | string | any | undefined;
  image?: number | string | any | undefined;
  imageOutput?: number | string | any | undefined;
  audio?: number | string | any | undefined;
  inputAudioCache?: number | string | any | undefined;
  webSearch?: number | string | any | undefined;
  internalReasoning?: number | string | any | undefined;
  inputCacheRead?: number | string | any | undefined;
  inputCacheWrite?: number | string | any | undefined;
  discount?: number | undefined;
};

export const GetEndpointsZdrProviderName = {
  AnyScale: "AnyScale",
  CentML: "Cent-ML",
  HuggingFace: "HuggingFace",
  Hyperbolic2: "Hyperbolic 2",
  Lepton: "Lepton",
  Lynn2: "Lynn 2",
  Lynn: "Lynn",
  Mancer: "Mancer",
  Modal: "Modal",
  OctoAI: "OctoAI",
  Recursal: "Recursal",
  Reflection: "Reflection",
  Replicate: "Replicate",
  SambaNova2: "SambaNova 2",
  SFCompute: "SF Compute",
  Together2: "Together 2",
  OneDotAI: "01.AI",
  Ai21: "AI21",
  AionLabs: "AionLabs",
  Alibaba: "Alibaba",
  AmazonBedrock: "Amazon Bedrock",
  Anthropic: "Anthropic",
  AtlasCloud: "AtlasCloud",
  Atoma: "Atoma",
  Avian: "Avian",
  Azure: "Azure",
  BaseTen: "BaseTen",
  Cerebras: "Cerebras",
  Chutes: "Chutes",
  Cloudflare: "Cloudflare",
  Cohere: "Cohere",
  CrofAI: "CrofAI",
  Crusoe: "Crusoe",
  DeepInfra: "DeepInfra",
  DeepSeek: "DeepSeek",
  Enfer: "Enfer",
  Featherless: "Featherless",
  Fireworks: "Fireworks",
  Friendli: "Friendli",
  GMICloud: "GMICloud",
  Google: "Google",
  GoogleAIStudio: "Google AI Studio",
  Groq: "Groq",
  Hyperbolic: "Hyperbolic",
  Inception: "Inception",
  InferenceNet: "InferenceNet",
  Infermatic: "Infermatic",
  Inflection: "Inflection",
  InoCloud: "InoCloud",
  Kluster: "Kluster",
  Lambda: "Lambda",
  Liquid: "Liquid",
  Mancer2: "Mancer 2",
  Meta: "Meta",
  Minimax: "Minimax",
  Mistral: "Mistral",
  MoonshotAI: "Moonshot AI",
  Morph: "Morph",
  NCompass: "NCompass",
  Nebius: "Nebius",
  NextBit: "NextBit",
  Nineteen: "Nineteen",
  Novita: "Novita",
  Nvidia: "Nvidia",
  OpenAI: "OpenAI",
  OpenInference: "OpenInference",
  Parasail: "Parasail",
  Perplexity: "Perplexity",
  Phala: "Phala",
  SambaNova: "SambaNova",
  SiliconFlow: "SiliconFlow",
  Stealth: "Stealth",
  Switchpoint: "Switchpoint",
  Targon: "Targon",
  Together: "Together",
  Ubicloud: "Ubicloud",
  Venice: "Venice",
  WandB: "WandB",
  XAI: "xAI",
  ZAi: "Z.AI",
  FakeProvider: "FakeProvider",
} as const;
export type GetEndpointsZdrProviderName = ClosedEnum<
  typeof GetEndpointsZdrProviderName
>;

export const GetEndpointsZdrQuantization = {
  Int4: "int4",
  Int8: "int8",
  Fp4: "fp4",
  Fp6: "fp6",
  Fp8: "fp8",
  Fp16: "fp16",
  Bf16: "bf16",
  Fp32: "fp32",
  Unknown: "unknown",
} as const;
export type GetEndpointsZdrQuantization = ClosedEnum<
  typeof GetEndpointsZdrQuantization
>;

export const GetEndpointsZdrSupportedParameter = {
  Temperature: "temperature",
  TopP: "top_p",
  TopK: "top_k",
  MinP: "min_p",
  TopA: "top_a",
  FrequencyPenalty: "frequency_penalty",
  PresencePenalty: "presence_penalty",
  RepetitionPenalty: "repetition_penalty",
  MaxTokens: "max_tokens",
  LogitBias: "logit_bias",
  Logprobs: "logprobs",
  TopLogprobs: "top_logprobs",
  Seed: "seed",
  ResponseFormat: "response_format",
  StructuredOutputs: "structured_outputs",
  Stop: "stop",
  Tools: "tools",
  ToolChoice: "tool_choice",
  ParallelToolCalls: "parallel_tool_calls",
  IncludeReasoning: "include_reasoning",
  Reasoning: "reasoning",
  WebSearchOptions: "web_search_options",
  Verbosity: "verbosity",
} as const;
export type GetEndpointsZdrSupportedParameter = ClosedEnum<
  typeof GetEndpointsZdrSupportedParameter
>;

export const GetEndpointsZdrStatus = {
  Zero: 0,
  Minus1: -1,
  Minus2: -2,
  Minus3: -3,
  Minus5: -5,
  Minus10: -10,
} as const;
export type GetEndpointsZdrStatus = ClosedEnum<typeof GetEndpointsZdrStatus>;

export type GetEndpointsZdrData = {
  name: string;
  modelName: string;
  contextLength: number;
  pricing: GetEndpointsZdrPricing;
  providerName: GetEndpointsZdrProviderName;
  tag: string;
  quantization: GetEndpointsZdrQuantization | null;
  maxCompletionTokens: number | null;
  maxPromptTokens: number | null;
  supportedParameters: Array<GetEndpointsZdrSupportedParameter>;
  status?: GetEndpointsZdrStatus | undefined;
  uptimeLast30m: number | null;
  supportsImplicitCaching: boolean;
};

/**
 * Returns a list of endpoints
 */
export type GetEndpointsZdrResponse = {
  data: Array<GetEndpointsZdrData>;
};

/** @internal */
export const GetEndpointsZdrPrompt$inboundSchema: z.ZodType<
  GetEndpointsZdrPrompt,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type GetEndpointsZdrPrompt$Outbound = number | string | any;

/** @internal */
export const GetEndpointsZdrPrompt$outboundSchema: z.ZodType<
  GetEndpointsZdrPrompt$Outbound,
  z.ZodTypeDef,
  GetEndpointsZdrPrompt
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetEndpointsZdrPrompt$ {
  /** @deprecated use `GetEndpointsZdrPrompt$inboundSchema` instead. */
  export const inboundSchema = GetEndpointsZdrPrompt$inboundSchema;
  /** @deprecated use `GetEndpointsZdrPrompt$outboundSchema` instead. */
  export const outboundSchema = GetEndpointsZdrPrompt$outboundSchema;
  /** @deprecated use `GetEndpointsZdrPrompt$Outbound` instead. */
  export type Outbound = GetEndpointsZdrPrompt$Outbound;
}

export function getEndpointsZdrPromptToJSON(
  getEndpointsZdrPrompt: GetEndpointsZdrPrompt,
): string {
  return JSON.stringify(
    GetEndpointsZdrPrompt$outboundSchema.parse(getEndpointsZdrPrompt),
  );
}

export function getEndpointsZdrPromptFromJSON(
  jsonString: string,
): SafeParseResult<GetEndpointsZdrPrompt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetEndpointsZdrPrompt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetEndpointsZdrPrompt' from JSON`,
  );
}

/** @internal */
export const GetEndpointsZdrCompletion$inboundSchema: z.ZodType<
  GetEndpointsZdrCompletion,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type GetEndpointsZdrCompletion$Outbound = number | string | any;

/** @internal */
export const GetEndpointsZdrCompletion$outboundSchema: z.ZodType<
  GetEndpointsZdrCompletion$Outbound,
  z.ZodTypeDef,
  GetEndpointsZdrCompletion
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetEndpointsZdrCompletion$ {
  /** @deprecated use `GetEndpointsZdrCompletion$inboundSchema` instead. */
  export const inboundSchema = GetEndpointsZdrCompletion$inboundSchema;
  /** @deprecated use `GetEndpointsZdrCompletion$outboundSchema` instead. */
  export const outboundSchema = GetEndpointsZdrCompletion$outboundSchema;
  /** @deprecated use `GetEndpointsZdrCompletion$Outbound` instead. */
  export type Outbound = GetEndpointsZdrCompletion$Outbound;
}

export function getEndpointsZdrCompletionToJSON(
  getEndpointsZdrCompletion: GetEndpointsZdrCompletion,
): string {
  return JSON.stringify(
    GetEndpointsZdrCompletion$outboundSchema.parse(getEndpointsZdrCompletion),
  );
}

export function getEndpointsZdrCompletionFromJSON(
  jsonString: string,
): SafeParseResult<GetEndpointsZdrCompletion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetEndpointsZdrCompletion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetEndpointsZdrCompletion' from JSON`,
  );
}

/** @internal */
export const EndpointsGetEndpointsZdrRequest$inboundSchema: z.ZodType<
  EndpointsGetEndpointsZdrRequest,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type EndpointsGetEndpointsZdrRequest$Outbound = number | string | any;

/** @internal */
export const EndpointsGetEndpointsZdrRequest$outboundSchema: z.ZodType<
  EndpointsGetEndpointsZdrRequest$Outbound,
  z.ZodTypeDef,
  EndpointsGetEndpointsZdrRequest
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EndpointsGetEndpointsZdrRequest$ {
  /** @deprecated use `EndpointsGetEndpointsZdrRequest$inboundSchema` instead. */
  export const inboundSchema = EndpointsGetEndpointsZdrRequest$inboundSchema;
  /** @deprecated use `EndpointsGetEndpointsZdrRequest$outboundSchema` instead. */
  export const outboundSchema = EndpointsGetEndpointsZdrRequest$outboundSchema;
  /** @deprecated use `EndpointsGetEndpointsZdrRequest$Outbound` instead. */
  export type Outbound = EndpointsGetEndpointsZdrRequest$Outbound;
}

export function endpointsGetEndpointsZdrRequestToJSON(
  endpointsGetEndpointsZdrRequest: EndpointsGetEndpointsZdrRequest,
): string {
  return JSON.stringify(
    EndpointsGetEndpointsZdrRequest$outboundSchema.parse(
      endpointsGetEndpointsZdrRequest,
    ),
  );
}

export function endpointsGetEndpointsZdrRequestFromJSON(
  jsonString: string,
): SafeParseResult<EndpointsGetEndpointsZdrRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EndpointsGetEndpointsZdrRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EndpointsGetEndpointsZdrRequest' from JSON`,
  );
}

/** @internal */
export const GetEndpointsZdrImage$inboundSchema: z.ZodType<
  GetEndpointsZdrImage,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type GetEndpointsZdrImage$Outbound = number | string | any;

/** @internal */
export const GetEndpointsZdrImage$outboundSchema: z.ZodType<
  GetEndpointsZdrImage$Outbound,
  z.ZodTypeDef,
  GetEndpointsZdrImage
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetEndpointsZdrImage$ {
  /** @deprecated use `GetEndpointsZdrImage$inboundSchema` instead. */
  export const inboundSchema = GetEndpointsZdrImage$inboundSchema;
  /** @deprecated use `GetEndpointsZdrImage$outboundSchema` instead. */
  export const outboundSchema = GetEndpointsZdrImage$outboundSchema;
  /** @deprecated use `GetEndpointsZdrImage$Outbound` instead. */
  export type Outbound = GetEndpointsZdrImage$Outbound;
}

export function getEndpointsZdrImageToJSON(
  getEndpointsZdrImage: GetEndpointsZdrImage,
): string {
  return JSON.stringify(
    GetEndpointsZdrImage$outboundSchema.parse(getEndpointsZdrImage),
  );
}

export function getEndpointsZdrImageFromJSON(
  jsonString: string,
): SafeParseResult<GetEndpointsZdrImage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetEndpointsZdrImage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetEndpointsZdrImage' from JSON`,
  );
}

/** @internal */
export const GetEndpointsZdrImageOutput$inboundSchema: z.ZodType<
  GetEndpointsZdrImageOutput,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type GetEndpointsZdrImageOutput$Outbound = number | string | any;

/** @internal */
export const GetEndpointsZdrImageOutput$outboundSchema: z.ZodType<
  GetEndpointsZdrImageOutput$Outbound,
  z.ZodTypeDef,
  GetEndpointsZdrImageOutput
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetEndpointsZdrImageOutput$ {
  /** @deprecated use `GetEndpointsZdrImageOutput$inboundSchema` instead. */
  export const inboundSchema = GetEndpointsZdrImageOutput$inboundSchema;
  /** @deprecated use `GetEndpointsZdrImageOutput$outboundSchema` instead. */
  export const outboundSchema = GetEndpointsZdrImageOutput$outboundSchema;
  /** @deprecated use `GetEndpointsZdrImageOutput$Outbound` instead. */
  export type Outbound = GetEndpointsZdrImageOutput$Outbound;
}

export function getEndpointsZdrImageOutputToJSON(
  getEndpointsZdrImageOutput: GetEndpointsZdrImageOutput,
): string {
  return JSON.stringify(
    GetEndpointsZdrImageOutput$outboundSchema.parse(getEndpointsZdrImageOutput),
  );
}

export function getEndpointsZdrImageOutputFromJSON(
  jsonString: string,
): SafeParseResult<GetEndpointsZdrImageOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetEndpointsZdrImageOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetEndpointsZdrImageOutput' from JSON`,
  );
}

/** @internal */
export const GetEndpointsZdrAudio$inboundSchema: z.ZodType<
  GetEndpointsZdrAudio,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type GetEndpointsZdrAudio$Outbound = number | string | any;

/** @internal */
export const GetEndpointsZdrAudio$outboundSchema: z.ZodType<
  GetEndpointsZdrAudio$Outbound,
  z.ZodTypeDef,
  GetEndpointsZdrAudio
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetEndpointsZdrAudio$ {
  /** @deprecated use `GetEndpointsZdrAudio$inboundSchema` instead. */
  export const inboundSchema = GetEndpointsZdrAudio$inboundSchema;
  /** @deprecated use `GetEndpointsZdrAudio$outboundSchema` instead. */
  export const outboundSchema = GetEndpointsZdrAudio$outboundSchema;
  /** @deprecated use `GetEndpointsZdrAudio$Outbound` instead. */
  export type Outbound = GetEndpointsZdrAudio$Outbound;
}

export function getEndpointsZdrAudioToJSON(
  getEndpointsZdrAudio: GetEndpointsZdrAudio,
): string {
  return JSON.stringify(
    GetEndpointsZdrAudio$outboundSchema.parse(getEndpointsZdrAudio),
  );
}

export function getEndpointsZdrAudioFromJSON(
  jsonString: string,
): SafeParseResult<GetEndpointsZdrAudio, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetEndpointsZdrAudio$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetEndpointsZdrAudio' from JSON`,
  );
}

/** @internal */
export const GetEndpointsZdrInputAudioCache$inboundSchema: z.ZodType<
  GetEndpointsZdrInputAudioCache,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type GetEndpointsZdrInputAudioCache$Outbound = number | string | any;

/** @internal */
export const GetEndpointsZdrInputAudioCache$outboundSchema: z.ZodType<
  GetEndpointsZdrInputAudioCache$Outbound,
  z.ZodTypeDef,
  GetEndpointsZdrInputAudioCache
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetEndpointsZdrInputAudioCache$ {
  /** @deprecated use `GetEndpointsZdrInputAudioCache$inboundSchema` instead. */
  export const inboundSchema = GetEndpointsZdrInputAudioCache$inboundSchema;
  /** @deprecated use `GetEndpointsZdrInputAudioCache$outboundSchema` instead. */
  export const outboundSchema = GetEndpointsZdrInputAudioCache$outboundSchema;
  /** @deprecated use `GetEndpointsZdrInputAudioCache$Outbound` instead. */
  export type Outbound = GetEndpointsZdrInputAudioCache$Outbound;
}

export function getEndpointsZdrInputAudioCacheToJSON(
  getEndpointsZdrInputAudioCache: GetEndpointsZdrInputAudioCache,
): string {
  return JSON.stringify(
    GetEndpointsZdrInputAudioCache$outboundSchema.parse(
      getEndpointsZdrInputAudioCache,
    ),
  );
}

export function getEndpointsZdrInputAudioCacheFromJSON(
  jsonString: string,
): SafeParseResult<GetEndpointsZdrInputAudioCache, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetEndpointsZdrInputAudioCache$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetEndpointsZdrInputAudioCache' from JSON`,
  );
}

/** @internal */
export const GetEndpointsZdrWebSearch$inboundSchema: z.ZodType<
  GetEndpointsZdrWebSearch,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type GetEndpointsZdrWebSearch$Outbound = number | string | any;

/** @internal */
export const GetEndpointsZdrWebSearch$outboundSchema: z.ZodType<
  GetEndpointsZdrWebSearch$Outbound,
  z.ZodTypeDef,
  GetEndpointsZdrWebSearch
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetEndpointsZdrWebSearch$ {
  /** @deprecated use `GetEndpointsZdrWebSearch$inboundSchema` instead. */
  export const inboundSchema = GetEndpointsZdrWebSearch$inboundSchema;
  /** @deprecated use `GetEndpointsZdrWebSearch$outboundSchema` instead. */
  export const outboundSchema = GetEndpointsZdrWebSearch$outboundSchema;
  /** @deprecated use `GetEndpointsZdrWebSearch$Outbound` instead. */
  export type Outbound = GetEndpointsZdrWebSearch$Outbound;
}

export function getEndpointsZdrWebSearchToJSON(
  getEndpointsZdrWebSearch: GetEndpointsZdrWebSearch,
): string {
  return JSON.stringify(
    GetEndpointsZdrWebSearch$outboundSchema.parse(getEndpointsZdrWebSearch),
  );
}

export function getEndpointsZdrWebSearchFromJSON(
  jsonString: string,
): SafeParseResult<GetEndpointsZdrWebSearch, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetEndpointsZdrWebSearch$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetEndpointsZdrWebSearch' from JSON`,
  );
}

/** @internal */
export const GetEndpointsZdrInternalReasoning$inboundSchema: z.ZodType<
  GetEndpointsZdrInternalReasoning,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type GetEndpointsZdrInternalReasoning$Outbound = number | string | any;

/** @internal */
export const GetEndpointsZdrInternalReasoning$outboundSchema: z.ZodType<
  GetEndpointsZdrInternalReasoning$Outbound,
  z.ZodTypeDef,
  GetEndpointsZdrInternalReasoning
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetEndpointsZdrInternalReasoning$ {
  /** @deprecated use `GetEndpointsZdrInternalReasoning$inboundSchema` instead. */
  export const inboundSchema = GetEndpointsZdrInternalReasoning$inboundSchema;
  /** @deprecated use `GetEndpointsZdrInternalReasoning$outboundSchema` instead. */
  export const outboundSchema = GetEndpointsZdrInternalReasoning$outboundSchema;
  /** @deprecated use `GetEndpointsZdrInternalReasoning$Outbound` instead. */
  export type Outbound = GetEndpointsZdrInternalReasoning$Outbound;
}

export function getEndpointsZdrInternalReasoningToJSON(
  getEndpointsZdrInternalReasoning: GetEndpointsZdrInternalReasoning,
): string {
  return JSON.stringify(
    GetEndpointsZdrInternalReasoning$outboundSchema.parse(
      getEndpointsZdrInternalReasoning,
    ),
  );
}

export function getEndpointsZdrInternalReasoningFromJSON(
  jsonString: string,
): SafeParseResult<GetEndpointsZdrInternalReasoning, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetEndpointsZdrInternalReasoning$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetEndpointsZdrInternalReasoning' from JSON`,
  );
}

/** @internal */
export const GetEndpointsZdrInputCacheRead$inboundSchema: z.ZodType<
  GetEndpointsZdrInputCacheRead,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type GetEndpointsZdrInputCacheRead$Outbound = number | string | any;

/** @internal */
export const GetEndpointsZdrInputCacheRead$outboundSchema: z.ZodType<
  GetEndpointsZdrInputCacheRead$Outbound,
  z.ZodTypeDef,
  GetEndpointsZdrInputCacheRead
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetEndpointsZdrInputCacheRead$ {
  /** @deprecated use `GetEndpointsZdrInputCacheRead$inboundSchema` instead. */
  export const inboundSchema = GetEndpointsZdrInputCacheRead$inboundSchema;
  /** @deprecated use `GetEndpointsZdrInputCacheRead$outboundSchema` instead. */
  export const outboundSchema = GetEndpointsZdrInputCacheRead$outboundSchema;
  /** @deprecated use `GetEndpointsZdrInputCacheRead$Outbound` instead. */
  export type Outbound = GetEndpointsZdrInputCacheRead$Outbound;
}

export function getEndpointsZdrInputCacheReadToJSON(
  getEndpointsZdrInputCacheRead: GetEndpointsZdrInputCacheRead,
): string {
  return JSON.stringify(
    GetEndpointsZdrInputCacheRead$outboundSchema.parse(
      getEndpointsZdrInputCacheRead,
    ),
  );
}

export function getEndpointsZdrInputCacheReadFromJSON(
  jsonString: string,
): SafeParseResult<GetEndpointsZdrInputCacheRead, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetEndpointsZdrInputCacheRead$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetEndpointsZdrInputCacheRead' from JSON`,
  );
}

/** @internal */
export const GetEndpointsZdrInputCacheWrite$inboundSchema: z.ZodType<
  GetEndpointsZdrInputCacheWrite,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type GetEndpointsZdrInputCacheWrite$Outbound = number | string | any;

/** @internal */
export const GetEndpointsZdrInputCacheWrite$outboundSchema: z.ZodType<
  GetEndpointsZdrInputCacheWrite$Outbound,
  z.ZodTypeDef,
  GetEndpointsZdrInputCacheWrite
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetEndpointsZdrInputCacheWrite$ {
  /** @deprecated use `GetEndpointsZdrInputCacheWrite$inboundSchema` instead. */
  export const inboundSchema = GetEndpointsZdrInputCacheWrite$inboundSchema;
  /** @deprecated use `GetEndpointsZdrInputCacheWrite$outboundSchema` instead. */
  export const outboundSchema = GetEndpointsZdrInputCacheWrite$outboundSchema;
  /** @deprecated use `GetEndpointsZdrInputCacheWrite$Outbound` instead. */
  export type Outbound = GetEndpointsZdrInputCacheWrite$Outbound;
}

export function getEndpointsZdrInputCacheWriteToJSON(
  getEndpointsZdrInputCacheWrite: GetEndpointsZdrInputCacheWrite,
): string {
  return JSON.stringify(
    GetEndpointsZdrInputCacheWrite$outboundSchema.parse(
      getEndpointsZdrInputCacheWrite,
    ),
  );
}

export function getEndpointsZdrInputCacheWriteFromJSON(
  jsonString: string,
): SafeParseResult<GetEndpointsZdrInputCacheWrite, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetEndpointsZdrInputCacheWrite$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetEndpointsZdrInputCacheWrite' from JSON`,
  );
}

/** @internal */
export const GetEndpointsZdrPricing$inboundSchema: z.ZodType<
  GetEndpointsZdrPricing,
  z.ZodTypeDef,
  unknown
> = z.object({
  prompt: z.union([z.number(), z.string(), z.any()]).optional(),
  completion: z.union([z.number(), z.string(), z.any()]).optional(),
  request: z.union([z.number(), z.string(), z.any()]).optional(),
  image: z.union([z.number(), z.string(), z.any()]).optional(),
  image_output: z.union([z.number(), z.string(), z.any()]).optional(),
  audio: z.union([z.number(), z.string(), z.any()]).optional(),
  input_audio_cache: z.union([z.number(), z.string(), z.any()]).optional(),
  web_search: z.union([z.number(), z.string(), z.any()]).optional(),
  internal_reasoning: z.union([z.number(), z.string(), z.any()]).optional(),
  input_cache_read: z.union([z.number(), z.string(), z.any()]).optional(),
  input_cache_write: z.union([z.number(), z.string(), z.any()]).optional(),
  discount: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "image_output": "imageOutput",
    "input_audio_cache": "inputAudioCache",
    "web_search": "webSearch",
    "internal_reasoning": "internalReasoning",
    "input_cache_read": "inputCacheRead",
    "input_cache_write": "inputCacheWrite",
  });
});

/** @internal */
export type GetEndpointsZdrPricing$Outbound = {
  prompt?: number | string | any | undefined;
  completion?: number | string | any | undefined;
  request?: number | string | any | undefined;
  image?: number | string | any | undefined;
  image_output?: number | string | any | undefined;
  audio?: number | string | any | undefined;
  input_audio_cache?: number | string | any | undefined;
  web_search?: number | string | any | undefined;
  internal_reasoning?: number | string | any | undefined;
  input_cache_read?: number | string | any | undefined;
  input_cache_write?: number | string | any | undefined;
  discount?: number | undefined;
};

/** @internal */
export const GetEndpointsZdrPricing$outboundSchema: z.ZodType<
  GetEndpointsZdrPricing$Outbound,
  z.ZodTypeDef,
  GetEndpointsZdrPricing
> = z.object({
  prompt: z.union([z.number(), z.string(), z.any()]).optional(),
  completion: z.union([z.number(), z.string(), z.any()]).optional(),
  request: z.union([z.number(), z.string(), z.any()]).optional(),
  image: z.union([z.number(), z.string(), z.any()]).optional(),
  imageOutput: z.union([z.number(), z.string(), z.any()]).optional(),
  audio: z.union([z.number(), z.string(), z.any()]).optional(),
  inputAudioCache: z.union([z.number(), z.string(), z.any()]).optional(),
  webSearch: z.union([z.number(), z.string(), z.any()]).optional(),
  internalReasoning: z.union([z.number(), z.string(), z.any()]).optional(),
  inputCacheRead: z.union([z.number(), z.string(), z.any()]).optional(),
  inputCacheWrite: z.union([z.number(), z.string(), z.any()]).optional(),
  discount: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    imageOutput: "image_output",
    inputAudioCache: "input_audio_cache",
    webSearch: "web_search",
    internalReasoning: "internal_reasoning",
    inputCacheRead: "input_cache_read",
    inputCacheWrite: "input_cache_write",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetEndpointsZdrPricing$ {
  /** @deprecated use `GetEndpointsZdrPricing$inboundSchema` instead. */
  export const inboundSchema = GetEndpointsZdrPricing$inboundSchema;
  /** @deprecated use `GetEndpointsZdrPricing$outboundSchema` instead. */
  export const outboundSchema = GetEndpointsZdrPricing$outboundSchema;
  /** @deprecated use `GetEndpointsZdrPricing$Outbound` instead. */
  export type Outbound = GetEndpointsZdrPricing$Outbound;
}

export function getEndpointsZdrPricingToJSON(
  getEndpointsZdrPricing: GetEndpointsZdrPricing,
): string {
  return JSON.stringify(
    GetEndpointsZdrPricing$outboundSchema.parse(getEndpointsZdrPricing),
  );
}

export function getEndpointsZdrPricingFromJSON(
  jsonString: string,
): SafeParseResult<GetEndpointsZdrPricing, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetEndpointsZdrPricing$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetEndpointsZdrPricing' from JSON`,
  );
}

/** @internal */
export const GetEndpointsZdrProviderName$inboundSchema: z.ZodNativeEnum<
  typeof GetEndpointsZdrProviderName
> = z.nativeEnum(GetEndpointsZdrProviderName);

/** @internal */
export const GetEndpointsZdrProviderName$outboundSchema: z.ZodNativeEnum<
  typeof GetEndpointsZdrProviderName
> = GetEndpointsZdrProviderName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetEndpointsZdrProviderName$ {
  /** @deprecated use `GetEndpointsZdrProviderName$inboundSchema` instead. */
  export const inboundSchema = GetEndpointsZdrProviderName$inboundSchema;
  /** @deprecated use `GetEndpointsZdrProviderName$outboundSchema` instead. */
  export const outboundSchema = GetEndpointsZdrProviderName$outboundSchema;
}

/** @internal */
export const GetEndpointsZdrQuantization$inboundSchema: z.ZodNativeEnum<
  typeof GetEndpointsZdrQuantization
> = z.nativeEnum(GetEndpointsZdrQuantization);

/** @internal */
export const GetEndpointsZdrQuantization$outboundSchema: z.ZodNativeEnum<
  typeof GetEndpointsZdrQuantization
> = GetEndpointsZdrQuantization$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetEndpointsZdrQuantization$ {
  /** @deprecated use `GetEndpointsZdrQuantization$inboundSchema` instead. */
  export const inboundSchema = GetEndpointsZdrQuantization$inboundSchema;
  /** @deprecated use `GetEndpointsZdrQuantization$outboundSchema` instead. */
  export const outboundSchema = GetEndpointsZdrQuantization$outboundSchema;
}

/** @internal */
export const GetEndpointsZdrSupportedParameter$inboundSchema: z.ZodNativeEnum<
  typeof GetEndpointsZdrSupportedParameter
> = z.nativeEnum(GetEndpointsZdrSupportedParameter);

/** @internal */
export const GetEndpointsZdrSupportedParameter$outboundSchema: z.ZodNativeEnum<
  typeof GetEndpointsZdrSupportedParameter
> = GetEndpointsZdrSupportedParameter$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetEndpointsZdrSupportedParameter$ {
  /** @deprecated use `GetEndpointsZdrSupportedParameter$inboundSchema` instead. */
  export const inboundSchema = GetEndpointsZdrSupportedParameter$inboundSchema;
  /** @deprecated use `GetEndpointsZdrSupportedParameter$outboundSchema` instead. */
  export const outboundSchema =
    GetEndpointsZdrSupportedParameter$outboundSchema;
}

/** @internal */
export const GetEndpointsZdrStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetEndpointsZdrStatus
> = z.nativeEnum(GetEndpointsZdrStatus);

/** @internal */
export const GetEndpointsZdrStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetEndpointsZdrStatus
> = GetEndpointsZdrStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetEndpointsZdrStatus$ {
  /** @deprecated use `GetEndpointsZdrStatus$inboundSchema` instead. */
  export const inboundSchema = GetEndpointsZdrStatus$inboundSchema;
  /** @deprecated use `GetEndpointsZdrStatus$outboundSchema` instead. */
  export const outboundSchema = GetEndpointsZdrStatus$outboundSchema;
}

/** @internal */
export const GetEndpointsZdrData$inboundSchema: z.ZodType<
  GetEndpointsZdrData,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  model_name: z.string(),
  context_length: z.number(),
  pricing: z.lazy(() => GetEndpointsZdrPricing$inboundSchema),
  provider_name: GetEndpointsZdrProviderName$inboundSchema,
  tag: z.string(),
  quantization: z.nullable(GetEndpointsZdrQuantization$inboundSchema),
  max_completion_tokens: z.nullable(z.number()),
  max_prompt_tokens: z.nullable(z.number()),
  supported_parameters: z.array(
    GetEndpointsZdrSupportedParameter$inboundSchema,
  ),
  status: GetEndpointsZdrStatus$inboundSchema.optional(),
  uptime_last_30m: z.nullable(z.number()),
  supports_implicit_caching: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "model_name": "modelName",
    "context_length": "contextLength",
    "provider_name": "providerName",
    "max_completion_tokens": "maxCompletionTokens",
    "max_prompt_tokens": "maxPromptTokens",
    "supported_parameters": "supportedParameters",
    "uptime_last_30m": "uptimeLast30m",
    "supports_implicit_caching": "supportsImplicitCaching",
  });
});

/** @internal */
export type GetEndpointsZdrData$Outbound = {
  name: string;
  model_name: string;
  context_length: number;
  pricing: GetEndpointsZdrPricing$Outbound;
  provider_name: string;
  tag: string;
  quantization: string | null;
  max_completion_tokens: number | null;
  max_prompt_tokens: number | null;
  supported_parameters: Array<string>;
  status?: number | undefined;
  uptime_last_30m: number | null;
  supports_implicit_caching: boolean;
};

/** @internal */
export const GetEndpointsZdrData$outboundSchema: z.ZodType<
  GetEndpointsZdrData$Outbound,
  z.ZodTypeDef,
  GetEndpointsZdrData
> = z.object({
  name: z.string(),
  modelName: z.string(),
  contextLength: z.number(),
  pricing: z.lazy(() => GetEndpointsZdrPricing$outboundSchema),
  providerName: GetEndpointsZdrProviderName$outboundSchema,
  tag: z.string(),
  quantization: z.nullable(GetEndpointsZdrQuantization$outboundSchema),
  maxCompletionTokens: z.nullable(z.number()),
  maxPromptTokens: z.nullable(z.number()),
  supportedParameters: z.array(
    GetEndpointsZdrSupportedParameter$outboundSchema,
  ),
  status: GetEndpointsZdrStatus$outboundSchema.optional(),
  uptimeLast30m: z.nullable(z.number()),
  supportsImplicitCaching: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    modelName: "model_name",
    contextLength: "context_length",
    providerName: "provider_name",
    maxCompletionTokens: "max_completion_tokens",
    maxPromptTokens: "max_prompt_tokens",
    supportedParameters: "supported_parameters",
    uptimeLast30m: "uptime_last_30m",
    supportsImplicitCaching: "supports_implicit_caching",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetEndpointsZdrData$ {
  /** @deprecated use `GetEndpointsZdrData$inboundSchema` instead. */
  export const inboundSchema = GetEndpointsZdrData$inboundSchema;
  /** @deprecated use `GetEndpointsZdrData$outboundSchema` instead. */
  export const outboundSchema = GetEndpointsZdrData$outboundSchema;
  /** @deprecated use `GetEndpointsZdrData$Outbound` instead. */
  export type Outbound = GetEndpointsZdrData$Outbound;
}

export function getEndpointsZdrDataToJSON(
  getEndpointsZdrData: GetEndpointsZdrData,
): string {
  return JSON.stringify(
    GetEndpointsZdrData$outboundSchema.parse(getEndpointsZdrData),
  );
}

export function getEndpointsZdrDataFromJSON(
  jsonString: string,
): SafeParseResult<GetEndpointsZdrData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetEndpointsZdrData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetEndpointsZdrData' from JSON`,
  );
}

/** @internal */
export const GetEndpointsZdrResponse$inboundSchema: z.ZodType<
  GetEndpointsZdrResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(z.lazy(() => GetEndpointsZdrData$inboundSchema)),
});

/** @internal */
export type GetEndpointsZdrResponse$Outbound = {
  data: Array<GetEndpointsZdrData$Outbound>;
};

/** @internal */
export const GetEndpointsZdrResponse$outboundSchema: z.ZodType<
  GetEndpointsZdrResponse$Outbound,
  z.ZodTypeDef,
  GetEndpointsZdrResponse
> = z.object({
  data: z.array(z.lazy(() => GetEndpointsZdrData$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetEndpointsZdrResponse$ {
  /** @deprecated use `GetEndpointsZdrResponse$inboundSchema` instead. */
  export const inboundSchema = GetEndpointsZdrResponse$inboundSchema;
  /** @deprecated use `GetEndpointsZdrResponse$outboundSchema` instead. */
  export const outboundSchema = GetEndpointsZdrResponse$outboundSchema;
  /** @deprecated use `GetEndpointsZdrResponse$Outbound` instead. */
  export type Outbound = GetEndpointsZdrResponse$Outbound;
}

export function getEndpointsZdrResponseToJSON(
  getEndpointsZdrResponse: GetEndpointsZdrResponse,
): string {
  return JSON.stringify(
    GetEndpointsZdrResponse$outboundSchema.parse(getEndpointsZdrResponse),
  );
}

export function getEndpointsZdrResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetEndpointsZdrResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetEndpointsZdrResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetEndpointsZdrResponse' from JSON`,
  );
}
