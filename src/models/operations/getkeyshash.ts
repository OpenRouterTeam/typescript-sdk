/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetKeysHashRequest = {
  hash: string;
};

/**
 * The API key information
 */
export type GetKeysHashData = {
  /**
   * Unique hash identifier for the API key
   */
  hash: string;
  /**
   * Name of the API key
   */
  name: string;
  /**
   * Human-readable label for the API key
   */
  label: string;
  /**
   * Whether the API key is disabled
   */
  disabled: boolean;
  /**
   * Spending limit for the API key in USD
   */
  limit: number | null;
  /**
   * Current usage of the API key in USD
   */
  usage: number;
  /**
   * ISO 8601 timestamp of when the API key was created
   */
  createdAt: string;
  /**
   * ISO 8601 timestamp of when the API key was last updated
   */
  updatedAt: string | null;
};

/**
 * API key details
 */
export type GetKeysHashResponse = {
  /**
   * The API key information
   */
  data: GetKeysHashData;
};

/** @internal */
export const GetKeysHashRequest$inboundSchema: z.ZodType<
  GetKeysHashRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  hash: z.string(),
});

/** @internal */
export type GetKeysHashRequest$Outbound = {
  hash: string;
};

/** @internal */
export const GetKeysHashRequest$outboundSchema: z.ZodType<
  GetKeysHashRequest$Outbound,
  z.ZodTypeDef,
  GetKeysHashRequest
> = z.object({
  hash: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetKeysHashRequest$ {
  /** @deprecated use `GetKeysHashRequest$inboundSchema` instead. */
  export const inboundSchema = GetKeysHashRequest$inboundSchema;
  /** @deprecated use `GetKeysHashRequest$outboundSchema` instead. */
  export const outboundSchema = GetKeysHashRequest$outboundSchema;
  /** @deprecated use `GetKeysHashRequest$Outbound` instead. */
  export type Outbound = GetKeysHashRequest$Outbound;
}

export function getKeysHashRequestToJSON(
  getKeysHashRequest: GetKeysHashRequest,
): string {
  return JSON.stringify(
    GetKeysHashRequest$outboundSchema.parse(getKeysHashRequest),
  );
}

export function getKeysHashRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetKeysHashRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetKeysHashRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetKeysHashRequest' from JSON`,
  );
}

/** @internal */
export const GetKeysHashData$inboundSchema: z.ZodType<
  GetKeysHashData,
  z.ZodTypeDef,
  unknown
> = z.object({
  hash: z.string(),
  name: z.string(),
  label: z.string(),
  disabled: z.boolean(),
  limit: z.nullable(z.number()),
  usage: z.number(),
  created_at: z.string(),
  updated_at: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type GetKeysHashData$Outbound = {
  hash: string;
  name: string;
  label: string;
  disabled: boolean;
  limit: number | null;
  usage: number;
  created_at: string;
  updated_at: string | null;
};

/** @internal */
export const GetKeysHashData$outboundSchema: z.ZodType<
  GetKeysHashData$Outbound,
  z.ZodTypeDef,
  GetKeysHashData
> = z.object({
  hash: z.string(),
  name: z.string(),
  label: z.string(),
  disabled: z.boolean(),
  limit: z.nullable(z.number()),
  usage: z.number(),
  createdAt: z.string(),
  updatedAt: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetKeysHashData$ {
  /** @deprecated use `GetKeysHashData$inboundSchema` instead. */
  export const inboundSchema = GetKeysHashData$inboundSchema;
  /** @deprecated use `GetKeysHashData$outboundSchema` instead. */
  export const outboundSchema = GetKeysHashData$outboundSchema;
  /** @deprecated use `GetKeysHashData$Outbound` instead. */
  export type Outbound = GetKeysHashData$Outbound;
}

export function getKeysHashDataToJSON(
  getKeysHashData: GetKeysHashData,
): string {
  return JSON.stringify(GetKeysHashData$outboundSchema.parse(getKeysHashData));
}

export function getKeysHashDataFromJSON(
  jsonString: string,
): SafeParseResult<GetKeysHashData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetKeysHashData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetKeysHashData' from JSON`,
  );
}

/** @internal */
export const GetKeysHashResponse$inboundSchema: z.ZodType<
  GetKeysHashResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => GetKeysHashData$inboundSchema),
});

/** @internal */
export type GetKeysHashResponse$Outbound = {
  data: GetKeysHashData$Outbound;
};

/** @internal */
export const GetKeysHashResponse$outboundSchema: z.ZodType<
  GetKeysHashResponse$Outbound,
  z.ZodTypeDef,
  GetKeysHashResponse
> = z.object({
  data: z.lazy(() => GetKeysHashData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetKeysHashResponse$ {
  /** @deprecated use `GetKeysHashResponse$inboundSchema` instead. */
  export const inboundSchema = GetKeysHashResponse$inboundSchema;
  /** @deprecated use `GetKeysHashResponse$outboundSchema` instead. */
  export const outboundSchema = GetKeysHashResponse$outboundSchema;
  /** @deprecated use `GetKeysHashResponse$Outbound` instead. */
  export type Outbound = GetKeysHashResponse$Outbound;
}

export function getKeysHashResponseToJSON(
  getKeysHashResponse: GetKeysHashResponse,
): string {
  return JSON.stringify(
    GetKeysHashResponse$outboundSchema.parse(getKeysHashResponse),
  );
}

export function getKeysHashResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetKeysHashResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetKeysHashResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetKeysHashResponse' from JSON`,
  );
}
