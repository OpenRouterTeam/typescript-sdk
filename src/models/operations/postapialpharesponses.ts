/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { EventStream } from "../../lib/event-streams.js";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const InputTypeImageGenerationCall2 = {
  ImageGenerationCall: "image_generation_call",
} as const;
export type InputTypeImageGenerationCall2 = ClosedEnum<
  typeof InputTypeImageGenerationCall2
>;

export const StatusRequestEnum6 = {
  InProgress: "in_progress",
  Completed: "completed",
  Generating: "generating",
  Failed: "failed",
} as const;
export type StatusRequestEnum6 = ClosedEnum<typeof StatusRequestEnum6>;

export type InputImageGenerationCall2 = {
  type: InputTypeImageGenerationCall2;
  id: string;
  result: string | null;
  status: StatusRequestEnum6;
};

export const InputTypeFileSearchCall = {
  FileSearchCall: "file_search_call",
} as const;
export type InputTypeFileSearchCall = ClosedEnum<
  typeof InputTypeFileSearchCall
>;

export const StatusRequestEnum5 = {
  Completed: "completed",
  Searching: "searching",
  InProgress: "in_progress",
  Failed: "failed",
} as const;
export type StatusRequestEnum5 = ClosedEnum<typeof StatusRequestEnum5>;

export type InputFileSearchCall = {
  type: InputTypeFileSearchCall;
  id: string;
  queries: Array<string>;
  status: StatusRequestEnum5;
};

export const InputTypeWebSearchCall = {
  WebSearchCall: "web_search_call",
} as const;
export type InputTypeWebSearchCall = ClosedEnum<typeof InputTypeWebSearchCall>;

export const StatusRequestEnum4 = {
  Completed: "completed",
  Searching: "searching",
  InProgress: "in_progress",
  Failed: "failed",
} as const;
export type StatusRequestEnum4 = ClosedEnum<typeof StatusRequestEnum4>;

export type InputWebSearchCall = {
  type: InputTypeWebSearchCall;
  id: string;
  status: StatusRequestEnum4;
};

export const InputTypeFunctionCall2 = {
  FunctionCall: "function_call",
} as const;
export type InputTypeFunctionCall2 = ClosedEnum<typeof InputTypeFunctionCall2>;

export type InputFunctionCall2 = {
  type: InputTypeFunctionCall2;
  id?: string | undefined;
  name: string;
  arguments: string;
  callId: string;
};

export const InputTypeReasoning = {
  Reasoning: "reasoning",
} as const;
export type InputTypeReasoning = ClosedEnum<typeof InputTypeReasoning>;

export const InputTypeReasoningText = {
  ReasoningText: "reasoning_text",
} as const;
export type InputTypeReasoningText = ClosedEnum<typeof InputTypeReasoningText>;

export type ContentReasoningTextRequest = {
  type: InputTypeReasoningText;
  text: string;
};

export const InputTypeSummaryText = {
  SummaryText: "summary_text",
} as const;
export type InputTypeSummaryText = ClosedEnum<typeof InputTypeSummaryText>;

export type InputSummary = {
  type: InputTypeSummaryText;
  text: string;
};

export const InputFormat = {
  Unknown: "unknown",
  OpenaiResponsesV1: "openai-responses-v1",
  AnthropicClaudeV1: "anthropic-claude-v1",
} as const;
export type InputFormat = ClosedEnum<typeof InputFormat>;

export type InputReasoning = {
  type: InputTypeReasoning;
  id: string;
  content?: Array<ContentReasoningTextRequest> | undefined;
  summary: Array<InputSummary>;
  encryptedContent?: string | null | undefined;
  signature?: string | null | undefined;
  format?: InputFormat | null | undefined;
};

export const InputTypeMessage4 = {
  Message: "message",
} as const;
export type InputTypeMessage4 = ClosedEnum<typeof InputTypeMessage4>;

export const StatusInProgressRequest2 = {
  InProgress: "in_progress",
} as const;
export type StatusInProgressRequest2 = ClosedEnum<
  typeof StatusInProgressRequest2
>;

export const StatusIncompleteRequest2 = {
  Incomplete: "incomplete",
} as const;
export type StatusIncompleteRequest2 = ClosedEnum<
  typeof StatusIncompleteRequest2
>;

export const StatusCompletedRequest2 = {
  Completed: "completed",
} as const;
export type StatusCompletedRequest2 = ClosedEnum<
  typeof StatusCompletedRequest2
>;

export type StatusRequestUnion2 =
  | StatusCompletedRequest2
  | StatusIncompleteRequest2
  | StatusInProgressRequest2;

export const RoleAssistantRequest3 = {
  Assistant: "assistant",
} as const;
export type RoleAssistantRequest3 = ClosedEnum<typeof RoleAssistantRequest3>;

export const InputTypeRefusal2 = {
  Refusal: "refusal",
} as const;
export type InputTypeRefusal2 = ClosedEnum<typeof InputTypeRefusal2>;

export type ContentRefusalRequest2 = {
  type: InputTypeRefusal2;
  refusal: string;
};

export const InputTypeOutputText2 = {
  OutputText: "output_text",
} as const;
export type InputTypeOutputText2 = ClosedEnum<typeof InputTypeOutputText2>;

export const InputTypeFilePath2 = {
  FilePath: "file_path",
} as const;
export type InputTypeFilePath2 = ClosedEnum<typeof InputTypeFilePath2>;

export type AnnotationFilePathRequest2 = {
  type: InputTypeFilePath2;
  fileId: string;
  index: number;
};

export const InputTypeURLCitation2 = {
  UrlCitation: "url_citation",
} as const;
export type InputTypeURLCitation2 = ClosedEnum<typeof InputTypeURLCitation2>;

export type AnnotationURLCitationRequest2 = {
  type: InputTypeURLCitation2;
  endIndex: number;
  startIndex: number;
  title: string;
  url: string;
};

export const InputTypeFileCitation2 = {
  FileCitation: "file_citation",
} as const;
export type InputTypeFileCitation2 = ClosedEnum<typeof InputTypeFileCitation2>;

export type AnnotationFileCitationRequest2 = {
  type: InputTypeFileCitation2;
  fileId: string;
  filename: string;
  index: number;
};

export type AnnotationRequestUnion2 =
  | AnnotationURLCitationRequest2
  | AnnotationFileCitationRequest2
  | AnnotationFilePathRequest2;

export type ContentOutputTextRequest2 = {
  type: InputTypeOutputText2;
  text: string;
  annotations: Array<
    | AnnotationURLCitationRequest2
    | AnnotationFileCitationRequest2
    | AnnotationFilePathRequest2
  >;
};

export type ContentRequestUnion5 =
  | ContentOutputTextRequest2
  | ContentRefusalRequest2;

export type InputAssistant2 = {
  type: InputTypeMessage4;
  id: string;
  status:
    | StatusCompletedRequest2
    | StatusIncompleteRequest2
    | StatusInProgressRequest2;
  role: RoleAssistantRequest3;
  content: Array<ContentOutputTextRequest2 | ContentRefusalRequest2>;
};

export type PostApiAlphaResponsesInputUnion3 =
  | InputAssistant2
  | InputFunctionCall2
  | InputFileSearchCall
  | InputImageGenerationCall2
  | InputReasoning
  | InputWebSearchCall;

export const InputTypeMessage3 = {
  Message: "message",
} as const;
export type InputTypeMessage3 = ClosedEnum<typeof InputTypeMessage3>;

export const StatusInProgressRequest1 = {
  InProgress: "in_progress",
} as const;
export type StatusInProgressRequest1 = ClosedEnum<
  typeof StatusInProgressRequest1
>;

export const StatusIncompleteRequest1 = {
  Incomplete: "incomplete",
} as const;
export type StatusIncompleteRequest1 = ClosedEnum<
  typeof StatusIncompleteRequest1
>;

export const StatusCompletedRequest1 = {
  Completed: "completed",
} as const;
export type StatusCompletedRequest1 = ClosedEnum<
  typeof StatusCompletedRequest1
>;

export type StatusRequestUnion1 =
  | StatusCompletedRequest1
  | StatusIncompleteRequest1
  | StatusInProgressRequest1;

export const RoleAssistantRequest2 = {
  Assistant: "assistant",
} as const;
export type RoleAssistantRequest2 = ClosedEnum<typeof RoleAssistantRequest2>;

export const InputTypeRefusal1 = {
  Refusal: "refusal",
} as const;
export type InputTypeRefusal1 = ClosedEnum<typeof InputTypeRefusal1>;

export type ContentRefusalRequest1 = {
  type: InputTypeRefusal1;
  refusal: string;
};

export const InputTypeOutputText1 = {
  OutputText: "output_text",
} as const;
export type InputTypeOutputText1 = ClosedEnum<typeof InputTypeOutputText1>;

export const InputTypeFilePath1 = {
  FilePath: "file_path",
} as const;
export type InputTypeFilePath1 = ClosedEnum<typeof InputTypeFilePath1>;

export type AnnotationFilePathRequest1 = {
  type: InputTypeFilePath1;
  fileId: string;
  index: number;
};

export const InputTypeURLCitation1 = {
  UrlCitation: "url_citation",
} as const;
export type InputTypeURLCitation1 = ClosedEnum<typeof InputTypeURLCitation1>;

export type AnnotationURLCitationRequest1 = {
  type: InputTypeURLCitation1;
  endIndex: number;
  startIndex: number;
  title: string;
  url: string;
};

export const InputTypeFileCitation1 = {
  FileCitation: "file_citation",
} as const;
export type InputTypeFileCitation1 = ClosedEnum<typeof InputTypeFileCitation1>;

export type AnnotationFileCitationRequest1 = {
  type: InputTypeFileCitation1;
  fileId: string;
  filename: string;
  index: number;
};

export type AnnotationRequestUnion1 =
  | AnnotationURLCitationRequest1
  | AnnotationFileCitationRequest1
  | AnnotationFilePathRequest1;

export type ContentOutputTextRequest1 = {
  type: InputTypeOutputText1;
  text: string;
  annotations: Array<
    | AnnotationURLCitationRequest1
    | AnnotationFileCitationRequest1
    | AnnotationFilePathRequest1
  >;
};

export type ContentRequestUnion4 =
  | ContentOutputTextRequest1
  | ContentRefusalRequest1;

export type InputAssistant1 = {
  type: InputTypeMessage3;
  id: string;
  status:
    | StatusCompletedRequest1
    | StatusIncompleteRequest1
    | StatusInProgressRequest1;
  role: RoleAssistantRequest2;
  content: Array<ContentOutputTextRequest1 | ContentRefusalRequest1>;
};

export const InputTypeImageGenerationCall1 = {
  ImageGenerationCall: "image_generation_call",
} as const;
export type InputTypeImageGenerationCall1 = ClosedEnum<
  typeof InputTypeImageGenerationCall1
>;

export const StatusRequestEnum3 = {
  InProgress: "in_progress",
  Completed: "completed",
  Generating: "generating",
  Failed: "failed",
} as const;
export type StatusRequestEnum3 = ClosedEnum<typeof StatusRequestEnum3>;

export type InputImageGenerationCall1 = {
  type: InputTypeImageGenerationCall1;
  id: string;
  result: string | null;
  status: StatusRequestEnum3;
};

export const InputTypeFunctionCallOutput = {
  FunctionCallOutput: "function_call_output",
} as const;
export type InputTypeFunctionCallOutput = ClosedEnum<
  typeof InputTypeFunctionCallOutput
>;

export const StatusRequestEnum2 = {
  InProgress: "in_progress",
  Completed: "completed",
  Incomplete: "incomplete",
} as const;
export type StatusRequestEnum2 = ClosedEnum<typeof StatusRequestEnum2>;

export type InputFunctionCallOutput = {
  type: InputTypeFunctionCallOutput;
  id: string;
  callId: string;
  output: string;
  status?: StatusRequestEnum2 | undefined;
};

export const InputTypeFunctionCall1 = {
  FunctionCall: "function_call",
} as const;
export type InputTypeFunctionCall1 = ClosedEnum<typeof InputTypeFunctionCall1>;

export const StatusRequestEnum1 = {
  InProgress: "in_progress",
  Completed: "completed",
  Incomplete: "incomplete",
} as const;
export type StatusRequestEnum1 = ClosedEnum<typeof StatusRequestEnum1>;

export type InputFunctionCall1 = {
  type: InputTypeFunctionCall1;
  callId: string;
  name: string;
  arguments: string;
  id?: string | undefined;
  status?: StatusRequestEnum1 | undefined;
};

export const InputTypeMessage2 = {
  Message: "message",
} as const;
export type InputTypeMessage2 = ClosedEnum<typeof InputTypeMessage2>;

export const RoleDeveloperRequest2 = {
  Developer: "developer",
} as const;
export type RoleDeveloperRequest2 = ClosedEnum<typeof RoleDeveloperRequest2>;

export const RoleSystemRequest2 = {
  System: "system",
} as const;
export type RoleSystemRequest2 = ClosedEnum<typeof RoleSystemRequest2>;

export const RoleUserRequest2 = {
  User: "user",
} as const;
export type RoleUserRequest2 = ClosedEnum<typeof RoleUserRequest2>;

export type RoleRequestUnion2 =
  | RoleUserRequest2
  | RoleSystemRequest2
  | RoleDeveloperRequest2;

export const InputTypeInputFile2 = {
  InputFile: "input_file",
} as const;
export type InputTypeInputFile2 = ClosedEnum<typeof InputTypeInputFile2>;

export type ContentInputFileRequest2 = {
  type: InputTypeInputFile2;
  fileId?: string | null | undefined;
  fileData?: string | undefined;
  filename?: string | undefined;
  fileUrl?: string | undefined;
};

export const InputTypeInputImage2 = {
  InputImage: "input_image",
} as const;
export type InputTypeInputImage2 = ClosedEnum<typeof InputTypeInputImage2>;

export const InputDetail2 = {
  Auto: "auto",
  High: "high",
  Low: "low",
} as const;
export type InputDetail2 = ClosedEnum<typeof InputDetail2>;

export type ContentInputImageRequest2 = {
  type: InputTypeInputImage2;
  detail: InputDetail2;
  imageUrl?: string | null | undefined;
};

export const InputTypeInputText2 = {
  InputText: "input_text",
} as const;
export type InputTypeInputText2 = ClosedEnum<typeof InputTypeInputText2>;

export type ContentInputTextRequest2 = {
  type: InputTypeInputText2;
  text: string;
};

export type ContentRequestUnion3 =
  | ContentInputTextRequest2
  | ContentInputImageRequest2
  | ContentInputFileRequest2;

export type InputMessage2 = {
  id: string;
  type?: InputTypeMessage2 | undefined;
  role: RoleUserRequest2 | RoleSystemRequest2 | RoleDeveloperRequest2;
  content: Array<
    | ContentInputTextRequest2
    | ContentInputImageRequest2
    | ContentInputFileRequest2
  >;
};

export const InputTypeMessage1 = {
  Message: "message",
} as const;
export type InputTypeMessage1 = ClosedEnum<typeof InputTypeMessage1>;

export const RoleDeveloperRequest1 = {
  Developer: "developer",
} as const;
export type RoleDeveloperRequest1 = ClosedEnum<typeof RoleDeveloperRequest1>;

export const RoleAssistantRequest1 = {
  Assistant: "assistant",
} as const;
export type RoleAssistantRequest1 = ClosedEnum<typeof RoleAssistantRequest1>;

export const RoleSystemRequest1 = {
  System: "system",
} as const;
export type RoleSystemRequest1 = ClosedEnum<typeof RoleSystemRequest1>;

export const RoleUserRequest1 = {
  User: "user",
} as const;
export type RoleUserRequest1 = ClosedEnum<typeof RoleUserRequest1>;

export type RoleRequestUnion1 =
  | RoleUserRequest1
  | RoleSystemRequest1
  | RoleAssistantRequest1
  | RoleDeveloperRequest1;

export const InputTypeInputFile1 = {
  InputFile: "input_file",
} as const;
export type InputTypeInputFile1 = ClosedEnum<typeof InputTypeInputFile1>;

export type ContentInputFileRequest1 = {
  type: InputTypeInputFile1;
  fileId?: string | null | undefined;
  fileData?: string | undefined;
  filename?: string | undefined;
  fileUrl?: string | undefined;
};

export const InputTypeInputImage1 = {
  InputImage: "input_image",
} as const;
export type InputTypeInputImage1 = ClosedEnum<typeof InputTypeInputImage1>;

export const InputDetail1 = {
  Auto: "auto",
  High: "high",
  Low: "low",
} as const;
export type InputDetail1 = ClosedEnum<typeof InputDetail1>;

export type ContentInputImageRequest1 = {
  type: InputTypeInputImage1;
  detail: InputDetail1;
  imageUrl?: string | null | undefined;
};

export const InputTypeInputText1 = {
  InputText: "input_text",
} as const;
export type InputTypeInputText1 = ClosedEnum<typeof InputTypeInputText1>;

export type ContentInputTextRequest1 = {
  type: InputTypeInputText1;
  text: string;
};

export type ContentRequestUnion2 =
  | ContentInputTextRequest1
  | ContentInputImageRequest1
  | ContentInputFileRequest1;

export type ContentRequestUnion1 =
  | Array<
    | ContentInputTextRequest1
    | ContentInputImageRequest1
    | ContentInputFileRequest1
  >
  | string;

export type InputMessage1 = {
  type?: InputTypeMessage1 | undefined;
  role:
    | RoleUserRequest1
    | RoleSystemRequest1
    | RoleAssistantRequest1
    | RoleDeveloperRequest1;
  content:
    | Array<
      | ContentInputTextRequest1
      | ContentInputImageRequest1
      | ContentInputFileRequest1
    >
    | string;
};

export type PostApiAlphaResponsesInputUnion2 =
  | InputAssistant1
  | InputFunctionCall1
  | InputFunctionCallOutput
  | InputImageGenerationCall1
  | InputMessage2
  | InputMessage1
  | InputAssistant2
  | InputFunctionCall2
  | InputFileSearchCall
  | InputImageGenerationCall2
  | InputReasoning
  | InputWebSearchCall;

export type PostApiAlphaResponsesInputUnion1 =
  | string
  | Array<
    | InputAssistant1
    | InputFunctionCall1
    | InputFunctionCallOutput
    | InputImageGenerationCall1
    | InputMessage2
    | InputMessage1
    | InputAssistant2
    | InputFunctionCall2
    | InputFileSearchCall
    | InputImageGenerationCall2
    | InputReasoning
    | InputWebSearchCall
  >;

export const TypeWebSearch20250826Request = {
  WebSearch20250826: "web_search_2025_08_26",
} as const;
export type TypeWebSearch20250826Request = ClosedEnum<
  typeof TypeWebSearch20250826Request
>;

export type FiltersRequest2 = {
  allowedDomains?: Array<string> | null | undefined;
};

export const SearchContextSizeRequest4 = {
  Low: "low",
  Medium: "medium",
  High: "high",
} as const;
export type SearchContextSizeRequest4 = ClosedEnum<
  typeof SearchContextSizeRequest4
>;

export const TypeApproximateRequest4 = {
  Approximate: "approximate",
} as const;
export type TypeApproximateRequest4 = ClosedEnum<
  typeof TypeApproximateRequest4
>;

export type UserLocationRequest4 = {
  type?: TypeApproximateRequest4 | undefined;
  city?: string | null | undefined;
  country?: string | null | undefined;
  region?: string | null | undefined;
  timezone?: string | null | undefined;
};

export type ToolWebSearch20250826Request = {
  type: TypeWebSearch20250826Request;
  filters?: FiltersRequest2 | null | undefined;
  searchContextSize?: SearchContextSizeRequest4 | undefined;
  userLocation?: UserLocationRequest4 | null | undefined;
};

export const TypeWebSearchRequest = {
  WebSearch: "web_search",
} as const;
export type TypeWebSearchRequest = ClosedEnum<typeof TypeWebSearchRequest>;

export type FiltersRequest1 = {
  allowedDomains?: Array<string> | null | undefined;
};

export const SearchContextSizeRequest3 = {
  Low: "low",
  Medium: "medium",
  High: "high",
} as const;
export type SearchContextSizeRequest3 = ClosedEnum<
  typeof SearchContextSizeRequest3
>;

export const TypeApproximateRequest3 = {
  Approximate: "approximate",
} as const;
export type TypeApproximateRequest3 = ClosedEnum<
  typeof TypeApproximateRequest3
>;

export type UserLocationRequest3 = {
  type?: TypeApproximateRequest3 | undefined;
  city?: string | null | undefined;
  country?: string | null | undefined;
  region?: string | null | undefined;
  timezone?: string | null | undefined;
};

export type ToolWebSearchRequest = {
  type: TypeWebSearchRequest;
  filters?: FiltersRequest1 | null | undefined;
  searchContextSize?: SearchContextSizeRequest3 | undefined;
  userLocation?: UserLocationRequest3 | null | undefined;
};

export const ToolTypeWebSearchPreview20250311Request = {
  WebSearchPreview20250311: "web_search_preview_2025_03_11",
} as const;
export type ToolTypeWebSearchPreview20250311Request = ClosedEnum<
  typeof ToolTypeWebSearchPreview20250311Request
>;

export const SearchContextSizeRequest2 = {
  Low: "low",
  Medium: "medium",
  High: "high",
} as const;
export type SearchContextSizeRequest2 = ClosedEnum<
  typeof SearchContextSizeRequest2
>;

export const TypeApproximateRequest2 = {
  Approximate: "approximate",
} as const;
export type TypeApproximateRequest2 = ClosedEnum<
  typeof TypeApproximateRequest2
>;

export type UserLocationRequest2 = {
  type: TypeApproximateRequest2;
  city?: string | null | undefined;
  country?: string | null | undefined;
  region?: string | null | undefined;
  timezone?: string | null | undefined;
};

export type ToolWebSearchPreview20250311Request = {
  type: ToolTypeWebSearchPreview20250311Request;
  searchContextSize?: SearchContextSizeRequest2 | undefined;
  userLocation?: UserLocationRequest2 | null | undefined;
};

export const ToolTypeWebSearchPreviewRequest = {
  WebSearchPreview: "web_search_preview",
} as const;
export type ToolTypeWebSearchPreviewRequest = ClosedEnum<
  typeof ToolTypeWebSearchPreviewRequest
>;

export const SearchContextSizeRequest1 = {
  Low: "low",
  Medium: "medium",
  High: "high",
} as const;
export type SearchContextSizeRequest1 = ClosedEnum<
  typeof SearchContextSizeRequest1
>;

export const TypeApproximateRequest1 = {
  Approximate: "approximate",
} as const;
export type TypeApproximateRequest1 = ClosedEnum<
  typeof TypeApproximateRequest1
>;

export type UserLocationRequest1 = {
  type: TypeApproximateRequest1;
  city?: string | null | undefined;
  country?: string | null | undefined;
  region?: string | null | undefined;
  timezone?: string | null | undefined;
};

export type ToolWebSearchPreviewRequest = {
  type: ToolTypeWebSearchPreviewRequest;
  searchContextSize?: SearchContextSizeRequest1 | undefined;
  userLocation?: UserLocationRequest1 | null | undefined;
};

export const ToolTypeFunctionRequest = {
  Function: "function",
} as const;
export type ToolTypeFunctionRequest = ClosedEnum<
  typeof ToolTypeFunctionRequest
>;

export type ToolFunctionRequest = {
  type: ToolTypeFunctionRequest;
  name: string;
  description?: string | null | undefined;
  strict?: boolean | null | undefined;
  parameters: { [k: string]: any | null } | null;
};

export type ToolRequestUnion =
  | ToolFunctionRequest
  | ToolWebSearchPreviewRequest
  | ToolWebSearchPreview20250311Request
  | ToolWebSearchRequest
  | ToolWebSearch20250826Request;

export const ToolChoiceTypeFunctionRequest = {
  Function: "function",
} as const;
export type ToolChoiceTypeFunctionRequest = ClosedEnum<
  typeof ToolChoiceTypeFunctionRequest
>;

export type ToolChoiceFunctionRequest = {
  type: ToolChoiceTypeFunctionRequest;
  name: string;
};

export const TypeCodeInterpreterRequest = {
  CodeInterpreter: "code_interpreter",
} as const;
export type TypeCodeInterpreterRequest = ClosedEnum<
  typeof TypeCodeInterpreterRequest
>;

export const TypeComputerUsePreviewRequest = {
  ComputerUsePreview: "computer_use_preview",
} as const;
export type TypeComputerUsePreviewRequest = ClosedEnum<
  typeof TypeComputerUsePreviewRequest
>;

export const ToolChoiceTypeWebSearchPreview20250311Request = {
  WebSearchPreview20250311: "web_search_preview_2025_03_11",
} as const;
export type ToolChoiceTypeWebSearchPreview20250311Request = ClosedEnum<
  typeof ToolChoiceTypeWebSearchPreview20250311Request
>;

export const ToolChoiceTypeWebSearchPreviewRequest = {
  WebSearchPreview: "web_search_preview",
} as const;
export type ToolChoiceTypeWebSearchPreviewRequest = ClosedEnum<
  typeof ToolChoiceTypeWebSearchPreviewRequest
>;

export const TypeFileSearchRequest = {
  FileSearch: "file_search",
} as const;
export type TypeFileSearchRequest = ClosedEnum<typeof TypeFileSearchRequest>;

export type TypeRequestUnion =
  | TypeFileSearchRequest
  | ToolChoiceTypeWebSearchPreviewRequest
  | ToolChoiceTypeWebSearchPreview20250311Request
  | TypeComputerUsePreviewRequest
  | TypeCodeInterpreterRequest;

export type ToolChoiceRequest = {
  type:
    | TypeFileSearchRequest
    | ToolChoiceTypeWebSearchPreviewRequest
    | ToolChoiceTypeWebSearchPreview20250311Request
    | TypeComputerUsePreviewRequest
    | TypeCodeInterpreterRequest;
};

export const ToolChoiceRequiredRequest = {
  Required: "required",
} as const;
export type ToolChoiceRequiredRequest = ClosedEnum<
  typeof ToolChoiceRequiredRequest
>;

export const ToolChoiceNoneRequest = {
  None: "none",
} as const;
export type ToolChoiceNoneRequest = ClosedEnum<typeof ToolChoiceNoneRequest>;

export const ToolChoiceAutoRequest = {
  Auto: "auto",
} as const;
export type ToolChoiceAutoRequest = ClosedEnum<typeof ToolChoiceAutoRequest>;

export type ToolChoiceRequestUnion =
  | ToolChoiceFunctionRequest
  | ToolChoiceRequest
  | ToolChoiceAutoRequest
  | ToolChoiceNoneRequest
  | ToolChoiceRequiredRequest;

export const TypeJSONSchemaRequest = {
  JsonSchema: "json_schema",
} as const;
export type TypeJSONSchemaRequest = ClosedEnum<typeof TypeJSONSchemaRequest>;

export type FormatJSONSchemaRequest = {
  type: TypeJSONSchemaRequest;
  name: string;
  description?: string | undefined;
  strict?: boolean | null | undefined;
  schema: { [k: string]: any | null };
};

export const TypeJSONObjectRequest = {
  JsonObject: "json_object",
} as const;
export type TypeJSONObjectRequest = ClosedEnum<typeof TypeJSONObjectRequest>;

export type FormatJSONObjectRequest = {
  type: TypeJSONObjectRequest;
};

export const FormatTypeRequest = {
  Text: "text",
} as const;
export type FormatTypeRequest = ClosedEnum<typeof FormatTypeRequest>;

export type FormatTextRequest = {
  type: FormatTypeRequest;
};

export type FormatRequestUnion =
  | FormatJSONSchemaRequest
  | FormatTextRequest
  | FormatJSONObjectRequest;

export const VerbosityRequest = {
  High: "high",
  Low: "low",
  Medium: "medium",
} as const;
export type VerbosityRequest = ClosedEnum<typeof VerbosityRequest>;

export type TextRequest = {
  format?:
    | FormatJSONSchemaRequest
    | FormatTextRequest
    | FormatJSONObjectRequest
    | undefined;
  verbosity?: VerbosityRequest | null | undefined;
};

export const EffortRequest = {
  High: "high",
  Medium: "medium",
  Low: "low",
  Minimal: "minimal",
} as const;
export type EffortRequest = ClosedEnum<typeof EffortRequest>;

export const SummaryRequestEnum = {
  Auto: "auto",
  Concise: "concise",
  Detailed: "detailed",
} as const;
export type SummaryRequestEnum = ClosedEnum<typeof SummaryRequestEnum>;

export type ReasoningRequest = {
  effort?: EffortRequest | null | undefined;
  summary?: SummaryRequestEnum | null | undefined;
};

export const VariablesTypeInputFileRequest = {
  InputFile: "input_file",
} as const;
export type VariablesTypeInputFileRequest = ClosedEnum<
  typeof VariablesTypeInputFileRequest
>;

export type VariablesInputFileRequest = {
  type: VariablesTypeInputFileRequest;
  fileId?: string | null | undefined;
  fileData?: string | undefined;
  filename?: string | undefined;
  fileUrl?: string | undefined;
};

export const VariablesTypeInputImageRequest = {
  InputImage: "input_image",
} as const;
export type VariablesTypeInputImageRequest = ClosedEnum<
  typeof VariablesTypeInputImageRequest
>;

export const VariablesDetailRequest = {
  Auto: "auto",
  High: "high",
  Low: "low",
} as const;
export type VariablesDetailRequest = ClosedEnum<typeof VariablesDetailRequest>;

export type VariablesInputImageRequest = {
  type: VariablesTypeInputImageRequest;
  detail: VariablesDetailRequest;
  imageUrl?: string | null | undefined;
};

export const VariablesTypeInputTextRequest = {
  InputText: "input_text",
} as const;
export type VariablesTypeInputTextRequest = ClosedEnum<
  typeof VariablesTypeInputTextRequest
>;

export type VariablesInputTextRequest = {
  type: VariablesTypeInputTextRequest;
  text: string;
};

export type VariablesRequestUnion =
  | VariablesInputTextRequest
  | VariablesInputImageRequest
  | VariablesInputFileRequest;

export type PostApiAlphaResponsesPromptRequest = {
  id: string;
  variables?:
    | {
      [k: string]:
        | VariablesInputTextRequest
        | VariablesInputImageRequest
        | VariablesInputFileRequest;
    }
    | null
    | undefined;
};

export const Include = {
  FileSearchCallResults: "file_search_call.results",
  MessageInputImageImageUrl: "message.input_image.image_url",
  ComputerCallOutputOutputImageUrl: "computer_call_output.output.image_url",
  ReasoningEncryptedContent: "reasoning.encrypted_content",
  CodeInterpreterCallOutputs: "code_interpreter_call.outputs",
} as const;
export type Include = ClosedEnum<typeof Include>;

export const ServiceTierRequest = {
  Auto: "auto",
  Default: "default",
  Flex: "flex",
  Priority: "priority",
  Scale: "scale",
} as const;
export type ServiceTierRequest = ClosedEnum<typeof ServiceTierRequest>;

export const TruncationRequest = {
  Auto: "auto",
  Disabled: "disabled",
} as const;
export type TruncationRequest = ClosedEnum<typeof TruncationRequest>;

/**
 * Data collection setting. If no available model provider meets the requirement, your request will return an error.
 *
 * @remarks
 * - allow: (default) allow providers which store user data non-transiently and may train on it
 * - deny: use only providers which do not collect user data.
 */
export const PostApiAlphaResponsesDataCollection = {
  Deny: "deny",
  Allow: "allow",
} as const;
/**
 * Data collection setting. If no available model provider meets the requirement, your request will return an error.
 *
 * @remarks
 * - allow: (default) allow providers which store user data non-transiently and may train on it
 * - deny: use only providers which do not collect user data.
 */
export type PostApiAlphaResponsesDataCollection = ClosedEnum<
  typeof PostApiAlphaResponsesDataCollection
>;

export const PostApiAlphaResponsesOrderEnum = {
  AnyScale: "AnyScale",
  CentML: "Cent-ML",
  HuggingFace: "HuggingFace",
  Hyperbolic2: "Hyperbolic 2",
  Lepton: "Lepton",
  Lynn2: "Lynn 2",
  Lynn: "Lynn",
  Mancer: "Mancer",
  Modal: "Modal",
  OctoAI: "OctoAI",
  Recursal: "Recursal",
  Reflection: "Reflection",
  Replicate: "Replicate",
  SambaNova2: "SambaNova 2",
  SFCompute: "SF Compute",
  Together2: "Together 2",
  OneDotAI: "01.AI",
  Ai21: "AI21",
  AionLabs: "AionLabs",
  Alibaba: "Alibaba",
  AmazonBedrock: "Amazon Bedrock",
  Anthropic: "Anthropic",
  AtlasCloud: "AtlasCloud",
  Atoma: "Atoma",
  Avian: "Avian",
  Azure: "Azure",
  BaseTen: "BaseTen",
  Cerebras: "Cerebras",
  Chutes: "Chutes",
  Cloudflare: "Cloudflare",
  Cohere: "Cohere",
  CrofAI: "CrofAI",
  Crusoe: "Crusoe",
  DeepInfra: "DeepInfra",
  DeepSeek: "DeepSeek",
  Enfer: "Enfer",
  Featherless: "Featherless",
  Fireworks: "Fireworks",
  Friendli: "Friendli",
  GMICloud: "GMICloud",
  Google: "Google",
  GoogleAIStudio: "Google AI Studio",
  Groq: "Groq",
  Hyperbolic: "Hyperbolic",
  Inception: "Inception",
  InferenceNet: "InferenceNet",
  Infermatic: "Infermatic",
  Inflection: "Inflection",
  InoCloud: "InoCloud",
  Kluster: "Kluster",
  Lambda: "Lambda",
  Liquid: "Liquid",
  Mancer2: "Mancer 2",
  Meta: "Meta",
  Minimax: "Minimax",
  Mistral: "Mistral",
  MoonshotAI: "Moonshot AI",
  Morph: "Morph",
  NCompass: "NCompass",
  Nebius: "Nebius",
  NextBit: "NextBit",
  Nineteen: "Nineteen",
  Novita: "Novita",
  Nvidia: "Nvidia",
  OpenAI: "OpenAI",
  OpenInference: "OpenInference",
  Parasail: "Parasail",
  Perplexity: "Perplexity",
  Phala: "Phala",
  SambaNova: "SambaNova",
  SiliconFlow: "SiliconFlow",
  Stealth: "Stealth",
  Switchpoint: "Switchpoint",
  Targon: "Targon",
  Together: "Together",
  Ubicloud: "Ubicloud",
  Venice: "Venice",
  WandB: "WandB",
  XAI: "xAI",
  ZAi: "Z.AI",
  FakeProvider: "FakeProvider",
} as const;
export type PostApiAlphaResponsesOrderEnum = ClosedEnum<
  typeof PostApiAlphaResponsesOrderEnum
>;

export type PostApiAlphaResponsesOrderUnion =
  | PostApiAlphaResponsesOrderEnum
  | string;

export const PostApiAlphaResponsesOnlyEnum = {
  AnyScale: "AnyScale",
  CentML: "Cent-ML",
  HuggingFace: "HuggingFace",
  Hyperbolic2: "Hyperbolic 2",
  Lepton: "Lepton",
  Lynn2: "Lynn 2",
  Lynn: "Lynn",
  Mancer: "Mancer",
  Modal: "Modal",
  OctoAI: "OctoAI",
  Recursal: "Recursal",
  Reflection: "Reflection",
  Replicate: "Replicate",
  SambaNova2: "SambaNova 2",
  SFCompute: "SF Compute",
  Together2: "Together 2",
  OneDotAI: "01.AI",
  Ai21: "AI21",
  AionLabs: "AionLabs",
  Alibaba: "Alibaba",
  AmazonBedrock: "Amazon Bedrock",
  Anthropic: "Anthropic",
  AtlasCloud: "AtlasCloud",
  Atoma: "Atoma",
  Avian: "Avian",
  Azure: "Azure",
  BaseTen: "BaseTen",
  Cerebras: "Cerebras",
  Chutes: "Chutes",
  Cloudflare: "Cloudflare",
  Cohere: "Cohere",
  CrofAI: "CrofAI",
  Crusoe: "Crusoe",
  DeepInfra: "DeepInfra",
  DeepSeek: "DeepSeek",
  Enfer: "Enfer",
  Featherless: "Featherless",
  Fireworks: "Fireworks",
  Friendli: "Friendli",
  GMICloud: "GMICloud",
  Google: "Google",
  GoogleAIStudio: "Google AI Studio",
  Groq: "Groq",
  Hyperbolic: "Hyperbolic",
  Inception: "Inception",
  InferenceNet: "InferenceNet",
  Infermatic: "Infermatic",
  Inflection: "Inflection",
  InoCloud: "InoCloud",
  Kluster: "Kluster",
  Lambda: "Lambda",
  Liquid: "Liquid",
  Mancer2: "Mancer 2",
  Meta: "Meta",
  Minimax: "Minimax",
  Mistral: "Mistral",
  MoonshotAI: "Moonshot AI",
  Morph: "Morph",
  NCompass: "NCompass",
  Nebius: "Nebius",
  NextBit: "NextBit",
  Nineteen: "Nineteen",
  Novita: "Novita",
  Nvidia: "Nvidia",
  OpenAI: "OpenAI",
  OpenInference: "OpenInference",
  Parasail: "Parasail",
  Perplexity: "Perplexity",
  Phala: "Phala",
  SambaNova: "SambaNova",
  SiliconFlow: "SiliconFlow",
  Stealth: "Stealth",
  Switchpoint: "Switchpoint",
  Targon: "Targon",
  Together: "Together",
  Ubicloud: "Ubicloud",
  Venice: "Venice",
  WandB: "WandB",
  XAI: "xAI",
  ZAi: "Z.AI",
  FakeProvider: "FakeProvider",
} as const;
export type PostApiAlphaResponsesOnlyEnum = ClosedEnum<
  typeof PostApiAlphaResponsesOnlyEnum
>;

export type PostApiAlphaResponsesOnlyUnion =
  | PostApiAlphaResponsesOnlyEnum
  | string;

export const PostApiAlphaResponsesIgnoreEnum = {
  AnyScale: "AnyScale",
  CentML: "Cent-ML",
  HuggingFace: "HuggingFace",
  Hyperbolic2: "Hyperbolic 2",
  Lepton: "Lepton",
  Lynn2: "Lynn 2",
  Lynn: "Lynn",
  Mancer: "Mancer",
  Modal: "Modal",
  OctoAI: "OctoAI",
  Recursal: "Recursal",
  Reflection: "Reflection",
  Replicate: "Replicate",
  SambaNova2: "SambaNova 2",
  SFCompute: "SF Compute",
  Together2: "Together 2",
  OneDotAI: "01.AI",
  Ai21: "AI21",
  AionLabs: "AionLabs",
  Alibaba: "Alibaba",
  AmazonBedrock: "Amazon Bedrock",
  Anthropic: "Anthropic",
  AtlasCloud: "AtlasCloud",
  Atoma: "Atoma",
  Avian: "Avian",
  Azure: "Azure",
  BaseTen: "BaseTen",
  Cerebras: "Cerebras",
  Chutes: "Chutes",
  Cloudflare: "Cloudflare",
  Cohere: "Cohere",
  CrofAI: "CrofAI",
  Crusoe: "Crusoe",
  DeepInfra: "DeepInfra",
  DeepSeek: "DeepSeek",
  Enfer: "Enfer",
  Featherless: "Featherless",
  Fireworks: "Fireworks",
  Friendli: "Friendli",
  GMICloud: "GMICloud",
  Google: "Google",
  GoogleAIStudio: "Google AI Studio",
  Groq: "Groq",
  Hyperbolic: "Hyperbolic",
  Inception: "Inception",
  InferenceNet: "InferenceNet",
  Infermatic: "Infermatic",
  Inflection: "Inflection",
  InoCloud: "InoCloud",
  Kluster: "Kluster",
  Lambda: "Lambda",
  Liquid: "Liquid",
  Mancer2: "Mancer 2",
  Meta: "Meta",
  Minimax: "Minimax",
  Mistral: "Mistral",
  MoonshotAI: "Moonshot AI",
  Morph: "Morph",
  NCompass: "NCompass",
  Nebius: "Nebius",
  NextBit: "NextBit",
  Nineteen: "Nineteen",
  Novita: "Novita",
  Nvidia: "Nvidia",
  OpenAI: "OpenAI",
  OpenInference: "OpenInference",
  Parasail: "Parasail",
  Perplexity: "Perplexity",
  Phala: "Phala",
  SambaNova: "SambaNova",
  SiliconFlow: "SiliconFlow",
  Stealth: "Stealth",
  Switchpoint: "Switchpoint",
  Targon: "Targon",
  Together: "Together",
  Ubicloud: "Ubicloud",
  Venice: "Venice",
  WandB: "WandB",
  XAI: "xAI",
  ZAi: "Z.AI",
  FakeProvider: "FakeProvider",
} as const;
export type PostApiAlphaResponsesIgnoreEnum = ClosedEnum<
  typeof PostApiAlphaResponsesIgnoreEnum
>;

export type PostApiAlphaResponsesIgnoreUnion =
  | PostApiAlphaResponsesIgnoreEnum
  | string;

export const PostApiAlphaResponsesQuantization = {
  Int4: "int4",
  Int8: "int8",
  Fp4: "fp4",
  Fp6: "fp6",
  Fp8: "fp8",
  Fp16: "fp16",
  Bf16: "bf16",
  Fp32: "fp32",
  Unknown: "unknown",
} as const;
export type PostApiAlphaResponsesQuantization = ClosedEnum<
  typeof PostApiAlphaResponsesQuantization
>;

/**
 * The sorting strategy to use for this request, if "order" is not specified. When set, no load balancing is performed.
 */
export const PostApiAlphaResponsesSort = {
  Price: "price",
  Throughput: "throughput",
  Latency: "latency",
} as const;
/**
 * The sorting strategy to use for this request, if "order" is not specified. When set, no load balancing is performed.
 */
export type PostApiAlphaResponsesSort = ClosedEnum<
  typeof PostApiAlphaResponsesSort
>;

export type PostApiAlphaResponsesMaxPricePrompt = number | string | any;

export type PostApiAlphaResponsesCompletion = number | string | any;

export type PostApiAlphaResponsesImage = number | string | any;

export type PostApiAlphaResponsesAudio = number | string | any;

export type PostApiAlphaResponsesRequestUnion = number | string | any;

/**
 * The object specifying the maximum price you want to pay for this request. USD price per million tokens, for prompt and completion.
 */
export type PostApiAlphaResponsesMaxPrice = {
  prompt?: number | string | any | undefined;
  completion?: number | string | any | undefined;
  image?: number | string | any | undefined;
  audio?: number | string | any | undefined;
  request?: number | string | any | undefined;
};

export type PostApiAlphaResponsesExperimental = {};

/**
 * When multiple model providers are available, optionally indicate your routing preference.
 */
export type PostApiAlphaResponsesProvider = {
  /**
   * Whether to allow backup providers to serve requests
   *
   * @remarks
   * - true: (default) when the primary provider (or your custom providers in "order") is unavailable, use the next best provider.
   * - false: use only the primary/custom provider, and return the upstream error if it's unavailable.
   */
  allowFallbacks?: boolean | null | undefined;
  /**
   * Whether to filter providers to only those that support the parameters you've provided. If this setting is omitted or set to false, then providers will receive only the parameters they support, and ignore the rest.
   */
  requireParameters?: boolean | null | undefined;
  /**
   * Data collection setting. If no available model provider meets the requirement, your request will return an error.
   *
   * @remarks
   * - allow: (default) allow providers which store user data non-transiently and may train on it
   * - deny: use only providers which do not collect user data.
   */
  dataCollection?: PostApiAlphaResponsesDataCollection | null | undefined;
  /**
   * Whether to restrict routing to only ZDR (Zero Data Retention) endpoints. When true, only endpoints that do not retain prompts will be used.
   */
  zdr?: boolean | null | undefined;
  /**
   * An ordered list of provider slugs. The router will attempt to use the first provider in the subset of this list that supports your requested model, and fall back to the next if it is unavailable. If no providers are available, the request will fail with an error message.
   */
  order?: Array<PostApiAlphaResponsesOrderEnum | string> | null | undefined;
  /**
   * List of provider slugs to allow. If provided, this list is merged with your account-wide allowed provider settings for this request.
   */
  only?: Array<PostApiAlphaResponsesOnlyEnum | string> | null | undefined;
  /**
   * List of provider slugs to ignore. If provided, this list is merged with your account-wide ignored provider settings for this request.
   */
  ignore?: Array<PostApiAlphaResponsesIgnoreEnum | string> | null | undefined;
  /**
   * A list of quantization levels to filter the provider by.
   */
  quantizations?: Array<PostApiAlphaResponsesQuantization> | null | undefined;
  /**
   * The sorting strategy to use for this request, if "order" is not specified. When set, no load balancing is performed.
   */
  sort?: PostApiAlphaResponsesSort | null | undefined;
  /**
   * The object specifying the maximum price you want to pay for this request. USD price per million tokens, for prompt and completion.
   */
  maxPrice?: PostApiAlphaResponsesMaxPrice | undefined;
  experimental?: PostApiAlphaResponsesExperimental | null | undefined;
};

export const IdFileParser = {
  FileParser: "file-parser",
} as const;
export type IdFileParser = ClosedEnum<typeof IdFileParser>;

export const PdfEngine = {
  MistralOcr: "mistral-ocr",
  PdfText: "pdf-text",
  Native: "native",
} as const;
export type PdfEngine = ClosedEnum<typeof PdfEngine>;

export type Pdf = {
  engine?: PdfEngine | undefined;
};

export type PluginFileParser = {
  id: IdFileParser;
  maxFiles?: number | undefined;
  pdf?: Pdf | undefined;
};

export const IdChainOfThought = {
  ChainOfThought: "chain-of-thought",
} as const;
export type IdChainOfThought = ClosedEnum<typeof IdChainOfThought>;

export type PluginChainOfThought = {
  id: IdChainOfThought;
};

export const IdWeb = {
  Web: "web",
} as const;
export type IdWeb = ClosedEnum<typeof IdWeb>;

export const Engine = {
  Native: "native",
  Exa: "exa",
} as const;
export type Engine = ClosedEnum<typeof Engine>;

export type PluginWeb = {
  id: IdWeb;
  maxResults?: number | undefined;
  searchPrompt?: string | undefined;
  engine?: Engine | undefined;
};

export const IdModeration = {
  Moderation: "moderation",
} as const;
export type IdModeration = ClosedEnum<typeof IdModeration>;

export type PluginModeration = {
  id: IdModeration;
};

export type Plugin =
  | PluginModeration
  | PluginWeb
  | PluginChainOfThought
  | PluginFileParser;

export type PostApiAlphaResponsesRequest = {
  input?:
    | string
    | Array<
      | InputAssistant1
      | InputFunctionCall1
      | InputFunctionCallOutput
      | InputImageGenerationCall1
      | InputMessage2
      | InputMessage1
      | InputAssistant2
      | InputFunctionCall2
      | InputFileSearchCall
      | InputImageGenerationCall2
      | InputReasoning
      | InputWebSearchCall
    >
    | undefined;
  instructions?: string | null | undefined;
  metadata?: { [k: string]: string } | null | undefined;
  tools?:
    | Array<
      | ToolFunctionRequest
      | ToolWebSearchPreviewRequest
      | ToolWebSearchPreview20250311Request
      | ToolWebSearchRequest
      | ToolWebSearch20250826Request
    >
    | undefined;
  toolChoice?:
    | ToolChoiceFunctionRequest
    | ToolChoiceRequest
    | ToolChoiceAutoRequest
    | ToolChoiceNoneRequest
    | ToolChoiceRequiredRequest
    | undefined;
  parallelToolCalls?: boolean | null | undefined;
  model?: string | undefined;
  models?: Array<string> | undefined;
  text?: TextRequest | undefined;
  reasoning?: ReasoningRequest | null | undefined;
  maxOutputTokens?: number | null | undefined;
  temperature?: number | null | undefined;
  topP?: number | null | undefined;
  topK?: number | undefined;
  promptCacheKey?: string | undefined;
  previousResponseId?: string | null | undefined;
  prompt?: PostApiAlphaResponsesPromptRequest | null | undefined;
  include?: Array<Include> | null | undefined;
  background?: boolean | null | undefined;
  safetyIdentifier?: string | undefined;
  store?: boolean | null | undefined;
  serviceTier?: ServiceTierRequest | null | undefined;
  truncation?: TruncationRequest | null | undefined;
  stream?: boolean | null | undefined;
  /**
   * When multiple model providers are available, optionally indicate your routing preference.
   */
  provider?: PostApiAlphaResponsesProvider | null | undefined;
  /**
   * Plugins you want to enable for this request, including their settings.
   */
  plugins?:
    | Array<
      PluginModeration | PluginWeb | PluginChainOfThought | PluginFileParser
    >
    | undefined;
  /**
   * A unique identifier representing your end-user, which helps distinguish between different users of your app. This allows your app to identify specific users in case of abuse reports, preventing your entire app from being affected by the actions of individual users. Maximum of 128 characters.
   */
  user?: string | undefined;
};

export const PostApiAlphaResponsesObject = {
  Response: "response",
} as const;
export type PostApiAlphaResponsesObject = ClosedEnum<
  typeof PostApiAlphaResponsesObject
>;

export const PostApiAlphaResponsesStatusResponseEnum = {
  Completed: "completed",
  Incomplete: "incomplete",
  InProgress: "in_progress",
  Failed: "failed",
  Cancelled: "cancelled",
  Queued: "queued",
} as const;
export type PostApiAlphaResponsesStatusResponseEnum = ClosedEnum<
  typeof PostApiAlphaResponsesStatusResponseEnum
>;

export const OutputTypeImageGenerationCall = {
  ImageGenerationCall: "image_generation_call",
} as const;
export type OutputTypeImageGenerationCall = ClosedEnum<
  typeof OutputTypeImageGenerationCall
>;

export const OutputStatusEnum3 = {
  InProgress: "in_progress",
  Completed: "completed",
  Generating: "generating",
  Failed: "failed",
} as const;
export type OutputStatusEnum3 = ClosedEnum<typeof OutputStatusEnum3>;

export type OutputImageGenerationCall = {
  type: OutputTypeImageGenerationCall;
  id: string;
  result: string | null;
  status: OutputStatusEnum3;
};

export const OutputTypeFileSearchCall = {
  FileSearchCall: "file_search_call",
} as const;
export type OutputTypeFileSearchCall = ClosedEnum<
  typeof OutputTypeFileSearchCall
>;

export const OutputStatusEnum2 = {
  Completed: "completed",
  Searching: "searching",
  InProgress: "in_progress",
  Failed: "failed",
} as const;
export type OutputStatusEnum2 = ClosedEnum<typeof OutputStatusEnum2>;

export type OutputFileSearchCall = {
  type: OutputTypeFileSearchCall;
  id: string;
  queries: Array<string>;
  status: OutputStatusEnum2;
};

export const OutputTypeWebSearchCall = {
  WebSearchCall: "web_search_call",
} as const;
export type OutputTypeWebSearchCall = ClosedEnum<
  typeof OutputTypeWebSearchCall
>;

export const OutputStatusEnum1 = {
  Completed: "completed",
  Searching: "searching",
  InProgress: "in_progress",
  Failed: "failed",
} as const;
export type OutputStatusEnum1 = ClosedEnum<typeof OutputStatusEnum1>;

export type OutputWebSearchCall = {
  type: OutputTypeWebSearchCall;
  id: string;
  status: OutputStatusEnum1;
};

export const OutputTypeFunctionCall = {
  FunctionCall: "function_call",
} as const;
export type OutputTypeFunctionCall = ClosedEnum<typeof OutputTypeFunctionCall>;

export type OutputFunctionCall = {
  type: OutputTypeFunctionCall;
  id?: string | undefined;
  name: string;
  arguments: string;
  callId: string;
};

export const OutputTypeReasoning = {
  Reasoning: "reasoning",
} as const;
export type OutputTypeReasoning = ClosedEnum<typeof OutputTypeReasoning>;

export const OutputTypeReasoningText = {
  ReasoningText: "reasoning_text",
} as const;
export type OutputTypeReasoningText = ClosedEnum<
  typeof OutputTypeReasoningText
>;

export type OutputContentReasoningText = {
  type: OutputTypeReasoningText;
  text: string;
};

export const OutputTypeSummaryText = {
  SummaryText: "summary_text",
} as const;
export type OutputTypeSummaryText = ClosedEnum<typeof OutputTypeSummaryText>;

export type OutputSummary = {
  type: OutputTypeSummaryText;
  text: string;
};

export const OutputFormat = {
  Unknown: "unknown",
  OpenaiResponsesV1: "openai-responses-v1",
  AnthropicClaudeV1: "anthropic-claude-v1",
} as const;
export type OutputFormat = ClosedEnum<typeof OutputFormat>;

export type OutputReasoning = {
  type: OutputTypeReasoning;
  id: string;
  content?: Array<OutputContentReasoningText> | undefined;
  summary: Array<OutputSummary>;
  encryptedContent?: string | null | undefined;
  signature?: string | null | undefined;
  format?: OutputFormat | null | undefined;
};

export const OutputTypeMessage = {
  Message: "message",
} as const;
export type OutputTypeMessage = ClosedEnum<typeof OutputTypeMessage>;

export const OutputStatusInProgress = {
  InProgress: "in_progress",
} as const;
export type OutputStatusInProgress = ClosedEnum<typeof OutputStatusInProgress>;

export const OutputStatusIncomplete = {
  Incomplete: "incomplete",
} as const;
export type OutputStatusIncomplete = ClosedEnum<typeof OutputStatusIncomplete>;

export const OutputStatusCompleted = {
  Completed: "completed",
} as const;
export type OutputStatusCompleted = ClosedEnum<typeof OutputStatusCompleted>;

export type OutputStatusUnion =
  | OutputStatusCompleted
  | OutputStatusIncomplete
  | OutputStatusInProgress;

export const OutputRole = {
  Assistant: "assistant",
} as const;
export type OutputRole = ClosedEnum<typeof OutputRole>;

export const OutputTypeRefusal = {
  Refusal: "refusal",
} as const;
export type OutputTypeRefusal = ClosedEnum<typeof OutputTypeRefusal>;

export type OutputContentRefusal = {
  type: OutputTypeRefusal;
  refusal: string;
};

export const OutputTypeOutputText = {
  OutputText: "output_text",
} as const;
export type OutputTypeOutputText = ClosedEnum<typeof OutputTypeOutputText>;

export const OutputTypeFilePath = {
  FilePath: "file_path",
} as const;
export type OutputTypeFilePath = ClosedEnum<typeof OutputTypeFilePath>;

export type OutputAnnotationFilePath = {
  type: OutputTypeFilePath;
  fileId: string;
  index: number;
};

export const OutputTypeURLCitation = {
  UrlCitation: "url_citation",
} as const;
export type OutputTypeURLCitation = ClosedEnum<typeof OutputTypeURLCitation>;

export type OutputAnnotationURLCitation = {
  type: OutputTypeURLCitation;
  endIndex: number;
  startIndex: number;
  title: string;
  url: string;
};

export const OutputTypeFileCitation = {
  FileCitation: "file_citation",
} as const;
export type OutputTypeFileCitation = ClosedEnum<typeof OutputTypeFileCitation>;

export type OutputAnnotationFileCitation = {
  type: OutputTypeFileCitation;
  fileId: string;
  filename: string;
  index: number;
};

export type OutputAnnotationUnion =
  | OutputAnnotationURLCitation
  | OutputAnnotationFileCitation
  | OutputAnnotationFilePath;

export type OutputContentOutputText = {
  type: OutputTypeOutputText;
  text: string;
  annotations: Array<
    | OutputAnnotationURLCitation
    | OutputAnnotationFileCitation
    | OutputAnnotationFilePath
  >;
};

export type OutputContentUnion = OutputContentOutputText | OutputContentRefusal;

export type OutputAssistant = {
  type: OutputTypeMessage;
  id: string;
  status:
    | OutputStatusCompleted
    | OutputStatusIncomplete
    | OutputStatusInProgress;
  role: OutputRole;
  content: Array<OutputContentOutputText | OutputContentRefusal>;
};

export type Output =
  | OutputAssistant
  | OutputFunctionCall
  | OutputFileSearchCall
  | OutputImageGenerationCall
  | OutputReasoning
  | OutputWebSearchCall;

export const Code = {
  ServerError: "server_error",
  RateLimitExceeded: "rate_limit_exceeded",
  InvalidPrompt: "invalid_prompt",
} as const;
export type Code = ClosedEnum<typeof Code>;

export type PostApiAlphaResponsesError = {
  code: Code;
  message: string;
};

export const Reason = {
  MaxOutputTokens: "max_output_tokens",
  ContentFilter: "content_filter",
} as const;
export type Reason = ClosedEnum<typeof Reason>;

export type IncompleteDetails = {
  reason?: Reason | undefined;
};

export type InputTokensDetails = {
  cachedTokens: number;
};

export type OutputTokensDetails = {
  reasoningTokens: number;
};

export type PostApiAlphaResponsesUsage = {
  inputTokens: number;
  inputTokensDetails: InputTokensDetails;
  outputTokens: number;
  outputTokensDetails: OutputTokensDetails;
  totalTokens: number;
};

export const InstructionsTypeImageGenerationCall2 = {
  ImageGenerationCall: "image_generation_call",
} as const;
export type InstructionsTypeImageGenerationCall2 = ClosedEnum<
  typeof InstructionsTypeImageGenerationCall2
>;

export const InstructionsStatusEnum6 = {
  InProgress: "in_progress",
  Completed: "completed",
  Generating: "generating",
  Failed: "failed",
} as const;
export type InstructionsStatusEnum6 = ClosedEnum<
  typeof InstructionsStatusEnum6
>;

export type InstructionsImageGenerationCall2 = {
  type: InstructionsTypeImageGenerationCall2;
  id: string;
  result: string | null;
  status: InstructionsStatusEnum6;
};

export const InstructionsTypeFileSearchCall = {
  FileSearchCall: "file_search_call",
} as const;
export type InstructionsTypeFileSearchCall = ClosedEnum<
  typeof InstructionsTypeFileSearchCall
>;

export const InstructionsStatusEnum5 = {
  Completed: "completed",
  Searching: "searching",
  InProgress: "in_progress",
  Failed: "failed",
} as const;
export type InstructionsStatusEnum5 = ClosedEnum<
  typeof InstructionsStatusEnum5
>;

export type InstructionsFileSearchCall = {
  type: InstructionsTypeFileSearchCall;
  id: string;
  queries: Array<string>;
  status: InstructionsStatusEnum5;
};

export const InstructionsTypeWebSearchCall = {
  WebSearchCall: "web_search_call",
} as const;
export type InstructionsTypeWebSearchCall = ClosedEnum<
  typeof InstructionsTypeWebSearchCall
>;

export const InstructionsStatusEnum4 = {
  Completed: "completed",
  Searching: "searching",
  InProgress: "in_progress",
  Failed: "failed",
} as const;
export type InstructionsStatusEnum4 = ClosedEnum<
  typeof InstructionsStatusEnum4
>;

export type InstructionsWebSearchCall = {
  type: InstructionsTypeWebSearchCall;
  id: string;
  status: InstructionsStatusEnum4;
};

export const InstructionsTypeFunctionCall2 = {
  FunctionCall: "function_call",
} as const;
export type InstructionsTypeFunctionCall2 = ClosedEnum<
  typeof InstructionsTypeFunctionCall2
>;

export type InstructionsFunctionCall2 = {
  type: InstructionsTypeFunctionCall2;
  id?: string | undefined;
  name: string;
  arguments: string;
  callId: string;
};

export const InstructionsTypeReasoning = {
  Reasoning: "reasoning",
} as const;
export type InstructionsTypeReasoning = ClosedEnum<
  typeof InstructionsTypeReasoning
>;

export const InstructionsTypeReasoningText = {
  ReasoningText: "reasoning_text",
} as const;
export type InstructionsTypeReasoningText = ClosedEnum<
  typeof InstructionsTypeReasoningText
>;

export type InstructionsContentReasoningText = {
  type: InstructionsTypeReasoningText;
  text: string;
};

export const InstructionsTypeSummaryText = {
  SummaryText: "summary_text",
} as const;
export type InstructionsTypeSummaryText = ClosedEnum<
  typeof InstructionsTypeSummaryText
>;

export type InstructionsSummary = {
  type: InstructionsTypeSummaryText;
  text: string;
};

export const InstructionsFormat = {
  Unknown: "unknown",
  OpenaiResponsesV1: "openai-responses-v1",
  AnthropicClaudeV1: "anthropic-claude-v1",
} as const;
export type InstructionsFormat = ClosedEnum<typeof InstructionsFormat>;

export type InstructionsReasoning = {
  type: InstructionsTypeReasoning;
  id: string;
  content?: Array<InstructionsContentReasoningText> | undefined;
  summary: Array<InstructionsSummary>;
  encryptedContent?: string | null | undefined;
  signature?: string | null | undefined;
  format?: InstructionsFormat | null | undefined;
};

export const InstructionsTypeMessage4 = {
  Message: "message",
} as const;
export type InstructionsTypeMessage4 = ClosedEnum<
  typeof InstructionsTypeMessage4
>;

export const InstructionsStatusInProgress2 = {
  InProgress: "in_progress",
} as const;
export type InstructionsStatusInProgress2 = ClosedEnum<
  typeof InstructionsStatusInProgress2
>;

export const InstructionsStatusIncomplete2 = {
  Incomplete: "incomplete",
} as const;
export type InstructionsStatusIncomplete2 = ClosedEnum<
  typeof InstructionsStatusIncomplete2
>;

export const InstructionsStatusCompleted2 = {
  Completed: "completed",
} as const;
export type InstructionsStatusCompleted2 = ClosedEnum<
  typeof InstructionsStatusCompleted2
>;

export type InstructionsStatusUnion2 =
  | InstructionsStatusCompleted2
  | InstructionsStatusIncomplete2
  | InstructionsStatusInProgress2;

export const InstructionsRoleAssistant3 = {
  Assistant: "assistant",
} as const;
export type InstructionsRoleAssistant3 = ClosedEnum<
  typeof InstructionsRoleAssistant3
>;

export const InstructionsTypeRefusal2 = {
  Refusal: "refusal",
} as const;
export type InstructionsTypeRefusal2 = ClosedEnum<
  typeof InstructionsTypeRefusal2
>;

export type InstructionsContentRefusal2 = {
  type: InstructionsTypeRefusal2;
  refusal: string;
};

export const InstructionsTypeOutputText2 = {
  OutputText: "output_text",
} as const;
export type InstructionsTypeOutputText2 = ClosedEnum<
  typeof InstructionsTypeOutputText2
>;

export const InstructionsTypeFilePath2 = {
  FilePath: "file_path",
} as const;
export type InstructionsTypeFilePath2 = ClosedEnum<
  typeof InstructionsTypeFilePath2
>;

export type InstructionsAnnotationFilePath2 = {
  type: InstructionsTypeFilePath2;
  fileId: string;
  index: number;
};

export const InstructionsTypeURLCitation2 = {
  UrlCitation: "url_citation",
} as const;
export type InstructionsTypeURLCitation2 = ClosedEnum<
  typeof InstructionsTypeURLCitation2
>;

export type InstructionsAnnotationURLCitation2 = {
  type: InstructionsTypeURLCitation2;
  endIndex: number;
  startIndex: number;
  title: string;
  url: string;
};

export const InstructionsTypeFileCitation2 = {
  FileCitation: "file_citation",
} as const;
export type InstructionsTypeFileCitation2 = ClosedEnum<
  typeof InstructionsTypeFileCitation2
>;

export type InstructionsAnnotationFileCitation2 = {
  type: InstructionsTypeFileCitation2;
  fileId: string;
  filename: string;
  index: number;
};

export type InstructionsAnnotationUnion2 =
  | InstructionsAnnotationURLCitation2
  | InstructionsAnnotationFileCitation2
  | InstructionsAnnotationFilePath2;

export type InstructionsContentOutputText2 = {
  type: InstructionsTypeOutputText2;
  text: string;
  annotations: Array<
    | InstructionsAnnotationURLCitation2
    | InstructionsAnnotationFileCitation2
    | InstructionsAnnotationFilePath2
  >;
};

export type InstructionsContentUnion5 =
  | InstructionsContentOutputText2
  | InstructionsContentRefusal2;

export type InstructionsAssistant2 = {
  type: InstructionsTypeMessage4;
  id: string;
  status:
    | InstructionsStatusCompleted2
    | InstructionsStatusIncomplete2
    | InstructionsStatusInProgress2;
  role: InstructionsRoleAssistant3;
  content: Array<InstructionsContentOutputText2 | InstructionsContentRefusal2>;
};

export type InstructionsUnion1 =
  | InstructionsAssistant2
  | InstructionsFunctionCall2
  | InstructionsFileSearchCall
  | InstructionsImageGenerationCall2
  | InstructionsReasoning
  | InstructionsWebSearchCall;

export const InstructionsTypeMessage3 = {
  Message: "message",
} as const;
export type InstructionsTypeMessage3 = ClosedEnum<
  typeof InstructionsTypeMessage3
>;

export const InstructionsStatusInProgress1 = {
  InProgress: "in_progress",
} as const;
export type InstructionsStatusInProgress1 = ClosedEnum<
  typeof InstructionsStatusInProgress1
>;

export const InstructionsStatusIncomplete1 = {
  Incomplete: "incomplete",
} as const;
export type InstructionsStatusIncomplete1 = ClosedEnum<
  typeof InstructionsStatusIncomplete1
>;

export const InstructionsStatusCompleted1 = {
  Completed: "completed",
} as const;
export type InstructionsStatusCompleted1 = ClosedEnum<
  typeof InstructionsStatusCompleted1
>;

export type InstructionsStatusUnion1 =
  | InstructionsStatusCompleted1
  | InstructionsStatusIncomplete1
  | InstructionsStatusInProgress1;

export const InstructionsRoleAssistant2 = {
  Assistant: "assistant",
} as const;
export type InstructionsRoleAssistant2 = ClosedEnum<
  typeof InstructionsRoleAssistant2
>;

export const InstructionsTypeRefusal1 = {
  Refusal: "refusal",
} as const;
export type InstructionsTypeRefusal1 = ClosedEnum<
  typeof InstructionsTypeRefusal1
>;

export type InstructionsContentRefusal1 = {
  type: InstructionsTypeRefusal1;
  refusal: string;
};

export const InstructionsTypeOutputText1 = {
  OutputText: "output_text",
} as const;
export type InstructionsTypeOutputText1 = ClosedEnum<
  typeof InstructionsTypeOutputText1
>;

export const InstructionsTypeFilePath1 = {
  FilePath: "file_path",
} as const;
export type InstructionsTypeFilePath1 = ClosedEnum<
  typeof InstructionsTypeFilePath1
>;

export type InstructionsAnnotationFilePath1 = {
  type: InstructionsTypeFilePath1;
  fileId: string;
  index: number;
};

export const InstructionsTypeURLCitation1 = {
  UrlCitation: "url_citation",
} as const;
export type InstructionsTypeURLCitation1 = ClosedEnum<
  typeof InstructionsTypeURLCitation1
>;

export type InstructionsAnnotationURLCitation1 = {
  type: InstructionsTypeURLCitation1;
  endIndex: number;
  startIndex: number;
  title: string;
  url: string;
};

export const InstructionsTypeFileCitation1 = {
  FileCitation: "file_citation",
} as const;
export type InstructionsTypeFileCitation1 = ClosedEnum<
  typeof InstructionsTypeFileCitation1
>;

export type InstructionsAnnotationFileCitation1 = {
  type: InstructionsTypeFileCitation1;
  fileId: string;
  filename: string;
  index: number;
};

export type InstructionsAnnotationUnion1 =
  | InstructionsAnnotationURLCitation1
  | InstructionsAnnotationFileCitation1
  | InstructionsAnnotationFilePath1;

export type InstructionsContentOutputText1 = {
  type: InstructionsTypeOutputText1;
  text: string;
  annotations: Array<
    | InstructionsAnnotationURLCitation1
    | InstructionsAnnotationFileCitation1
    | InstructionsAnnotationFilePath1
  >;
};

export type InstructionsContentUnion4 =
  | InstructionsContentOutputText1
  | InstructionsContentRefusal1;

export type InstructionsAssistant1 = {
  type: InstructionsTypeMessage3;
  id: string;
  status:
    | InstructionsStatusCompleted1
    | InstructionsStatusIncomplete1
    | InstructionsStatusInProgress1;
  role: InstructionsRoleAssistant2;
  content: Array<InstructionsContentOutputText1 | InstructionsContentRefusal1>;
};

export const InstructionsTypeImageGenerationCall1 = {
  ImageGenerationCall: "image_generation_call",
} as const;
export type InstructionsTypeImageGenerationCall1 = ClosedEnum<
  typeof InstructionsTypeImageGenerationCall1
>;

export const InstructionsStatusEnum3 = {
  InProgress: "in_progress",
  Completed: "completed",
  Generating: "generating",
  Failed: "failed",
} as const;
export type InstructionsStatusEnum3 = ClosedEnum<
  typeof InstructionsStatusEnum3
>;

export type InstructionsImageGenerationCall1 = {
  type: InstructionsTypeImageGenerationCall1;
  id: string;
  result: string | null;
  status: InstructionsStatusEnum3;
};

export const InstructionsTypeFunctionCallOutput = {
  FunctionCallOutput: "function_call_output",
} as const;
export type InstructionsTypeFunctionCallOutput = ClosedEnum<
  typeof InstructionsTypeFunctionCallOutput
>;

export const InstructionsStatusEnum2 = {
  InProgress: "in_progress",
  Completed: "completed",
  Incomplete: "incomplete",
} as const;
export type InstructionsStatusEnum2 = ClosedEnum<
  typeof InstructionsStatusEnum2
>;

export type InstructionsFunctionCallOutput = {
  type: InstructionsTypeFunctionCallOutput;
  id: string;
  callId: string;
  output: string;
  status?: InstructionsStatusEnum2 | undefined;
};

export const InstructionsTypeFunctionCall1 = {
  FunctionCall: "function_call",
} as const;
export type InstructionsTypeFunctionCall1 = ClosedEnum<
  typeof InstructionsTypeFunctionCall1
>;

export const InstructionsStatusEnum1 = {
  InProgress: "in_progress",
  Completed: "completed",
  Incomplete: "incomplete",
} as const;
export type InstructionsStatusEnum1 = ClosedEnum<
  typeof InstructionsStatusEnum1
>;

export type InstructionsFunctionCall1 = {
  type: InstructionsTypeFunctionCall1;
  callId: string;
  name: string;
  arguments: string;
  id?: string | undefined;
  status?: InstructionsStatusEnum1 | undefined;
};

export const InstructionsTypeMessage2 = {
  Message: "message",
} as const;
export type InstructionsTypeMessage2 = ClosedEnum<
  typeof InstructionsTypeMessage2
>;

export const InstructionsRoleDeveloper2 = {
  Developer: "developer",
} as const;
export type InstructionsRoleDeveloper2 = ClosedEnum<
  typeof InstructionsRoleDeveloper2
>;

export const InstructionsRoleSystem2 = {
  System: "system",
} as const;
export type InstructionsRoleSystem2 = ClosedEnum<
  typeof InstructionsRoleSystem2
>;

export const InstructionsRoleUser2 = {
  User: "user",
} as const;
export type InstructionsRoleUser2 = ClosedEnum<typeof InstructionsRoleUser2>;

export type InstructionsRoleUnion2 =
  | InstructionsRoleUser2
  | InstructionsRoleSystem2
  | InstructionsRoleDeveloper2;

export const InstructionsTypeInputFile2 = {
  InputFile: "input_file",
} as const;
export type InstructionsTypeInputFile2 = ClosedEnum<
  typeof InstructionsTypeInputFile2
>;

export type InstructionsContentInputFile2 = {
  type: InstructionsTypeInputFile2;
  fileId?: string | null | undefined;
  fileData?: string | undefined;
  filename?: string | undefined;
  fileUrl?: string | undefined;
};

export const InstructionsTypeInputImage2 = {
  InputImage: "input_image",
} as const;
export type InstructionsTypeInputImage2 = ClosedEnum<
  typeof InstructionsTypeInputImage2
>;

export const InstructionsDetail2 = {
  Auto: "auto",
  High: "high",
  Low: "low",
} as const;
export type InstructionsDetail2 = ClosedEnum<typeof InstructionsDetail2>;

export type InstructionsContentInputImage2 = {
  type: InstructionsTypeInputImage2;
  detail: InstructionsDetail2;
  imageUrl?: string | null | undefined;
};

export const InstructionsTypeInputText2 = {
  InputText: "input_text",
} as const;
export type InstructionsTypeInputText2 = ClosedEnum<
  typeof InstructionsTypeInputText2
>;

export type InstructionsContentInputText2 = {
  type: InstructionsTypeInputText2;
  text: string;
};

export type InstructionsContentUnion3 =
  | InstructionsContentInputText2
  | InstructionsContentInputImage2
  | InstructionsContentInputFile2;

export type InstructionsMessage2 = {
  id: string;
  type?: InstructionsTypeMessage2 | undefined;
  role:
    | InstructionsRoleUser2
    | InstructionsRoleSystem2
    | InstructionsRoleDeveloper2;
  content: Array<
    | InstructionsContentInputText2
    | InstructionsContentInputImage2
    | InstructionsContentInputFile2
  >;
};

export const InstructionsTypeMessage1 = {
  Message: "message",
} as const;
export type InstructionsTypeMessage1 = ClosedEnum<
  typeof InstructionsTypeMessage1
>;

export const InstructionsRoleDeveloper1 = {
  Developer: "developer",
} as const;
export type InstructionsRoleDeveloper1 = ClosedEnum<
  typeof InstructionsRoleDeveloper1
>;

export const InstructionsRoleAssistant1 = {
  Assistant: "assistant",
} as const;
export type InstructionsRoleAssistant1 = ClosedEnum<
  typeof InstructionsRoleAssistant1
>;

export const InstructionsRoleSystem1 = {
  System: "system",
} as const;
export type InstructionsRoleSystem1 = ClosedEnum<
  typeof InstructionsRoleSystem1
>;

export const InstructionsRoleUser1 = {
  User: "user",
} as const;
export type InstructionsRoleUser1 = ClosedEnum<typeof InstructionsRoleUser1>;

export type InstructionsRoleUnion1 =
  | InstructionsRoleUser1
  | InstructionsRoleSystem1
  | InstructionsRoleAssistant1
  | InstructionsRoleDeveloper1;

export const InstructionsTypeInputFile1 = {
  InputFile: "input_file",
} as const;
export type InstructionsTypeInputFile1 = ClosedEnum<
  typeof InstructionsTypeInputFile1
>;

export type InstructionsContentInputFile1 = {
  type: InstructionsTypeInputFile1;
  fileId?: string | null | undefined;
  fileData?: string | undefined;
  filename?: string | undefined;
  fileUrl?: string | undefined;
};

export const InstructionsTypeInputImage1 = {
  InputImage: "input_image",
} as const;
export type InstructionsTypeInputImage1 = ClosedEnum<
  typeof InstructionsTypeInputImage1
>;

export const InstructionsDetail1 = {
  Auto: "auto",
  High: "high",
  Low: "low",
} as const;
export type InstructionsDetail1 = ClosedEnum<typeof InstructionsDetail1>;

export type InstructionsContentInputImage1 = {
  type: InstructionsTypeInputImage1;
  detail: InstructionsDetail1;
  imageUrl?: string | null | undefined;
};

export const InstructionsTypeInputText1 = {
  InputText: "input_text",
} as const;
export type InstructionsTypeInputText1 = ClosedEnum<
  typeof InstructionsTypeInputText1
>;

export type InstructionsContentInputText1 = {
  type: InstructionsTypeInputText1;
  text: string;
};

export type InstructionsContentUnion1 =
  | InstructionsContentInputText1
  | InstructionsContentInputImage1
  | InstructionsContentInputFile1;

export type InstructionsContentUnion2 =
  | Array<
    | InstructionsContentInputText1
    | InstructionsContentInputImage1
    | InstructionsContentInputFile1
  >
  | string;

export type InstructionsMessage1 = {
  type?: InstructionsTypeMessage1 | undefined;
  role:
    | InstructionsRoleUser1
    | InstructionsRoleSystem1
    | InstructionsRoleAssistant1
    | InstructionsRoleDeveloper1;
  content:
    | Array<
      | InstructionsContentInputText1
      | InstructionsContentInputImage1
      | InstructionsContentInputFile1
    >
    | string;
};

export type InstructionsUnion2 =
  | InstructionsAssistant1
  | InstructionsFunctionCall1
  | InstructionsFunctionCallOutput
  | InstructionsImageGenerationCall1
  | InstructionsMessage2
  | InstructionsMessage1
  | InstructionsAssistant2
  | InstructionsFunctionCall2
  | InstructionsFileSearchCall
  | InstructionsImageGenerationCall2
  | InstructionsReasoning
  | InstructionsWebSearchCall;

export type InstructionsUnion3 =
  | string
  | Array<
    | InstructionsAssistant1
    | InstructionsFunctionCall1
    | InstructionsFunctionCallOutput
    | InstructionsImageGenerationCall1
    | InstructionsMessage2
    | InstructionsMessage1
    | InstructionsAssistant2
    | InstructionsFunctionCall2
    | InstructionsFileSearchCall
    | InstructionsImageGenerationCall2
    | InstructionsReasoning
    | InstructionsWebSearchCall
  >
  | any;

export const TypeWebSearch20250826Response = {
  WebSearch20250826: "web_search_2025_08_26",
} as const;
export type TypeWebSearch20250826Response = ClosedEnum<
  typeof TypeWebSearch20250826Response
>;

export type FiltersResponse2 = {
  allowedDomains?: Array<string> | null | undefined;
};

export const SearchContextSizeResponse4 = {
  Low: "low",
  Medium: "medium",
  High: "high",
} as const;
export type SearchContextSizeResponse4 = ClosedEnum<
  typeof SearchContextSizeResponse4
>;

export const TypeApproximateResponse4 = {
  Approximate: "approximate",
} as const;
export type TypeApproximateResponse4 = ClosedEnum<
  typeof TypeApproximateResponse4
>;

export type UserLocationResponse4 = {
  type?: TypeApproximateResponse4 | undefined;
  city?: string | null | undefined;
  country?: string | null | undefined;
  region?: string | null | undefined;
  timezone?: string | null | undefined;
};

export type ToolWebSearch20250826Response = {
  type: TypeWebSearch20250826Response;
  filters?: FiltersResponse2 | null | undefined;
  searchContextSize?: SearchContextSizeResponse4 | undefined;
  userLocation?: UserLocationResponse4 | null | undefined;
};

export const TypeWebSearchResponse = {
  WebSearch: "web_search",
} as const;
export type TypeWebSearchResponse = ClosedEnum<typeof TypeWebSearchResponse>;

export type FiltersResponse1 = {
  allowedDomains?: Array<string> | null | undefined;
};

export const SearchContextSizeResponse3 = {
  Low: "low",
  Medium: "medium",
  High: "high",
} as const;
export type SearchContextSizeResponse3 = ClosedEnum<
  typeof SearchContextSizeResponse3
>;

export const TypeApproximateResponse3 = {
  Approximate: "approximate",
} as const;
export type TypeApproximateResponse3 = ClosedEnum<
  typeof TypeApproximateResponse3
>;

export type UserLocationResponse3 = {
  type?: TypeApproximateResponse3 | undefined;
  city?: string | null | undefined;
  country?: string | null | undefined;
  region?: string | null | undefined;
  timezone?: string | null | undefined;
};

export type ToolWebSearchResponse = {
  type: TypeWebSearchResponse;
  filters?: FiltersResponse1 | null | undefined;
  searchContextSize?: SearchContextSizeResponse3 | undefined;
  userLocation?: UserLocationResponse3 | null | undefined;
};

export const ToolTypeWebSearchPreview20250311Response = {
  WebSearchPreview20250311: "web_search_preview_2025_03_11",
} as const;
export type ToolTypeWebSearchPreview20250311Response = ClosedEnum<
  typeof ToolTypeWebSearchPreview20250311Response
>;

export const SearchContextSizeResponse2 = {
  Low: "low",
  Medium: "medium",
  High: "high",
} as const;
export type SearchContextSizeResponse2 = ClosedEnum<
  typeof SearchContextSizeResponse2
>;

export const TypeApproximateResponse2 = {
  Approximate: "approximate",
} as const;
export type TypeApproximateResponse2 = ClosedEnum<
  typeof TypeApproximateResponse2
>;

export type UserLocationResponse2 = {
  type: TypeApproximateResponse2;
  city?: string | null | undefined;
  country?: string | null | undefined;
  region?: string | null | undefined;
  timezone?: string | null | undefined;
};

export type ToolWebSearchPreview20250311Response = {
  type: ToolTypeWebSearchPreview20250311Response;
  searchContextSize?: SearchContextSizeResponse2 | undefined;
  userLocation?: UserLocationResponse2 | null | undefined;
};

export const ToolTypeWebSearchPreviewResponse = {
  WebSearchPreview: "web_search_preview",
} as const;
export type ToolTypeWebSearchPreviewResponse = ClosedEnum<
  typeof ToolTypeWebSearchPreviewResponse
>;

export const SearchContextSizeResponse1 = {
  Low: "low",
  Medium: "medium",
  High: "high",
} as const;
export type SearchContextSizeResponse1 = ClosedEnum<
  typeof SearchContextSizeResponse1
>;

export const TypeApproximateResponse1 = {
  Approximate: "approximate",
} as const;
export type TypeApproximateResponse1 = ClosedEnum<
  typeof TypeApproximateResponse1
>;

export type UserLocationResponse1 = {
  type: TypeApproximateResponse1;
  city?: string | null | undefined;
  country?: string | null | undefined;
  region?: string | null | undefined;
  timezone?: string | null | undefined;
};

export type ToolWebSearchPreviewResponse = {
  type: ToolTypeWebSearchPreviewResponse;
  searchContextSize?: SearchContextSizeResponse1 | undefined;
  userLocation?: UserLocationResponse1 | null | undefined;
};

export const ToolTypeFunctionResponse = {
  Function: "function",
} as const;
export type ToolTypeFunctionResponse = ClosedEnum<
  typeof ToolTypeFunctionResponse
>;

export type ToolFunctionResponse = {
  type: ToolTypeFunctionResponse;
  name: string;
  description?: string | null | undefined;
  strict?: boolean | null | undefined;
  parameters: { [k: string]: any | null } | null;
};

export type ToolResponseUnion =
  | ToolFunctionResponse
  | ToolWebSearchPreviewResponse
  | ToolWebSearchPreview20250311Response
  | ToolWebSearchResponse
  | ToolWebSearch20250826Response;

export const ToolChoiceTypeFunctionResponse = {
  Function: "function",
} as const;
export type ToolChoiceTypeFunctionResponse = ClosedEnum<
  typeof ToolChoiceTypeFunctionResponse
>;

export type ToolChoiceFunctionResponse = {
  type: ToolChoiceTypeFunctionResponse;
  name: string;
};

export const TypeCodeInterpreterResponse = {
  CodeInterpreter: "code_interpreter",
} as const;
export type TypeCodeInterpreterResponse = ClosedEnum<
  typeof TypeCodeInterpreterResponse
>;

export const TypeComputerUsePreviewResponse = {
  ComputerUsePreview: "computer_use_preview",
} as const;
export type TypeComputerUsePreviewResponse = ClosedEnum<
  typeof TypeComputerUsePreviewResponse
>;

export const ToolChoiceTypeWebSearchPreview20250311Response = {
  WebSearchPreview20250311: "web_search_preview_2025_03_11",
} as const;
export type ToolChoiceTypeWebSearchPreview20250311Response = ClosedEnum<
  typeof ToolChoiceTypeWebSearchPreview20250311Response
>;

export const ToolChoiceTypeWebSearchPreviewResponse = {
  WebSearchPreview: "web_search_preview",
} as const;
export type ToolChoiceTypeWebSearchPreviewResponse = ClosedEnum<
  typeof ToolChoiceTypeWebSearchPreviewResponse
>;

export const TypeFileSearchResponse = {
  FileSearch: "file_search",
} as const;
export type TypeFileSearchResponse = ClosedEnum<typeof TypeFileSearchResponse>;

export type TypeResponseUnion =
  | TypeFileSearchResponse
  | ToolChoiceTypeWebSearchPreviewResponse
  | ToolChoiceTypeWebSearchPreview20250311Response
  | TypeComputerUsePreviewResponse
  | TypeCodeInterpreterResponse;

export type ToolChoiceResponse = {
  type:
    | TypeFileSearchResponse
    | ToolChoiceTypeWebSearchPreviewResponse
    | ToolChoiceTypeWebSearchPreview20250311Response
    | TypeComputerUsePreviewResponse
    | TypeCodeInterpreterResponse;
};

export const ToolChoiceRequiredResponse = {
  Required: "required",
} as const;
export type ToolChoiceRequiredResponse = ClosedEnum<
  typeof ToolChoiceRequiredResponse
>;

export const ToolChoiceNoneResponse = {
  None: "none",
} as const;
export type ToolChoiceNoneResponse = ClosedEnum<typeof ToolChoiceNoneResponse>;

export const ToolChoiceAutoResponse = {
  Auto: "auto",
} as const;
export type ToolChoiceAutoResponse = ClosedEnum<typeof ToolChoiceAutoResponse>;

export type ToolChoiceResponseUnion =
  | ToolChoiceFunctionResponse
  | ToolChoiceResponse
  | ToolChoiceAutoResponse
  | ToolChoiceNoneResponse
  | ToolChoiceRequiredResponse;

export const VariablesTypeInputFileResponse = {
  InputFile: "input_file",
} as const;
export type VariablesTypeInputFileResponse = ClosedEnum<
  typeof VariablesTypeInputFileResponse
>;

export type VariablesInputFileResponse = {
  type: VariablesTypeInputFileResponse;
  fileId?: string | null | undefined;
  fileData?: string | undefined;
  filename?: string | undefined;
  fileUrl?: string | undefined;
};

export const VariablesTypeInputImageResponse = {
  InputImage: "input_image",
} as const;
export type VariablesTypeInputImageResponse = ClosedEnum<
  typeof VariablesTypeInputImageResponse
>;

export const VariablesDetailResponse = {
  Auto: "auto",
  High: "high",
  Low: "low",
} as const;
export type VariablesDetailResponse = ClosedEnum<
  typeof VariablesDetailResponse
>;

export type VariablesInputImageResponse = {
  type: VariablesTypeInputImageResponse;
  detail: VariablesDetailResponse;
  imageUrl?: string | null | undefined;
};

export const VariablesTypeInputTextResponse = {
  InputText: "input_text",
} as const;
export type VariablesTypeInputTextResponse = ClosedEnum<
  typeof VariablesTypeInputTextResponse
>;

export type VariablesInputTextResponse = {
  type: VariablesTypeInputTextResponse;
  text: string;
};

export type VariablesResponseUnion =
  | VariablesInputTextResponse
  | VariablesInputImageResponse
  | VariablesInputFileResponse;

export type PostApiAlphaResponsesPromptResponse = {
  id: string;
  variables?:
    | {
      [k: string]:
        | VariablesInputTextResponse
        | VariablesInputImageResponse
        | VariablesInputFileResponse;
    }
    | null
    | undefined;
};

export const EffortResponse = {
  High: "high",
  Medium: "medium",
  Low: "low",
  Minimal: "minimal",
} as const;
export type EffortResponse = ClosedEnum<typeof EffortResponse>;

export const SummaryResponseEnum = {
  Auto: "auto",
  Concise: "concise",
  Detailed: "detailed",
} as const;
export type SummaryResponseEnum = ClosedEnum<typeof SummaryResponseEnum>;

export type ReasoningResponse = {
  effort?: EffortResponse | null | undefined;
  summary?: SummaryResponseEnum | null | undefined;
};

export const ServiceTierResponse = {
  Auto: "auto",
  Default: "default",
  Flex: "flex",
  Priority: "priority",
  Scale: "scale",
} as const;
export type ServiceTierResponse = ClosedEnum<typeof ServiceTierResponse>;

export const TruncationResponse = {
  Auto: "auto",
  Disabled: "disabled",
} as const;
export type TruncationResponse = ClosedEnum<typeof TruncationResponse>;

export const TypeJSONSchemaResponse = {
  JsonSchema: "json_schema",
} as const;
export type TypeJSONSchemaResponse = ClosedEnum<typeof TypeJSONSchemaResponse>;

export type FormatJSONSchemaResponse = {
  type: TypeJSONSchemaResponse;
  name: string;
  description?: string | undefined;
  strict?: boolean | null | undefined;
  schema: { [k: string]: any | null };
};

export const TypeJSONObjectResponse = {
  JsonObject: "json_object",
} as const;
export type TypeJSONObjectResponse = ClosedEnum<typeof TypeJSONObjectResponse>;

export type FormatJSONObjectResponse = {
  type: TypeJSONObjectResponse;
};

export const FormatTypeResponse = {
  Text: "text",
} as const;
export type FormatTypeResponse = ClosedEnum<typeof FormatTypeResponse>;

export type FormatTextResponse = {
  type: FormatTypeResponse;
};

export type FormatResponseUnion =
  | FormatJSONSchemaResponse
  | FormatTextResponse
  | FormatJSONObjectResponse;

export const VerbosityResponse = {
  High: "high",
  Low: "low",
  Medium: "medium",
} as const;
export type VerbosityResponse = ClosedEnum<typeof VerbosityResponse>;

export type TextResponse = {
  format?:
    | FormatJSONSchemaResponse
    | FormatTextResponse
    | FormatJSONObjectResponse
    | undefined;
  verbosity?: VerbosityResponse | null | undefined;
};

/**
 * Successful response
 */
export type PostApiAlphaResponsesResponseBody = {
  id: string;
  object: PostApiAlphaResponsesObject;
  createdAt: number;
  model: string;
  status?: PostApiAlphaResponsesStatusResponseEnum | undefined;
  output: Array<
    | OutputAssistant
    | OutputFunctionCall
    | OutputFileSearchCall
    | OutputImageGenerationCall
    | OutputReasoning
    | OutputWebSearchCall
  >;
  user?: string | null | undefined;
  outputText?: string | undefined;
  promptCacheKey?: string | null | undefined;
  safetyIdentifier?: string | null | undefined;
  error: PostApiAlphaResponsesError | null;
  incompleteDetails: IncompleteDetails | null;
  usage?: PostApiAlphaResponsesUsage | undefined;
  maxToolCalls?: number | null | undefined;
  topLogprobs?: number | undefined;
  maxOutputTokens?: number | null | undefined;
  temperature: number | null;
  topP: number | null;
  instructions?:
    | string
    | Array<
      | InstructionsAssistant1
      | InstructionsFunctionCall1
      | InstructionsFunctionCallOutput
      | InstructionsImageGenerationCall1
      | InstructionsMessage2
      | InstructionsMessage1
      | InstructionsAssistant2
      | InstructionsFunctionCall2
      | InstructionsFileSearchCall
      | InstructionsImageGenerationCall2
      | InstructionsReasoning
      | InstructionsWebSearchCall
    >
    | any
    | null
    | undefined;
  metadata: { [k: string]: string } | null;
  tools: Array<
    | ToolFunctionResponse
    | ToolWebSearchPreviewResponse
    | ToolWebSearchPreview20250311Response
    | ToolWebSearchResponse
    | ToolWebSearch20250826Response
  >;
  toolChoice:
    | ToolChoiceFunctionResponse
    | ToolChoiceResponse
    | ToolChoiceAutoResponse
    | ToolChoiceNoneResponse
    | ToolChoiceRequiredResponse;
  parallelToolCalls: boolean;
  prompt?: PostApiAlphaResponsesPromptResponse | null | undefined;
  background?: boolean | null | undefined;
  previousResponseId?: string | null | undefined;
  reasoning?: ReasoningResponse | null | undefined;
  serviceTier?: ServiceTierResponse | null | undefined;
  store?: boolean | undefined;
  truncation?: TruncationResponse | null | undefined;
  text?: TextResponse | undefined;
};

export type PostApiAlphaResponsesResponse =
  | PostApiAlphaResponsesResponseBody
  | EventStream<any>;

/** @internal */
export const InputTypeImageGenerationCall2$inboundSchema: z.ZodNativeEnum<
  typeof InputTypeImageGenerationCall2
> = z.nativeEnum(InputTypeImageGenerationCall2);

/** @internal */
export const InputTypeImageGenerationCall2$outboundSchema: z.ZodNativeEnum<
  typeof InputTypeImageGenerationCall2
> = InputTypeImageGenerationCall2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputTypeImageGenerationCall2$ {
  /** @deprecated use `InputTypeImageGenerationCall2$inboundSchema` instead. */
  export const inboundSchema = InputTypeImageGenerationCall2$inboundSchema;
  /** @deprecated use `InputTypeImageGenerationCall2$outboundSchema` instead. */
  export const outboundSchema = InputTypeImageGenerationCall2$outboundSchema;
}

/** @internal */
export const StatusRequestEnum6$inboundSchema: z.ZodNativeEnum<
  typeof StatusRequestEnum6
> = z.nativeEnum(StatusRequestEnum6);

/** @internal */
export const StatusRequestEnum6$outboundSchema: z.ZodNativeEnum<
  typeof StatusRequestEnum6
> = StatusRequestEnum6$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StatusRequestEnum6$ {
  /** @deprecated use `StatusRequestEnum6$inboundSchema` instead. */
  export const inboundSchema = StatusRequestEnum6$inboundSchema;
  /** @deprecated use `StatusRequestEnum6$outboundSchema` instead. */
  export const outboundSchema = StatusRequestEnum6$outboundSchema;
}

/** @internal */
export const InputImageGenerationCall2$inboundSchema: z.ZodType<
  InputImageGenerationCall2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: InputTypeImageGenerationCall2$inboundSchema,
  id: z.string(),
  result: z.nullable(z.string()),
  status: StatusRequestEnum6$inboundSchema,
});

/** @internal */
export type InputImageGenerationCall2$Outbound = {
  type: string;
  id: string;
  result: string | null;
  status: string;
};

/** @internal */
export const InputImageGenerationCall2$outboundSchema: z.ZodType<
  InputImageGenerationCall2$Outbound,
  z.ZodTypeDef,
  InputImageGenerationCall2
> = z.object({
  type: InputTypeImageGenerationCall2$outboundSchema,
  id: z.string(),
  result: z.nullable(z.string()),
  status: StatusRequestEnum6$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputImageGenerationCall2$ {
  /** @deprecated use `InputImageGenerationCall2$inboundSchema` instead. */
  export const inboundSchema = InputImageGenerationCall2$inboundSchema;
  /** @deprecated use `InputImageGenerationCall2$outboundSchema` instead. */
  export const outboundSchema = InputImageGenerationCall2$outboundSchema;
  /** @deprecated use `InputImageGenerationCall2$Outbound` instead. */
  export type Outbound = InputImageGenerationCall2$Outbound;
}

export function inputImageGenerationCall2ToJSON(
  inputImageGenerationCall2: InputImageGenerationCall2,
): string {
  return JSON.stringify(
    InputImageGenerationCall2$outboundSchema.parse(inputImageGenerationCall2),
  );
}

export function inputImageGenerationCall2FromJSON(
  jsonString: string,
): SafeParseResult<InputImageGenerationCall2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputImageGenerationCall2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputImageGenerationCall2' from JSON`,
  );
}

/** @internal */
export const InputTypeFileSearchCall$inboundSchema: z.ZodNativeEnum<
  typeof InputTypeFileSearchCall
> = z.nativeEnum(InputTypeFileSearchCall);

/** @internal */
export const InputTypeFileSearchCall$outboundSchema: z.ZodNativeEnum<
  typeof InputTypeFileSearchCall
> = InputTypeFileSearchCall$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputTypeFileSearchCall$ {
  /** @deprecated use `InputTypeFileSearchCall$inboundSchema` instead. */
  export const inboundSchema = InputTypeFileSearchCall$inboundSchema;
  /** @deprecated use `InputTypeFileSearchCall$outboundSchema` instead. */
  export const outboundSchema = InputTypeFileSearchCall$outboundSchema;
}

/** @internal */
export const StatusRequestEnum5$inboundSchema: z.ZodNativeEnum<
  typeof StatusRequestEnum5
> = z.nativeEnum(StatusRequestEnum5);

/** @internal */
export const StatusRequestEnum5$outboundSchema: z.ZodNativeEnum<
  typeof StatusRequestEnum5
> = StatusRequestEnum5$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StatusRequestEnum5$ {
  /** @deprecated use `StatusRequestEnum5$inboundSchema` instead. */
  export const inboundSchema = StatusRequestEnum5$inboundSchema;
  /** @deprecated use `StatusRequestEnum5$outboundSchema` instead. */
  export const outboundSchema = StatusRequestEnum5$outboundSchema;
}

/** @internal */
export const InputFileSearchCall$inboundSchema: z.ZodType<
  InputFileSearchCall,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: InputTypeFileSearchCall$inboundSchema,
  id: z.string(),
  queries: z.array(z.string()),
  status: StatusRequestEnum5$inboundSchema,
});

/** @internal */
export type InputFileSearchCall$Outbound = {
  type: string;
  id: string;
  queries: Array<string>;
  status: string;
};

/** @internal */
export const InputFileSearchCall$outboundSchema: z.ZodType<
  InputFileSearchCall$Outbound,
  z.ZodTypeDef,
  InputFileSearchCall
> = z.object({
  type: InputTypeFileSearchCall$outboundSchema,
  id: z.string(),
  queries: z.array(z.string()),
  status: StatusRequestEnum5$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputFileSearchCall$ {
  /** @deprecated use `InputFileSearchCall$inboundSchema` instead. */
  export const inboundSchema = InputFileSearchCall$inboundSchema;
  /** @deprecated use `InputFileSearchCall$outboundSchema` instead. */
  export const outboundSchema = InputFileSearchCall$outboundSchema;
  /** @deprecated use `InputFileSearchCall$Outbound` instead. */
  export type Outbound = InputFileSearchCall$Outbound;
}

export function inputFileSearchCallToJSON(
  inputFileSearchCall: InputFileSearchCall,
): string {
  return JSON.stringify(
    InputFileSearchCall$outboundSchema.parse(inputFileSearchCall),
  );
}

export function inputFileSearchCallFromJSON(
  jsonString: string,
): SafeParseResult<InputFileSearchCall, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputFileSearchCall$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputFileSearchCall' from JSON`,
  );
}

/** @internal */
export const InputTypeWebSearchCall$inboundSchema: z.ZodNativeEnum<
  typeof InputTypeWebSearchCall
> = z.nativeEnum(InputTypeWebSearchCall);

/** @internal */
export const InputTypeWebSearchCall$outboundSchema: z.ZodNativeEnum<
  typeof InputTypeWebSearchCall
> = InputTypeWebSearchCall$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputTypeWebSearchCall$ {
  /** @deprecated use `InputTypeWebSearchCall$inboundSchema` instead. */
  export const inboundSchema = InputTypeWebSearchCall$inboundSchema;
  /** @deprecated use `InputTypeWebSearchCall$outboundSchema` instead. */
  export const outboundSchema = InputTypeWebSearchCall$outboundSchema;
}

/** @internal */
export const StatusRequestEnum4$inboundSchema: z.ZodNativeEnum<
  typeof StatusRequestEnum4
> = z.nativeEnum(StatusRequestEnum4);

/** @internal */
export const StatusRequestEnum4$outboundSchema: z.ZodNativeEnum<
  typeof StatusRequestEnum4
> = StatusRequestEnum4$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StatusRequestEnum4$ {
  /** @deprecated use `StatusRequestEnum4$inboundSchema` instead. */
  export const inboundSchema = StatusRequestEnum4$inboundSchema;
  /** @deprecated use `StatusRequestEnum4$outboundSchema` instead. */
  export const outboundSchema = StatusRequestEnum4$outboundSchema;
}

/** @internal */
export const InputWebSearchCall$inboundSchema: z.ZodType<
  InputWebSearchCall,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: InputTypeWebSearchCall$inboundSchema,
  id: z.string(),
  status: StatusRequestEnum4$inboundSchema,
});

/** @internal */
export type InputWebSearchCall$Outbound = {
  type: string;
  id: string;
  status: string;
};

/** @internal */
export const InputWebSearchCall$outboundSchema: z.ZodType<
  InputWebSearchCall$Outbound,
  z.ZodTypeDef,
  InputWebSearchCall
> = z.object({
  type: InputTypeWebSearchCall$outboundSchema,
  id: z.string(),
  status: StatusRequestEnum4$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputWebSearchCall$ {
  /** @deprecated use `InputWebSearchCall$inboundSchema` instead. */
  export const inboundSchema = InputWebSearchCall$inboundSchema;
  /** @deprecated use `InputWebSearchCall$outboundSchema` instead. */
  export const outboundSchema = InputWebSearchCall$outboundSchema;
  /** @deprecated use `InputWebSearchCall$Outbound` instead. */
  export type Outbound = InputWebSearchCall$Outbound;
}

export function inputWebSearchCallToJSON(
  inputWebSearchCall: InputWebSearchCall,
): string {
  return JSON.stringify(
    InputWebSearchCall$outboundSchema.parse(inputWebSearchCall),
  );
}

export function inputWebSearchCallFromJSON(
  jsonString: string,
): SafeParseResult<InputWebSearchCall, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputWebSearchCall$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputWebSearchCall' from JSON`,
  );
}

/** @internal */
export const InputTypeFunctionCall2$inboundSchema: z.ZodNativeEnum<
  typeof InputTypeFunctionCall2
> = z.nativeEnum(InputTypeFunctionCall2);

/** @internal */
export const InputTypeFunctionCall2$outboundSchema: z.ZodNativeEnum<
  typeof InputTypeFunctionCall2
> = InputTypeFunctionCall2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputTypeFunctionCall2$ {
  /** @deprecated use `InputTypeFunctionCall2$inboundSchema` instead. */
  export const inboundSchema = InputTypeFunctionCall2$inboundSchema;
  /** @deprecated use `InputTypeFunctionCall2$outboundSchema` instead. */
  export const outboundSchema = InputTypeFunctionCall2$outboundSchema;
}

/** @internal */
export const InputFunctionCall2$inboundSchema: z.ZodType<
  InputFunctionCall2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: InputTypeFunctionCall2$inboundSchema,
  id: z.string().optional(),
  name: z.string(),
  arguments: z.string(),
  call_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "call_id": "callId",
  });
});

/** @internal */
export type InputFunctionCall2$Outbound = {
  type: string;
  id?: string | undefined;
  name: string;
  arguments: string;
  call_id: string;
};

/** @internal */
export const InputFunctionCall2$outboundSchema: z.ZodType<
  InputFunctionCall2$Outbound,
  z.ZodTypeDef,
  InputFunctionCall2
> = z.object({
  type: InputTypeFunctionCall2$outboundSchema,
  id: z.string().optional(),
  name: z.string(),
  arguments: z.string(),
  callId: z.string(),
}).transform((v) => {
  return remap$(v, {
    callId: "call_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputFunctionCall2$ {
  /** @deprecated use `InputFunctionCall2$inboundSchema` instead. */
  export const inboundSchema = InputFunctionCall2$inboundSchema;
  /** @deprecated use `InputFunctionCall2$outboundSchema` instead. */
  export const outboundSchema = InputFunctionCall2$outboundSchema;
  /** @deprecated use `InputFunctionCall2$Outbound` instead. */
  export type Outbound = InputFunctionCall2$Outbound;
}

export function inputFunctionCall2ToJSON(
  inputFunctionCall2: InputFunctionCall2,
): string {
  return JSON.stringify(
    InputFunctionCall2$outboundSchema.parse(inputFunctionCall2),
  );
}

export function inputFunctionCall2FromJSON(
  jsonString: string,
): SafeParseResult<InputFunctionCall2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputFunctionCall2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputFunctionCall2' from JSON`,
  );
}

/** @internal */
export const InputTypeReasoning$inboundSchema: z.ZodNativeEnum<
  typeof InputTypeReasoning
> = z.nativeEnum(InputTypeReasoning);

/** @internal */
export const InputTypeReasoning$outboundSchema: z.ZodNativeEnum<
  typeof InputTypeReasoning
> = InputTypeReasoning$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputTypeReasoning$ {
  /** @deprecated use `InputTypeReasoning$inboundSchema` instead. */
  export const inboundSchema = InputTypeReasoning$inboundSchema;
  /** @deprecated use `InputTypeReasoning$outboundSchema` instead. */
  export const outboundSchema = InputTypeReasoning$outboundSchema;
}

/** @internal */
export const InputTypeReasoningText$inboundSchema: z.ZodNativeEnum<
  typeof InputTypeReasoningText
> = z.nativeEnum(InputTypeReasoningText);

/** @internal */
export const InputTypeReasoningText$outboundSchema: z.ZodNativeEnum<
  typeof InputTypeReasoningText
> = InputTypeReasoningText$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputTypeReasoningText$ {
  /** @deprecated use `InputTypeReasoningText$inboundSchema` instead. */
  export const inboundSchema = InputTypeReasoningText$inboundSchema;
  /** @deprecated use `InputTypeReasoningText$outboundSchema` instead. */
  export const outboundSchema = InputTypeReasoningText$outboundSchema;
}

/** @internal */
export const ContentReasoningTextRequest$inboundSchema: z.ZodType<
  ContentReasoningTextRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: InputTypeReasoningText$inboundSchema,
  text: z.string(),
});

/** @internal */
export type ContentReasoningTextRequest$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const ContentReasoningTextRequest$outboundSchema: z.ZodType<
  ContentReasoningTextRequest$Outbound,
  z.ZodTypeDef,
  ContentReasoningTextRequest
> = z.object({
  type: InputTypeReasoningText$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContentReasoningTextRequest$ {
  /** @deprecated use `ContentReasoningTextRequest$inboundSchema` instead. */
  export const inboundSchema = ContentReasoningTextRequest$inboundSchema;
  /** @deprecated use `ContentReasoningTextRequest$outboundSchema` instead. */
  export const outboundSchema = ContentReasoningTextRequest$outboundSchema;
  /** @deprecated use `ContentReasoningTextRequest$Outbound` instead. */
  export type Outbound = ContentReasoningTextRequest$Outbound;
}

export function contentReasoningTextRequestToJSON(
  contentReasoningTextRequest: ContentReasoningTextRequest,
): string {
  return JSON.stringify(
    ContentReasoningTextRequest$outboundSchema.parse(
      contentReasoningTextRequest,
    ),
  );
}

export function contentReasoningTextRequestFromJSON(
  jsonString: string,
): SafeParseResult<ContentReasoningTextRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContentReasoningTextRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContentReasoningTextRequest' from JSON`,
  );
}

/** @internal */
export const InputTypeSummaryText$inboundSchema: z.ZodNativeEnum<
  typeof InputTypeSummaryText
> = z.nativeEnum(InputTypeSummaryText);

/** @internal */
export const InputTypeSummaryText$outboundSchema: z.ZodNativeEnum<
  typeof InputTypeSummaryText
> = InputTypeSummaryText$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputTypeSummaryText$ {
  /** @deprecated use `InputTypeSummaryText$inboundSchema` instead. */
  export const inboundSchema = InputTypeSummaryText$inboundSchema;
  /** @deprecated use `InputTypeSummaryText$outboundSchema` instead. */
  export const outboundSchema = InputTypeSummaryText$outboundSchema;
}

/** @internal */
export const InputSummary$inboundSchema: z.ZodType<
  InputSummary,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: InputTypeSummaryText$inboundSchema,
  text: z.string(),
});

/** @internal */
export type InputSummary$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const InputSummary$outboundSchema: z.ZodType<
  InputSummary$Outbound,
  z.ZodTypeDef,
  InputSummary
> = z.object({
  type: InputTypeSummaryText$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSummary$ {
  /** @deprecated use `InputSummary$inboundSchema` instead. */
  export const inboundSchema = InputSummary$inboundSchema;
  /** @deprecated use `InputSummary$outboundSchema` instead. */
  export const outboundSchema = InputSummary$outboundSchema;
  /** @deprecated use `InputSummary$Outbound` instead. */
  export type Outbound = InputSummary$Outbound;
}

export function inputSummaryToJSON(inputSummary: InputSummary): string {
  return JSON.stringify(InputSummary$outboundSchema.parse(inputSummary));
}

export function inputSummaryFromJSON(
  jsonString: string,
): SafeParseResult<InputSummary, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputSummary$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputSummary' from JSON`,
  );
}

/** @internal */
export const InputFormat$inboundSchema: z.ZodNativeEnum<typeof InputFormat> = z
  .nativeEnum(InputFormat);

/** @internal */
export const InputFormat$outboundSchema: z.ZodNativeEnum<typeof InputFormat> =
  InputFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputFormat$ {
  /** @deprecated use `InputFormat$inboundSchema` instead. */
  export const inboundSchema = InputFormat$inboundSchema;
  /** @deprecated use `InputFormat$outboundSchema` instead. */
  export const outboundSchema = InputFormat$outboundSchema;
}

/** @internal */
export const InputReasoning$inboundSchema: z.ZodType<
  InputReasoning,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: InputTypeReasoning$inboundSchema,
  id: z.string(),
  content: z.array(z.lazy(() => ContentReasoningTextRequest$inboundSchema))
    .optional(),
  summary: z.array(z.lazy(() => InputSummary$inboundSchema)),
  encrypted_content: z.nullable(z.string()).optional(),
  signature: z.nullable(z.string()).optional(),
  format: z.nullable(InputFormat$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "encrypted_content": "encryptedContent",
  });
});

/** @internal */
export type InputReasoning$Outbound = {
  type: string;
  id: string;
  content?: Array<ContentReasoningTextRequest$Outbound> | undefined;
  summary: Array<InputSummary$Outbound>;
  encrypted_content?: string | null | undefined;
  signature?: string | null | undefined;
  format?: string | null | undefined;
};

/** @internal */
export const InputReasoning$outboundSchema: z.ZodType<
  InputReasoning$Outbound,
  z.ZodTypeDef,
  InputReasoning
> = z.object({
  type: InputTypeReasoning$outboundSchema,
  id: z.string(),
  content: z.array(z.lazy(() => ContentReasoningTextRequest$outboundSchema))
    .optional(),
  summary: z.array(z.lazy(() => InputSummary$outboundSchema)),
  encryptedContent: z.nullable(z.string()).optional(),
  signature: z.nullable(z.string()).optional(),
  format: z.nullable(InputFormat$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    encryptedContent: "encrypted_content",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputReasoning$ {
  /** @deprecated use `InputReasoning$inboundSchema` instead. */
  export const inboundSchema = InputReasoning$inboundSchema;
  /** @deprecated use `InputReasoning$outboundSchema` instead. */
  export const outboundSchema = InputReasoning$outboundSchema;
  /** @deprecated use `InputReasoning$Outbound` instead. */
  export type Outbound = InputReasoning$Outbound;
}

export function inputReasoningToJSON(inputReasoning: InputReasoning): string {
  return JSON.stringify(InputReasoning$outboundSchema.parse(inputReasoning));
}

export function inputReasoningFromJSON(
  jsonString: string,
): SafeParseResult<InputReasoning, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputReasoning$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputReasoning' from JSON`,
  );
}

/** @internal */
export const InputTypeMessage4$inboundSchema: z.ZodNativeEnum<
  typeof InputTypeMessage4
> = z.nativeEnum(InputTypeMessage4);

/** @internal */
export const InputTypeMessage4$outboundSchema: z.ZodNativeEnum<
  typeof InputTypeMessage4
> = InputTypeMessage4$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputTypeMessage4$ {
  /** @deprecated use `InputTypeMessage4$inboundSchema` instead. */
  export const inboundSchema = InputTypeMessage4$inboundSchema;
  /** @deprecated use `InputTypeMessage4$outboundSchema` instead. */
  export const outboundSchema = InputTypeMessage4$outboundSchema;
}

/** @internal */
export const StatusInProgressRequest2$inboundSchema: z.ZodNativeEnum<
  typeof StatusInProgressRequest2
> = z.nativeEnum(StatusInProgressRequest2);

/** @internal */
export const StatusInProgressRequest2$outboundSchema: z.ZodNativeEnum<
  typeof StatusInProgressRequest2
> = StatusInProgressRequest2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StatusInProgressRequest2$ {
  /** @deprecated use `StatusInProgressRequest2$inboundSchema` instead. */
  export const inboundSchema = StatusInProgressRequest2$inboundSchema;
  /** @deprecated use `StatusInProgressRequest2$outboundSchema` instead. */
  export const outboundSchema = StatusInProgressRequest2$outboundSchema;
}

/** @internal */
export const StatusIncompleteRequest2$inboundSchema: z.ZodNativeEnum<
  typeof StatusIncompleteRequest2
> = z.nativeEnum(StatusIncompleteRequest2);

/** @internal */
export const StatusIncompleteRequest2$outboundSchema: z.ZodNativeEnum<
  typeof StatusIncompleteRequest2
> = StatusIncompleteRequest2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StatusIncompleteRequest2$ {
  /** @deprecated use `StatusIncompleteRequest2$inboundSchema` instead. */
  export const inboundSchema = StatusIncompleteRequest2$inboundSchema;
  /** @deprecated use `StatusIncompleteRequest2$outboundSchema` instead. */
  export const outboundSchema = StatusIncompleteRequest2$outboundSchema;
}

/** @internal */
export const StatusCompletedRequest2$inboundSchema: z.ZodNativeEnum<
  typeof StatusCompletedRequest2
> = z.nativeEnum(StatusCompletedRequest2);

/** @internal */
export const StatusCompletedRequest2$outboundSchema: z.ZodNativeEnum<
  typeof StatusCompletedRequest2
> = StatusCompletedRequest2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StatusCompletedRequest2$ {
  /** @deprecated use `StatusCompletedRequest2$inboundSchema` instead. */
  export const inboundSchema = StatusCompletedRequest2$inboundSchema;
  /** @deprecated use `StatusCompletedRequest2$outboundSchema` instead. */
  export const outboundSchema = StatusCompletedRequest2$outboundSchema;
}

/** @internal */
export const StatusRequestUnion2$inboundSchema: z.ZodType<
  StatusRequestUnion2,
  z.ZodTypeDef,
  unknown
> = z.union([
  StatusCompletedRequest2$inboundSchema,
  StatusIncompleteRequest2$inboundSchema,
  StatusInProgressRequest2$inboundSchema,
]);

/** @internal */
export type StatusRequestUnion2$Outbound = string | string | string;

/** @internal */
export const StatusRequestUnion2$outboundSchema: z.ZodType<
  StatusRequestUnion2$Outbound,
  z.ZodTypeDef,
  StatusRequestUnion2
> = z.union([
  StatusCompletedRequest2$outboundSchema,
  StatusIncompleteRequest2$outboundSchema,
  StatusInProgressRequest2$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StatusRequestUnion2$ {
  /** @deprecated use `StatusRequestUnion2$inboundSchema` instead. */
  export const inboundSchema = StatusRequestUnion2$inboundSchema;
  /** @deprecated use `StatusRequestUnion2$outboundSchema` instead. */
  export const outboundSchema = StatusRequestUnion2$outboundSchema;
  /** @deprecated use `StatusRequestUnion2$Outbound` instead. */
  export type Outbound = StatusRequestUnion2$Outbound;
}

export function statusRequestUnion2ToJSON(
  statusRequestUnion2: StatusRequestUnion2,
): string {
  return JSON.stringify(
    StatusRequestUnion2$outboundSchema.parse(statusRequestUnion2),
  );
}

export function statusRequestUnion2FromJSON(
  jsonString: string,
): SafeParseResult<StatusRequestUnion2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StatusRequestUnion2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StatusRequestUnion2' from JSON`,
  );
}

/** @internal */
export const RoleAssistantRequest3$inboundSchema: z.ZodNativeEnum<
  typeof RoleAssistantRequest3
> = z.nativeEnum(RoleAssistantRequest3);

/** @internal */
export const RoleAssistantRequest3$outboundSchema: z.ZodNativeEnum<
  typeof RoleAssistantRequest3
> = RoleAssistantRequest3$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RoleAssistantRequest3$ {
  /** @deprecated use `RoleAssistantRequest3$inboundSchema` instead. */
  export const inboundSchema = RoleAssistantRequest3$inboundSchema;
  /** @deprecated use `RoleAssistantRequest3$outboundSchema` instead. */
  export const outboundSchema = RoleAssistantRequest3$outboundSchema;
}

/** @internal */
export const InputTypeRefusal2$inboundSchema: z.ZodNativeEnum<
  typeof InputTypeRefusal2
> = z.nativeEnum(InputTypeRefusal2);

/** @internal */
export const InputTypeRefusal2$outboundSchema: z.ZodNativeEnum<
  typeof InputTypeRefusal2
> = InputTypeRefusal2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputTypeRefusal2$ {
  /** @deprecated use `InputTypeRefusal2$inboundSchema` instead. */
  export const inboundSchema = InputTypeRefusal2$inboundSchema;
  /** @deprecated use `InputTypeRefusal2$outboundSchema` instead. */
  export const outboundSchema = InputTypeRefusal2$outboundSchema;
}

/** @internal */
export const ContentRefusalRequest2$inboundSchema: z.ZodType<
  ContentRefusalRequest2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: InputTypeRefusal2$inboundSchema,
  refusal: z.string(),
});

/** @internal */
export type ContentRefusalRequest2$Outbound = {
  type: string;
  refusal: string;
};

/** @internal */
export const ContentRefusalRequest2$outboundSchema: z.ZodType<
  ContentRefusalRequest2$Outbound,
  z.ZodTypeDef,
  ContentRefusalRequest2
> = z.object({
  type: InputTypeRefusal2$outboundSchema,
  refusal: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContentRefusalRequest2$ {
  /** @deprecated use `ContentRefusalRequest2$inboundSchema` instead. */
  export const inboundSchema = ContentRefusalRequest2$inboundSchema;
  /** @deprecated use `ContentRefusalRequest2$outboundSchema` instead. */
  export const outboundSchema = ContentRefusalRequest2$outboundSchema;
  /** @deprecated use `ContentRefusalRequest2$Outbound` instead. */
  export type Outbound = ContentRefusalRequest2$Outbound;
}

export function contentRefusalRequest2ToJSON(
  contentRefusalRequest2: ContentRefusalRequest2,
): string {
  return JSON.stringify(
    ContentRefusalRequest2$outboundSchema.parse(contentRefusalRequest2),
  );
}

export function contentRefusalRequest2FromJSON(
  jsonString: string,
): SafeParseResult<ContentRefusalRequest2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContentRefusalRequest2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContentRefusalRequest2' from JSON`,
  );
}

/** @internal */
export const InputTypeOutputText2$inboundSchema: z.ZodNativeEnum<
  typeof InputTypeOutputText2
> = z.nativeEnum(InputTypeOutputText2);

/** @internal */
export const InputTypeOutputText2$outboundSchema: z.ZodNativeEnum<
  typeof InputTypeOutputText2
> = InputTypeOutputText2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputTypeOutputText2$ {
  /** @deprecated use `InputTypeOutputText2$inboundSchema` instead. */
  export const inboundSchema = InputTypeOutputText2$inboundSchema;
  /** @deprecated use `InputTypeOutputText2$outboundSchema` instead. */
  export const outboundSchema = InputTypeOutputText2$outboundSchema;
}

/** @internal */
export const InputTypeFilePath2$inboundSchema: z.ZodNativeEnum<
  typeof InputTypeFilePath2
> = z.nativeEnum(InputTypeFilePath2);

/** @internal */
export const InputTypeFilePath2$outboundSchema: z.ZodNativeEnum<
  typeof InputTypeFilePath2
> = InputTypeFilePath2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputTypeFilePath2$ {
  /** @deprecated use `InputTypeFilePath2$inboundSchema` instead. */
  export const inboundSchema = InputTypeFilePath2$inboundSchema;
  /** @deprecated use `InputTypeFilePath2$outboundSchema` instead. */
  export const outboundSchema = InputTypeFilePath2$outboundSchema;
}

/** @internal */
export const AnnotationFilePathRequest2$inboundSchema: z.ZodType<
  AnnotationFilePathRequest2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: InputTypeFilePath2$inboundSchema,
  file_id: z.string(),
  index: z.number(),
}).transform((v) => {
  return remap$(v, {
    "file_id": "fileId",
  });
});

/** @internal */
export type AnnotationFilePathRequest2$Outbound = {
  type: string;
  file_id: string;
  index: number;
};

/** @internal */
export const AnnotationFilePathRequest2$outboundSchema: z.ZodType<
  AnnotationFilePathRequest2$Outbound,
  z.ZodTypeDef,
  AnnotationFilePathRequest2
> = z.object({
  type: InputTypeFilePath2$outboundSchema,
  fileId: z.string(),
  index: z.number(),
}).transform((v) => {
  return remap$(v, {
    fileId: "file_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnnotationFilePathRequest2$ {
  /** @deprecated use `AnnotationFilePathRequest2$inboundSchema` instead. */
  export const inboundSchema = AnnotationFilePathRequest2$inboundSchema;
  /** @deprecated use `AnnotationFilePathRequest2$outboundSchema` instead. */
  export const outboundSchema = AnnotationFilePathRequest2$outboundSchema;
  /** @deprecated use `AnnotationFilePathRequest2$Outbound` instead. */
  export type Outbound = AnnotationFilePathRequest2$Outbound;
}

export function annotationFilePathRequest2ToJSON(
  annotationFilePathRequest2: AnnotationFilePathRequest2,
): string {
  return JSON.stringify(
    AnnotationFilePathRequest2$outboundSchema.parse(annotationFilePathRequest2),
  );
}

export function annotationFilePathRequest2FromJSON(
  jsonString: string,
): SafeParseResult<AnnotationFilePathRequest2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnnotationFilePathRequest2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnnotationFilePathRequest2' from JSON`,
  );
}

/** @internal */
export const InputTypeURLCitation2$inboundSchema: z.ZodNativeEnum<
  typeof InputTypeURLCitation2
> = z.nativeEnum(InputTypeURLCitation2);

/** @internal */
export const InputTypeURLCitation2$outboundSchema: z.ZodNativeEnum<
  typeof InputTypeURLCitation2
> = InputTypeURLCitation2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputTypeURLCitation2$ {
  /** @deprecated use `InputTypeURLCitation2$inboundSchema` instead. */
  export const inboundSchema = InputTypeURLCitation2$inboundSchema;
  /** @deprecated use `InputTypeURLCitation2$outboundSchema` instead. */
  export const outboundSchema = InputTypeURLCitation2$outboundSchema;
}

/** @internal */
export const AnnotationURLCitationRequest2$inboundSchema: z.ZodType<
  AnnotationURLCitationRequest2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: InputTypeURLCitation2$inboundSchema,
  end_index: z.number(),
  start_index: z.number(),
  title: z.string(),
  url: z.string(),
}).transform((v) => {
  return remap$(v, {
    "end_index": "endIndex",
    "start_index": "startIndex",
  });
});

/** @internal */
export type AnnotationURLCitationRequest2$Outbound = {
  type: string;
  end_index: number;
  start_index: number;
  title: string;
  url: string;
};

/** @internal */
export const AnnotationURLCitationRequest2$outboundSchema: z.ZodType<
  AnnotationURLCitationRequest2$Outbound,
  z.ZodTypeDef,
  AnnotationURLCitationRequest2
> = z.object({
  type: InputTypeURLCitation2$outboundSchema,
  endIndex: z.number(),
  startIndex: z.number(),
  title: z.string(),
  url: z.string(),
}).transform((v) => {
  return remap$(v, {
    endIndex: "end_index",
    startIndex: "start_index",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnnotationURLCitationRequest2$ {
  /** @deprecated use `AnnotationURLCitationRequest2$inboundSchema` instead. */
  export const inboundSchema = AnnotationURLCitationRequest2$inboundSchema;
  /** @deprecated use `AnnotationURLCitationRequest2$outboundSchema` instead. */
  export const outboundSchema = AnnotationURLCitationRequest2$outboundSchema;
  /** @deprecated use `AnnotationURLCitationRequest2$Outbound` instead. */
  export type Outbound = AnnotationURLCitationRequest2$Outbound;
}

export function annotationURLCitationRequest2ToJSON(
  annotationURLCitationRequest2: AnnotationURLCitationRequest2,
): string {
  return JSON.stringify(
    AnnotationURLCitationRequest2$outboundSchema.parse(
      annotationURLCitationRequest2,
    ),
  );
}

export function annotationURLCitationRequest2FromJSON(
  jsonString: string,
): SafeParseResult<AnnotationURLCitationRequest2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnnotationURLCitationRequest2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnnotationURLCitationRequest2' from JSON`,
  );
}

/** @internal */
export const InputTypeFileCitation2$inboundSchema: z.ZodNativeEnum<
  typeof InputTypeFileCitation2
> = z.nativeEnum(InputTypeFileCitation2);

/** @internal */
export const InputTypeFileCitation2$outboundSchema: z.ZodNativeEnum<
  typeof InputTypeFileCitation2
> = InputTypeFileCitation2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputTypeFileCitation2$ {
  /** @deprecated use `InputTypeFileCitation2$inboundSchema` instead. */
  export const inboundSchema = InputTypeFileCitation2$inboundSchema;
  /** @deprecated use `InputTypeFileCitation2$outboundSchema` instead. */
  export const outboundSchema = InputTypeFileCitation2$outboundSchema;
}

/** @internal */
export const AnnotationFileCitationRequest2$inboundSchema: z.ZodType<
  AnnotationFileCitationRequest2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: InputTypeFileCitation2$inboundSchema,
  file_id: z.string(),
  filename: z.string(),
  index: z.number(),
}).transform((v) => {
  return remap$(v, {
    "file_id": "fileId",
  });
});

/** @internal */
export type AnnotationFileCitationRequest2$Outbound = {
  type: string;
  file_id: string;
  filename: string;
  index: number;
};

/** @internal */
export const AnnotationFileCitationRequest2$outboundSchema: z.ZodType<
  AnnotationFileCitationRequest2$Outbound,
  z.ZodTypeDef,
  AnnotationFileCitationRequest2
> = z.object({
  type: InputTypeFileCitation2$outboundSchema,
  fileId: z.string(),
  filename: z.string(),
  index: z.number(),
}).transform((v) => {
  return remap$(v, {
    fileId: "file_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnnotationFileCitationRequest2$ {
  /** @deprecated use `AnnotationFileCitationRequest2$inboundSchema` instead. */
  export const inboundSchema = AnnotationFileCitationRequest2$inboundSchema;
  /** @deprecated use `AnnotationFileCitationRequest2$outboundSchema` instead. */
  export const outboundSchema = AnnotationFileCitationRequest2$outboundSchema;
  /** @deprecated use `AnnotationFileCitationRequest2$Outbound` instead. */
  export type Outbound = AnnotationFileCitationRequest2$Outbound;
}

export function annotationFileCitationRequest2ToJSON(
  annotationFileCitationRequest2: AnnotationFileCitationRequest2,
): string {
  return JSON.stringify(
    AnnotationFileCitationRequest2$outboundSchema.parse(
      annotationFileCitationRequest2,
    ),
  );
}

export function annotationFileCitationRequest2FromJSON(
  jsonString: string,
): SafeParseResult<AnnotationFileCitationRequest2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnnotationFileCitationRequest2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnnotationFileCitationRequest2' from JSON`,
  );
}

/** @internal */
export const AnnotationRequestUnion2$inboundSchema: z.ZodType<
  AnnotationRequestUnion2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => AnnotationURLCitationRequest2$inboundSchema),
  z.lazy(() => AnnotationFileCitationRequest2$inboundSchema),
  z.lazy(() => AnnotationFilePathRequest2$inboundSchema),
]);

/** @internal */
export type AnnotationRequestUnion2$Outbound =
  | AnnotationURLCitationRequest2$Outbound
  | AnnotationFileCitationRequest2$Outbound
  | AnnotationFilePathRequest2$Outbound;

/** @internal */
export const AnnotationRequestUnion2$outboundSchema: z.ZodType<
  AnnotationRequestUnion2$Outbound,
  z.ZodTypeDef,
  AnnotationRequestUnion2
> = z.union([
  z.lazy(() => AnnotationURLCitationRequest2$outboundSchema),
  z.lazy(() => AnnotationFileCitationRequest2$outboundSchema),
  z.lazy(() => AnnotationFilePathRequest2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnnotationRequestUnion2$ {
  /** @deprecated use `AnnotationRequestUnion2$inboundSchema` instead. */
  export const inboundSchema = AnnotationRequestUnion2$inboundSchema;
  /** @deprecated use `AnnotationRequestUnion2$outboundSchema` instead. */
  export const outboundSchema = AnnotationRequestUnion2$outboundSchema;
  /** @deprecated use `AnnotationRequestUnion2$Outbound` instead. */
  export type Outbound = AnnotationRequestUnion2$Outbound;
}

export function annotationRequestUnion2ToJSON(
  annotationRequestUnion2: AnnotationRequestUnion2,
): string {
  return JSON.stringify(
    AnnotationRequestUnion2$outboundSchema.parse(annotationRequestUnion2),
  );
}

export function annotationRequestUnion2FromJSON(
  jsonString: string,
): SafeParseResult<AnnotationRequestUnion2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnnotationRequestUnion2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnnotationRequestUnion2' from JSON`,
  );
}

/** @internal */
export const ContentOutputTextRequest2$inboundSchema: z.ZodType<
  ContentOutputTextRequest2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: InputTypeOutputText2$inboundSchema,
  text: z.string(),
  annotations: z.array(
    z.union([
      z.lazy(() => AnnotationURLCitationRequest2$inboundSchema),
      z.lazy(() => AnnotationFileCitationRequest2$inboundSchema),
      z.lazy(() => AnnotationFilePathRequest2$inboundSchema),
    ]),
  ),
});

/** @internal */
export type ContentOutputTextRequest2$Outbound = {
  type: string;
  text: string;
  annotations: Array<
    | AnnotationURLCitationRequest2$Outbound
    | AnnotationFileCitationRequest2$Outbound
    | AnnotationFilePathRequest2$Outbound
  >;
};

/** @internal */
export const ContentOutputTextRequest2$outboundSchema: z.ZodType<
  ContentOutputTextRequest2$Outbound,
  z.ZodTypeDef,
  ContentOutputTextRequest2
> = z.object({
  type: InputTypeOutputText2$outboundSchema,
  text: z.string(),
  annotations: z.array(
    z.union([
      z.lazy(() => AnnotationURLCitationRequest2$outboundSchema),
      z.lazy(() => AnnotationFileCitationRequest2$outboundSchema),
      z.lazy(() => AnnotationFilePathRequest2$outboundSchema),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContentOutputTextRequest2$ {
  /** @deprecated use `ContentOutputTextRequest2$inboundSchema` instead. */
  export const inboundSchema = ContentOutputTextRequest2$inboundSchema;
  /** @deprecated use `ContentOutputTextRequest2$outboundSchema` instead. */
  export const outboundSchema = ContentOutputTextRequest2$outboundSchema;
  /** @deprecated use `ContentOutputTextRequest2$Outbound` instead. */
  export type Outbound = ContentOutputTextRequest2$Outbound;
}

export function contentOutputTextRequest2ToJSON(
  contentOutputTextRequest2: ContentOutputTextRequest2,
): string {
  return JSON.stringify(
    ContentOutputTextRequest2$outboundSchema.parse(contentOutputTextRequest2),
  );
}

export function contentOutputTextRequest2FromJSON(
  jsonString: string,
): SafeParseResult<ContentOutputTextRequest2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContentOutputTextRequest2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContentOutputTextRequest2' from JSON`,
  );
}

/** @internal */
export const ContentRequestUnion5$inboundSchema: z.ZodType<
  ContentRequestUnion5,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ContentOutputTextRequest2$inboundSchema),
  z.lazy(() => ContentRefusalRequest2$inboundSchema),
]);

/** @internal */
export type ContentRequestUnion5$Outbound =
  | ContentOutputTextRequest2$Outbound
  | ContentRefusalRequest2$Outbound;

/** @internal */
export const ContentRequestUnion5$outboundSchema: z.ZodType<
  ContentRequestUnion5$Outbound,
  z.ZodTypeDef,
  ContentRequestUnion5
> = z.union([
  z.lazy(() => ContentOutputTextRequest2$outboundSchema),
  z.lazy(() => ContentRefusalRequest2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContentRequestUnion5$ {
  /** @deprecated use `ContentRequestUnion5$inboundSchema` instead. */
  export const inboundSchema = ContentRequestUnion5$inboundSchema;
  /** @deprecated use `ContentRequestUnion5$outboundSchema` instead. */
  export const outboundSchema = ContentRequestUnion5$outboundSchema;
  /** @deprecated use `ContentRequestUnion5$Outbound` instead. */
  export type Outbound = ContentRequestUnion5$Outbound;
}

export function contentRequestUnion5ToJSON(
  contentRequestUnion5: ContentRequestUnion5,
): string {
  return JSON.stringify(
    ContentRequestUnion5$outboundSchema.parse(contentRequestUnion5),
  );
}

export function contentRequestUnion5FromJSON(
  jsonString: string,
): SafeParseResult<ContentRequestUnion5, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContentRequestUnion5$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContentRequestUnion5' from JSON`,
  );
}

/** @internal */
export const InputAssistant2$inboundSchema: z.ZodType<
  InputAssistant2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: InputTypeMessage4$inboundSchema,
  id: z.string(),
  status: z.union([
    StatusCompletedRequest2$inboundSchema,
    StatusIncompleteRequest2$inboundSchema,
    StatusInProgressRequest2$inboundSchema,
  ]),
  role: RoleAssistantRequest3$inboundSchema,
  content: z.array(
    z.union([
      z.lazy(() => ContentOutputTextRequest2$inboundSchema),
      z.lazy(() => ContentRefusalRequest2$inboundSchema),
    ]),
  ),
});

/** @internal */
export type InputAssistant2$Outbound = {
  type: string;
  id: string;
  status: string | string | string;
  role: string;
  content: Array<
    ContentOutputTextRequest2$Outbound | ContentRefusalRequest2$Outbound
  >;
};

/** @internal */
export const InputAssistant2$outboundSchema: z.ZodType<
  InputAssistant2$Outbound,
  z.ZodTypeDef,
  InputAssistant2
> = z.object({
  type: InputTypeMessage4$outboundSchema,
  id: z.string(),
  status: z.union([
    StatusCompletedRequest2$outboundSchema,
    StatusIncompleteRequest2$outboundSchema,
    StatusInProgressRequest2$outboundSchema,
  ]),
  role: RoleAssistantRequest3$outboundSchema,
  content: z.array(
    z.union([
      z.lazy(() => ContentOutputTextRequest2$outboundSchema),
      z.lazy(() => ContentRefusalRequest2$outboundSchema),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputAssistant2$ {
  /** @deprecated use `InputAssistant2$inboundSchema` instead. */
  export const inboundSchema = InputAssistant2$inboundSchema;
  /** @deprecated use `InputAssistant2$outboundSchema` instead. */
  export const outboundSchema = InputAssistant2$outboundSchema;
  /** @deprecated use `InputAssistant2$Outbound` instead. */
  export type Outbound = InputAssistant2$Outbound;
}

export function inputAssistant2ToJSON(
  inputAssistant2: InputAssistant2,
): string {
  return JSON.stringify(InputAssistant2$outboundSchema.parse(inputAssistant2));
}

export function inputAssistant2FromJSON(
  jsonString: string,
): SafeParseResult<InputAssistant2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputAssistant2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputAssistant2' from JSON`,
  );
}

/** @internal */
export const PostApiAlphaResponsesInputUnion3$inboundSchema: z.ZodType<
  PostApiAlphaResponsesInputUnion3,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => InputAssistant2$inboundSchema),
  z.lazy(() => InputFunctionCall2$inboundSchema),
  z.lazy(() => InputFileSearchCall$inboundSchema),
  z.lazy(() => InputImageGenerationCall2$inboundSchema),
  z.lazy(() => InputReasoning$inboundSchema),
  z.lazy(() => InputWebSearchCall$inboundSchema),
]);

/** @internal */
export type PostApiAlphaResponsesInputUnion3$Outbound =
  | InputAssistant2$Outbound
  | InputFunctionCall2$Outbound
  | InputFileSearchCall$Outbound
  | InputImageGenerationCall2$Outbound
  | InputReasoning$Outbound
  | InputWebSearchCall$Outbound;

/** @internal */
export const PostApiAlphaResponsesInputUnion3$outboundSchema: z.ZodType<
  PostApiAlphaResponsesInputUnion3$Outbound,
  z.ZodTypeDef,
  PostApiAlphaResponsesInputUnion3
> = z.union([
  z.lazy(() => InputAssistant2$outboundSchema),
  z.lazy(() => InputFunctionCall2$outboundSchema),
  z.lazy(() => InputFileSearchCall$outboundSchema),
  z.lazy(() => InputImageGenerationCall2$outboundSchema),
  z.lazy(() => InputReasoning$outboundSchema),
  z.lazy(() => InputWebSearchCall$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiAlphaResponsesInputUnion3$ {
  /** @deprecated use `PostApiAlphaResponsesInputUnion3$inboundSchema` instead. */
  export const inboundSchema = PostApiAlphaResponsesInputUnion3$inboundSchema;
  /** @deprecated use `PostApiAlphaResponsesInputUnion3$outboundSchema` instead. */
  export const outboundSchema = PostApiAlphaResponsesInputUnion3$outboundSchema;
  /** @deprecated use `PostApiAlphaResponsesInputUnion3$Outbound` instead. */
  export type Outbound = PostApiAlphaResponsesInputUnion3$Outbound;
}

export function postApiAlphaResponsesInputUnion3ToJSON(
  postApiAlphaResponsesInputUnion3: PostApiAlphaResponsesInputUnion3,
): string {
  return JSON.stringify(
    PostApiAlphaResponsesInputUnion3$outboundSchema.parse(
      postApiAlphaResponsesInputUnion3,
    ),
  );
}

export function postApiAlphaResponsesInputUnion3FromJSON(
  jsonString: string,
): SafeParseResult<PostApiAlphaResponsesInputUnion3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostApiAlphaResponsesInputUnion3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostApiAlphaResponsesInputUnion3' from JSON`,
  );
}

/** @internal */
export const InputTypeMessage3$inboundSchema: z.ZodNativeEnum<
  typeof InputTypeMessage3
> = z.nativeEnum(InputTypeMessage3);

/** @internal */
export const InputTypeMessage3$outboundSchema: z.ZodNativeEnum<
  typeof InputTypeMessage3
> = InputTypeMessage3$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputTypeMessage3$ {
  /** @deprecated use `InputTypeMessage3$inboundSchema` instead. */
  export const inboundSchema = InputTypeMessage3$inboundSchema;
  /** @deprecated use `InputTypeMessage3$outboundSchema` instead. */
  export const outboundSchema = InputTypeMessage3$outboundSchema;
}

/** @internal */
export const StatusInProgressRequest1$inboundSchema: z.ZodNativeEnum<
  typeof StatusInProgressRequest1
> = z.nativeEnum(StatusInProgressRequest1);

/** @internal */
export const StatusInProgressRequest1$outboundSchema: z.ZodNativeEnum<
  typeof StatusInProgressRequest1
> = StatusInProgressRequest1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StatusInProgressRequest1$ {
  /** @deprecated use `StatusInProgressRequest1$inboundSchema` instead. */
  export const inboundSchema = StatusInProgressRequest1$inboundSchema;
  /** @deprecated use `StatusInProgressRequest1$outboundSchema` instead. */
  export const outboundSchema = StatusInProgressRequest1$outboundSchema;
}

/** @internal */
export const StatusIncompleteRequest1$inboundSchema: z.ZodNativeEnum<
  typeof StatusIncompleteRequest1
> = z.nativeEnum(StatusIncompleteRequest1);

/** @internal */
export const StatusIncompleteRequest1$outboundSchema: z.ZodNativeEnum<
  typeof StatusIncompleteRequest1
> = StatusIncompleteRequest1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StatusIncompleteRequest1$ {
  /** @deprecated use `StatusIncompleteRequest1$inboundSchema` instead. */
  export const inboundSchema = StatusIncompleteRequest1$inboundSchema;
  /** @deprecated use `StatusIncompleteRequest1$outboundSchema` instead. */
  export const outboundSchema = StatusIncompleteRequest1$outboundSchema;
}

/** @internal */
export const StatusCompletedRequest1$inboundSchema: z.ZodNativeEnum<
  typeof StatusCompletedRequest1
> = z.nativeEnum(StatusCompletedRequest1);

/** @internal */
export const StatusCompletedRequest1$outboundSchema: z.ZodNativeEnum<
  typeof StatusCompletedRequest1
> = StatusCompletedRequest1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StatusCompletedRequest1$ {
  /** @deprecated use `StatusCompletedRequest1$inboundSchema` instead. */
  export const inboundSchema = StatusCompletedRequest1$inboundSchema;
  /** @deprecated use `StatusCompletedRequest1$outboundSchema` instead. */
  export const outboundSchema = StatusCompletedRequest1$outboundSchema;
}

/** @internal */
export const StatusRequestUnion1$inboundSchema: z.ZodType<
  StatusRequestUnion1,
  z.ZodTypeDef,
  unknown
> = z.union([
  StatusCompletedRequest1$inboundSchema,
  StatusIncompleteRequest1$inboundSchema,
  StatusInProgressRequest1$inboundSchema,
]);

/** @internal */
export type StatusRequestUnion1$Outbound = string | string | string;

/** @internal */
export const StatusRequestUnion1$outboundSchema: z.ZodType<
  StatusRequestUnion1$Outbound,
  z.ZodTypeDef,
  StatusRequestUnion1
> = z.union([
  StatusCompletedRequest1$outboundSchema,
  StatusIncompleteRequest1$outboundSchema,
  StatusInProgressRequest1$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StatusRequestUnion1$ {
  /** @deprecated use `StatusRequestUnion1$inboundSchema` instead. */
  export const inboundSchema = StatusRequestUnion1$inboundSchema;
  /** @deprecated use `StatusRequestUnion1$outboundSchema` instead. */
  export const outboundSchema = StatusRequestUnion1$outboundSchema;
  /** @deprecated use `StatusRequestUnion1$Outbound` instead. */
  export type Outbound = StatusRequestUnion1$Outbound;
}

export function statusRequestUnion1ToJSON(
  statusRequestUnion1: StatusRequestUnion1,
): string {
  return JSON.stringify(
    StatusRequestUnion1$outboundSchema.parse(statusRequestUnion1),
  );
}

export function statusRequestUnion1FromJSON(
  jsonString: string,
): SafeParseResult<StatusRequestUnion1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StatusRequestUnion1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StatusRequestUnion1' from JSON`,
  );
}

/** @internal */
export const RoleAssistantRequest2$inboundSchema: z.ZodNativeEnum<
  typeof RoleAssistantRequest2
> = z.nativeEnum(RoleAssistantRequest2);

/** @internal */
export const RoleAssistantRequest2$outboundSchema: z.ZodNativeEnum<
  typeof RoleAssistantRequest2
> = RoleAssistantRequest2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RoleAssistantRequest2$ {
  /** @deprecated use `RoleAssistantRequest2$inboundSchema` instead. */
  export const inboundSchema = RoleAssistantRequest2$inboundSchema;
  /** @deprecated use `RoleAssistantRequest2$outboundSchema` instead. */
  export const outboundSchema = RoleAssistantRequest2$outboundSchema;
}

/** @internal */
export const InputTypeRefusal1$inboundSchema: z.ZodNativeEnum<
  typeof InputTypeRefusal1
> = z.nativeEnum(InputTypeRefusal1);

/** @internal */
export const InputTypeRefusal1$outboundSchema: z.ZodNativeEnum<
  typeof InputTypeRefusal1
> = InputTypeRefusal1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputTypeRefusal1$ {
  /** @deprecated use `InputTypeRefusal1$inboundSchema` instead. */
  export const inboundSchema = InputTypeRefusal1$inboundSchema;
  /** @deprecated use `InputTypeRefusal1$outboundSchema` instead. */
  export const outboundSchema = InputTypeRefusal1$outboundSchema;
}

/** @internal */
export const ContentRefusalRequest1$inboundSchema: z.ZodType<
  ContentRefusalRequest1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: InputTypeRefusal1$inboundSchema,
  refusal: z.string(),
});

/** @internal */
export type ContentRefusalRequest1$Outbound = {
  type: string;
  refusal: string;
};

/** @internal */
export const ContentRefusalRequest1$outboundSchema: z.ZodType<
  ContentRefusalRequest1$Outbound,
  z.ZodTypeDef,
  ContentRefusalRequest1
> = z.object({
  type: InputTypeRefusal1$outboundSchema,
  refusal: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContentRefusalRequest1$ {
  /** @deprecated use `ContentRefusalRequest1$inboundSchema` instead. */
  export const inboundSchema = ContentRefusalRequest1$inboundSchema;
  /** @deprecated use `ContentRefusalRequest1$outboundSchema` instead. */
  export const outboundSchema = ContentRefusalRequest1$outboundSchema;
  /** @deprecated use `ContentRefusalRequest1$Outbound` instead. */
  export type Outbound = ContentRefusalRequest1$Outbound;
}

export function contentRefusalRequest1ToJSON(
  contentRefusalRequest1: ContentRefusalRequest1,
): string {
  return JSON.stringify(
    ContentRefusalRequest1$outboundSchema.parse(contentRefusalRequest1),
  );
}

export function contentRefusalRequest1FromJSON(
  jsonString: string,
): SafeParseResult<ContentRefusalRequest1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContentRefusalRequest1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContentRefusalRequest1' from JSON`,
  );
}

/** @internal */
export const InputTypeOutputText1$inboundSchema: z.ZodNativeEnum<
  typeof InputTypeOutputText1
> = z.nativeEnum(InputTypeOutputText1);

/** @internal */
export const InputTypeOutputText1$outboundSchema: z.ZodNativeEnum<
  typeof InputTypeOutputText1
> = InputTypeOutputText1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputTypeOutputText1$ {
  /** @deprecated use `InputTypeOutputText1$inboundSchema` instead. */
  export const inboundSchema = InputTypeOutputText1$inboundSchema;
  /** @deprecated use `InputTypeOutputText1$outboundSchema` instead. */
  export const outboundSchema = InputTypeOutputText1$outboundSchema;
}

/** @internal */
export const InputTypeFilePath1$inboundSchema: z.ZodNativeEnum<
  typeof InputTypeFilePath1
> = z.nativeEnum(InputTypeFilePath1);

/** @internal */
export const InputTypeFilePath1$outboundSchema: z.ZodNativeEnum<
  typeof InputTypeFilePath1
> = InputTypeFilePath1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputTypeFilePath1$ {
  /** @deprecated use `InputTypeFilePath1$inboundSchema` instead. */
  export const inboundSchema = InputTypeFilePath1$inboundSchema;
  /** @deprecated use `InputTypeFilePath1$outboundSchema` instead. */
  export const outboundSchema = InputTypeFilePath1$outboundSchema;
}

/** @internal */
export const AnnotationFilePathRequest1$inboundSchema: z.ZodType<
  AnnotationFilePathRequest1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: InputTypeFilePath1$inboundSchema,
  file_id: z.string(),
  index: z.number(),
}).transform((v) => {
  return remap$(v, {
    "file_id": "fileId",
  });
});

/** @internal */
export type AnnotationFilePathRequest1$Outbound = {
  type: string;
  file_id: string;
  index: number;
};

/** @internal */
export const AnnotationFilePathRequest1$outboundSchema: z.ZodType<
  AnnotationFilePathRequest1$Outbound,
  z.ZodTypeDef,
  AnnotationFilePathRequest1
> = z.object({
  type: InputTypeFilePath1$outboundSchema,
  fileId: z.string(),
  index: z.number(),
}).transform((v) => {
  return remap$(v, {
    fileId: "file_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnnotationFilePathRequest1$ {
  /** @deprecated use `AnnotationFilePathRequest1$inboundSchema` instead. */
  export const inboundSchema = AnnotationFilePathRequest1$inboundSchema;
  /** @deprecated use `AnnotationFilePathRequest1$outboundSchema` instead. */
  export const outboundSchema = AnnotationFilePathRequest1$outboundSchema;
  /** @deprecated use `AnnotationFilePathRequest1$Outbound` instead. */
  export type Outbound = AnnotationFilePathRequest1$Outbound;
}

export function annotationFilePathRequest1ToJSON(
  annotationFilePathRequest1: AnnotationFilePathRequest1,
): string {
  return JSON.stringify(
    AnnotationFilePathRequest1$outboundSchema.parse(annotationFilePathRequest1),
  );
}

export function annotationFilePathRequest1FromJSON(
  jsonString: string,
): SafeParseResult<AnnotationFilePathRequest1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnnotationFilePathRequest1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnnotationFilePathRequest1' from JSON`,
  );
}

/** @internal */
export const InputTypeURLCitation1$inboundSchema: z.ZodNativeEnum<
  typeof InputTypeURLCitation1
> = z.nativeEnum(InputTypeURLCitation1);

/** @internal */
export const InputTypeURLCitation1$outboundSchema: z.ZodNativeEnum<
  typeof InputTypeURLCitation1
> = InputTypeURLCitation1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputTypeURLCitation1$ {
  /** @deprecated use `InputTypeURLCitation1$inboundSchema` instead. */
  export const inboundSchema = InputTypeURLCitation1$inboundSchema;
  /** @deprecated use `InputTypeURLCitation1$outboundSchema` instead. */
  export const outboundSchema = InputTypeURLCitation1$outboundSchema;
}

/** @internal */
export const AnnotationURLCitationRequest1$inboundSchema: z.ZodType<
  AnnotationURLCitationRequest1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: InputTypeURLCitation1$inboundSchema,
  end_index: z.number(),
  start_index: z.number(),
  title: z.string(),
  url: z.string(),
}).transform((v) => {
  return remap$(v, {
    "end_index": "endIndex",
    "start_index": "startIndex",
  });
});

/** @internal */
export type AnnotationURLCitationRequest1$Outbound = {
  type: string;
  end_index: number;
  start_index: number;
  title: string;
  url: string;
};

/** @internal */
export const AnnotationURLCitationRequest1$outboundSchema: z.ZodType<
  AnnotationURLCitationRequest1$Outbound,
  z.ZodTypeDef,
  AnnotationURLCitationRequest1
> = z.object({
  type: InputTypeURLCitation1$outboundSchema,
  endIndex: z.number(),
  startIndex: z.number(),
  title: z.string(),
  url: z.string(),
}).transform((v) => {
  return remap$(v, {
    endIndex: "end_index",
    startIndex: "start_index",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnnotationURLCitationRequest1$ {
  /** @deprecated use `AnnotationURLCitationRequest1$inboundSchema` instead. */
  export const inboundSchema = AnnotationURLCitationRequest1$inboundSchema;
  /** @deprecated use `AnnotationURLCitationRequest1$outboundSchema` instead. */
  export const outboundSchema = AnnotationURLCitationRequest1$outboundSchema;
  /** @deprecated use `AnnotationURLCitationRequest1$Outbound` instead. */
  export type Outbound = AnnotationURLCitationRequest1$Outbound;
}

export function annotationURLCitationRequest1ToJSON(
  annotationURLCitationRequest1: AnnotationURLCitationRequest1,
): string {
  return JSON.stringify(
    AnnotationURLCitationRequest1$outboundSchema.parse(
      annotationURLCitationRequest1,
    ),
  );
}

export function annotationURLCitationRequest1FromJSON(
  jsonString: string,
): SafeParseResult<AnnotationURLCitationRequest1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnnotationURLCitationRequest1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnnotationURLCitationRequest1' from JSON`,
  );
}

/** @internal */
export const InputTypeFileCitation1$inboundSchema: z.ZodNativeEnum<
  typeof InputTypeFileCitation1
> = z.nativeEnum(InputTypeFileCitation1);

/** @internal */
export const InputTypeFileCitation1$outboundSchema: z.ZodNativeEnum<
  typeof InputTypeFileCitation1
> = InputTypeFileCitation1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputTypeFileCitation1$ {
  /** @deprecated use `InputTypeFileCitation1$inboundSchema` instead. */
  export const inboundSchema = InputTypeFileCitation1$inboundSchema;
  /** @deprecated use `InputTypeFileCitation1$outboundSchema` instead. */
  export const outboundSchema = InputTypeFileCitation1$outboundSchema;
}

/** @internal */
export const AnnotationFileCitationRequest1$inboundSchema: z.ZodType<
  AnnotationFileCitationRequest1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: InputTypeFileCitation1$inboundSchema,
  file_id: z.string(),
  filename: z.string(),
  index: z.number(),
}).transform((v) => {
  return remap$(v, {
    "file_id": "fileId",
  });
});

/** @internal */
export type AnnotationFileCitationRequest1$Outbound = {
  type: string;
  file_id: string;
  filename: string;
  index: number;
};

/** @internal */
export const AnnotationFileCitationRequest1$outboundSchema: z.ZodType<
  AnnotationFileCitationRequest1$Outbound,
  z.ZodTypeDef,
  AnnotationFileCitationRequest1
> = z.object({
  type: InputTypeFileCitation1$outboundSchema,
  fileId: z.string(),
  filename: z.string(),
  index: z.number(),
}).transform((v) => {
  return remap$(v, {
    fileId: "file_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnnotationFileCitationRequest1$ {
  /** @deprecated use `AnnotationFileCitationRequest1$inboundSchema` instead. */
  export const inboundSchema = AnnotationFileCitationRequest1$inboundSchema;
  /** @deprecated use `AnnotationFileCitationRequest1$outboundSchema` instead. */
  export const outboundSchema = AnnotationFileCitationRequest1$outboundSchema;
  /** @deprecated use `AnnotationFileCitationRequest1$Outbound` instead. */
  export type Outbound = AnnotationFileCitationRequest1$Outbound;
}

export function annotationFileCitationRequest1ToJSON(
  annotationFileCitationRequest1: AnnotationFileCitationRequest1,
): string {
  return JSON.stringify(
    AnnotationFileCitationRequest1$outboundSchema.parse(
      annotationFileCitationRequest1,
    ),
  );
}

export function annotationFileCitationRequest1FromJSON(
  jsonString: string,
): SafeParseResult<AnnotationFileCitationRequest1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnnotationFileCitationRequest1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnnotationFileCitationRequest1' from JSON`,
  );
}

/** @internal */
export const AnnotationRequestUnion1$inboundSchema: z.ZodType<
  AnnotationRequestUnion1,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => AnnotationURLCitationRequest1$inboundSchema),
  z.lazy(() => AnnotationFileCitationRequest1$inboundSchema),
  z.lazy(() => AnnotationFilePathRequest1$inboundSchema),
]);

/** @internal */
export type AnnotationRequestUnion1$Outbound =
  | AnnotationURLCitationRequest1$Outbound
  | AnnotationFileCitationRequest1$Outbound
  | AnnotationFilePathRequest1$Outbound;

/** @internal */
export const AnnotationRequestUnion1$outboundSchema: z.ZodType<
  AnnotationRequestUnion1$Outbound,
  z.ZodTypeDef,
  AnnotationRequestUnion1
> = z.union([
  z.lazy(() => AnnotationURLCitationRequest1$outboundSchema),
  z.lazy(() => AnnotationFileCitationRequest1$outboundSchema),
  z.lazy(() => AnnotationFilePathRequest1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnnotationRequestUnion1$ {
  /** @deprecated use `AnnotationRequestUnion1$inboundSchema` instead. */
  export const inboundSchema = AnnotationRequestUnion1$inboundSchema;
  /** @deprecated use `AnnotationRequestUnion1$outboundSchema` instead. */
  export const outboundSchema = AnnotationRequestUnion1$outboundSchema;
  /** @deprecated use `AnnotationRequestUnion1$Outbound` instead. */
  export type Outbound = AnnotationRequestUnion1$Outbound;
}

export function annotationRequestUnion1ToJSON(
  annotationRequestUnion1: AnnotationRequestUnion1,
): string {
  return JSON.stringify(
    AnnotationRequestUnion1$outboundSchema.parse(annotationRequestUnion1),
  );
}

export function annotationRequestUnion1FromJSON(
  jsonString: string,
): SafeParseResult<AnnotationRequestUnion1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnnotationRequestUnion1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnnotationRequestUnion1' from JSON`,
  );
}

/** @internal */
export const ContentOutputTextRequest1$inboundSchema: z.ZodType<
  ContentOutputTextRequest1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: InputTypeOutputText1$inboundSchema,
  text: z.string(),
  annotations: z.array(
    z.union([
      z.lazy(() => AnnotationURLCitationRequest1$inboundSchema),
      z.lazy(() => AnnotationFileCitationRequest1$inboundSchema),
      z.lazy(() => AnnotationFilePathRequest1$inboundSchema),
    ]),
  ),
});

/** @internal */
export type ContentOutputTextRequest1$Outbound = {
  type: string;
  text: string;
  annotations: Array<
    | AnnotationURLCitationRequest1$Outbound
    | AnnotationFileCitationRequest1$Outbound
    | AnnotationFilePathRequest1$Outbound
  >;
};

/** @internal */
export const ContentOutputTextRequest1$outboundSchema: z.ZodType<
  ContentOutputTextRequest1$Outbound,
  z.ZodTypeDef,
  ContentOutputTextRequest1
> = z.object({
  type: InputTypeOutputText1$outboundSchema,
  text: z.string(),
  annotations: z.array(
    z.union([
      z.lazy(() => AnnotationURLCitationRequest1$outboundSchema),
      z.lazy(() => AnnotationFileCitationRequest1$outboundSchema),
      z.lazy(() => AnnotationFilePathRequest1$outboundSchema),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContentOutputTextRequest1$ {
  /** @deprecated use `ContentOutputTextRequest1$inboundSchema` instead. */
  export const inboundSchema = ContentOutputTextRequest1$inboundSchema;
  /** @deprecated use `ContentOutputTextRequest1$outboundSchema` instead. */
  export const outboundSchema = ContentOutputTextRequest1$outboundSchema;
  /** @deprecated use `ContentOutputTextRequest1$Outbound` instead. */
  export type Outbound = ContentOutputTextRequest1$Outbound;
}

export function contentOutputTextRequest1ToJSON(
  contentOutputTextRequest1: ContentOutputTextRequest1,
): string {
  return JSON.stringify(
    ContentOutputTextRequest1$outboundSchema.parse(contentOutputTextRequest1),
  );
}

export function contentOutputTextRequest1FromJSON(
  jsonString: string,
): SafeParseResult<ContentOutputTextRequest1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContentOutputTextRequest1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContentOutputTextRequest1' from JSON`,
  );
}

/** @internal */
export const ContentRequestUnion4$inboundSchema: z.ZodType<
  ContentRequestUnion4,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ContentOutputTextRequest1$inboundSchema),
  z.lazy(() => ContentRefusalRequest1$inboundSchema),
]);

/** @internal */
export type ContentRequestUnion4$Outbound =
  | ContentOutputTextRequest1$Outbound
  | ContentRefusalRequest1$Outbound;

/** @internal */
export const ContentRequestUnion4$outboundSchema: z.ZodType<
  ContentRequestUnion4$Outbound,
  z.ZodTypeDef,
  ContentRequestUnion4
> = z.union([
  z.lazy(() => ContentOutputTextRequest1$outboundSchema),
  z.lazy(() => ContentRefusalRequest1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContentRequestUnion4$ {
  /** @deprecated use `ContentRequestUnion4$inboundSchema` instead. */
  export const inboundSchema = ContentRequestUnion4$inboundSchema;
  /** @deprecated use `ContentRequestUnion4$outboundSchema` instead. */
  export const outboundSchema = ContentRequestUnion4$outboundSchema;
  /** @deprecated use `ContentRequestUnion4$Outbound` instead. */
  export type Outbound = ContentRequestUnion4$Outbound;
}

export function contentRequestUnion4ToJSON(
  contentRequestUnion4: ContentRequestUnion4,
): string {
  return JSON.stringify(
    ContentRequestUnion4$outboundSchema.parse(contentRequestUnion4),
  );
}

export function contentRequestUnion4FromJSON(
  jsonString: string,
): SafeParseResult<ContentRequestUnion4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContentRequestUnion4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContentRequestUnion4' from JSON`,
  );
}

/** @internal */
export const InputAssistant1$inboundSchema: z.ZodType<
  InputAssistant1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: InputTypeMessage3$inboundSchema,
  id: z.string(),
  status: z.union([
    StatusCompletedRequest1$inboundSchema,
    StatusIncompleteRequest1$inboundSchema,
    StatusInProgressRequest1$inboundSchema,
  ]),
  role: RoleAssistantRequest2$inboundSchema,
  content: z.array(
    z.union([
      z.lazy(() => ContentOutputTextRequest1$inboundSchema),
      z.lazy(() => ContentRefusalRequest1$inboundSchema),
    ]),
  ),
});

/** @internal */
export type InputAssistant1$Outbound = {
  type: string;
  id: string;
  status: string | string | string;
  role: string;
  content: Array<
    ContentOutputTextRequest1$Outbound | ContentRefusalRequest1$Outbound
  >;
};

/** @internal */
export const InputAssistant1$outboundSchema: z.ZodType<
  InputAssistant1$Outbound,
  z.ZodTypeDef,
  InputAssistant1
> = z.object({
  type: InputTypeMessage3$outboundSchema,
  id: z.string(),
  status: z.union([
    StatusCompletedRequest1$outboundSchema,
    StatusIncompleteRequest1$outboundSchema,
    StatusInProgressRequest1$outboundSchema,
  ]),
  role: RoleAssistantRequest2$outboundSchema,
  content: z.array(
    z.union([
      z.lazy(() => ContentOutputTextRequest1$outboundSchema),
      z.lazy(() => ContentRefusalRequest1$outboundSchema),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputAssistant1$ {
  /** @deprecated use `InputAssistant1$inboundSchema` instead. */
  export const inboundSchema = InputAssistant1$inboundSchema;
  /** @deprecated use `InputAssistant1$outboundSchema` instead. */
  export const outboundSchema = InputAssistant1$outboundSchema;
  /** @deprecated use `InputAssistant1$Outbound` instead. */
  export type Outbound = InputAssistant1$Outbound;
}

export function inputAssistant1ToJSON(
  inputAssistant1: InputAssistant1,
): string {
  return JSON.stringify(InputAssistant1$outboundSchema.parse(inputAssistant1));
}

export function inputAssistant1FromJSON(
  jsonString: string,
): SafeParseResult<InputAssistant1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputAssistant1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputAssistant1' from JSON`,
  );
}

/** @internal */
export const InputTypeImageGenerationCall1$inboundSchema: z.ZodNativeEnum<
  typeof InputTypeImageGenerationCall1
> = z.nativeEnum(InputTypeImageGenerationCall1);

/** @internal */
export const InputTypeImageGenerationCall1$outboundSchema: z.ZodNativeEnum<
  typeof InputTypeImageGenerationCall1
> = InputTypeImageGenerationCall1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputTypeImageGenerationCall1$ {
  /** @deprecated use `InputTypeImageGenerationCall1$inboundSchema` instead. */
  export const inboundSchema = InputTypeImageGenerationCall1$inboundSchema;
  /** @deprecated use `InputTypeImageGenerationCall1$outboundSchema` instead. */
  export const outboundSchema = InputTypeImageGenerationCall1$outboundSchema;
}

/** @internal */
export const StatusRequestEnum3$inboundSchema: z.ZodNativeEnum<
  typeof StatusRequestEnum3
> = z.nativeEnum(StatusRequestEnum3);

/** @internal */
export const StatusRequestEnum3$outboundSchema: z.ZodNativeEnum<
  typeof StatusRequestEnum3
> = StatusRequestEnum3$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StatusRequestEnum3$ {
  /** @deprecated use `StatusRequestEnum3$inboundSchema` instead. */
  export const inboundSchema = StatusRequestEnum3$inboundSchema;
  /** @deprecated use `StatusRequestEnum3$outboundSchema` instead. */
  export const outboundSchema = StatusRequestEnum3$outboundSchema;
}

/** @internal */
export const InputImageGenerationCall1$inboundSchema: z.ZodType<
  InputImageGenerationCall1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: InputTypeImageGenerationCall1$inboundSchema,
  id: z.string(),
  result: z.nullable(z.string()),
  status: StatusRequestEnum3$inboundSchema,
});

/** @internal */
export type InputImageGenerationCall1$Outbound = {
  type: string;
  id: string;
  result: string | null;
  status: string;
};

/** @internal */
export const InputImageGenerationCall1$outboundSchema: z.ZodType<
  InputImageGenerationCall1$Outbound,
  z.ZodTypeDef,
  InputImageGenerationCall1
> = z.object({
  type: InputTypeImageGenerationCall1$outboundSchema,
  id: z.string(),
  result: z.nullable(z.string()),
  status: StatusRequestEnum3$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputImageGenerationCall1$ {
  /** @deprecated use `InputImageGenerationCall1$inboundSchema` instead. */
  export const inboundSchema = InputImageGenerationCall1$inboundSchema;
  /** @deprecated use `InputImageGenerationCall1$outboundSchema` instead. */
  export const outboundSchema = InputImageGenerationCall1$outboundSchema;
  /** @deprecated use `InputImageGenerationCall1$Outbound` instead. */
  export type Outbound = InputImageGenerationCall1$Outbound;
}

export function inputImageGenerationCall1ToJSON(
  inputImageGenerationCall1: InputImageGenerationCall1,
): string {
  return JSON.stringify(
    InputImageGenerationCall1$outboundSchema.parse(inputImageGenerationCall1),
  );
}

export function inputImageGenerationCall1FromJSON(
  jsonString: string,
): SafeParseResult<InputImageGenerationCall1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputImageGenerationCall1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputImageGenerationCall1' from JSON`,
  );
}

/** @internal */
export const InputTypeFunctionCallOutput$inboundSchema: z.ZodNativeEnum<
  typeof InputTypeFunctionCallOutput
> = z.nativeEnum(InputTypeFunctionCallOutput);

/** @internal */
export const InputTypeFunctionCallOutput$outboundSchema: z.ZodNativeEnum<
  typeof InputTypeFunctionCallOutput
> = InputTypeFunctionCallOutput$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputTypeFunctionCallOutput$ {
  /** @deprecated use `InputTypeFunctionCallOutput$inboundSchema` instead. */
  export const inboundSchema = InputTypeFunctionCallOutput$inboundSchema;
  /** @deprecated use `InputTypeFunctionCallOutput$outboundSchema` instead. */
  export const outboundSchema = InputTypeFunctionCallOutput$outboundSchema;
}

/** @internal */
export const StatusRequestEnum2$inboundSchema: z.ZodNativeEnum<
  typeof StatusRequestEnum2
> = z.nativeEnum(StatusRequestEnum2);

/** @internal */
export const StatusRequestEnum2$outboundSchema: z.ZodNativeEnum<
  typeof StatusRequestEnum2
> = StatusRequestEnum2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StatusRequestEnum2$ {
  /** @deprecated use `StatusRequestEnum2$inboundSchema` instead. */
  export const inboundSchema = StatusRequestEnum2$inboundSchema;
  /** @deprecated use `StatusRequestEnum2$outboundSchema` instead. */
  export const outboundSchema = StatusRequestEnum2$outboundSchema;
}

/** @internal */
export const InputFunctionCallOutput$inboundSchema: z.ZodType<
  InputFunctionCallOutput,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: InputTypeFunctionCallOutput$inboundSchema,
  id: z.string(),
  call_id: z.string(),
  output: z.string(),
  status: StatusRequestEnum2$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "call_id": "callId",
  });
});

/** @internal */
export type InputFunctionCallOutput$Outbound = {
  type: string;
  id: string;
  call_id: string;
  output: string;
  status?: string | undefined;
};

/** @internal */
export const InputFunctionCallOutput$outboundSchema: z.ZodType<
  InputFunctionCallOutput$Outbound,
  z.ZodTypeDef,
  InputFunctionCallOutput
> = z.object({
  type: InputTypeFunctionCallOutput$outboundSchema,
  id: z.string(),
  callId: z.string(),
  output: z.string(),
  status: StatusRequestEnum2$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    callId: "call_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputFunctionCallOutput$ {
  /** @deprecated use `InputFunctionCallOutput$inboundSchema` instead. */
  export const inboundSchema = InputFunctionCallOutput$inboundSchema;
  /** @deprecated use `InputFunctionCallOutput$outboundSchema` instead. */
  export const outboundSchema = InputFunctionCallOutput$outboundSchema;
  /** @deprecated use `InputFunctionCallOutput$Outbound` instead. */
  export type Outbound = InputFunctionCallOutput$Outbound;
}

export function inputFunctionCallOutputToJSON(
  inputFunctionCallOutput: InputFunctionCallOutput,
): string {
  return JSON.stringify(
    InputFunctionCallOutput$outboundSchema.parse(inputFunctionCallOutput),
  );
}

export function inputFunctionCallOutputFromJSON(
  jsonString: string,
): SafeParseResult<InputFunctionCallOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputFunctionCallOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputFunctionCallOutput' from JSON`,
  );
}

/** @internal */
export const InputTypeFunctionCall1$inboundSchema: z.ZodNativeEnum<
  typeof InputTypeFunctionCall1
> = z.nativeEnum(InputTypeFunctionCall1);

/** @internal */
export const InputTypeFunctionCall1$outboundSchema: z.ZodNativeEnum<
  typeof InputTypeFunctionCall1
> = InputTypeFunctionCall1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputTypeFunctionCall1$ {
  /** @deprecated use `InputTypeFunctionCall1$inboundSchema` instead. */
  export const inboundSchema = InputTypeFunctionCall1$inboundSchema;
  /** @deprecated use `InputTypeFunctionCall1$outboundSchema` instead. */
  export const outboundSchema = InputTypeFunctionCall1$outboundSchema;
}

/** @internal */
export const StatusRequestEnum1$inboundSchema: z.ZodNativeEnum<
  typeof StatusRequestEnum1
> = z.nativeEnum(StatusRequestEnum1);

/** @internal */
export const StatusRequestEnum1$outboundSchema: z.ZodNativeEnum<
  typeof StatusRequestEnum1
> = StatusRequestEnum1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StatusRequestEnum1$ {
  /** @deprecated use `StatusRequestEnum1$inboundSchema` instead. */
  export const inboundSchema = StatusRequestEnum1$inboundSchema;
  /** @deprecated use `StatusRequestEnum1$outboundSchema` instead. */
  export const outboundSchema = StatusRequestEnum1$outboundSchema;
}

/** @internal */
export const InputFunctionCall1$inboundSchema: z.ZodType<
  InputFunctionCall1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: InputTypeFunctionCall1$inboundSchema,
  call_id: z.string(),
  name: z.string(),
  arguments: z.string(),
  id: z.string().optional(),
  status: StatusRequestEnum1$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "call_id": "callId",
  });
});

/** @internal */
export type InputFunctionCall1$Outbound = {
  type: string;
  call_id: string;
  name: string;
  arguments: string;
  id?: string | undefined;
  status?: string | undefined;
};

/** @internal */
export const InputFunctionCall1$outboundSchema: z.ZodType<
  InputFunctionCall1$Outbound,
  z.ZodTypeDef,
  InputFunctionCall1
> = z.object({
  type: InputTypeFunctionCall1$outboundSchema,
  callId: z.string(),
  name: z.string(),
  arguments: z.string(),
  id: z.string().optional(),
  status: StatusRequestEnum1$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    callId: "call_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputFunctionCall1$ {
  /** @deprecated use `InputFunctionCall1$inboundSchema` instead. */
  export const inboundSchema = InputFunctionCall1$inboundSchema;
  /** @deprecated use `InputFunctionCall1$outboundSchema` instead. */
  export const outboundSchema = InputFunctionCall1$outboundSchema;
  /** @deprecated use `InputFunctionCall1$Outbound` instead. */
  export type Outbound = InputFunctionCall1$Outbound;
}

export function inputFunctionCall1ToJSON(
  inputFunctionCall1: InputFunctionCall1,
): string {
  return JSON.stringify(
    InputFunctionCall1$outboundSchema.parse(inputFunctionCall1),
  );
}

export function inputFunctionCall1FromJSON(
  jsonString: string,
): SafeParseResult<InputFunctionCall1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputFunctionCall1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputFunctionCall1' from JSON`,
  );
}

/** @internal */
export const InputTypeMessage2$inboundSchema: z.ZodNativeEnum<
  typeof InputTypeMessage2
> = z.nativeEnum(InputTypeMessage2);

/** @internal */
export const InputTypeMessage2$outboundSchema: z.ZodNativeEnum<
  typeof InputTypeMessage2
> = InputTypeMessage2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputTypeMessage2$ {
  /** @deprecated use `InputTypeMessage2$inboundSchema` instead. */
  export const inboundSchema = InputTypeMessage2$inboundSchema;
  /** @deprecated use `InputTypeMessage2$outboundSchema` instead. */
  export const outboundSchema = InputTypeMessage2$outboundSchema;
}

/** @internal */
export const RoleDeveloperRequest2$inboundSchema: z.ZodNativeEnum<
  typeof RoleDeveloperRequest2
> = z.nativeEnum(RoleDeveloperRequest2);

/** @internal */
export const RoleDeveloperRequest2$outboundSchema: z.ZodNativeEnum<
  typeof RoleDeveloperRequest2
> = RoleDeveloperRequest2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RoleDeveloperRequest2$ {
  /** @deprecated use `RoleDeveloperRequest2$inboundSchema` instead. */
  export const inboundSchema = RoleDeveloperRequest2$inboundSchema;
  /** @deprecated use `RoleDeveloperRequest2$outboundSchema` instead. */
  export const outboundSchema = RoleDeveloperRequest2$outboundSchema;
}

/** @internal */
export const RoleSystemRequest2$inboundSchema: z.ZodNativeEnum<
  typeof RoleSystemRequest2
> = z.nativeEnum(RoleSystemRequest2);

/** @internal */
export const RoleSystemRequest2$outboundSchema: z.ZodNativeEnum<
  typeof RoleSystemRequest2
> = RoleSystemRequest2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RoleSystemRequest2$ {
  /** @deprecated use `RoleSystemRequest2$inboundSchema` instead. */
  export const inboundSchema = RoleSystemRequest2$inboundSchema;
  /** @deprecated use `RoleSystemRequest2$outboundSchema` instead. */
  export const outboundSchema = RoleSystemRequest2$outboundSchema;
}

/** @internal */
export const RoleUserRequest2$inboundSchema: z.ZodNativeEnum<
  typeof RoleUserRequest2
> = z.nativeEnum(RoleUserRequest2);

/** @internal */
export const RoleUserRequest2$outboundSchema: z.ZodNativeEnum<
  typeof RoleUserRequest2
> = RoleUserRequest2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RoleUserRequest2$ {
  /** @deprecated use `RoleUserRequest2$inboundSchema` instead. */
  export const inboundSchema = RoleUserRequest2$inboundSchema;
  /** @deprecated use `RoleUserRequest2$outboundSchema` instead. */
  export const outboundSchema = RoleUserRequest2$outboundSchema;
}

/** @internal */
export const RoleRequestUnion2$inboundSchema: z.ZodType<
  RoleRequestUnion2,
  z.ZodTypeDef,
  unknown
> = z.union([
  RoleUserRequest2$inboundSchema,
  RoleSystemRequest2$inboundSchema,
  RoleDeveloperRequest2$inboundSchema,
]);

/** @internal */
export type RoleRequestUnion2$Outbound = string | string | string;

/** @internal */
export const RoleRequestUnion2$outboundSchema: z.ZodType<
  RoleRequestUnion2$Outbound,
  z.ZodTypeDef,
  RoleRequestUnion2
> = z.union([
  RoleUserRequest2$outboundSchema,
  RoleSystemRequest2$outboundSchema,
  RoleDeveloperRequest2$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RoleRequestUnion2$ {
  /** @deprecated use `RoleRequestUnion2$inboundSchema` instead. */
  export const inboundSchema = RoleRequestUnion2$inboundSchema;
  /** @deprecated use `RoleRequestUnion2$outboundSchema` instead. */
  export const outboundSchema = RoleRequestUnion2$outboundSchema;
  /** @deprecated use `RoleRequestUnion2$Outbound` instead. */
  export type Outbound = RoleRequestUnion2$Outbound;
}

export function roleRequestUnion2ToJSON(
  roleRequestUnion2: RoleRequestUnion2,
): string {
  return JSON.stringify(
    RoleRequestUnion2$outboundSchema.parse(roleRequestUnion2),
  );
}

export function roleRequestUnion2FromJSON(
  jsonString: string,
): SafeParseResult<RoleRequestUnion2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RoleRequestUnion2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RoleRequestUnion2' from JSON`,
  );
}

/** @internal */
export const InputTypeInputFile2$inboundSchema: z.ZodNativeEnum<
  typeof InputTypeInputFile2
> = z.nativeEnum(InputTypeInputFile2);

/** @internal */
export const InputTypeInputFile2$outboundSchema: z.ZodNativeEnum<
  typeof InputTypeInputFile2
> = InputTypeInputFile2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputTypeInputFile2$ {
  /** @deprecated use `InputTypeInputFile2$inboundSchema` instead. */
  export const inboundSchema = InputTypeInputFile2$inboundSchema;
  /** @deprecated use `InputTypeInputFile2$outboundSchema` instead. */
  export const outboundSchema = InputTypeInputFile2$outboundSchema;
}

/** @internal */
export const ContentInputFileRequest2$inboundSchema: z.ZodType<
  ContentInputFileRequest2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: InputTypeInputFile2$inboundSchema,
  file_id: z.nullable(z.string()).optional(),
  file_data: z.string().optional(),
  filename: z.string().optional(),
  file_url: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "file_id": "fileId",
    "file_data": "fileData",
    "file_url": "fileUrl",
  });
});

/** @internal */
export type ContentInputFileRequest2$Outbound = {
  type: string;
  file_id?: string | null | undefined;
  file_data?: string | undefined;
  filename?: string | undefined;
  file_url?: string | undefined;
};

/** @internal */
export const ContentInputFileRequest2$outboundSchema: z.ZodType<
  ContentInputFileRequest2$Outbound,
  z.ZodTypeDef,
  ContentInputFileRequest2
> = z.object({
  type: InputTypeInputFile2$outboundSchema,
  fileId: z.nullable(z.string()).optional(),
  fileData: z.string().optional(),
  filename: z.string().optional(),
  fileUrl: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    fileId: "file_id",
    fileData: "file_data",
    fileUrl: "file_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContentInputFileRequest2$ {
  /** @deprecated use `ContentInputFileRequest2$inboundSchema` instead. */
  export const inboundSchema = ContentInputFileRequest2$inboundSchema;
  /** @deprecated use `ContentInputFileRequest2$outboundSchema` instead. */
  export const outboundSchema = ContentInputFileRequest2$outboundSchema;
  /** @deprecated use `ContentInputFileRequest2$Outbound` instead. */
  export type Outbound = ContentInputFileRequest2$Outbound;
}

export function contentInputFileRequest2ToJSON(
  contentInputFileRequest2: ContentInputFileRequest2,
): string {
  return JSON.stringify(
    ContentInputFileRequest2$outboundSchema.parse(contentInputFileRequest2),
  );
}

export function contentInputFileRequest2FromJSON(
  jsonString: string,
): SafeParseResult<ContentInputFileRequest2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContentInputFileRequest2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContentInputFileRequest2' from JSON`,
  );
}

/** @internal */
export const InputTypeInputImage2$inboundSchema: z.ZodNativeEnum<
  typeof InputTypeInputImage2
> = z.nativeEnum(InputTypeInputImage2);

/** @internal */
export const InputTypeInputImage2$outboundSchema: z.ZodNativeEnum<
  typeof InputTypeInputImage2
> = InputTypeInputImage2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputTypeInputImage2$ {
  /** @deprecated use `InputTypeInputImage2$inboundSchema` instead. */
  export const inboundSchema = InputTypeInputImage2$inboundSchema;
  /** @deprecated use `InputTypeInputImage2$outboundSchema` instead. */
  export const outboundSchema = InputTypeInputImage2$outboundSchema;
}

/** @internal */
export const InputDetail2$inboundSchema: z.ZodNativeEnum<typeof InputDetail2> =
  z.nativeEnum(InputDetail2);

/** @internal */
export const InputDetail2$outboundSchema: z.ZodNativeEnum<typeof InputDetail2> =
  InputDetail2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputDetail2$ {
  /** @deprecated use `InputDetail2$inboundSchema` instead. */
  export const inboundSchema = InputDetail2$inboundSchema;
  /** @deprecated use `InputDetail2$outboundSchema` instead. */
  export const outboundSchema = InputDetail2$outboundSchema;
}

/** @internal */
export const ContentInputImageRequest2$inboundSchema: z.ZodType<
  ContentInputImageRequest2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: InputTypeInputImage2$inboundSchema,
  detail: InputDetail2$inboundSchema,
  image_url: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type ContentInputImageRequest2$Outbound = {
  type: string;
  detail: string;
  image_url?: string | null | undefined;
};

/** @internal */
export const ContentInputImageRequest2$outboundSchema: z.ZodType<
  ContentInputImageRequest2$Outbound,
  z.ZodTypeDef,
  ContentInputImageRequest2
> = z.object({
  type: InputTypeInputImage2$outboundSchema,
  detail: InputDetail2$outboundSchema,
  imageUrl: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContentInputImageRequest2$ {
  /** @deprecated use `ContentInputImageRequest2$inboundSchema` instead. */
  export const inboundSchema = ContentInputImageRequest2$inboundSchema;
  /** @deprecated use `ContentInputImageRequest2$outboundSchema` instead. */
  export const outboundSchema = ContentInputImageRequest2$outboundSchema;
  /** @deprecated use `ContentInputImageRequest2$Outbound` instead. */
  export type Outbound = ContentInputImageRequest2$Outbound;
}

export function contentInputImageRequest2ToJSON(
  contentInputImageRequest2: ContentInputImageRequest2,
): string {
  return JSON.stringify(
    ContentInputImageRequest2$outboundSchema.parse(contentInputImageRequest2),
  );
}

export function contentInputImageRequest2FromJSON(
  jsonString: string,
): SafeParseResult<ContentInputImageRequest2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContentInputImageRequest2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContentInputImageRequest2' from JSON`,
  );
}

/** @internal */
export const InputTypeInputText2$inboundSchema: z.ZodNativeEnum<
  typeof InputTypeInputText2
> = z.nativeEnum(InputTypeInputText2);

/** @internal */
export const InputTypeInputText2$outboundSchema: z.ZodNativeEnum<
  typeof InputTypeInputText2
> = InputTypeInputText2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputTypeInputText2$ {
  /** @deprecated use `InputTypeInputText2$inboundSchema` instead. */
  export const inboundSchema = InputTypeInputText2$inboundSchema;
  /** @deprecated use `InputTypeInputText2$outboundSchema` instead. */
  export const outboundSchema = InputTypeInputText2$outboundSchema;
}

/** @internal */
export const ContentInputTextRequest2$inboundSchema: z.ZodType<
  ContentInputTextRequest2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: InputTypeInputText2$inboundSchema,
  text: z.string(),
});

/** @internal */
export type ContentInputTextRequest2$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const ContentInputTextRequest2$outboundSchema: z.ZodType<
  ContentInputTextRequest2$Outbound,
  z.ZodTypeDef,
  ContentInputTextRequest2
> = z.object({
  type: InputTypeInputText2$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContentInputTextRequest2$ {
  /** @deprecated use `ContentInputTextRequest2$inboundSchema` instead. */
  export const inboundSchema = ContentInputTextRequest2$inboundSchema;
  /** @deprecated use `ContentInputTextRequest2$outboundSchema` instead. */
  export const outboundSchema = ContentInputTextRequest2$outboundSchema;
  /** @deprecated use `ContentInputTextRequest2$Outbound` instead. */
  export type Outbound = ContentInputTextRequest2$Outbound;
}

export function contentInputTextRequest2ToJSON(
  contentInputTextRequest2: ContentInputTextRequest2,
): string {
  return JSON.stringify(
    ContentInputTextRequest2$outboundSchema.parse(contentInputTextRequest2),
  );
}

export function contentInputTextRequest2FromJSON(
  jsonString: string,
): SafeParseResult<ContentInputTextRequest2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContentInputTextRequest2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContentInputTextRequest2' from JSON`,
  );
}

/** @internal */
export const ContentRequestUnion3$inboundSchema: z.ZodType<
  ContentRequestUnion3,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ContentInputTextRequest2$inboundSchema),
  z.lazy(() => ContentInputImageRequest2$inboundSchema),
  z.lazy(() => ContentInputFileRequest2$inboundSchema),
]);

/** @internal */
export type ContentRequestUnion3$Outbound =
  | ContentInputTextRequest2$Outbound
  | ContentInputImageRequest2$Outbound
  | ContentInputFileRequest2$Outbound;

/** @internal */
export const ContentRequestUnion3$outboundSchema: z.ZodType<
  ContentRequestUnion3$Outbound,
  z.ZodTypeDef,
  ContentRequestUnion3
> = z.union([
  z.lazy(() => ContentInputTextRequest2$outboundSchema),
  z.lazy(() => ContentInputImageRequest2$outboundSchema),
  z.lazy(() => ContentInputFileRequest2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContentRequestUnion3$ {
  /** @deprecated use `ContentRequestUnion3$inboundSchema` instead. */
  export const inboundSchema = ContentRequestUnion3$inboundSchema;
  /** @deprecated use `ContentRequestUnion3$outboundSchema` instead. */
  export const outboundSchema = ContentRequestUnion3$outboundSchema;
  /** @deprecated use `ContentRequestUnion3$Outbound` instead. */
  export type Outbound = ContentRequestUnion3$Outbound;
}

export function contentRequestUnion3ToJSON(
  contentRequestUnion3: ContentRequestUnion3,
): string {
  return JSON.stringify(
    ContentRequestUnion3$outboundSchema.parse(contentRequestUnion3),
  );
}

export function contentRequestUnion3FromJSON(
  jsonString: string,
): SafeParseResult<ContentRequestUnion3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContentRequestUnion3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContentRequestUnion3' from JSON`,
  );
}

/** @internal */
export const InputMessage2$inboundSchema: z.ZodType<
  InputMessage2,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  type: InputTypeMessage2$inboundSchema.optional(),
  role: z.union([
    RoleUserRequest2$inboundSchema,
    RoleSystemRequest2$inboundSchema,
    RoleDeveloperRequest2$inboundSchema,
  ]),
  content: z.array(
    z.union([
      z.lazy(() => ContentInputTextRequest2$inboundSchema),
      z.lazy(() => ContentInputImageRequest2$inboundSchema),
      z.lazy(() => ContentInputFileRequest2$inboundSchema),
    ]),
  ),
});

/** @internal */
export type InputMessage2$Outbound = {
  id: string;
  type?: string | undefined;
  role: string | string | string;
  content: Array<
    | ContentInputTextRequest2$Outbound
    | ContentInputImageRequest2$Outbound
    | ContentInputFileRequest2$Outbound
  >;
};

/** @internal */
export const InputMessage2$outboundSchema: z.ZodType<
  InputMessage2$Outbound,
  z.ZodTypeDef,
  InputMessage2
> = z.object({
  id: z.string(),
  type: InputTypeMessage2$outboundSchema.optional(),
  role: z.union([
    RoleUserRequest2$outboundSchema,
    RoleSystemRequest2$outboundSchema,
    RoleDeveloperRequest2$outboundSchema,
  ]),
  content: z.array(
    z.union([
      z.lazy(() => ContentInputTextRequest2$outboundSchema),
      z.lazy(() => ContentInputImageRequest2$outboundSchema),
      z.lazy(() => ContentInputFileRequest2$outboundSchema),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputMessage2$ {
  /** @deprecated use `InputMessage2$inboundSchema` instead. */
  export const inboundSchema = InputMessage2$inboundSchema;
  /** @deprecated use `InputMessage2$outboundSchema` instead. */
  export const outboundSchema = InputMessage2$outboundSchema;
  /** @deprecated use `InputMessage2$Outbound` instead. */
  export type Outbound = InputMessage2$Outbound;
}

export function inputMessage2ToJSON(inputMessage2: InputMessage2): string {
  return JSON.stringify(InputMessage2$outboundSchema.parse(inputMessage2));
}

export function inputMessage2FromJSON(
  jsonString: string,
): SafeParseResult<InputMessage2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputMessage2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputMessage2' from JSON`,
  );
}

/** @internal */
export const InputTypeMessage1$inboundSchema: z.ZodNativeEnum<
  typeof InputTypeMessage1
> = z.nativeEnum(InputTypeMessage1);

/** @internal */
export const InputTypeMessage1$outboundSchema: z.ZodNativeEnum<
  typeof InputTypeMessage1
> = InputTypeMessage1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputTypeMessage1$ {
  /** @deprecated use `InputTypeMessage1$inboundSchema` instead. */
  export const inboundSchema = InputTypeMessage1$inboundSchema;
  /** @deprecated use `InputTypeMessage1$outboundSchema` instead. */
  export const outboundSchema = InputTypeMessage1$outboundSchema;
}

/** @internal */
export const RoleDeveloperRequest1$inboundSchema: z.ZodNativeEnum<
  typeof RoleDeveloperRequest1
> = z.nativeEnum(RoleDeveloperRequest1);

/** @internal */
export const RoleDeveloperRequest1$outboundSchema: z.ZodNativeEnum<
  typeof RoleDeveloperRequest1
> = RoleDeveloperRequest1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RoleDeveloperRequest1$ {
  /** @deprecated use `RoleDeveloperRequest1$inboundSchema` instead. */
  export const inboundSchema = RoleDeveloperRequest1$inboundSchema;
  /** @deprecated use `RoleDeveloperRequest1$outboundSchema` instead. */
  export const outboundSchema = RoleDeveloperRequest1$outboundSchema;
}

/** @internal */
export const RoleAssistantRequest1$inboundSchema: z.ZodNativeEnum<
  typeof RoleAssistantRequest1
> = z.nativeEnum(RoleAssistantRequest1);

/** @internal */
export const RoleAssistantRequest1$outboundSchema: z.ZodNativeEnum<
  typeof RoleAssistantRequest1
> = RoleAssistantRequest1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RoleAssistantRequest1$ {
  /** @deprecated use `RoleAssistantRequest1$inboundSchema` instead. */
  export const inboundSchema = RoleAssistantRequest1$inboundSchema;
  /** @deprecated use `RoleAssistantRequest1$outboundSchema` instead. */
  export const outboundSchema = RoleAssistantRequest1$outboundSchema;
}

/** @internal */
export const RoleSystemRequest1$inboundSchema: z.ZodNativeEnum<
  typeof RoleSystemRequest1
> = z.nativeEnum(RoleSystemRequest1);

/** @internal */
export const RoleSystemRequest1$outboundSchema: z.ZodNativeEnum<
  typeof RoleSystemRequest1
> = RoleSystemRequest1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RoleSystemRequest1$ {
  /** @deprecated use `RoleSystemRequest1$inboundSchema` instead. */
  export const inboundSchema = RoleSystemRequest1$inboundSchema;
  /** @deprecated use `RoleSystemRequest1$outboundSchema` instead. */
  export const outboundSchema = RoleSystemRequest1$outboundSchema;
}

/** @internal */
export const RoleUserRequest1$inboundSchema: z.ZodNativeEnum<
  typeof RoleUserRequest1
> = z.nativeEnum(RoleUserRequest1);

/** @internal */
export const RoleUserRequest1$outboundSchema: z.ZodNativeEnum<
  typeof RoleUserRequest1
> = RoleUserRequest1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RoleUserRequest1$ {
  /** @deprecated use `RoleUserRequest1$inboundSchema` instead. */
  export const inboundSchema = RoleUserRequest1$inboundSchema;
  /** @deprecated use `RoleUserRequest1$outboundSchema` instead. */
  export const outboundSchema = RoleUserRequest1$outboundSchema;
}

/** @internal */
export const RoleRequestUnion1$inboundSchema: z.ZodType<
  RoleRequestUnion1,
  z.ZodTypeDef,
  unknown
> = z.union([
  RoleUserRequest1$inboundSchema,
  RoleSystemRequest1$inboundSchema,
  RoleAssistantRequest1$inboundSchema,
  RoleDeveloperRequest1$inboundSchema,
]);

/** @internal */
export type RoleRequestUnion1$Outbound = string | string | string | string;

/** @internal */
export const RoleRequestUnion1$outboundSchema: z.ZodType<
  RoleRequestUnion1$Outbound,
  z.ZodTypeDef,
  RoleRequestUnion1
> = z.union([
  RoleUserRequest1$outboundSchema,
  RoleSystemRequest1$outboundSchema,
  RoleAssistantRequest1$outboundSchema,
  RoleDeveloperRequest1$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RoleRequestUnion1$ {
  /** @deprecated use `RoleRequestUnion1$inboundSchema` instead. */
  export const inboundSchema = RoleRequestUnion1$inboundSchema;
  /** @deprecated use `RoleRequestUnion1$outboundSchema` instead. */
  export const outboundSchema = RoleRequestUnion1$outboundSchema;
  /** @deprecated use `RoleRequestUnion1$Outbound` instead. */
  export type Outbound = RoleRequestUnion1$Outbound;
}

export function roleRequestUnion1ToJSON(
  roleRequestUnion1: RoleRequestUnion1,
): string {
  return JSON.stringify(
    RoleRequestUnion1$outboundSchema.parse(roleRequestUnion1),
  );
}

export function roleRequestUnion1FromJSON(
  jsonString: string,
): SafeParseResult<RoleRequestUnion1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RoleRequestUnion1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RoleRequestUnion1' from JSON`,
  );
}

/** @internal */
export const InputTypeInputFile1$inboundSchema: z.ZodNativeEnum<
  typeof InputTypeInputFile1
> = z.nativeEnum(InputTypeInputFile1);

/** @internal */
export const InputTypeInputFile1$outboundSchema: z.ZodNativeEnum<
  typeof InputTypeInputFile1
> = InputTypeInputFile1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputTypeInputFile1$ {
  /** @deprecated use `InputTypeInputFile1$inboundSchema` instead. */
  export const inboundSchema = InputTypeInputFile1$inboundSchema;
  /** @deprecated use `InputTypeInputFile1$outboundSchema` instead. */
  export const outboundSchema = InputTypeInputFile1$outboundSchema;
}

/** @internal */
export const ContentInputFileRequest1$inboundSchema: z.ZodType<
  ContentInputFileRequest1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: InputTypeInputFile1$inboundSchema,
  file_id: z.nullable(z.string()).optional(),
  file_data: z.string().optional(),
  filename: z.string().optional(),
  file_url: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "file_id": "fileId",
    "file_data": "fileData",
    "file_url": "fileUrl",
  });
});

/** @internal */
export type ContentInputFileRequest1$Outbound = {
  type: string;
  file_id?: string | null | undefined;
  file_data?: string | undefined;
  filename?: string | undefined;
  file_url?: string | undefined;
};

/** @internal */
export const ContentInputFileRequest1$outboundSchema: z.ZodType<
  ContentInputFileRequest1$Outbound,
  z.ZodTypeDef,
  ContentInputFileRequest1
> = z.object({
  type: InputTypeInputFile1$outboundSchema,
  fileId: z.nullable(z.string()).optional(),
  fileData: z.string().optional(),
  filename: z.string().optional(),
  fileUrl: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    fileId: "file_id",
    fileData: "file_data",
    fileUrl: "file_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContentInputFileRequest1$ {
  /** @deprecated use `ContentInputFileRequest1$inboundSchema` instead. */
  export const inboundSchema = ContentInputFileRequest1$inboundSchema;
  /** @deprecated use `ContentInputFileRequest1$outboundSchema` instead. */
  export const outboundSchema = ContentInputFileRequest1$outboundSchema;
  /** @deprecated use `ContentInputFileRequest1$Outbound` instead. */
  export type Outbound = ContentInputFileRequest1$Outbound;
}

export function contentInputFileRequest1ToJSON(
  contentInputFileRequest1: ContentInputFileRequest1,
): string {
  return JSON.stringify(
    ContentInputFileRequest1$outboundSchema.parse(contentInputFileRequest1),
  );
}

export function contentInputFileRequest1FromJSON(
  jsonString: string,
): SafeParseResult<ContentInputFileRequest1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContentInputFileRequest1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContentInputFileRequest1' from JSON`,
  );
}

/** @internal */
export const InputTypeInputImage1$inboundSchema: z.ZodNativeEnum<
  typeof InputTypeInputImage1
> = z.nativeEnum(InputTypeInputImage1);

/** @internal */
export const InputTypeInputImage1$outboundSchema: z.ZodNativeEnum<
  typeof InputTypeInputImage1
> = InputTypeInputImage1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputTypeInputImage1$ {
  /** @deprecated use `InputTypeInputImage1$inboundSchema` instead. */
  export const inboundSchema = InputTypeInputImage1$inboundSchema;
  /** @deprecated use `InputTypeInputImage1$outboundSchema` instead. */
  export const outboundSchema = InputTypeInputImage1$outboundSchema;
}

/** @internal */
export const InputDetail1$inboundSchema: z.ZodNativeEnum<typeof InputDetail1> =
  z.nativeEnum(InputDetail1);

/** @internal */
export const InputDetail1$outboundSchema: z.ZodNativeEnum<typeof InputDetail1> =
  InputDetail1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputDetail1$ {
  /** @deprecated use `InputDetail1$inboundSchema` instead. */
  export const inboundSchema = InputDetail1$inboundSchema;
  /** @deprecated use `InputDetail1$outboundSchema` instead. */
  export const outboundSchema = InputDetail1$outboundSchema;
}

/** @internal */
export const ContentInputImageRequest1$inboundSchema: z.ZodType<
  ContentInputImageRequest1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: InputTypeInputImage1$inboundSchema,
  detail: InputDetail1$inboundSchema,
  image_url: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type ContentInputImageRequest1$Outbound = {
  type: string;
  detail: string;
  image_url?: string | null | undefined;
};

/** @internal */
export const ContentInputImageRequest1$outboundSchema: z.ZodType<
  ContentInputImageRequest1$Outbound,
  z.ZodTypeDef,
  ContentInputImageRequest1
> = z.object({
  type: InputTypeInputImage1$outboundSchema,
  detail: InputDetail1$outboundSchema,
  imageUrl: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContentInputImageRequest1$ {
  /** @deprecated use `ContentInputImageRequest1$inboundSchema` instead. */
  export const inboundSchema = ContentInputImageRequest1$inboundSchema;
  /** @deprecated use `ContentInputImageRequest1$outboundSchema` instead. */
  export const outboundSchema = ContentInputImageRequest1$outboundSchema;
  /** @deprecated use `ContentInputImageRequest1$Outbound` instead. */
  export type Outbound = ContentInputImageRequest1$Outbound;
}

export function contentInputImageRequest1ToJSON(
  contentInputImageRequest1: ContentInputImageRequest1,
): string {
  return JSON.stringify(
    ContentInputImageRequest1$outboundSchema.parse(contentInputImageRequest1),
  );
}

export function contentInputImageRequest1FromJSON(
  jsonString: string,
): SafeParseResult<ContentInputImageRequest1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContentInputImageRequest1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContentInputImageRequest1' from JSON`,
  );
}

/** @internal */
export const InputTypeInputText1$inboundSchema: z.ZodNativeEnum<
  typeof InputTypeInputText1
> = z.nativeEnum(InputTypeInputText1);

/** @internal */
export const InputTypeInputText1$outboundSchema: z.ZodNativeEnum<
  typeof InputTypeInputText1
> = InputTypeInputText1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputTypeInputText1$ {
  /** @deprecated use `InputTypeInputText1$inboundSchema` instead. */
  export const inboundSchema = InputTypeInputText1$inboundSchema;
  /** @deprecated use `InputTypeInputText1$outboundSchema` instead. */
  export const outboundSchema = InputTypeInputText1$outboundSchema;
}

/** @internal */
export const ContentInputTextRequest1$inboundSchema: z.ZodType<
  ContentInputTextRequest1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: InputTypeInputText1$inboundSchema,
  text: z.string(),
});

/** @internal */
export type ContentInputTextRequest1$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const ContentInputTextRequest1$outboundSchema: z.ZodType<
  ContentInputTextRequest1$Outbound,
  z.ZodTypeDef,
  ContentInputTextRequest1
> = z.object({
  type: InputTypeInputText1$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContentInputTextRequest1$ {
  /** @deprecated use `ContentInputTextRequest1$inboundSchema` instead. */
  export const inboundSchema = ContentInputTextRequest1$inboundSchema;
  /** @deprecated use `ContentInputTextRequest1$outboundSchema` instead. */
  export const outboundSchema = ContentInputTextRequest1$outboundSchema;
  /** @deprecated use `ContentInputTextRequest1$Outbound` instead. */
  export type Outbound = ContentInputTextRequest1$Outbound;
}

export function contentInputTextRequest1ToJSON(
  contentInputTextRequest1: ContentInputTextRequest1,
): string {
  return JSON.stringify(
    ContentInputTextRequest1$outboundSchema.parse(contentInputTextRequest1),
  );
}

export function contentInputTextRequest1FromJSON(
  jsonString: string,
): SafeParseResult<ContentInputTextRequest1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContentInputTextRequest1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContentInputTextRequest1' from JSON`,
  );
}

/** @internal */
export const ContentRequestUnion2$inboundSchema: z.ZodType<
  ContentRequestUnion2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ContentInputTextRequest1$inboundSchema),
  z.lazy(() => ContentInputImageRequest1$inboundSchema),
  z.lazy(() => ContentInputFileRequest1$inboundSchema),
]);

/** @internal */
export type ContentRequestUnion2$Outbound =
  | ContentInputTextRequest1$Outbound
  | ContentInputImageRequest1$Outbound
  | ContentInputFileRequest1$Outbound;

/** @internal */
export const ContentRequestUnion2$outboundSchema: z.ZodType<
  ContentRequestUnion2$Outbound,
  z.ZodTypeDef,
  ContentRequestUnion2
> = z.union([
  z.lazy(() => ContentInputTextRequest1$outboundSchema),
  z.lazy(() => ContentInputImageRequest1$outboundSchema),
  z.lazy(() => ContentInputFileRequest1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContentRequestUnion2$ {
  /** @deprecated use `ContentRequestUnion2$inboundSchema` instead. */
  export const inboundSchema = ContentRequestUnion2$inboundSchema;
  /** @deprecated use `ContentRequestUnion2$outboundSchema` instead. */
  export const outboundSchema = ContentRequestUnion2$outboundSchema;
  /** @deprecated use `ContentRequestUnion2$Outbound` instead. */
  export type Outbound = ContentRequestUnion2$Outbound;
}

export function contentRequestUnion2ToJSON(
  contentRequestUnion2: ContentRequestUnion2,
): string {
  return JSON.stringify(
    ContentRequestUnion2$outboundSchema.parse(contentRequestUnion2),
  );
}

export function contentRequestUnion2FromJSON(
  jsonString: string,
): SafeParseResult<ContentRequestUnion2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContentRequestUnion2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContentRequestUnion2' from JSON`,
  );
}

/** @internal */
export const ContentRequestUnion1$inboundSchema: z.ZodType<
  ContentRequestUnion1,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.array(z.union([
    z.lazy(() => ContentInputTextRequest1$inboundSchema),
    z.lazy(() =>
      ContentInputImageRequest1$inboundSchema
    ),
    z.lazy(() => ContentInputFileRequest1$inboundSchema),
  ])),
  z.string(),
]);

/** @internal */
export type ContentRequestUnion1$Outbound =
  | Array<
    | ContentInputTextRequest1$Outbound
    | ContentInputImageRequest1$Outbound
    | ContentInputFileRequest1$Outbound
  >
  | string;

/** @internal */
export const ContentRequestUnion1$outboundSchema: z.ZodType<
  ContentRequestUnion1$Outbound,
  z.ZodTypeDef,
  ContentRequestUnion1
> = z.union([
  z.array(z.union([
    z.lazy(() => ContentInputTextRequest1$outboundSchema),
    z.lazy(() =>
      ContentInputImageRequest1$outboundSchema
    ),
    z.lazy(() => ContentInputFileRequest1$outboundSchema),
  ])),
  z.string(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContentRequestUnion1$ {
  /** @deprecated use `ContentRequestUnion1$inboundSchema` instead. */
  export const inboundSchema = ContentRequestUnion1$inboundSchema;
  /** @deprecated use `ContentRequestUnion1$outboundSchema` instead. */
  export const outboundSchema = ContentRequestUnion1$outboundSchema;
  /** @deprecated use `ContentRequestUnion1$Outbound` instead. */
  export type Outbound = ContentRequestUnion1$Outbound;
}

export function contentRequestUnion1ToJSON(
  contentRequestUnion1: ContentRequestUnion1,
): string {
  return JSON.stringify(
    ContentRequestUnion1$outboundSchema.parse(contentRequestUnion1),
  );
}

export function contentRequestUnion1FromJSON(
  jsonString: string,
): SafeParseResult<ContentRequestUnion1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContentRequestUnion1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContentRequestUnion1' from JSON`,
  );
}

/** @internal */
export const InputMessage1$inboundSchema: z.ZodType<
  InputMessage1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: InputTypeMessage1$inboundSchema.optional(),
  role: z.union([
    RoleUserRequest1$inboundSchema,
    RoleSystemRequest1$inboundSchema,
    RoleAssistantRequest1$inboundSchema,
    RoleDeveloperRequest1$inboundSchema,
  ]),
  content: z.union([
    z.array(z.union([
      z.lazy(() => ContentInputTextRequest1$inboundSchema),
      z.lazy(() =>
        ContentInputImageRequest1$inboundSchema
      ),
      z.lazy(() => ContentInputFileRequest1$inboundSchema),
    ])),
    z.string(),
  ]),
});

/** @internal */
export type InputMessage1$Outbound = {
  type?: string | undefined;
  role: string | string | string | string;
  content:
    | Array<
      | ContentInputTextRequest1$Outbound
      | ContentInputImageRequest1$Outbound
      | ContentInputFileRequest1$Outbound
    >
    | string;
};

/** @internal */
export const InputMessage1$outboundSchema: z.ZodType<
  InputMessage1$Outbound,
  z.ZodTypeDef,
  InputMessage1
> = z.object({
  type: InputTypeMessage1$outboundSchema.optional(),
  role: z.union([
    RoleUserRequest1$outboundSchema,
    RoleSystemRequest1$outboundSchema,
    RoleAssistantRequest1$outboundSchema,
    RoleDeveloperRequest1$outboundSchema,
  ]),
  content: z.union([
    z.array(z.union([
      z.lazy(() => ContentInputTextRequest1$outboundSchema),
      z.lazy(() =>
        ContentInputImageRequest1$outboundSchema
      ),
      z.lazy(() => ContentInputFileRequest1$outboundSchema),
    ])),
    z.string(),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputMessage1$ {
  /** @deprecated use `InputMessage1$inboundSchema` instead. */
  export const inboundSchema = InputMessage1$inboundSchema;
  /** @deprecated use `InputMessage1$outboundSchema` instead. */
  export const outboundSchema = InputMessage1$outboundSchema;
  /** @deprecated use `InputMessage1$Outbound` instead. */
  export type Outbound = InputMessage1$Outbound;
}

export function inputMessage1ToJSON(inputMessage1: InputMessage1): string {
  return JSON.stringify(InputMessage1$outboundSchema.parse(inputMessage1));
}

export function inputMessage1FromJSON(
  jsonString: string,
): SafeParseResult<InputMessage1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputMessage1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputMessage1' from JSON`,
  );
}

/** @internal */
export const PostApiAlphaResponsesInputUnion2$inboundSchema: z.ZodType<
  PostApiAlphaResponsesInputUnion2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => InputAssistant1$inboundSchema),
  z.lazy(() => InputFunctionCall1$inboundSchema),
  z.lazy(() => InputFunctionCallOutput$inboundSchema),
  z.lazy(() => InputImageGenerationCall1$inboundSchema),
  z.lazy(() => InputMessage2$inboundSchema),
  z.lazy(() => InputMessage1$inboundSchema),
  z.union([
    z.lazy(() => InputAssistant2$inboundSchema),
    z.lazy(() => InputFunctionCall2$inboundSchema),
    z.lazy(() => InputFileSearchCall$inboundSchema),
    z.lazy(() => InputImageGenerationCall2$inboundSchema),
    z.lazy(() => InputReasoning$inboundSchema),
    z.lazy(() => InputWebSearchCall$inboundSchema),
  ]),
]);

/** @internal */
export type PostApiAlphaResponsesInputUnion2$Outbound =
  | InputAssistant1$Outbound
  | InputFunctionCall1$Outbound
  | InputFunctionCallOutput$Outbound
  | InputImageGenerationCall1$Outbound
  | InputMessage2$Outbound
  | InputMessage1$Outbound
  | InputAssistant2$Outbound
  | InputFunctionCall2$Outbound
  | InputFileSearchCall$Outbound
  | InputImageGenerationCall2$Outbound
  | InputReasoning$Outbound
  | InputWebSearchCall$Outbound;

/** @internal */
export const PostApiAlphaResponsesInputUnion2$outboundSchema: z.ZodType<
  PostApiAlphaResponsesInputUnion2$Outbound,
  z.ZodTypeDef,
  PostApiAlphaResponsesInputUnion2
> = z.union([
  z.lazy(() => InputAssistant1$outboundSchema),
  z.lazy(() => InputFunctionCall1$outboundSchema),
  z.lazy(() => InputFunctionCallOutput$outboundSchema),
  z.lazy(() => InputImageGenerationCall1$outboundSchema),
  z.lazy(() => InputMessage2$outboundSchema),
  z.lazy(() => InputMessage1$outboundSchema),
  z.union([
    z.lazy(() => InputAssistant2$outboundSchema),
    z.lazy(() => InputFunctionCall2$outboundSchema),
    z.lazy(() => InputFileSearchCall$outboundSchema),
    z.lazy(() => InputImageGenerationCall2$outboundSchema),
    z.lazy(() => InputReasoning$outboundSchema),
    z.lazy(() => InputWebSearchCall$outboundSchema),
  ]),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiAlphaResponsesInputUnion2$ {
  /** @deprecated use `PostApiAlphaResponsesInputUnion2$inboundSchema` instead. */
  export const inboundSchema = PostApiAlphaResponsesInputUnion2$inboundSchema;
  /** @deprecated use `PostApiAlphaResponsesInputUnion2$outboundSchema` instead. */
  export const outboundSchema = PostApiAlphaResponsesInputUnion2$outboundSchema;
  /** @deprecated use `PostApiAlphaResponsesInputUnion2$Outbound` instead. */
  export type Outbound = PostApiAlphaResponsesInputUnion2$Outbound;
}

export function postApiAlphaResponsesInputUnion2ToJSON(
  postApiAlphaResponsesInputUnion2: PostApiAlphaResponsesInputUnion2,
): string {
  return JSON.stringify(
    PostApiAlphaResponsesInputUnion2$outboundSchema.parse(
      postApiAlphaResponsesInputUnion2,
    ),
  );
}

export function postApiAlphaResponsesInputUnion2FromJSON(
  jsonString: string,
): SafeParseResult<PostApiAlphaResponsesInputUnion2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostApiAlphaResponsesInputUnion2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostApiAlphaResponsesInputUnion2' from JSON`,
  );
}

/** @internal */
export const PostApiAlphaResponsesInputUnion1$inboundSchema: z.ZodType<
  PostApiAlphaResponsesInputUnion1,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => InputAssistant1$inboundSchema),
    z.lazy(() => InputFunctionCall1$inboundSchema),
    z.lazy(() => InputFunctionCallOutput$inboundSchema),
    z.lazy(() => InputImageGenerationCall1$inboundSchema),
    z.lazy(() => InputMessage2$inboundSchema),
    z.lazy(() => InputMessage1$inboundSchema),
    z.union([
      z.lazy(() => InputAssistant2$inboundSchema),
      z.lazy(() => InputFunctionCall2$inboundSchema),
      z.lazy(() => InputFileSearchCall$inboundSchema),
      z.lazy(() =>
        InputImageGenerationCall2$inboundSchema
      ),
      z.lazy(() => InputReasoning$inboundSchema),
      z.lazy(() => InputWebSearchCall$inboundSchema),
    ]),
  ])),
]);

/** @internal */
export type PostApiAlphaResponsesInputUnion1$Outbound =
  | string
  | Array<
    | InputAssistant1$Outbound
    | InputFunctionCall1$Outbound
    | InputFunctionCallOutput$Outbound
    | InputImageGenerationCall1$Outbound
    | InputMessage2$Outbound
    | InputMessage1$Outbound
    | InputAssistant2$Outbound
    | InputFunctionCall2$Outbound
    | InputFileSearchCall$Outbound
    | InputImageGenerationCall2$Outbound
    | InputReasoning$Outbound
    | InputWebSearchCall$Outbound
  >;

/** @internal */
export const PostApiAlphaResponsesInputUnion1$outboundSchema: z.ZodType<
  PostApiAlphaResponsesInputUnion1$Outbound,
  z.ZodTypeDef,
  PostApiAlphaResponsesInputUnion1
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => InputAssistant1$outboundSchema),
    z.lazy(() => InputFunctionCall1$outboundSchema),
    z.lazy(() => InputFunctionCallOutput$outboundSchema),
    z.lazy(() => InputImageGenerationCall1$outboundSchema),
    z.lazy(() => InputMessage2$outboundSchema),
    z.lazy(() => InputMessage1$outboundSchema),
    z.union([
      z.lazy(() => InputAssistant2$outboundSchema),
      z.lazy(() => InputFunctionCall2$outboundSchema),
      z.lazy(() => InputFileSearchCall$outboundSchema),
      z.lazy(() =>
        InputImageGenerationCall2$outboundSchema
      ),
      z.lazy(() => InputReasoning$outboundSchema),
      z.lazy(() => InputWebSearchCall$outboundSchema),
    ]),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiAlphaResponsesInputUnion1$ {
  /** @deprecated use `PostApiAlphaResponsesInputUnion1$inboundSchema` instead. */
  export const inboundSchema = PostApiAlphaResponsesInputUnion1$inboundSchema;
  /** @deprecated use `PostApiAlphaResponsesInputUnion1$outboundSchema` instead. */
  export const outboundSchema = PostApiAlphaResponsesInputUnion1$outboundSchema;
  /** @deprecated use `PostApiAlphaResponsesInputUnion1$Outbound` instead. */
  export type Outbound = PostApiAlphaResponsesInputUnion1$Outbound;
}

export function postApiAlphaResponsesInputUnion1ToJSON(
  postApiAlphaResponsesInputUnion1: PostApiAlphaResponsesInputUnion1,
): string {
  return JSON.stringify(
    PostApiAlphaResponsesInputUnion1$outboundSchema.parse(
      postApiAlphaResponsesInputUnion1,
    ),
  );
}

export function postApiAlphaResponsesInputUnion1FromJSON(
  jsonString: string,
): SafeParseResult<PostApiAlphaResponsesInputUnion1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostApiAlphaResponsesInputUnion1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostApiAlphaResponsesInputUnion1' from JSON`,
  );
}

/** @internal */
export const TypeWebSearch20250826Request$inboundSchema: z.ZodNativeEnum<
  typeof TypeWebSearch20250826Request
> = z.nativeEnum(TypeWebSearch20250826Request);

/** @internal */
export const TypeWebSearch20250826Request$outboundSchema: z.ZodNativeEnum<
  typeof TypeWebSearch20250826Request
> = TypeWebSearch20250826Request$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeWebSearch20250826Request$ {
  /** @deprecated use `TypeWebSearch20250826Request$inboundSchema` instead. */
  export const inboundSchema = TypeWebSearch20250826Request$inboundSchema;
  /** @deprecated use `TypeWebSearch20250826Request$outboundSchema` instead. */
  export const outboundSchema = TypeWebSearch20250826Request$outboundSchema;
}

/** @internal */
export const FiltersRequest2$inboundSchema: z.ZodType<
  FiltersRequest2,
  z.ZodTypeDef,
  unknown
> = z.object({
  allowed_domains: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    "allowed_domains": "allowedDomains",
  });
});

/** @internal */
export type FiltersRequest2$Outbound = {
  allowed_domains?: Array<string> | null | undefined;
};

/** @internal */
export const FiltersRequest2$outboundSchema: z.ZodType<
  FiltersRequest2$Outbound,
  z.ZodTypeDef,
  FiltersRequest2
> = z.object({
  allowedDomains: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    allowedDomains: "allowed_domains",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FiltersRequest2$ {
  /** @deprecated use `FiltersRequest2$inboundSchema` instead. */
  export const inboundSchema = FiltersRequest2$inboundSchema;
  /** @deprecated use `FiltersRequest2$outboundSchema` instead. */
  export const outboundSchema = FiltersRequest2$outboundSchema;
  /** @deprecated use `FiltersRequest2$Outbound` instead. */
  export type Outbound = FiltersRequest2$Outbound;
}

export function filtersRequest2ToJSON(
  filtersRequest2: FiltersRequest2,
): string {
  return JSON.stringify(FiltersRequest2$outboundSchema.parse(filtersRequest2));
}

export function filtersRequest2FromJSON(
  jsonString: string,
): SafeParseResult<FiltersRequest2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FiltersRequest2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FiltersRequest2' from JSON`,
  );
}

/** @internal */
export const SearchContextSizeRequest4$inboundSchema: z.ZodNativeEnum<
  typeof SearchContextSizeRequest4
> = z.nativeEnum(SearchContextSizeRequest4);

/** @internal */
export const SearchContextSizeRequest4$outboundSchema: z.ZodNativeEnum<
  typeof SearchContextSizeRequest4
> = SearchContextSizeRequest4$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchContextSizeRequest4$ {
  /** @deprecated use `SearchContextSizeRequest4$inboundSchema` instead. */
  export const inboundSchema = SearchContextSizeRequest4$inboundSchema;
  /** @deprecated use `SearchContextSizeRequest4$outboundSchema` instead. */
  export const outboundSchema = SearchContextSizeRequest4$outboundSchema;
}

/** @internal */
export const TypeApproximateRequest4$inboundSchema: z.ZodNativeEnum<
  typeof TypeApproximateRequest4
> = z.nativeEnum(TypeApproximateRequest4);

/** @internal */
export const TypeApproximateRequest4$outboundSchema: z.ZodNativeEnum<
  typeof TypeApproximateRequest4
> = TypeApproximateRequest4$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeApproximateRequest4$ {
  /** @deprecated use `TypeApproximateRequest4$inboundSchema` instead. */
  export const inboundSchema = TypeApproximateRequest4$inboundSchema;
  /** @deprecated use `TypeApproximateRequest4$outboundSchema` instead. */
  export const outboundSchema = TypeApproximateRequest4$outboundSchema;
}

/** @internal */
export const UserLocationRequest4$inboundSchema: z.ZodType<
  UserLocationRequest4,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TypeApproximateRequest4$inboundSchema.optional(),
  city: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  region: z.nullable(z.string()).optional(),
  timezone: z.nullable(z.string()).optional(),
});

/** @internal */
export type UserLocationRequest4$Outbound = {
  type?: string | undefined;
  city?: string | null | undefined;
  country?: string | null | undefined;
  region?: string | null | undefined;
  timezone?: string | null | undefined;
};

/** @internal */
export const UserLocationRequest4$outboundSchema: z.ZodType<
  UserLocationRequest4$Outbound,
  z.ZodTypeDef,
  UserLocationRequest4
> = z.object({
  type: TypeApproximateRequest4$outboundSchema.optional(),
  city: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  region: z.nullable(z.string()).optional(),
  timezone: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserLocationRequest4$ {
  /** @deprecated use `UserLocationRequest4$inboundSchema` instead. */
  export const inboundSchema = UserLocationRequest4$inboundSchema;
  /** @deprecated use `UserLocationRequest4$outboundSchema` instead. */
  export const outboundSchema = UserLocationRequest4$outboundSchema;
  /** @deprecated use `UserLocationRequest4$Outbound` instead. */
  export type Outbound = UserLocationRequest4$Outbound;
}

export function userLocationRequest4ToJSON(
  userLocationRequest4: UserLocationRequest4,
): string {
  return JSON.stringify(
    UserLocationRequest4$outboundSchema.parse(userLocationRequest4),
  );
}

export function userLocationRequest4FromJSON(
  jsonString: string,
): SafeParseResult<UserLocationRequest4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserLocationRequest4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserLocationRequest4' from JSON`,
  );
}

/** @internal */
export const ToolWebSearch20250826Request$inboundSchema: z.ZodType<
  ToolWebSearch20250826Request,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TypeWebSearch20250826Request$inboundSchema,
  filters: z.nullable(z.lazy(() => FiltersRequest2$inboundSchema)).optional(),
  search_context_size: SearchContextSizeRequest4$inboundSchema.optional(),
  user_location: z.nullable(z.lazy(() => UserLocationRequest4$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "search_context_size": "searchContextSize",
    "user_location": "userLocation",
  });
});

/** @internal */
export type ToolWebSearch20250826Request$Outbound = {
  type: string;
  filters?: FiltersRequest2$Outbound | null | undefined;
  search_context_size?: string | undefined;
  user_location?: UserLocationRequest4$Outbound | null | undefined;
};

/** @internal */
export const ToolWebSearch20250826Request$outboundSchema: z.ZodType<
  ToolWebSearch20250826Request$Outbound,
  z.ZodTypeDef,
  ToolWebSearch20250826Request
> = z.object({
  type: TypeWebSearch20250826Request$outboundSchema,
  filters: z.nullable(z.lazy(() => FiltersRequest2$outboundSchema)).optional(),
  searchContextSize: SearchContextSizeRequest4$outboundSchema.optional(),
  userLocation: z.nullable(z.lazy(() => UserLocationRequest4$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    searchContextSize: "search_context_size",
    userLocation: "user_location",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolWebSearch20250826Request$ {
  /** @deprecated use `ToolWebSearch20250826Request$inboundSchema` instead. */
  export const inboundSchema = ToolWebSearch20250826Request$inboundSchema;
  /** @deprecated use `ToolWebSearch20250826Request$outboundSchema` instead. */
  export const outboundSchema = ToolWebSearch20250826Request$outboundSchema;
  /** @deprecated use `ToolWebSearch20250826Request$Outbound` instead. */
  export type Outbound = ToolWebSearch20250826Request$Outbound;
}

export function toolWebSearch20250826RequestToJSON(
  toolWebSearch20250826Request: ToolWebSearch20250826Request,
): string {
  return JSON.stringify(
    ToolWebSearch20250826Request$outboundSchema.parse(
      toolWebSearch20250826Request,
    ),
  );
}

export function toolWebSearch20250826RequestFromJSON(
  jsonString: string,
): SafeParseResult<ToolWebSearch20250826Request, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolWebSearch20250826Request$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolWebSearch20250826Request' from JSON`,
  );
}

/** @internal */
export const TypeWebSearchRequest$inboundSchema: z.ZodNativeEnum<
  typeof TypeWebSearchRequest
> = z.nativeEnum(TypeWebSearchRequest);

/** @internal */
export const TypeWebSearchRequest$outboundSchema: z.ZodNativeEnum<
  typeof TypeWebSearchRequest
> = TypeWebSearchRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeWebSearchRequest$ {
  /** @deprecated use `TypeWebSearchRequest$inboundSchema` instead. */
  export const inboundSchema = TypeWebSearchRequest$inboundSchema;
  /** @deprecated use `TypeWebSearchRequest$outboundSchema` instead. */
  export const outboundSchema = TypeWebSearchRequest$outboundSchema;
}

/** @internal */
export const FiltersRequest1$inboundSchema: z.ZodType<
  FiltersRequest1,
  z.ZodTypeDef,
  unknown
> = z.object({
  allowed_domains: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    "allowed_domains": "allowedDomains",
  });
});

/** @internal */
export type FiltersRequest1$Outbound = {
  allowed_domains?: Array<string> | null | undefined;
};

/** @internal */
export const FiltersRequest1$outboundSchema: z.ZodType<
  FiltersRequest1$Outbound,
  z.ZodTypeDef,
  FiltersRequest1
> = z.object({
  allowedDomains: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    allowedDomains: "allowed_domains",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FiltersRequest1$ {
  /** @deprecated use `FiltersRequest1$inboundSchema` instead. */
  export const inboundSchema = FiltersRequest1$inboundSchema;
  /** @deprecated use `FiltersRequest1$outboundSchema` instead. */
  export const outboundSchema = FiltersRequest1$outboundSchema;
  /** @deprecated use `FiltersRequest1$Outbound` instead. */
  export type Outbound = FiltersRequest1$Outbound;
}

export function filtersRequest1ToJSON(
  filtersRequest1: FiltersRequest1,
): string {
  return JSON.stringify(FiltersRequest1$outboundSchema.parse(filtersRequest1));
}

export function filtersRequest1FromJSON(
  jsonString: string,
): SafeParseResult<FiltersRequest1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FiltersRequest1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FiltersRequest1' from JSON`,
  );
}

/** @internal */
export const SearchContextSizeRequest3$inboundSchema: z.ZodNativeEnum<
  typeof SearchContextSizeRequest3
> = z.nativeEnum(SearchContextSizeRequest3);

/** @internal */
export const SearchContextSizeRequest3$outboundSchema: z.ZodNativeEnum<
  typeof SearchContextSizeRequest3
> = SearchContextSizeRequest3$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchContextSizeRequest3$ {
  /** @deprecated use `SearchContextSizeRequest3$inboundSchema` instead. */
  export const inboundSchema = SearchContextSizeRequest3$inboundSchema;
  /** @deprecated use `SearchContextSizeRequest3$outboundSchema` instead. */
  export const outboundSchema = SearchContextSizeRequest3$outboundSchema;
}

/** @internal */
export const TypeApproximateRequest3$inboundSchema: z.ZodNativeEnum<
  typeof TypeApproximateRequest3
> = z.nativeEnum(TypeApproximateRequest3);

/** @internal */
export const TypeApproximateRequest3$outboundSchema: z.ZodNativeEnum<
  typeof TypeApproximateRequest3
> = TypeApproximateRequest3$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeApproximateRequest3$ {
  /** @deprecated use `TypeApproximateRequest3$inboundSchema` instead. */
  export const inboundSchema = TypeApproximateRequest3$inboundSchema;
  /** @deprecated use `TypeApproximateRequest3$outboundSchema` instead. */
  export const outboundSchema = TypeApproximateRequest3$outboundSchema;
}

/** @internal */
export const UserLocationRequest3$inboundSchema: z.ZodType<
  UserLocationRequest3,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TypeApproximateRequest3$inboundSchema.optional(),
  city: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  region: z.nullable(z.string()).optional(),
  timezone: z.nullable(z.string()).optional(),
});

/** @internal */
export type UserLocationRequest3$Outbound = {
  type?: string | undefined;
  city?: string | null | undefined;
  country?: string | null | undefined;
  region?: string | null | undefined;
  timezone?: string | null | undefined;
};

/** @internal */
export const UserLocationRequest3$outboundSchema: z.ZodType<
  UserLocationRequest3$Outbound,
  z.ZodTypeDef,
  UserLocationRequest3
> = z.object({
  type: TypeApproximateRequest3$outboundSchema.optional(),
  city: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  region: z.nullable(z.string()).optional(),
  timezone: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserLocationRequest3$ {
  /** @deprecated use `UserLocationRequest3$inboundSchema` instead. */
  export const inboundSchema = UserLocationRequest3$inboundSchema;
  /** @deprecated use `UserLocationRequest3$outboundSchema` instead. */
  export const outboundSchema = UserLocationRequest3$outboundSchema;
  /** @deprecated use `UserLocationRequest3$Outbound` instead. */
  export type Outbound = UserLocationRequest3$Outbound;
}

export function userLocationRequest3ToJSON(
  userLocationRequest3: UserLocationRequest3,
): string {
  return JSON.stringify(
    UserLocationRequest3$outboundSchema.parse(userLocationRequest3),
  );
}

export function userLocationRequest3FromJSON(
  jsonString: string,
): SafeParseResult<UserLocationRequest3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserLocationRequest3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserLocationRequest3' from JSON`,
  );
}

/** @internal */
export const ToolWebSearchRequest$inboundSchema: z.ZodType<
  ToolWebSearchRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TypeWebSearchRequest$inboundSchema,
  filters: z.nullable(z.lazy(() => FiltersRequest1$inboundSchema)).optional(),
  search_context_size: SearchContextSizeRequest3$inboundSchema.optional(),
  user_location: z.nullable(z.lazy(() => UserLocationRequest3$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "search_context_size": "searchContextSize",
    "user_location": "userLocation",
  });
});

/** @internal */
export type ToolWebSearchRequest$Outbound = {
  type: string;
  filters?: FiltersRequest1$Outbound | null | undefined;
  search_context_size?: string | undefined;
  user_location?: UserLocationRequest3$Outbound | null | undefined;
};

/** @internal */
export const ToolWebSearchRequest$outboundSchema: z.ZodType<
  ToolWebSearchRequest$Outbound,
  z.ZodTypeDef,
  ToolWebSearchRequest
> = z.object({
  type: TypeWebSearchRequest$outboundSchema,
  filters: z.nullable(z.lazy(() => FiltersRequest1$outboundSchema)).optional(),
  searchContextSize: SearchContextSizeRequest3$outboundSchema.optional(),
  userLocation: z.nullable(z.lazy(() => UserLocationRequest3$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    searchContextSize: "search_context_size",
    userLocation: "user_location",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolWebSearchRequest$ {
  /** @deprecated use `ToolWebSearchRequest$inboundSchema` instead. */
  export const inboundSchema = ToolWebSearchRequest$inboundSchema;
  /** @deprecated use `ToolWebSearchRequest$outboundSchema` instead. */
  export const outboundSchema = ToolWebSearchRequest$outboundSchema;
  /** @deprecated use `ToolWebSearchRequest$Outbound` instead. */
  export type Outbound = ToolWebSearchRequest$Outbound;
}

export function toolWebSearchRequestToJSON(
  toolWebSearchRequest: ToolWebSearchRequest,
): string {
  return JSON.stringify(
    ToolWebSearchRequest$outboundSchema.parse(toolWebSearchRequest),
  );
}

export function toolWebSearchRequestFromJSON(
  jsonString: string,
): SafeParseResult<ToolWebSearchRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolWebSearchRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolWebSearchRequest' from JSON`,
  );
}

/** @internal */
export const ToolTypeWebSearchPreview20250311Request$inboundSchema:
  z.ZodNativeEnum<typeof ToolTypeWebSearchPreview20250311Request> = z
    .nativeEnum(ToolTypeWebSearchPreview20250311Request);

/** @internal */
export const ToolTypeWebSearchPreview20250311Request$outboundSchema:
  z.ZodNativeEnum<typeof ToolTypeWebSearchPreview20250311Request> =
    ToolTypeWebSearchPreview20250311Request$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolTypeWebSearchPreview20250311Request$ {
  /** @deprecated use `ToolTypeWebSearchPreview20250311Request$inboundSchema` instead. */
  export const inboundSchema =
    ToolTypeWebSearchPreview20250311Request$inboundSchema;
  /** @deprecated use `ToolTypeWebSearchPreview20250311Request$outboundSchema` instead. */
  export const outboundSchema =
    ToolTypeWebSearchPreview20250311Request$outboundSchema;
}

/** @internal */
export const SearchContextSizeRequest2$inboundSchema: z.ZodNativeEnum<
  typeof SearchContextSizeRequest2
> = z.nativeEnum(SearchContextSizeRequest2);

/** @internal */
export const SearchContextSizeRequest2$outboundSchema: z.ZodNativeEnum<
  typeof SearchContextSizeRequest2
> = SearchContextSizeRequest2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchContextSizeRequest2$ {
  /** @deprecated use `SearchContextSizeRequest2$inboundSchema` instead. */
  export const inboundSchema = SearchContextSizeRequest2$inboundSchema;
  /** @deprecated use `SearchContextSizeRequest2$outboundSchema` instead. */
  export const outboundSchema = SearchContextSizeRequest2$outboundSchema;
}

/** @internal */
export const TypeApproximateRequest2$inboundSchema: z.ZodNativeEnum<
  typeof TypeApproximateRequest2
> = z.nativeEnum(TypeApproximateRequest2);

/** @internal */
export const TypeApproximateRequest2$outboundSchema: z.ZodNativeEnum<
  typeof TypeApproximateRequest2
> = TypeApproximateRequest2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeApproximateRequest2$ {
  /** @deprecated use `TypeApproximateRequest2$inboundSchema` instead. */
  export const inboundSchema = TypeApproximateRequest2$inboundSchema;
  /** @deprecated use `TypeApproximateRequest2$outboundSchema` instead. */
  export const outboundSchema = TypeApproximateRequest2$outboundSchema;
}

/** @internal */
export const UserLocationRequest2$inboundSchema: z.ZodType<
  UserLocationRequest2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TypeApproximateRequest2$inboundSchema,
  city: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  region: z.nullable(z.string()).optional(),
  timezone: z.nullable(z.string()).optional(),
});

/** @internal */
export type UserLocationRequest2$Outbound = {
  type: string;
  city?: string | null | undefined;
  country?: string | null | undefined;
  region?: string | null | undefined;
  timezone?: string | null | undefined;
};

/** @internal */
export const UserLocationRequest2$outboundSchema: z.ZodType<
  UserLocationRequest2$Outbound,
  z.ZodTypeDef,
  UserLocationRequest2
> = z.object({
  type: TypeApproximateRequest2$outboundSchema,
  city: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  region: z.nullable(z.string()).optional(),
  timezone: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserLocationRequest2$ {
  /** @deprecated use `UserLocationRequest2$inboundSchema` instead. */
  export const inboundSchema = UserLocationRequest2$inboundSchema;
  /** @deprecated use `UserLocationRequest2$outboundSchema` instead. */
  export const outboundSchema = UserLocationRequest2$outboundSchema;
  /** @deprecated use `UserLocationRequest2$Outbound` instead. */
  export type Outbound = UserLocationRequest2$Outbound;
}

export function userLocationRequest2ToJSON(
  userLocationRequest2: UserLocationRequest2,
): string {
  return JSON.stringify(
    UserLocationRequest2$outboundSchema.parse(userLocationRequest2),
  );
}

export function userLocationRequest2FromJSON(
  jsonString: string,
): SafeParseResult<UserLocationRequest2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserLocationRequest2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserLocationRequest2' from JSON`,
  );
}

/** @internal */
export const ToolWebSearchPreview20250311Request$inboundSchema: z.ZodType<
  ToolWebSearchPreview20250311Request,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ToolTypeWebSearchPreview20250311Request$inboundSchema,
  search_context_size: SearchContextSizeRequest2$inboundSchema.optional(),
  user_location: z.nullable(z.lazy(() => UserLocationRequest2$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "search_context_size": "searchContextSize",
    "user_location": "userLocation",
  });
});

/** @internal */
export type ToolWebSearchPreview20250311Request$Outbound = {
  type: string;
  search_context_size?: string | undefined;
  user_location?: UserLocationRequest2$Outbound | null | undefined;
};

/** @internal */
export const ToolWebSearchPreview20250311Request$outboundSchema: z.ZodType<
  ToolWebSearchPreview20250311Request$Outbound,
  z.ZodTypeDef,
  ToolWebSearchPreview20250311Request
> = z.object({
  type: ToolTypeWebSearchPreview20250311Request$outboundSchema,
  searchContextSize: SearchContextSizeRequest2$outboundSchema.optional(),
  userLocation: z.nullable(z.lazy(() => UserLocationRequest2$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    searchContextSize: "search_context_size",
    userLocation: "user_location",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolWebSearchPreview20250311Request$ {
  /** @deprecated use `ToolWebSearchPreview20250311Request$inboundSchema` instead. */
  export const inboundSchema =
    ToolWebSearchPreview20250311Request$inboundSchema;
  /** @deprecated use `ToolWebSearchPreview20250311Request$outboundSchema` instead. */
  export const outboundSchema =
    ToolWebSearchPreview20250311Request$outboundSchema;
  /** @deprecated use `ToolWebSearchPreview20250311Request$Outbound` instead. */
  export type Outbound = ToolWebSearchPreview20250311Request$Outbound;
}

export function toolWebSearchPreview20250311RequestToJSON(
  toolWebSearchPreview20250311Request: ToolWebSearchPreview20250311Request,
): string {
  return JSON.stringify(
    ToolWebSearchPreview20250311Request$outboundSchema.parse(
      toolWebSearchPreview20250311Request,
    ),
  );
}

export function toolWebSearchPreview20250311RequestFromJSON(
  jsonString: string,
): SafeParseResult<ToolWebSearchPreview20250311Request, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ToolWebSearchPreview20250311Request$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolWebSearchPreview20250311Request' from JSON`,
  );
}

/** @internal */
export const ToolTypeWebSearchPreviewRequest$inboundSchema: z.ZodNativeEnum<
  typeof ToolTypeWebSearchPreviewRequest
> = z.nativeEnum(ToolTypeWebSearchPreviewRequest);

/** @internal */
export const ToolTypeWebSearchPreviewRequest$outboundSchema: z.ZodNativeEnum<
  typeof ToolTypeWebSearchPreviewRequest
> = ToolTypeWebSearchPreviewRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolTypeWebSearchPreviewRequest$ {
  /** @deprecated use `ToolTypeWebSearchPreviewRequest$inboundSchema` instead. */
  export const inboundSchema = ToolTypeWebSearchPreviewRequest$inboundSchema;
  /** @deprecated use `ToolTypeWebSearchPreviewRequest$outboundSchema` instead. */
  export const outboundSchema = ToolTypeWebSearchPreviewRequest$outboundSchema;
}

/** @internal */
export const SearchContextSizeRequest1$inboundSchema: z.ZodNativeEnum<
  typeof SearchContextSizeRequest1
> = z.nativeEnum(SearchContextSizeRequest1);

/** @internal */
export const SearchContextSizeRequest1$outboundSchema: z.ZodNativeEnum<
  typeof SearchContextSizeRequest1
> = SearchContextSizeRequest1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchContextSizeRequest1$ {
  /** @deprecated use `SearchContextSizeRequest1$inboundSchema` instead. */
  export const inboundSchema = SearchContextSizeRequest1$inboundSchema;
  /** @deprecated use `SearchContextSizeRequest1$outboundSchema` instead. */
  export const outboundSchema = SearchContextSizeRequest1$outboundSchema;
}

/** @internal */
export const TypeApproximateRequest1$inboundSchema: z.ZodNativeEnum<
  typeof TypeApproximateRequest1
> = z.nativeEnum(TypeApproximateRequest1);

/** @internal */
export const TypeApproximateRequest1$outboundSchema: z.ZodNativeEnum<
  typeof TypeApproximateRequest1
> = TypeApproximateRequest1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeApproximateRequest1$ {
  /** @deprecated use `TypeApproximateRequest1$inboundSchema` instead. */
  export const inboundSchema = TypeApproximateRequest1$inboundSchema;
  /** @deprecated use `TypeApproximateRequest1$outboundSchema` instead. */
  export const outboundSchema = TypeApproximateRequest1$outboundSchema;
}

/** @internal */
export const UserLocationRequest1$inboundSchema: z.ZodType<
  UserLocationRequest1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TypeApproximateRequest1$inboundSchema,
  city: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  region: z.nullable(z.string()).optional(),
  timezone: z.nullable(z.string()).optional(),
});

/** @internal */
export type UserLocationRequest1$Outbound = {
  type: string;
  city?: string | null | undefined;
  country?: string | null | undefined;
  region?: string | null | undefined;
  timezone?: string | null | undefined;
};

/** @internal */
export const UserLocationRequest1$outboundSchema: z.ZodType<
  UserLocationRequest1$Outbound,
  z.ZodTypeDef,
  UserLocationRequest1
> = z.object({
  type: TypeApproximateRequest1$outboundSchema,
  city: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  region: z.nullable(z.string()).optional(),
  timezone: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserLocationRequest1$ {
  /** @deprecated use `UserLocationRequest1$inboundSchema` instead. */
  export const inboundSchema = UserLocationRequest1$inboundSchema;
  /** @deprecated use `UserLocationRequest1$outboundSchema` instead. */
  export const outboundSchema = UserLocationRequest1$outboundSchema;
  /** @deprecated use `UserLocationRequest1$Outbound` instead. */
  export type Outbound = UserLocationRequest1$Outbound;
}

export function userLocationRequest1ToJSON(
  userLocationRequest1: UserLocationRequest1,
): string {
  return JSON.stringify(
    UserLocationRequest1$outboundSchema.parse(userLocationRequest1),
  );
}

export function userLocationRequest1FromJSON(
  jsonString: string,
): SafeParseResult<UserLocationRequest1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserLocationRequest1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserLocationRequest1' from JSON`,
  );
}

/** @internal */
export const ToolWebSearchPreviewRequest$inboundSchema: z.ZodType<
  ToolWebSearchPreviewRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ToolTypeWebSearchPreviewRequest$inboundSchema,
  search_context_size: SearchContextSizeRequest1$inboundSchema.optional(),
  user_location: z.nullable(z.lazy(() => UserLocationRequest1$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "search_context_size": "searchContextSize",
    "user_location": "userLocation",
  });
});

/** @internal */
export type ToolWebSearchPreviewRequest$Outbound = {
  type: string;
  search_context_size?: string | undefined;
  user_location?: UserLocationRequest1$Outbound | null | undefined;
};

/** @internal */
export const ToolWebSearchPreviewRequest$outboundSchema: z.ZodType<
  ToolWebSearchPreviewRequest$Outbound,
  z.ZodTypeDef,
  ToolWebSearchPreviewRequest
> = z.object({
  type: ToolTypeWebSearchPreviewRequest$outboundSchema,
  searchContextSize: SearchContextSizeRequest1$outboundSchema.optional(),
  userLocation: z.nullable(z.lazy(() => UserLocationRequest1$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    searchContextSize: "search_context_size",
    userLocation: "user_location",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolWebSearchPreviewRequest$ {
  /** @deprecated use `ToolWebSearchPreviewRequest$inboundSchema` instead. */
  export const inboundSchema = ToolWebSearchPreviewRequest$inboundSchema;
  /** @deprecated use `ToolWebSearchPreviewRequest$outboundSchema` instead. */
  export const outboundSchema = ToolWebSearchPreviewRequest$outboundSchema;
  /** @deprecated use `ToolWebSearchPreviewRequest$Outbound` instead. */
  export type Outbound = ToolWebSearchPreviewRequest$Outbound;
}

export function toolWebSearchPreviewRequestToJSON(
  toolWebSearchPreviewRequest: ToolWebSearchPreviewRequest,
): string {
  return JSON.stringify(
    ToolWebSearchPreviewRequest$outboundSchema.parse(
      toolWebSearchPreviewRequest,
    ),
  );
}

export function toolWebSearchPreviewRequestFromJSON(
  jsonString: string,
): SafeParseResult<ToolWebSearchPreviewRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolWebSearchPreviewRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolWebSearchPreviewRequest' from JSON`,
  );
}

/** @internal */
export const ToolTypeFunctionRequest$inboundSchema: z.ZodNativeEnum<
  typeof ToolTypeFunctionRequest
> = z.nativeEnum(ToolTypeFunctionRequest);

/** @internal */
export const ToolTypeFunctionRequest$outboundSchema: z.ZodNativeEnum<
  typeof ToolTypeFunctionRequest
> = ToolTypeFunctionRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolTypeFunctionRequest$ {
  /** @deprecated use `ToolTypeFunctionRequest$inboundSchema` instead. */
  export const inboundSchema = ToolTypeFunctionRequest$inboundSchema;
  /** @deprecated use `ToolTypeFunctionRequest$outboundSchema` instead. */
  export const outboundSchema = ToolTypeFunctionRequest$outboundSchema;
}

/** @internal */
export const ToolFunctionRequest$inboundSchema: z.ZodType<
  ToolFunctionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ToolTypeFunctionRequest$inboundSchema,
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  strict: z.nullable(z.boolean()).optional(),
  parameters: z.nullable(z.record(z.nullable(z.any()))),
});

/** @internal */
export type ToolFunctionRequest$Outbound = {
  type: string;
  name: string;
  description?: string | null | undefined;
  strict?: boolean | null | undefined;
  parameters: { [k: string]: any | null } | null;
};

/** @internal */
export const ToolFunctionRequest$outboundSchema: z.ZodType<
  ToolFunctionRequest$Outbound,
  z.ZodTypeDef,
  ToolFunctionRequest
> = z.object({
  type: ToolTypeFunctionRequest$outboundSchema,
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  strict: z.nullable(z.boolean()).optional(),
  parameters: z.nullable(z.record(z.nullable(z.any()))),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolFunctionRequest$ {
  /** @deprecated use `ToolFunctionRequest$inboundSchema` instead. */
  export const inboundSchema = ToolFunctionRequest$inboundSchema;
  /** @deprecated use `ToolFunctionRequest$outboundSchema` instead. */
  export const outboundSchema = ToolFunctionRequest$outboundSchema;
  /** @deprecated use `ToolFunctionRequest$Outbound` instead. */
  export type Outbound = ToolFunctionRequest$Outbound;
}

export function toolFunctionRequestToJSON(
  toolFunctionRequest: ToolFunctionRequest,
): string {
  return JSON.stringify(
    ToolFunctionRequest$outboundSchema.parse(toolFunctionRequest),
  );
}

export function toolFunctionRequestFromJSON(
  jsonString: string,
): SafeParseResult<ToolFunctionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolFunctionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolFunctionRequest' from JSON`,
  );
}

/** @internal */
export const ToolRequestUnion$inboundSchema: z.ZodType<
  ToolRequestUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ToolFunctionRequest$inboundSchema),
  z.lazy(() => ToolWebSearchPreviewRequest$inboundSchema),
  z.lazy(() => ToolWebSearchPreview20250311Request$inboundSchema),
  z.lazy(() => ToolWebSearchRequest$inboundSchema),
  z.lazy(() => ToolWebSearch20250826Request$inboundSchema),
]);

/** @internal */
export type ToolRequestUnion$Outbound =
  | ToolFunctionRequest$Outbound
  | ToolWebSearchPreviewRequest$Outbound
  | ToolWebSearchPreview20250311Request$Outbound
  | ToolWebSearchRequest$Outbound
  | ToolWebSearch20250826Request$Outbound;

/** @internal */
export const ToolRequestUnion$outboundSchema: z.ZodType<
  ToolRequestUnion$Outbound,
  z.ZodTypeDef,
  ToolRequestUnion
> = z.union([
  z.lazy(() => ToolFunctionRequest$outboundSchema),
  z.lazy(() => ToolWebSearchPreviewRequest$outboundSchema),
  z.lazy(() => ToolWebSearchPreview20250311Request$outboundSchema),
  z.lazy(() => ToolWebSearchRequest$outboundSchema),
  z.lazy(() => ToolWebSearch20250826Request$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolRequestUnion$ {
  /** @deprecated use `ToolRequestUnion$inboundSchema` instead. */
  export const inboundSchema = ToolRequestUnion$inboundSchema;
  /** @deprecated use `ToolRequestUnion$outboundSchema` instead. */
  export const outboundSchema = ToolRequestUnion$outboundSchema;
  /** @deprecated use `ToolRequestUnion$Outbound` instead. */
  export type Outbound = ToolRequestUnion$Outbound;
}

export function toolRequestUnionToJSON(
  toolRequestUnion: ToolRequestUnion,
): string {
  return JSON.stringify(
    ToolRequestUnion$outboundSchema.parse(toolRequestUnion),
  );
}

export function toolRequestUnionFromJSON(
  jsonString: string,
): SafeParseResult<ToolRequestUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolRequestUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolRequestUnion' from JSON`,
  );
}

/** @internal */
export const ToolChoiceTypeFunctionRequest$inboundSchema: z.ZodNativeEnum<
  typeof ToolChoiceTypeFunctionRequest
> = z.nativeEnum(ToolChoiceTypeFunctionRequest);

/** @internal */
export const ToolChoiceTypeFunctionRequest$outboundSchema: z.ZodNativeEnum<
  typeof ToolChoiceTypeFunctionRequest
> = ToolChoiceTypeFunctionRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolChoiceTypeFunctionRequest$ {
  /** @deprecated use `ToolChoiceTypeFunctionRequest$inboundSchema` instead. */
  export const inboundSchema = ToolChoiceTypeFunctionRequest$inboundSchema;
  /** @deprecated use `ToolChoiceTypeFunctionRequest$outboundSchema` instead. */
  export const outboundSchema = ToolChoiceTypeFunctionRequest$outboundSchema;
}

/** @internal */
export const ToolChoiceFunctionRequest$inboundSchema: z.ZodType<
  ToolChoiceFunctionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ToolChoiceTypeFunctionRequest$inboundSchema,
  name: z.string(),
});

/** @internal */
export type ToolChoiceFunctionRequest$Outbound = {
  type: string;
  name: string;
};

/** @internal */
export const ToolChoiceFunctionRequest$outboundSchema: z.ZodType<
  ToolChoiceFunctionRequest$Outbound,
  z.ZodTypeDef,
  ToolChoiceFunctionRequest
> = z.object({
  type: ToolChoiceTypeFunctionRequest$outboundSchema,
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolChoiceFunctionRequest$ {
  /** @deprecated use `ToolChoiceFunctionRequest$inboundSchema` instead. */
  export const inboundSchema = ToolChoiceFunctionRequest$inboundSchema;
  /** @deprecated use `ToolChoiceFunctionRequest$outboundSchema` instead. */
  export const outboundSchema = ToolChoiceFunctionRequest$outboundSchema;
  /** @deprecated use `ToolChoiceFunctionRequest$Outbound` instead. */
  export type Outbound = ToolChoiceFunctionRequest$Outbound;
}

export function toolChoiceFunctionRequestToJSON(
  toolChoiceFunctionRequest: ToolChoiceFunctionRequest,
): string {
  return JSON.stringify(
    ToolChoiceFunctionRequest$outboundSchema.parse(toolChoiceFunctionRequest),
  );
}

export function toolChoiceFunctionRequestFromJSON(
  jsonString: string,
): SafeParseResult<ToolChoiceFunctionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolChoiceFunctionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolChoiceFunctionRequest' from JSON`,
  );
}

/** @internal */
export const TypeCodeInterpreterRequest$inboundSchema: z.ZodNativeEnum<
  typeof TypeCodeInterpreterRequest
> = z.nativeEnum(TypeCodeInterpreterRequest);

/** @internal */
export const TypeCodeInterpreterRequest$outboundSchema: z.ZodNativeEnum<
  typeof TypeCodeInterpreterRequest
> = TypeCodeInterpreterRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeCodeInterpreterRequest$ {
  /** @deprecated use `TypeCodeInterpreterRequest$inboundSchema` instead. */
  export const inboundSchema = TypeCodeInterpreterRequest$inboundSchema;
  /** @deprecated use `TypeCodeInterpreterRequest$outboundSchema` instead. */
  export const outboundSchema = TypeCodeInterpreterRequest$outboundSchema;
}

/** @internal */
export const TypeComputerUsePreviewRequest$inboundSchema: z.ZodNativeEnum<
  typeof TypeComputerUsePreviewRequest
> = z.nativeEnum(TypeComputerUsePreviewRequest);

/** @internal */
export const TypeComputerUsePreviewRequest$outboundSchema: z.ZodNativeEnum<
  typeof TypeComputerUsePreviewRequest
> = TypeComputerUsePreviewRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeComputerUsePreviewRequest$ {
  /** @deprecated use `TypeComputerUsePreviewRequest$inboundSchema` instead. */
  export const inboundSchema = TypeComputerUsePreviewRequest$inboundSchema;
  /** @deprecated use `TypeComputerUsePreviewRequest$outboundSchema` instead. */
  export const outboundSchema = TypeComputerUsePreviewRequest$outboundSchema;
}

/** @internal */
export const ToolChoiceTypeWebSearchPreview20250311Request$inboundSchema:
  z.ZodNativeEnum<typeof ToolChoiceTypeWebSearchPreview20250311Request> = z
    .nativeEnum(ToolChoiceTypeWebSearchPreview20250311Request);

/** @internal */
export const ToolChoiceTypeWebSearchPreview20250311Request$outboundSchema:
  z.ZodNativeEnum<typeof ToolChoiceTypeWebSearchPreview20250311Request> =
    ToolChoiceTypeWebSearchPreview20250311Request$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolChoiceTypeWebSearchPreview20250311Request$ {
  /** @deprecated use `ToolChoiceTypeWebSearchPreview20250311Request$inboundSchema` instead. */
  export const inboundSchema =
    ToolChoiceTypeWebSearchPreview20250311Request$inboundSchema;
  /** @deprecated use `ToolChoiceTypeWebSearchPreview20250311Request$outboundSchema` instead. */
  export const outboundSchema =
    ToolChoiceTypeWebSearchPreview20250311Request$outboundSchema;
}

/** @internal */
export const ToolChoiceTypeWebSearchPreviewRequest$inboundSchema:
  z.ZodNativeEnum<typeof ToolChoiceTypeWebSearchPreviewRequest> = z.nativeEnum(
    ToolChoiceTypeWebSearchPreviewRequest,
  );

/** @internal */
export const ToolChoiceTypeWebSearchPreviewRequest$outboundSchema:
  z.ZodNativeEnum<typeof ToolChoiceTypeWebSearchPreviewRequest> =
    ToolChoiceTypeWebSearchPreviewRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolChoiceTypeWebSearchPreviewRequest$ {
  /** @deprecated use `ToolChoiceTypeWebSearchPreviewRequest$inboundSchema` instead. */
  export const inboundSchema =
    ToolChoiceTypeWebSearchPreviewRequest$inboundSchema;
  /** @deprecated use `ToolChoiceTypeWebSearchPreviewRequest$outboundSchema` instead. */
  export const outboundSchema =
    ToolChoiceTypeWebSearchPreviewRequest$outboundSchema;
}

/** @internal */
export const TypeFileSearchRequest$inboundSchema: z.ZodNativeEnum<
  typeof TypeFileSearchRequest
> = z.nativeEnum(TypeFileSearchRequest);

/** @internal */
export const TypeFileSearchRequest$outboundSchema: z.ZodNativeEnum<
  typeof TypeFileSearchRequest
> = TypeFileSearchRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeFileSearchRequest$ {
  /** @deprecated use `TypeFileSearchRequest$inboundSchema` instead. */
  export const inboundSchema = TypeFileSearchRequest$inboundSchema;
  /** @deprecated use `TypeFileSearchRequest$outboundSchema` instead. */
  export const outboundSchema = TypeFileSearchRequest$outboundSchema;
}

/** @internal */
export const TypeRequestUnion$inboundSchema: z.ZodType<
  TypeRequestUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  TypeFileSearchRequest$inboundSchema,
  ToolChoiceTypeWebSearchPreviewRequest$inboundSchema,
  ToolChoiceTypeWebSearchPreview20250311Request$inboundSchema,
  TypeComputerUsePreviewRequest$inboundSchema,
  TypeCodeInterpreterRequest$inboundSchema,
]);

/** @internal */
export type TypeRequestUnion$Outbound =
  | string
  | string
  | string
  | string
  | string;

/** @internal */
export const TypeRequestUnion$outboundSchema: z.ZodType<
  TypeRequestUnion$Outbound,
  z.ZodTypeDef,
  TypeRequestUnion
> = z.union([
  TypeFileSearchRequest$outboundSchema,
  ToolChoiceTypeWebSearchPreviewRequest$outboundSchema,
  ToolChoiceTypeWebSearchPreview20250311Request$outboundSchema,
  TypeComputerUsePreviewRequest$outboundSchema,
  TypeCodeInterpreterRequest$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeRequestUnion$ {
  /** @deprecated use `TypeRequestUnion$inboundSchema` instead. */
  export const inboundSchema = TypeRequestUnion$inboundSchema;
  /** @deprecated use `TypeRequestUnion$outboundSchema` instead. */
  export const outboundSchema = TypeRequestUnion$outboundSchema;
  /** @deprecated use `TypeRequestUnion$Outbound` instead. */
  export type Outbound = TypeRequestUnion$Outbound;
}

export function typeRequestUnionToJSON(
  typeRequestUnion: TypeRequestUnion,
): string {
  return JSON.stringify(
    TypeRequestUnion$outboundSchema.parse(typeRequestUnion),
  );
}

export function typeRequestUnionFromJSON(
  jsonString: string,
): SafeParseResult<TypeRequestUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TypeRequestUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TypeRequestUnion' from JSON`,
  );
}

/** @internal */
export const ToolChoiceRequest$inboundSchema: z.ZodType<
  ToolChoiceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.union([
    TypeFileSearchRequest$inboundSchema,
    ToolChoiceTypeWebSearchPreviewRequest$inboundSchema,
    ToolChoiceTypeWebSearchPreview20250311Request$inboundSchema,
    TypeComputerUsePreviewRequest$inboundSchema,
    TypeCodeInterpreterRequest$inboundSchema,
  ]),
});

/** @internal */
export type ToolChoiceRequest$Outbound = {
  type: string | string | string | string | string;
};

/** @internal */
export const ToolChoiceRequest$outboundSchema: z.ZodType<
  ToolChoiceRequest$Outbound,
  z.ZodTypeDef,
  ToolChoiceRequest
> = z.object({
  type: z.union([
    TypeFileSearchRequest$outboundSchema,
    ToolChoiceTypeWebSearchPreviewRequest$outboundSchema,
    ToolChoiceTypeWebSearchPreview20250311Request$outboundSchema,
    TypeComputerUsePreviewRequest$outboundSchema,
    TypeCodeInterpreterRequest$outboundSchema,
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolChoiceRequest$ {
  /** @deprecated use `ToolChoiceRequest$inboundSchema` instead. */
  export const inboundSchema = ToolChoiceRequest$inboundSchema;
  /** @deprecated use `ToolChoiceRequest$outboundSchema` instead. */
  export const outboundSchema = ToolChoiceRequest$outboundSchema;
  /** @deprecated use `ToolChoiceRequest$Outbound` instead. */
  export type Outbound = ToolChoiceRequest$Outbound;
}

export function toolChoiceRequestToJSON(
  toolChoiceRequest: ToolChoiceRequest,
): string {
  return JSON.stringify(
    ToolChoiceRequest$outboundSchema.parse(toolChoiceRequest),
  );
}

export function toolChoiceRequestFromJSON(
  jsonString: string,
): SafeParseResult<ToolChoiceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolChoiceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolChoiceRequest' from JSON`,
  );
}

/** @internal */
export const ToolChoiceRequiredRequest$inboundSchema: z.ZodNativeEnum<
  typeof ToolChoiceRequiredRequest
> = z.nativeEnum(ToolChoiceRequiredRequest);

/** @internal */
export const ToolChoiceRequiredRequest$outboundSchema: z.ZodNativeEnum<
  typeof ToolChoiceRequiredRequest
> = ToolChoiceRequiredRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolChoiceRequiredRequest$ {
  /** @deprecated use `ToolChoiceRequiredRequest$inboundSchema` instead. */
  export const inboundSchema = ToolChoiceRequiredRequest$inboundSchema;
  /** @deprecated use `ToolChoiceRequiredRequest$outboundSchema` instead. */
  export const outboundSchema = ToolChoiceRequiredRequest$outboundSchema;
}

/** @internal */
export const ToolChoiceNoneRequest$inboundSchema: z.ZodNativeEnum<
  typeof ToolChoiceNoneRequest
> = z.nativeEnum(ToolChoiceNoneRequest);

/** @internal */
export const ToolChoiceNoneRequest$outboundSchema: z.ZodNativeEnum<
  typeof ToolChoiceNoneRequest
> = ToolChoiceNoneRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolChoiceNoneRequest$ {
  /** @deprecated use `ToolChoiceNoneRequest$inboundSchema` instead. */
  export const inboundSchema = ToolChoiceNoneRequest$inboundSchema;
  /** @deprecated use `ToolChoiceNoneRequest$outboundSchema` instead. */
  export const outboundSchema = ToolChoiceNoneRequest$outboundSchema;
}

/** @internal */
export const ToolChoiceAutoRequest$inboundSchema: z.ZodNativeEnum<
  typeof ToolChoiceAutoRequest
> = z.nativeEnum(ToolChoiceAutoRequest);

/** @internal */
export const ToolChoiceAutoRequest$outboundSchema: z.ZodNativeEnum<
  typeof ToolChoiceAutoRequest
> = ToolChoiceAutoRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolChoiceAutoRequest$ {
  /** @deprecated use `ToolChoiceAutoRequest$inboundSchema` instead. */
  export const inboundSchema = ToolChoiceAutoRequest$inboundSchema;
  /** @deprecated use `ToolChoiceAutoRequest$outboundSchema` instead. */
  export const outboundSchema = ToolChoiceAutoRequest$outboundSchema;
}

/** @internal */
export const ToolChoiceRequestUnion$inboundSchema: z.ZodType<
  ToolChoiceRequestUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ToolChoiceFunctionRequest$inboundSchema),
  z.lazy(() => ToolChoiceRequest$inboundSchema),
  ToolChoiceAutoRequest$inboundSchema,
  ToolChoiceNoneRequest$inboundSchema,
  ToolChoiceRequiredRequest$inboundSchema,
]);

/** @internal */
export type ToolChoiceRequestUnion$Outbound =
  | ToolChoiceFunctionRequest$Outbound
  | ToolChoiceRequest$Outbound
  | string
  | string
  | string;

/** @internal */
export const ToolChoiceRequestUnion$outboundSchema: z.ZodType<
  ToolChoiceRequestUnion$Outbound,
  z.ZodTypeDef,
  ToolChoiceRequestUnion
> = z.union([
  z.lazy(() => ToolChoiceFunctionRequest$outboundSchema),
  z.lazy(() => ToolChoiceRequest$outboundSchema),
  ToolChoiceAutoRequest$outboundSchema,
  ToolChoiceNoneRequest$outboundSchema,
  ToolChoiceRequiredRequest$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolChoiceRequestUnion$ {
  /** @deprecated use `ToolChoiceRequestUnion$inboundSchema` instead. */
  export const inboundSchema = ToolChoiceRequestUnion$inboundSchema;
  /** @deprecated use `ToolChoiceRequestUnion$outboundSchema` instead. */
  export const outboundSchema = ToolChoiceRequestUnion$outboundSchema;
  /** @deprecated use `ToolChoiceRequestUnion$Outbound` instead. */
  export type Outbound = ToolChoiceRequestUnion$Outbound;
}

export function toolChoiceRequestUnionToJSON(
  toolChoiceRequestUnion: ToolChoiceRequestUnion,
): string {
  return JSON.stringify(
    ToolChoiceRequestUnion$outboundSchema.parse(toolChoiceRequestUnion),
  );
}

export function toolChoiceRequestUnionFromJSON(
  jsonString: string,
): SafeParseResult<ToolChoiceRequestUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolChoiceRequestUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolChoiceRequestUnion' from JSON`,
  );
}

/** @internal */
export const TypeJSONSchemaRequest$inboundSchema: z.ZodNativeEnum<
  typeof TypeJSONSchemaRequest
> = z.nativeEnum(TypeJSONSchemaRequest);

/** @internal */
export const TypeJSONSchemaRequest$outboundSchema: z.ZodNativeEnum<
  typeof TypeJSONSchemaRequest
> = TypeJSONSchemaRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeJSONSchemaRequest$ {
  /** @deprecated use `TypeJSONSchemaRequest$inboundSchema` instead. */
  export const inboundSchema = TypeJSONSchemaRequest$inboundSchema;
  /** @deprecated use `TypeJSONSchemaRequest$outboundSchema` instead. */
  export const outboundSchema = TypeJSONSchemaRequest$outboundSchema;
}

/** @internal */
export const FormatJSONSchemaRequest$inboundSchema: z.ZodType<
  FormatJSONSchemaRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TypeJSONSchemaRequest$inboundSchema,
  name: z.string(),
  description: z.string().optional(),
  strict: z.nullable(z.boolean()).optional(),
  schema: z.record(z.nullable(z.any())),
});

/** @internal */
export type FormatJSONSchemaRequest$Outbound = {
  type: string;
  name: string;
  description?: string | undefined;
  strict?: boolean | null | undefined;
  schema: { [k: string]: any | null };
};

/** @internal */
export const FormatJSONSchemaRequest$outboundSchema: z.ZodType<
  FormatJSONSchemaRequest$Outbound,
  z.ZodTypeDef,
  FormatJSONSchemaRequest
> = z.object({
  type: TypeJSONSchemaRequest$outboundSchema,
  name: z.string(),
  description: z.string().optional(),
  strict: z.nullable(z.boolean()).optional(),
  schema: z.record(z.nullable(z.any())),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FormatJSONSchemaRequest$ {
  /** @deprecated use `FormatJSONSchemaRequest$inboundSchema` instead. */
  export const inboundSchema = FormatJSONSchemaRequest$inboundSchema;
  /** @deprecated use `FormatJSONSchemaRequest$outboundSchema` instead. */
  export const outboundSchema = FormatJSONSchemaRequest$outboundSchema;
  /** @deprecated use `FormatJSONSchemaRequest$Outbound` instead. */
  export type Outbound = FormatJSONSchemaRequest$Outbound;
}

export function formatJSONSchemaRequestToJSON(
  formatJSONSchemaRequest: FormatJSONSchemaRequest,
): string {
  return JSON.stringify(
    FormatJSONSchemaRequest$outboundSchema.parse(formatJSONSchemaRequest),
  );
}

export function formatJSONSchemaRequestFromJSON(
  jsonString: string,
): SafeParseResult<FormatJSONSchemaRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FormatJSONSchemaRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FormatJSONSchemaRequest' from JSON`,
  );
}

/** @internal */
export const TypeJSONObjectRequest$inboundSchema: z.ZodNativeEnum<
  typeof TypeJSONObjectRequest
> = z.nativeEnum(TypeJSONObjectRequest);

/** @internal */
export const TypeJSONObjectRequest$outboundSchema: z.ZodNativeEnum<
  typeof TypeJSONObjectRequest
> = TypeJSONObjectRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeJSONObjectRequest$ {
  /** @deprecated use `TypeJSONObjectRequest$inboundSchema` instead. */
  export const inboundSchema = TypeJSONObjectRequest$inboundSchema;
  /** @deprecated use `TypeJSONObjectRequest$outboundSchema` instead. */
  export const outboundSchema = TypeJSONObjectRequest$outboundSchema;
}

/** @internal */
export const FormatJSONObjectRequest$inboundSchema: z.ZodType<
  FormatJSONObjectRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TypeJSONObjectRequest$inboundSchema,
});

/** @internal */
export type FormatJSONObjectRequest$Outbound = {
  type: string;
};

/** @internal */
export const FormatJSONObjectRequest$outboundSchema: z.ZodType<
  FormatJSONObjectRequest$Outbound,
  z.ZodTypeDef,
  FormatJSONObjectRequest
> = z.object({
  type: TypeJSONObjectRequest$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FormatJSONObjectRequest$ {
  /** @deprecated use `FormatJSONObjectRequest$inboundSchema` instead. */
  export const inboundSchema = FormatJSONObjectRequest$inboundSchema;
  /** @deprecated use `FormatJSONObjectRequest$outboundSchema` instead. */
  export const outboundSchema = FormatJSONObjectRequest$outboundSchema;
  /** @deprecated use `FormatJSONObjectRequest$Outbound` instead. */
  export type Outbound = FormatJSONObjectRequest$Outbound;
}

export function formatJSONObjectRequestToJSON(
  formatJSONObjectRequest: FormatJSONObjectRequest,
): string {
  return JSON.stringify(
    FormatJSONObjectRequest$outboundSchema.parse(formatJSONObjectRequest),
  );
}

export function formatJSONObjectRequestFromJSON(
  jsonString: string,
): SafeParseResult<FormatJSONObjectRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FormatJSONObjectRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FormatJSONObjectRequest' from JSON`,
  );
}

/** @internal */
export const FormatTypeRequest$inboundSchema: z.ZodNativeEnum<
  typeof FormatTypeRequest
> = z.nativeEnum(FormatTypeRequest);

/** @internal */
export const FormatTypeRequest$outboundSchema: z.ZodNativeEnum<
  typeof FormatTypeRequest
> = FormatTypeRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FormatTypeRequest$ {
  /** @deprecated use `FormatTypeRequest$inboundSchema` instead. */
  export const inboundSchema = FormatTypeRequest$inboundSchema;
  /** @deprecated use `FormatTypeRequest$outboundSchema` instead. */
  export const outboundSchema = FormatTypeRequest$outboundSchema;
}

/** @internal */
export const FormatTextRequest$inboundSchema: z.ZodType<
  FormatTextRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FormatTypeRequest$inboundSchema,
});

/** @internal */
export type FormatTextRequest$Outbound = {
  type: string;
};

/** @internal */
export const FormatTextRequest$outboundSchema: z.ZodType<
  FormatTextRequest$Outbound,
  z.ZodTypeDef,
  FormatTextRequest
> = z.object({
  type: FormatTypeRequest$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FormatTextRequest$ {
  /** @deprecated use `FormatTextRequest$inboundSchema` instead. */
  export const inboundSchema = FormatTextRequest$inboundSchema;
  /** @deprecated use `FormatTextRequest$outboundSchema` instead. */
  export const outboundSchema = FormatTextRequest$outboundSchema;
  /** @deprecated use `FormatTextRequest$Outbound` instead. */
  export type Outbound = FormatTextRequest$Outbound;
}

export function formatTextRequestToJSON(
  formatTextRequest: FormatTextRequest,
): string {
  return JSON.stringify(
    FormatTextRequest$outboundSchema.parse(formatTextRequest),
  );
}

export function formatTextRequestFromJSON(
  jsonString: string,
): SafeParseResult<FormatTextRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FormatTextRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FormatTextRequest' from JSON`,
  );
}

/** @internal */
export const FormatRequestUnion$inboundSchema: z.ZodType<
  FormatRequestUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => FormatJSONSchemaRequest$inboundSchema),
  z.lazy(() => FormatTextRequest$inboundSchema),
  z.lazy(() => FormatJSONObjectRequest$inboundSchema),
]);

/** @internal */
export type FormatRequestUnion$Outbound =
  | FormatJSONSchemaRequest$Outbound
  | FormatTextRequest$Outbound
  | FormatJSONObjectRequest$Outbound;

/** @internal */
export const FormatRequestUnion$outboundSchema: z.ZodType<
  FormatRequestUnion$Outbound,
  z.ZodTypeDef,
  FormatRequestUnion
> = z.union([
  z.lazy(() => FormatJSONSchemaRequest$outboundSchema),
  z.lazy(() => FormatTextRequest$outboundSchema),
  z.lazy(() => FormatJSONObjectRequest$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FormatRequestUnion$ {
  /** @deprecated use `FormatRequestUnion$inboundSchema` instead. */
  export const inboundSchema = FormatRequestUnion$inboundSchema;
  /** @deprecated use `FormatRequestUnion$outboundSchema` instead. */
  export const outboundSchema = FormatRequestUnion$outboundSchema;
  /** @deprecated use `FormatRequestUnion$Outbound` instead. */
  export type Outbound = FormatRequestUnion$Outbound;
}

export function formatRequestUnionToJSON(
  formatRequestUnion: FormatRequestUnion,
): string {
  return JSON.stringify(
    FormatRequestUnion$outboundSchema.parse(formatRequestUnion),
  );
}

export function formatRequestUnionFromJSON(
  jsonString: string,
): SafeParseResult<FormatRequestUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FormatRequestUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FormatRequestUnion' from JSON`,
  );
}

/** @internal */
export const VerbosityRequest$inboundSchema: z.ZodNativeEnum<
  typeof VerbosityRequest
> = z.nativeEnum(VerbosityRequest);

/** @internal */
export const VerbosityRequest$outboundSchema: z.ZodNativeEnum<
  typeof VerbosityRequest
> = VerbosityRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VerbosityRequest$ {
  /** @deprecated use `VerbosityRequest$inboundSchema` instead. */
  export const inboundSchema = VerbosityRequest$inboundSchema;
  /** @deprecated use `VerbosityRequest$outboundSchema` instead. */
  export const outboundSchema = VerbosityRequest$outboundSchema;
}

/** @internal */
export const TextRequest$inboundSchema: z.ZodType<
  TextRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  format: z.union([
    z.lazy(() => FormatJSONSchemaRequest$inboundSchema),
    z.lazy(() => FormatTextRequest$inboundSchema),
    z.lazy(() => FormatJSONObjectRequest$inboundSchema),
  ]).optional(),
  verbosity: z.nullable(VerbosityRequest$inboundSchema).optional(),
});

/** @internal */
export type TextRequest$Outbound = {
  format?:
    | FormatJSONSchemaRequest$Outbound
    | FormatTextRequest$Outbound
    | FormatJSONObjectRequest$Outbound
    | undefined;
  verbosity?: string | null | undefined;
};

/** @internal */
export const TextRequest$outboundSchema: z.ZodType<
  TextRequest$Outbound,
  z.ZodTypeDef,
  TextRequest
> = z.object({
  format: z.union([
    z.lazy(() => FormatJSONSchemaRequest$outboundSchema),
    z.lazy(() => FormatTextRequest$outboundSchema),
    z.lazy(() => FormatJSONObjectRequest$outboundSchema),
  ]).optional(),
  verbosity: z.nullable(VerbosityRequest$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TextRequest$ {
  /** @deprecated use `TextRequest$inboundSchema` instead. */
  export const inboundSchema = TextRequest$inboundSchema;
  /** @deprecated use `TextRequest$outboundSchema` instead. */
  export const outboundSchema = TextRequest$outboundSchema;
  /** @deprecated use `TextRequest$Outbound` instead. */
  export type Outbound = TextRequest$Outbound;
}

export function textRequestToJSON(textRequest: TextRequest): string {
  return JSON.stringify(TextRequest$outboundSchema.parse(textRequest));
}

export function textRequestFromJSON(
  jsonString: string,
): SafeParseResult<TextRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TextRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TextRequest' from JSON`,
  );
}

/** @internal */
export const EffortRequest$inboundSchema: z.ZodNativeEnum<
  typeof EffortRequest
> = z.nativeEnum(EffortRequest);

/** @internal */
export const EffortRequest$outboundSchema: z.ZodNativeEnum<
  typeof EffortRequest
> = EffortRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EffortRequest$ {
  /** @deprecated use `EffortRequest$inboundSchema` instead. */
  export const inboundSchema = EffortRequest$inboundSchema;
  /** @deprecated use `EffortRequest$outboundSchema` instead. */
  export const outboundSchema = EffortRequest$outboundSchema;
}

/** @internal */
export const SummaryRequestEnum$inboundSchema: z.ZodNativeEnum<
  typeof SummaryRequestEnum
> = z.nativeEnum(SummaryRequestEnum);

/** @internal */
export const SummaryRequestEnum$outboundSchema: z.ZodNativeEnum<
  typeof SummaryRequestEnum
> = SummaryRequestEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SummaryRequestEnum$ {
  /** @deprecated use `SummaryRequestEnum$inboundSchema` instead. */
  export const inboundSchema = SummaryRequestEnum$inboundSchema;
  /** @deprecated use `SummaryRequestEnum$outboundSchema` instead. */
  export const outboundSchema = SummaryRequestEnum$outboundSchema;
}

/** @internal */
export const ReasoningRequest$inboundSchema: z.ZodType<
  ReasoningRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  effort: z.nullable(EffortRequest$inboundSchema).optional(),
  summary: z.nullable(SummaryRequestEnum$inboundSchema).optional(),
});

/** @internal */
export type ReasoningRequest$Outbound = {
  effort?: string | null | undefined;
  summary?: string | null | undefined;
};

/** @internal */
export const ReasoningRequest$outboundSchema: z.ZodType<
  ReasoningRequest$Outbound,
  z.ZodTypeDef,
  ReasoningRequest
> = z.object({
  effort: z.nullable(EffortRequest$outboundSchema).optional(),
  summary: z.nullable(SummaryRequestEnum$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReasoningRequest$ {
  /** @deprecated use `ReasoningRequest$inboundSchema` instead. */
  export const inboundSchema = ReasoningRequest$inboundSchema;
  /** @deprecated use `ReasoningRequest$outboundSchema` instead. */
  export const outboundSchema = ReasoningRequest$outboundSchema;
  /** @deprecated use `ReasoningRequest$Outbound` instead. */
  export type Outbound = ReasoningRequest$Outbound;
}

export function reasoningRequestToJSON(
  reasoningRequest: ReasoningRequest,
): string {
  return JSON.stringify(
    ReasoningRequest$outboundSchema.parse(reasoningRequest),
  );
}

export function reasoningRequestFromJSON(
  jsonString: string,
): SafeParseResult<ReasoningRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReasoningRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReasoningRequest' from JSON`,
  );
}

/** @internal */
export const VariablesTypeInputFileRequest$inboundSchema: z.ZodNativeEnum<
  typeof VariablesTypeInputFileRequest
> = z.nativeEnum(VariablesTypeInputFileRequest);

/** @internal */
export const VariablesTypeInputFileRequest$outboundSchema: z.ZodNativeEnum<
  typeof VariablesTypeInputFileRequest
> = VariablesTypeInputFileRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VariablesTypeInputFileRequest$ {
  /** @deprecated use `VariablesTypeInputFileRequest$inboundSchema` instead. */
  export const inboundSchema = VariablesTypeInputFileRequest$inboundSchema;
  /** @deprecated use `VariablesTypeInputFileRequest$outboundSchema` instead. */
  export const outboundSchema = VariablesTypeInputFileRequest$outboundSchema;
}

/** @internal */
export const VariablesInputFileRequest$inboundSchema: z.ZodType<
  VariablesInputFileRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: VariablesTypeInputFileRequest$inboundSchema,
  file_id: z.nullable(z.string()).optional(),
  file_data: z.string().optional(),
  filename: z.string().optional(),
  file_url: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "file_id": "fileId",
    "file_data": "fileData",
    "file_url": "fileUrl",
  });
});

/** @internal */
export type VariablesInputFileRequest$Outbound = {
  type: string;
  file_id?: string | null | undefined;
  file_data?: string | undefined;
  filename?: string | undefined;
  file_url?: string | undefined;
};

/** @internal */
export const VariablesInputFileRequest$outboundSchema: z.ZodType<
  VariablesInputFileRequest$Outbound,
  z.ZodTypeDef,
  VariablesInputFileRequest
> = z.object({
  type: VariablesTypeInputFileRequest$outboundSchema,
  fileId: z.nullable(z.string()).optional(),
  fileData: z.string().optional(),
  filename: z.string().optional(),
  fileUrl: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    fileId: "file_id",
    fileData: "file_data",
    fileUrl: "file_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VariablesInputFileRequest$ {
  /** @deprecated use `VariablesInputFileRequest$inboundSchema` instead. */
  export const inboundSchema = VariablesInputFileRequest$inboundSchema;
  /** @deprecated use `VariablesInputFileRequest$outboundSchema` instead. */
  export const outboundSchema = VariablesInputFileRequest$outboundSchema;
  /** @deprecated use `VariablesInputFileRequest$Outbound` instead. */
  export type Outbound = VariablesInputFileRequest$Outbound;
}

export function variablesInputFileRequestToJSON(
  variablesInputFileRequest: VariablesInputFileRequest,
): string {
  return JSON.stringify(
    VariablesInputFileRequest$outboundSchema.parse(variablesInputFileRequest),
  );
}

export function variablesInputFileRequestFromJSON(
  jsonString: string,
): SafeParseResult<VariablesInputFileRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VariablesInputFileRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VariablesInputFileRequest' from JSON`,
  );
}

/** @internal */
export const VariablesTypeInputImageRequest$inboundSchema: z.ZodNativeEnum<
  typeof VariablesTypeInputImageRequest
> = z.nativeEnum(VariablesTypeInputImageRequest);

/** @internal */
export const VariablesTypeInputImageRequest$outboundSchema: z.ZodNativeEnum<
  typeof VariablesTypeInputImageRequest
> = VariablesTypeInputImageRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VariablesTypeInputImageRequest$ {
  /** @deprecated use `VariablesTypeInputImageRequest$inboundSchema` instead. */
  export const inboundSchema = VariablesTypeInputImageRequest$inboundSchema;
  /** @deprecated use `VariablesTypeInputImageRequest$outboundSchema` instead. */
  export const outboundSchema = VariablesTypeInputImageRequest$outboundSchema;
}

/** @internal */
export const VariablesDetailRequest$inboundSchema: z.ZodNativeEnum<
  typeof VariablesDetailRequest
> = z.nativeEnum(VariablesDetailRequest);

/** @internal */
export const VariablesDetailRequest$outboundSchema: z.ZodNativeEnum<
  typeof VariablesDetailRequest
> = VariablesDetailRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VariablesDetailRequest$ {
  /** @deprecated use `VariablesDetailRequest$inboundSchema` instead. */
  export const inboundSchema = VariablesDetailRequest$inboundSchema;
  /** @deprecated use `VariablesDetailRequest$outboundSchema` instead. */
  export const outboundSchema = VariablesDetailRequest$outboundSchema;
}

/** @internal */
export const VariablesInputImageRequest$inboundSchema: z.ZodType<
  VariablesInputImageRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: VariablesTypeInputImageRequest$inboundSchema,
  detail: VariablesDetailRequest$inboundSchema,
  image_url: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type VariablesInputImageRequest$Outbound = {
  type: string;
  detail: string;
  image_url?: string | null | undefined;
};

/** @internal */
export const VariablesInputImageRequest$outboundSchema: z.ZodType<
  VariablesInputImageRequest$Outbound,
  z.ZodTypeDef,
  VariablesInputImageRequest
> = z.object({
  type: VariablesTypeInputImageRequest$outboundSchema,
  detail: VariablesDetailRequest$outboundSchema,
  imageUrl: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VariablesInputImageRequest$ {
  /** @deprecated use `VariablesInputImageRequest$inboundSchema` instead. */
  export const inboundSchema = VariablesInputImageRequest$inboundSchema;
  /** @deprecated use `VariablesInputImageRequest$outboundSchema` instead. */
  export const outboundSchema = VariablesInputImageRequest$outboundSchema;
  /** @deprecated use `VariablesInputImageRequest$Outbound` instead. */
  export type Outbound = VariablesInputImageRequest$Outbound;
}

export function variablesInputImageRequestToJSON(
  variablesInputImageRequest: VariablesInputImageRequest,
): string {
  return JSON.stringify(
    VariablesInputImageRequest$outboundSchema.parse(variablesInputImageRequest),
  );
}

export function variablesInputImageRequestFromJSON(
  jsonString: string,
): SafeParseResult<VariablesInputImageRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VariablesInputImageRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VariablesInputImageRequest' from JSON`,
  );
}

/** @internal */
export const VariablesTypeInputTextRequest$inboundSchema: z.ZodNativeEnum<
  typeof VariablesTypeInputTextRequest
> = z.nativeEnum(VariablesTypeInputTextRequest);

/** @internal */
export const VariablesTypeInputTextRequest$outboundSchema: z.ZodNativeEnum<
  typeof VariablesTypeInputTextRequest
> = VariablesTypeInputTextRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VariablesTypeInputTextRequest$ {
  /** @deprecated use `VariablesTypeInputTextRequest$inboundSchema` instead. */
  export const inboundSchema = VariablesTypeInputTextRequest$inboundSchema;
  /** @deprecated use `VariablesTypeInputTextRequest$outboundSchema` instead. */
  export const outboundSchema = VariablesTypeInputTextRequest$outboundSchema;
}

/** @internal */
export const VariablesInputTextRequest$inboundSchema: z.ZodType<
  VariablesInputTextRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: VariablesTypeInputTextRequest$inboundSchema,
  text: z.string(),
});

/** @internal */
export type VariablesInputTextRequest$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const VariablesInputTextRequest$outboundSchema: z.ZodType<
  VariablesInputTextRequest$Outbound,
  z.ZodTypeDef,
  VariablesInputTextRequest
> = z.object({
  type: VariablesTypeInputTextRequest$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VariablesInputTextRequest$ {
  /** @deprecated use `VariablesInputTextRequest$inboundSchema` instead. */
  export const inboundSchema = VariablesInputTextRequest$inboundSchema;
  /** @deprecated use `VariablesInputTextRequest$outboundSchema` instead. */
  export const outboundSchema = VariablesInputTextRequest$outboundSchema;
  /** @deprecated use `VariablesInputTextRequest$Outbound` instead. */
  export type Outbound = VariablesInputTextRequest$Outbound;
}

export function variablesInputTextRequestToJSON(
  variablesInputTextRequest: VariablesInputTextRequest,
): string {
  return JSON.stringify(
    VariablesInputTextRequest$outboundSchema.parse(variablesInputTextRequest),
  );
}

export function variablesInputTextRequestFromJSON(
  jsonString: string,
): SafeParseResult<VariablesInputTextRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VariablesInputTextRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VariablesInputTextRequest' from JSON`,
  );
}

/** @internal */
export const VariablesRequestUnion$inboundSchema: z.ZodType<
  VariablesRequestUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => VariablesInputTextRequest$inboundSchema),
  z.lazy(() => VariablesInputImageRequest$inboundSchema),
  z.lazy(() => VariablesInputFileRequest$inboundSchema),
]);

/** @internal */
export type VariablesRequestUnion$Outbound =
  | VariablesInputTextRequest$Outbound
  | VariablesInputImageRequest$Outbound
  | VariablesInputFileRequest$Outbound;

/** @internal */
export const VariablesRequestUnion$outboundSchema: z.ZodType<
  VariablesRequestUnion$Outbound,
  z.ZodTypeDef,
  VariablesRequestUnion
> = z.union([
  z.lazy(() => VariablesInputTextRequest$outboundSchema),
  z.lazy(() => VariablesInputImageRequest$outboundSchema),
  z.lazy(() => VariablesInputFileRequest$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VariablesRequestUnion$ {
  /** @deprecated use `VariablesRequestUnion$inboundSchema` instead. */
  export const inboundSchema = VariablesRequestUnion$inboundSchema;
  /** @deprecated use `VariablesRequestUnion$outboundSchema` instead. */
  export const outboundSchema = VariablesRequestUnion$outboundSchema;
  /** @deprecated use `VariablesRequestUnion$Outbound` instead. */
  export type Outbound = VariablesRequestUnion$Outbound;
}

export function variablesRequestUnionToJSON(
  variablesRequestUnion: VariablesRequestUnion,
): string {
  return JSON.stringify(
    VariablesRequestUnion$outboundSchema.parse(variablesRequestUnion),
  );
}

export function variablesRequestUnionFromJSON(
  jsonString: string,
): SafeParseResult<VariablesRequestUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VariablesRequestUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VariablesRequestUnion' from JSON`,
  );
}

/** @internal */
export const PostApiAlphaResponsesPromptRequest$inboundSchema: z.ZodType<
  PostApiAlphaResponsesPromptRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  variables: z.nullable(
    z.record(z.union([
      z.lazy(() => VariablesInputTextRequest$inboundSchema),
      z.lazy(() =>
        VariablesInputImageRequest$inboundSchema
      ),
      z.lazy(() => VariablesInputFileRequest$inboundSchema),
    ])),
  ).optional(),
});

/** @internal */
export type PostApiAlphaResponsesPromptRequest$Outbound = {
  id: string;
  variables?:
    | {
      [k: string]:
        | VariablesInputTextRequest$Outbound
        | VariablesInputImageRequest$Outbound
        | VariablesInputFileRequest$Outbound;
    }
    | null
    | undefined;
};

/** @internal */
export const PostApiAlphaResponsesPromptRequest$outboundSchema: z.ZodType<
  PostApiAlphaResponsesPromptRequest$Outbound,
  z.ZodTypeDef,
  PostApiAlphaResponsesPromptRequest
> = z.object({
  id: z.string(),
  variables: z.nullable(
    z.record(z.union([
      z.lazy(() => VariablesInputTextRequest$outboundSchema),
      z.lazy(() =>
        VariablesInputImageRequest$outboundSchema
      ),
      z.lazy(() => VariablesInputFileRequest$outboundSchema),
    ])),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiAlphaResponsesPromptRequest$ {
  /** @deprecated use `PostApiAlphaResponsesPromptRequest$inboundSchema` instead. */
  export const inboundSchema = PostApiAlphaResponsesPromptRequest$inboundSchema;
  /** @deprecated use `PostApiAlphaResponsesPromptRequest$outboundSchema` instead. */
  export const outboundSchema =
    PostApiAlphaResponsesPromptRequest$outboundSchema;
  /** @deprecated use `PostApiAlphaResponsesPromptRequest$Outbound` instead. */
  export type Outbound = PostApiAlphaResponsesPromptRequest$Outbound;
}

export function postApiAlphaResponsesPromptRequestToJSON(
  postApiAlphaResponsesPromptRequest: PostApiAlphaResponsesPromptRequest,
): string {
  return JSON.stringify(
    PostApiAlphaResponsesPromptRequest$outboundSchema.parse(
      postApiAlphaResponsesPromptRequest,
    ),
  );
}

export function postApiAlphaResponsesPromptRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostApiAlphaResponsesPromptRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiAlphaResponsesPromptRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostApiAlphaResponsesPromptRequest' from JSON`,
  );
}

/** @internal */
export const Include$inboundSchema: z.ZodNativeEnum<typeof Include> = z
  .nativeEnum(Include);

/** @internal */
export const Include$outboundSchema: z.ZodNativeEnum<typeof Include> =
  Include$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Include$ {
  /** @deprecated use `Include$inboundSchema` instead. */
  export const inboundSchema = Include$inboundSchema;
  /** @deprecated use `Include$outboundSchema` instead. */
  export const outboundSchema = Include$outboundSchema;
}

/** @internal */
export const ServiceTierRequest$inboundSchema: z.ZodNativeEnum<
  typeof ServiceTierRequest
> = z.nativeEnum(ServiceTierRequest);

/** @internal */
export const ServiceTierRequest$outboundSchema: z.ZodNativeEnum<
  typeof ServiceTierRequest
> = ServiceTierRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceTierRequest$ {
  /** @deprecated use `ServiceTierRequest$inboundSchema` instead. */
  export const inboundSchema = ServiceTierRequest$inboundSchema;
  /** @deprecated use `ServiceTierRequest$outboundSchema` instead. */
  export const outboundSchema = ServiceTierRequest$outboundSchema;
}

/** @internal */
export const TruncationRequest$inboundSchema: z.ZodNativeEnum<
  typeof TruncationRequest
> = z.nativeEnum(TruncationRequest);

/** @internal */
export const TruncationRequest$outboundSchema: z.ZodNativeEnum<
  typeof TruncationRequest
> = TruncationRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TruncationRequest$ {
  /** @deprecated use `TruncationRequest$inboundSchema` instead. */
  export const inboundSchema = TruncationRequest$inboundSchema;
  /** @deprecated use `TruncationRequest$outboundSchema` instead. */
  export const outboundSchema = TruncationRequest$outboundSchema;
}

/** @internal */
export const PostApiAlphaResponsesDataCollection$inboundSchema: z.ZodNativeEnum<
  typeof PostApiAlphaResponsesDataCollection
> = z.nativeEnum(PostApiAlphaResponsesDataCollection);

/** @internal */
export const PostApiAlphaResponsesDataCollection$outboundSchema:
  z.ZodNativeEnum<typeof PostApiAlphaResponsesDataCollection> =
    PostApiAlphaResponsesDataCollection$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiAlphaResponsesDataCollection$ {
  /** @deprecated use `PostApiAlphaResponsesDataCollection$inboundSchema` instead. */
  export const inboundSchema =
    PostApiAlphaResponsesDataCollection$inboundSchema;
  /** @deprecated use `PostApiAlphaResponsesDataCollection$outboundSchema` instead. */
  export const outboundSchema =
    PostApiAlphaResponsesDataCollection$outboundSchema;
}

/** @internal */
export const PostApiAlphaResponsesOrderEnum$inboundSchema: z.ZodNativeEnum<
  typeof PostApiAlphaResponsesOrderEnum
> = z.nativeEnum(PostApiAlphaResponsesOrderEnum);

/** @internal */
export const PostApiAlphaResponsesOrderEnum$outboundSchema: z.ZodNativeEnum<
  typeof PostApiAlphaResponsesOrderEnum
> = PostApiAlphaResponsesOrderEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiAlphaResponsesOrderEnum$ {
  /** @deprecated use `PostApiAlphaResponsesOrderEnum$inboundSchema` instead. */
  export const inboundSchema = PostApiAlphaResponsesOrderEnum$inboundSchema;
  /** @deprecated use `PostApiAlphaResponsesOrderEnum$outboundSchema` instead. */
  export const outboundSchema = PostApiAlphaResponsesOrderEnum$outboundSchema;
}

/** @internal */
export const PostApiAlphaResponsesOrderUnion$inboundSchema: z.ZodType<
  PostApiAlphaResponsesOrderUnion,
  z.ZodTypeDef,
  unknown
> = z.union([PostApiAlphaResponsesOrderEnum$inboundSchema, z.string()]);

/** @internal */
export type PostApiAlphaResponsesOrderUnion$Outbound = string | string;

/** @internal */
export const PostApiAlphaResponsesOrderUnion$outboundSchema: z.ZodType<
  PostApiAlphaResponsesOrderUnion$Outbound,
  z.ZodTypeDef,
  PostApiAlphaResponsesOrderUnion
> = z.union([PostApiAlphaResponsesOrderEnum$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiAlphaResponsesOrderUnion$ {
  /** @deprecated use `PostApiAlphaResponsesOrderUnion$inboundSchema` instead. */
  export const inboundSchema = PostApiAlphaResponsesOrderUnion$inboundSchema;
  /** @deprecated use `PostApiAlphaResponsesOrderUnion$outboundSchema` instead. */
  export const outboundSchema = PostApiAlphaResponsesOrderUnion$outboundSchema;
  /** @deprecated use `PostApiAlphaResponsesOrderUnion$Outbound` instead. */
  export type Outbound = PostApiAlphaResponsesOrderUnion$Outbound;
}

export function postApiAlphaResponsesOrderUnionToJSON(
  postApiAlphaResponsesOrderUnion: PostApiAlphaResponsesOrderUnion,
): string {
  return JSON.stringify(
    PostApiAlphaResponsesOrderUnion$outboundSchema.parse(
      postApiAlphaResponsesOrderUnion,
    ),
  );
}

export function postApiAlphaResponsesOrderUnionFromJSON(
  jsonString: string,
): SafeParseResult<PostApiAlphaResponsesOrderUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostApiAlphaResponsesOrderUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostApiAlphaResponsesOrderUnion' from JSON`,
  );
}

/** @internal */
export const PostApiAlphaResponsesOnlyEnum$inboundSchema: z.ZodNativeEnum<
  typeof PostApiAlphaResponsesOnlyEnum
> = z.nativeEnum(PostApiAlphaResponsesOnlyEnum);

/** @internal */
export const PostApiAlphaResponsesOnlyEnum$outboundSchema: z.ZodNativeEnum<
  typeof PostApiAlphaResponsesOnlyEnum
> = PostApiAlphaResponsesOnlyEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiAlphaResponsesOnlyEnum$ {
  /** @deprecated use `PostApiAlphaResponsesOnlyEnum$inboundSchema` instead. */
  export const inboundSchema = PostApiAlphaResponsesOnlyEnum$inboundSchema;
  /** @deprecated use `PostApiAlphaResponsesOnlyEnum$outboundSchema` instead. */
  export const outboundSchema = PostApiAlphaResponsesOnlyEnum$outboundSchema;
}

/** @internal */
export const PostApiAlphaResponsesOnlyUnion$inboundSchema: z.ZodType<
  PostApiAlphaResponsesOnlyUnion,
  z.ZodTypeDef,
  unknown
> = z.union([PostApiAlphaResponsesOnlyEnum$inboundSchema, z.string()]);

/** @internal */
export type PostApiAlphaResponsesOnlyUnion$Outbound = string | string;

/** @internal */
export const PostApiAlphaResponsesOnlyUnion$outboundSchema: z.ZodType<
  PostApiAlphaResponsesOnlyUnion$Outbound,
  z.ZodTypeDef,
  PostApiAlphaResponsesOnlyUnion
> = z.union([PostApiAlphaResponsesOnlyEnum$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiAlphaResponsesOnlyUnion$ {
  /** @deprecated use `PostApiAlphaResponsesOnlyUnion$inboundSchema` instead. */
  export const inboundSchema = PostApiAlphaResponsesOnlyUnion$inboundSchema;
  /** @deprecated use `PostApiAlphaResponsesOnlyUnion$outboundSchema` instead. */
  export const outboundSchema = PostApiAlphaResponsesOnlyUnion$outboundSchema;
  /** @deprecated use `PostApiAlphaResponsesOnlyUnion$Outbound` instead. */
  export type Outbound = PostApiAlphaResponsesOnlyUnion$Outbound;
}

export function postApiAlphaResponsesOnlyUnionToJSON(
  postApiAlphaResponsesOnlyUnion: PostApiAlphaResponsesOnlyUnion,
): string {
  return JSON.stringify(
    PostApiAlphaResponsesOnlyUnion$outboundSchema.parse(
      postApiAlphaResponsesOnlyUnion,
    ),
  );
}

export function postApiAlphaResponsesOnlyUnionFromJSON(
  jsonString: string,
): SafeParseResult<PostApiAlphaResponsesOnlyUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostApiAlphaResponsesOnlyUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostApiAlphaResponsesOnlyUnion' from JSON`,
  );
}

/** @internal */
export const PostApiAlphaResponsesIgnoreEnum$inboundSchema: z.ZodNativeEnum<
  typeof PostApiAlphaResponsesIgnoreEnum
> = z.nativeEnum(PostApiAlphaResponsesIgnoreEnum);

/** @internal */
export const PostApiAlphaResponsesIgnoreEnum$outboundSchema: z.ZodNativeEnum<
  typeof PostApiAlphaResponsesIgnoreEnum
> = PostApiAlphaResponsesIgnoreEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiAlphaResponsesIgnoreEnum$ {
  /** @deprecated use `PostApiAlphaResponsesIgnoreEnum$inboundSchema` instead. */
  export const inboundSchema = PostApiAlphaResponsesIgnoreEnum$inboundSchema;
  /** @deprecated use `PostApiAlphaResponsesIgnoreEnum$outboundSchema` instead. */
  export const outboundSchema = PostApiAlphaResponsesIgnoreEnum$outboundSchema;
}

/** @internal */
export const PostApiAlphaResponsesIgnoreUnion$inboundSchema: z.ZodType<
  PostApiAlphaResponsesIgnoreUnion,
  z.ZodTypeDef,
  unknown
> = z.union([PostApiAlphaResponsesIgnoreEnum$inboundSchema, z.string()]);

/** @internal */
export type PostApiAlphaResponsesIgnoreUnion$Outbound = string | string;

/** @internal */
export const PostApiAlphaResponsesIgnoreUnion$outboundSchema: z.ZodType<
  PostApiAlphaResponsesIgnoreUnion$Outbound,
  z.ZodTypeDef,
  PostApiAlphaResponsesIgnoreUnion
> = z.union([PostApiAlphaResponsesIgnoreEnum$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiAlphaResponsesIgnoreUnion$ {
  /** @deprecated use `PostApiAlphaResponsesIgnoreUnion$inboundSchema` instead. */
  export const inboundSchema = PostApiAlphaResponsesIgnoreUnion$inboundSchema;
  /** @deprecated use `PostApiAlphaResponsesIgnoreUnion$outboundSchema` instead. */
  export const outboundSchema = PostApiAlphaResponsesIgnoreUnion$outboundSchema;
  /** @deprecated use `PostApiAlphaResponsesIgnoreUnion$Outbound` instead. */
  export type Outbound = PostApiAlphaResponsesIgnoreUnion$Outbound;
}

export function postApiAlphaResponsesIgnoreUnionToJSON(
  postApiAlphaResponsesIgnoreUnion: PostApiAlphaResponsesIgnoreUnion,
): string {
  return JSON.stringify(
    PostApiAlphaResponsesIgnoreUnion$outboundSchema.parse(
      postApiAlphaResponsesIgnoreUnion,
    ),
  );
}

export function postApiAlphaResponsesIgnoreUnionFromJSON(
  jsonString: string,
): SafeParseResult<PostApiAlphaResponsesIgnoreUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostApiAlphaResponsesIgnoreUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostApiAlphaResponsesIgnoreUnion' from JSON`,
  );
}

/** @internal */
export const PostApiAlphaResponsesQuantization$inboundSchema: z.ZodNativeEnum<
  typeof PostApiAlphaResponsesQuantization
> = z.nativeEnum(PostApiAlphaResponsesQuantization);

/** @internal */
export const PostApiAlphaResponsesQuantization$outboundSchema: z.ZodNativeEnum<
  typeof PostApiAlphaResponsesQuantization
> = PostApiAlphaResponsesQuantization$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiAlphaResponsesQuantization$ {
  /** @deprecated use `PostApiAlphaResponsesQuantization$inboundSchema` instead. */
  export const inboundSchema = PostApiAlphaResponsesQuantization$inboundSchema;
  /** @deprecated use `PostApiAlphaResponsesQuantization$outboundSchema` instead. */
  export const outboundSchema =
    PostApiAlphaResponsesQuantization$outboundSchema;
}

/** @internal */
export const PostApiAlphaResponsesSort$inboundSchema: z.ZodNativeEnum<
  typeof PostApiAlphaResponsesSort
> = z.nativeEnum(PostApiAlphaResponsesSort);

/** @internal */
export const PostApiAlphaResponsesSort$outboundSchema: z.ZodNativeEnum<
  typeof PostApiAlphaResponsesSort
> = PostApiAlphaResponsesSort$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiAlphaResponsesSort$ {
  /** @deprecated use `PostApiAlphaResponsesSort$inboundSchema` instead. */
  export const inboundSchema = PostApiAlphaResponsesSort$inboundSchema;
  /** @deprecated use `PostApiAlphaResponsesSort$outboundSchema` instead. */
  export const outboundSchema = PostApiAlphaResponsesSort$outboundSchema;
}

/** @internal */
export const PostApiAlphaResponsesMaxPricePrompt$inboundSchema: z.ZodType<
  PostApiAlphaResponsesMaxPricePrompt,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type PostApiAlphaResponsesMaxPricePrompt$Outbound =
  | number
  | string
  | any;

/** @internal */
export const PostApiAlphaResponsesMaxPricePrompt$outboundSchema: z.ZodType<
  PostApiAlphaResponsesMaxPricePrompt$Outbound,
  z.ZodTypeDef,
  PostApiAlphaResponsesMaxPricePrompt
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiAlphaResponsesMaxPricePrompt$ {
  /** @deprecated use `PostApiAlphaResponsesMaxPricePrompt$inboundSchema` instead. */
  export const inboundSchema =
    PostApiAlphaResponsesMaxPricePrompt$inboundSchema;
  /** @deprecated use `PostApiAlphaResponsesMaxPricePrompt$outboundSchema` instead. */
  export const outboundSchema =
    PostApiAlphaResponsesMaxPricePrompt$outboundSchema;
  /** @deprecated use `PostApiAlphaResponsesMaxPricePrompt$Outbound` instead. */
  export type Outbound = PostApiAlphaResponsesMaxPricePrompt$Outbound;
}

export function postApiAlphaResponsesMaxPricePromptToJSON(
  postApiAlphaResponsesMaxPricePrompt: PostApiAlphaResponsesMaxPricePrompt,
): string {
  return JSON.stringify(
    PostApiAlphaResponsesMaxPricePrompt$outboundSchema.parse(
      postApiAlphaResponsesMaxPricePrompt,
    ),
  );
}

export function postApiAlphaResponsesMaxPricePromptFromJSON(
  jsonString: string,
): SafeParseResult<PostApiAlphaResponsesMaxPricePrompt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiAlphaResponsesMaxPricePrompt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostApiAlphaResponsesMaxPricePrompt' from JSON`,
  );
}

/** @internal */
export const PostApiAlphaResponsesCompletion$inboundSchema: z.ZodType<
  PostApiAlphaResponsesCompletion,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type PostApiAlphaResponsesCompletion$Outbound = number | string | any;

/** @internal */
export const PostApiAlphaResponsesCompletion$outboundSchema: z.ZodType<
  PostApiAlphaResponsesCompletion$Outbound,
  z.ZodTypeDef,
  PostApiAlphaResponsesCompletion
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiAlphaResponsesCompletion$ {
  /** @deprecated use `PostApiAlphaResponsesCompletion$inboundSchema` instead. */
  export const inboundSchema = PostApiAlphaResponsesCompletion$inboundSchema;
  /** @deprecated use `PostApiAlphaResponsesCompletion$outboundSchema` instead. */
  export const outboundSchema = PostApiAlphaResponsesCompletion$outboundSchema;
  /** @deprecated use `PostApiAlphaResponsesCompletion$Outbound` instead. */
  export type Outbound = PostApiAlphaResponsesCompletion$Outbound;
}

export function postApiAlphaResponsesCompletionToJSON(
  postApiAlphaResponsesCompletion: PostApiAlphaResponsesCompletion,
): string {
  return JSON.stringify(
    PostApiAlphaResponsesCompletion$outboundSchema.parse(
      postApiAlphaResponsesCompletion,
    ),
  );
}

export function postApiAlphaResponsesCompletionFromJSON(
  jsonString: string,
): SafeParseResult<PostApiAlphaResponsesCompletion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostApiAlphaResponsesCompletion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostApiAlphaResponsesCompletion' from JSON`,
  );
}

/** @internal */
export const PostApiAlphaResponsesImage$inboundSchema: z.ZodType<
  PostApiAlphaResponsesImage,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type PostApiAlphaResponsesImage$Outbound = number | string | any;

/** @internal */
export const PostApiAlphaResponsesImage$outboundSchema: z.ZodType<
  PostApiAlphaResponsesImage$Outbound,
  z.ZodTypeDef,
  PostApiAlphaResponsesImage
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiAlphaResponsesImage$ {
  /** @deprecated use `PostApiAlphaResponsesImage$inboundSchema` instead. */
  export const inboundSchema = PostApiAlphaResponsesImage$inboundSchema;
  /** @deprecated use `PostApiAlphaResponsesImage$outboundSchema` instead. */
  export const outboundSchema = PostApiAlphaResponsesImage$outboundSchema;
  /** @deprecated use `PostApiAlphaResponsesImage$Outbound` instead. */
  export type Outbound = PostApiAlphaResponsesImage$Outbound;
}

export function postApiAlphaResponsesImageToJSON(
  postApiAlphaResponsesImage: PostApiAlphaResponsesImage,
): string {
  return JSON.stringify(
    PostApiAlphaResponsesImage$outboundSchema.parse(postApiAlphaResponsesImage),
  );
}

export function postApiAlphaResponsesImageFromJSON(
  jsonString: string,
): SafeParseResult<PostApiAlphaResponsesImage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostApiAlphaResponsesImage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostApiAlphaResponsesImage' from JSON`,
  );
}

/** @internal */
export const PostApiAlphaResponsesAudio$inboundSchema: z.ZodType<
  PostApiAlphaResponsesAudio,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type PostApiAlphaResponsesAudio$Outbound = number | string | any;

/** @internal */
export const PostApiAlphaResponsesAudio$outboundSchema: z.ZodType<
  PostApiAlphaResponsesAudio$Outbound,
  z.ZodTypeDef,
  PostApiAlphaResponsesAudio
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiAlphaResponsesAudio$ {
  /** @deprecated use `PostApiAlphaResponsesAudio$inboundSchema` instead. */
  export const inboundSchema = PostApiAlphaResponsesAudio$inboundSchema;
  /** @deprecated use `PostApiAlphaResponsesAudio$outboundSchema` instead. */
  export const outboundSchema = PostApiAlphaResponsesAudio$outboundSchema;
  /** @deprecated use `PostApiAlphaResponsesAudio$Outbound` instead. */
  export type Outbound = PostApiAlphaResponsesAudio$Outbound;
}

export function postApiAlphaResponsesAudioToJSON(
  postApiAlphaResponsesAudio: PostApiAlphaResponsesAudio,
): string {
  return JSON.stringify(
    PostApiAlphaResponsesAudio$outboundSchema.parse(postApiAlphaResponsesAudio),
  );
}

export function postApiAlphaResponsesAudioFromJSON(
  jsonString: string,
): SafeParseResult<PostApiAlphaResponsesAudio, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostApiAlphaResponsesAudio$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostApiAlphaResponsesAudio' from JSON`,
  );
}

/** @internal */
export const PostApiAlphaResponsesRequestUnion$inboundSchema: z.ZodType<
  PostApiAlphaResponsesRequestUnion,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type PostApiAlphaResponsesRequestUnion$Outbound = number | string | any;

/** @internal */
export const PostApiAlphaResponsesRequestUnion$outboundSchema: z.ZodType<
  PostApiAlphaResponsesRequestUnion$Outbound,
  z.ZodTypeDef,
  PostApiAlphaResponsesRequestUnion
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiAlphaResponsesRequestUnion$ {
  /** @deprecated use `PostApiAlphaResponsesRequestUnion$inboundSchema` instead. */
  export const inboundSchema = PostApiAlphaResponsesRequestUnion$inboundSchema;
  /** @deprecated use `PostApiAlphaResponsesRequestUnion$outboundSchema` instead. */
  export const outboundSchema =
    PostApiAlphaResponsesRequestUnion$outboundSchema;
  /** @deprecated use `PostApiAlphaResponsesRequestUnion$Outbound` instead. */
  export type Outbound = PostApiAlphaResponsesRequestUnion$Outbound;
}

export function postApiAlphaResponsesRequestUnionToJSON(
  postApiAlphaResponsesRequestUnion: PostApiAlphaResponsesRequestUnion,
): string {
  return JSON.stringify(
    PostApiAlphaResponsesRequestUnion$outboundSchema.parse(
      postApiAlphaResponsesRequestUnion,
    ),
  );
}

export function postApiAlphaResponsesRequestUnionFromJSON(
  jsonString: string,
): SafeParseResult<PostApiAlphaResponsesRequestUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostApiAlphaResponsesRequestUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostApiAlphaResponsesRequestUnion' from JSON`,
  );
}

/** @internal */
export const PostApiAlphaResponsesMaxPrice$inboundSchema: z.ZodType<
  PostApiAlphaResponsesMaxPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  prompt: z.union([z.number(), z.string(), z.any()]).optional(),
  completion: z.union([z.number(), z.string(), z.any()]).optional(),
  image: z.union([z.number(), z.string(), z.any()]).optional(),
  audio: z.union([z.number(), z.string(), z.any()]).optional(),
  request: z.union([z.number(), z.string(), z.any()]).optional(),
});

/** @internal */
export type PostApiAlphaResponsesMaxPrice$Outbound = {
  prompt?: number | string | any | undefined;
  completion?: number | string | any | undefined;
  image?: number | string | any | undefined;
  audio?: number | string | any | undefined;
  request?: number | string | any | undefined;
};

/** @internal */
export const PostApiAlphaResponsesMaxPrice$outboundSchema: z.ZodType<
  PostApiAlphaResponsesMaxPrice$Outbound,
  z.ZodTypeDef,
  PostApiAlphaResponsesMaxPrice
> = z.object({
  prompt: z.union([z.number(), z.string(), z.any()]).optional(),
  completion: z.union([z.number(), z.string(), z.any()]).optional(),
  image: z.union([z.number(), z.string(), z.any()]).optional(),
  audio: z.union([z.number(), z.string(), z.any()]).optional(),
  request: z.union([z.number(), z.string(), z.any()]).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiAlphaResponsesMaxPrice$ {
  /** @deprecated use `PostApiAlphaResponsesMaxPrice$inboundSchema` instead. */
  export const inboundSchema = PostApiAlphaResponsesMaxPrice$inboundSchema;
  /** @deprecated use `PostApiAlphaResponsesMaxPrice$outboundSchema` instead. */
  export const outboundSchema = PostApiAlphaResponsesMaxPrice$outboundSchema;
  /** @deprecated use `PostApiAlphaResponsesMaxPrice$Outbound` instead. */
  export type Outbound = PostApiAlphaResponsesMaxPrice$Outbound;
}

export function postApiAlphaResponsesMaxPriceToJSON(
  postApiAlphaResponsesMaxPrice: PostApiAlphaResponsesMaxPrice,
): string {
  return JSON.stringify(
    PostApiAlphaResponsesMaxPrice$outboundSchema.parse(
      postApiAlphaResponsesMaxPrice,
    ),
  );
}

export function postApiAlphaResponsesMaxPriceFromJSON(
  jsonString: string,
): SafeParseResult<PostApiAlphaResponsesMaxPrice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostApiAlphaResponsesMaxPrice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostApiAlphaResponsesMaxPrice' from JSON`,
  );
}

/** @internal */
export const PostApiAlphaResponsesExperimental$inboundSchema: z.ZodType<
  PostApiAlphaResponsesExperimental,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type PostApiAlphaResponsesExperimental$Outbound = {};

/** @internal */
export const PostApiAlphaResponsesExperimental$outboundSchema: z.ZodType<
  PostApiAlphaResponsesExperimental$Outbound,
  z.ZodTypeDef,
  PostApiAlphaResponsesExperimental
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiAlphaResponsesExperimental$ {
  /** @deprecated use `PostApiAlphaResponsesExperimental$inboundSchema` instead. */
  export const inboundSchema = PostApiAlphaResponsesExperimental$inboundSchema;
  /** @deprecated use `PostApiAlphaResponsesExperimental$outboundSchema` instead. */
  export const outboundSchema =
    PostApiAlphaResponsesExperimental$outboundSchema;
  /** @deprecated use `PostApiAlphaResponsesExperimental$Outbound` instead. */
  export type Outbound = PostApiAlphaResponsesExperimental$Outbound;
}

export function postApiAlphaResponsesExperimentalToJSON(
  postApiAlphaResponsesExperimental: PostApiAlphaResponsesExperimental,
): string {
  return JSON.stringify(
    PostApiAlphaResponsesExperimental$outboundSchema.parse(
      postApiAlphaResponsesExperimental,
    ),
  );
}

export function postApiAlphaResponsesExperimentalFromJSON(
  jsonString: string,
): SafeParseResult<PostApiAlphaResponsesExperimental, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostApiAlphaResponsesExperimental$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostApiAlphaResponsesExperimental' from JSON`,
  );
}

/** @internal */
export const PostApiAlphaResponsesProvider$inboundSchema: z.ZodType<
  PostApiAlphaResponsesProvider,
  z.ZodTypeDef,
  unknown
> = z.object({
  allow_fallbacks: z.nullable(z.boolean()).optional(),
  require_parameters: z.nullable(z.boolean()).optional(),
  data_collection: z.nullable(PostApiAlphaResponsesDataCollection$inboundSchema)
    .optional(),
  zdr: z.nullable(z.boolean()).optional(),
  order: z.nullable(
    z.array(
      z.union([PostApiAlphaResponsesOrderEnum$inboundSchema, z.string()]),
    ),
  ).optional(),
  only: z.nullable(
    z.array(z.union([PostApiAlphaResponsesOnlyEnum$inboundSchema, z.string()])),
  ).optional(),
  ignore: z.nullable(
    z.array(
      z.union([PostApiAlphaResponsesIgnoreEnum$inboundSchema, z.string()]),
    ),
  ).optional(),
  quantizations: z.nullable(
    z.array(PostApiAlphaResponsesQuantization$inboundSchema),
  ).optional(),
  sort: z.nullable(PostApiAlphaResponsesSort$inboundSchema).optional(),
  max_price: z.lazy(() => PostApiAlphaResponsesMaxPrice$inboundSchema)
    .optional(),
  experimental: z.nullable(
    z.lazy(() => PostApiAlphaResponsesExperimental$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "allow_fallbacks": "allowFallbacks",
    "require_parameters": "requireParameters",
    "data_collection": "dataCollection",
    "max_price": "maxPrice",
  });
});

/** @internal */
export type PostApiAlphaResponsesProvider$Outbound = {
  allow_fallbacks?: boolean | null | undefined;
  require_parameters?: boolean | null | undefined;
  data_collection?: string | null | undefined;
  zdr?: boolean | null | undefined;
  order?: Array<string | string> | null | undefined;
  only?: Array<string | string> | null | undefined;
  ignore?: Array<string | string> | null | undefined;
  quantizations?: Array<string> | null | undefined;
  sort?: string | null | undefined;
  max_price?: PostApiAlphaResponsesMaxPrice$Outbound | undefined;
  experimental?: PostApiAlphaResponsesExperimental$Outbound | null | undefined;
};

/** @internal */
export const PostApiAlphaResponsesProvider$outboundSchema: z.ZodType<
  PostApiAlphaResponsesProvider$Outbound,
  z.ZodTypeDef,
  PostApiAlphaResponsesProvider
> = z.object({
  allowFallbacks: z.nullable(z.boolean()).optional(),
  requireParameters: z.nullable(z.boolean()).optional(),
  dataCollection: z.nullable(PostApiAlphaResponsesDataCollection$outboundSchema)
    .optional(),
  zdr: z.nullable(z.boolean()).optional(),
  order: z.nullable(
    z.array(
      z.union([PostApiAlphaResponsesOrderEnum$outboundSchema, z.string()]),
    ),
  ).optional(),
  only: z.nullable(
    z.array(
      z.union([PostApiAlphaResponsesOnlyEnum$outboundSchema, z.string()]),
    ),
  ).optional(),
  ignore: z.nullable(
    z.array(
      z.union([PostApiAlphaResponsesIgnoreEnum$outboundSchema, z.string()]),
    ),
  ).optional(),
  quantizations: z.nullable(
    z.array(PostApiAlphaResponsesQuantization$outboundSchema),
  ).optional(),
  sort: z.nullable(PostApiAlphaResponsesSort$outboundSchema).optional(),
  maxPrice: z.lazy(() => PostApiAlphaResponsesMaxPrice$outboundSchema)
    .optional(),
  experimental: z.nullable(
    z.lazy(() => PostApiAlphaResponsesExperimental$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    allowFallbacks: "allow_fallbacks",
    requireParameters: "require_parameters",
    dataCollection: "data_collection",
    maxPrice: "max_price",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiAlphaResponsesProvider$ {
  /** @deprecated use `PostApiAlphaResponsesProvider$inboundSchema` instead. */
  export const inboundSchema = PostApiAlphaResponsesProvider$inboundSchema;
  /** @deprecated use `PostApiAlphaResponsesProvider$outboundSchema` instead. */
  export const outboundSchema = PostApiAlphaResponsesProvider$outboundSchema;
  /** @deprecated use `PostApiAlphaResponsesProvider$Outbound` instead. */
  export type Outbound = PostApiAlphaResponsesProvider$Outbound;
}

export function postApiAlphaResponsesProviderToJSON(
  postApiAlphaResponsesProvider: PostApiAlphaResponsesProvider,
): string {
  return JSON.stringify(
    PostApiAlphaResponsesProvider$outboundSchema.parse(
      postApiAlphaResponsesProvider,
    ),
  );
}

export function postApiAlphaResponsesProviderFromJSON(
  jsonString: string,
): SafeParseResult<PostApiAlphaResponsesProvider, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostApiAlphaResponsesProvider$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostApiAlphaResponsesProvider' from JSON`,
  );
}

/** @internal */
export const IdFileParser$inboundSchema: z.ZodNativeEnum<typeof IdFileParser> =
  z.nativeEnum(IdFileParser);

/** @internal */
export const IdFileParser$outboundSchema: z.ZodNativeEnum<typeof IdFileParser> =
  IdFileParser$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IdFileParser$ {
  /** @deprecated use `IdFileParser$inboundSchema` instead. */
  export const inboundSchema = IdFileParser$inboundSchema;
  /** @deprecated use `IdFileParser$outboundSchema` instead. */
  export const outboundSchema = IdFileParser$outboundSchema;
}

/** @internal */
export const PdfEngine$inboundSchema: z.ZodNativeEnum<typeof PdfEngine> = z
  .nativeEnum(PdfEngine);

/** @internal */
export const PdfEngine$outboundSchema: z.ZodNativeEnum<typeof PdfEngine> =
  PdfEngine$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PdfEngine$ {
  /** @deprecated use `PdfEngine$inboundSchema` instead. */
  export const inboundSchema = PdfEngine$inboundSchema;
  /** @deprecated use `PdfEngine$outboundSchema` instead. */
  export const outboundSchema = PdfEngine$outboundSchema;
}

/** @internal */
export const Pdf$inboundSchema: z.ZodType<Pdf, z.ZodTypeDef, unknown> = z
  .object({
    engine: PdfEngine$inboundSchema.optional(),
  });

/** @internal */
export type Pdf$Outbound = {
  engine?: string | undefined;
};

/** @internal */
export const Pdf$outboundSchema: z.ZodType<Pdf$Outbound, z.ZodTypeDef, Pdf> = z
  .object({
    engine: PdfEngine$outboundSchema.optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Pdf$ {
  /** @deprecated use `Pdf$inboundSchema` instead. */
  export const inboundSchema = Pdf$inboundSchema;
  /** @deprecated use `Pdf$outboundSchema` instead. */
  export const outboundSchema = Pdf$outboundSchema;
  /** @deprecated use `Pdf$Outbound` instead. */
  export type Outbound = Pdf$Outbound;
}

export function pdfToJSON(pdf: Pdf): string {
  return JSON.stringify(Pdf$outboundSchema.parse(pdf));
}

export function pdfFromJSON(
  jsonString: string,
): SafeParseResult<Pdf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Pdf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Pdf' from JSON`,
  );
}

/** @internal */
export const PluginFileParser$inboundSchema: z.ZodType<
  PluginFileParser,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: IdFileParser$inboundSchema,
  max_files: z.number().optional(),
  pdf: z.lazy(() => Pdf$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "max_files": "maxFiles",
  });
});

/** @internal */
export type PluginFileParser$Outbound = {
  id: string;
  max_files?: number | undefined;
  pdf?: Pdf$Outbound | undefined;
};

/** @internal */
export const PluginFileParser$outboundSchema: z.ZodType<
  PluginFileParser$Outbound,
  z.ZodTypeDef,
  PluginFileParser
> = z.object({
  id: IdFileParser$outboundSchema,
  maxFiles: z.number().optional(),
  pdf: z.lazy(() => Pdf$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    maxFiles: "max_files",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PluginFileParser$ {
  /** @deprecated use `PluginFileParser$inboundSchema` instead. */
  export const inboundSchema = PluginFileParser$inboundSchema;
  /** @deprecated use `PluginFileParser$outboundSchema` instead. */
  export const outboundSchema = PluginFileParser$outboundSchema;
  /** @deprecated use `PluginFileParser$Outbound` instead. */
  export type Outbound = PluginFileParser$Outbound;
}

export function pluginFileParserToJSON(
  pluginFileParser: PluginFileParser,
): string {
  return JSON.stringify(
    PluginFileParser$outboundSchema.parse(pluginFileParser),
  );
}

export function pluginFileParserFromJSON(
  jsonString: string,
): SafeParseResult<PluginFileParser, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PluginFileParser$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PluginFileParser' from JSON`,
  );
}

/** @internal */
export const IdChainOfThought$inboundSchema: z.ZodNativeEnum<
  typeof IdChainOfThought
> = z.nativeEnum(IdChainOfThought);

/** @internal */
export const IdChainOfThought$outboundSchema: z.ZodNativeEnum<
  typeof IdChainOfThought
> = IdChainOfThought$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IdChainOfThought$ {
  /** @deprecated use `IdChainOfThought$inboundSchema` instead. */
  export const inboundSchema = IdChainOfThought$inboundSchema;
  /** @deprecated use `IdChainOfThought$outboundSchema` instead. */
  export const outboundSchema = IdChainOfThought$outboundSchema;
}

/** @internal */
export const PluginChainOfThought$inboundSchema: z.ZodType<
  PluginChainOfThought,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: IdChainOfThought$inboundSchema,
});

/** @internal */
export type PluginChainOfThought$Outbound = {
  id: string;
};

/** @internal */
export const PluginChainOfThought$outboundSchema: z.ZodType<
  PluginChainOfThought$Outbound,
  z.ZodTypeDef,
  PluginChainOfThought
> = z.object({
  id: IdChainOfThought$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PluginChainOfThought$ {
  /** @deprecated use `PluginChainOfThought$inboundSchema` instead. */
  export const inboundSchema = PluginChainOfThought$inboundSchema;
  /** @deprecated use `PluginChainOfThought$outboundSchema` instead. */
  export const outboundSchema = PluginChainOfThought$outboundSchema;
  /** @deprecated use `PluginChainOfThought$Outbound` instead. */
  export type Outbound = PluginChainOfThought$Outbound;
}

export function pluginChainOfThoughtToJSON(
  pluginChainOfThought: PluginChainOfThought,
): string {
  return JSON.stringify(
    PluginChainOfThought$outboundSchema.parse(pluginChainOfThought),
  );
}

export function pluginChainOfThoughtFromJSON(
  jsonString: string,
): SafeParseResult<PluginChainOfThought, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PluginChainOfThought$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PluginChainOfThought' from JSON`,
  );
}

/** @internal */
export const IdWeb$inboundSchema: z.ZodNativeEnum<typeof IdWeb> = z.nativeEnum(
  IdWeb,
);

/** @internal */
export const IdWeb$outboundSchema: z.ZodNativeEnum<typeof IdWeb> =
  IdWeb$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IdWeb$ {
  /** @deprecated use `IdWeb$inboundSchema` instead. */
  export const inboundSchema = IdWeb$inboundSchema;
  /** @deprecated use `IdWeb$outboundSchema` instead. */
  export const outboundSchema = IdWeb$outboundSchema;
}

/** @internal */
export const Engine$inboundSchema: z.ZodNativeEnum<typeof Engine> = z
  .nativeEnum(Engine);

/** @internal */
export const Engine$outboundSchema: z.ZodNativeEnum<typeof Engine> =
  Engine$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Engine$ {
  /** @deprecated use `Engine$inboundSchema` instead. */
  export const inboundSchema = Engine$inboundSchema;
  /** @deprecated use `Engine$outboundSchema` instead. */
  export const outboundSchema = Engine$outboundSchema;
}

/** @internal */
export const PluginWeb$inboundSchema: z.ZodType<
  PluginWeb,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: IdWeb$inboundSchema,
  max_results: z.number().optional(),
  search_prompt: z.string().optional(),
  engine: Engine$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "max_results": "maxResults",
    "search_prompt": "searchPrompt",
  });
});

/** @internal */
export type PluginWeb$Outbound = {
  id: string;
  max_results?: number | undefined;
  search_prompt?: string | undefined;
  engine?: string | undefined;
};

/** @internal */
export const PluginWeb$outboundSchema: z.ZodType<
  PluginWeb$Outbound,
  z.ZodTypeDef,
  PluginWeb
> = z.object({
  id: IdWeb$outboundSchema,
  maxResults: z.number().optional(),
  searchPrompt: z.string().optional(),
  engine: Engine$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    maxResults: "max_results",
    searchPrompt: "search_prompt",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PluginWeb$ {
  /** @deprecated use `PluginWeb$inboundSchema` instead. */
  export const inboundSchema = PluginWeb$inboundSchema;
  /** @deprecated use `PluginWeb$outboundSchema` instead. */
  export const outboundSchema = PluginWeb$outboundSchema;
  /** @deprecated use `PluginWeb$Outbound` instead. */
  export type Outbound = PluginWeb$Outbound;
}

export function pluginWebToJSON(pluginWeb: PluginWeb): string {
  return JSON.stringify(PluginWeb$outboundSchema.parse(pluginWeb));
}

export function pluginWebFromJSON(
  jsonString: string,
): SafeParseResult<PluginWeb, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PluginWeb$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PluginWeb' from JSON`,
  );
}

/** @internal */
export const IdModeration$inboundSchema: z.ZodNativeEnum<typeof IdModeration> =
  z.nativeEnum(IdModeration);

/** @internal */
export const IdModeration$outboundSchema: z.ZodNativeEnum<typeof IdModeration> =
  IdModeration$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IdModeration$ {
  /** @deprecated use `IdModeration$inboundSchema` instead. */
  export const inboundSchema = IdModeration$inboundSchema;
  /** @deprecated use `IdModeration$outboundSchema` instead. */
  export const outboundSchema = IdModeration$outboundSchema;
}

/** @internal */
export const PluginModeration$inboundSchema: z.ZodType<
  PluginModeration,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: IdModeration$inboundSchema,
});

/** @internal */
export type PluginModeration$Outbound = {
  id: string;
};

/** @internal */
export const PluginModeration$outboundSchema: z.ZodType<
  PluginModeration$Outbound,
  z.ZodTypeDef,
  PluginModeration
> = z.object({
  id: IdModeration$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PluginModeration$ {
  /** @deprecated use `PluginModeration$inboundSchema` instead. */
  export const inboundSchema = PluginModeration$inboundSchema;
  /** @deprecated use `PluginModeration$outboundSchema` instead. */
  export const outboundSchema = PluginModeration$outboundSchema;
  /** @deprecated use `PluginModeration$Outbound` instead. */
  export type Outbound = PluginModeration$Outbound;
}

export function pluginModerationToJSON(
  pluginModeration: PluginModeration,
): string {
  return JSON.stringify(
    PluginModeration$outboundSchema.parse(pluginModeration),
  );
}

export function pluginModerationFromJSON(
  jsonString: string,
): SafeParseResult<PluginModeration, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PluginModeration$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PluginModeration' from JSON`,
  );
}

/** @internal */
export const Plugin$inboundSchema: z.ZodType<Plugin, z.ZodTypeDef, unknown> = z
  .union([
    z.lazy(() => PluginModeration$inboundSchema),
    z.lazy(() => PluginWeb$inboundSchema),
    z.lazy(() => PluginChainOfThought$inboundSchema),
    z.lazy(() => PluginFileParser$inboundSchema),
  ]);

/** @internal */
export type Plugin$Outbound =
  | PluginModeration$Outbound
  | PluginWeb$Outbound
  | PluginChainOfThought$Outbound
  | PluginFileParser$Outbound;

/** @internal */
export const Plugin$outboundSchema: z.ZodType<
  Plugin$Outbound,
  z.ZodTypeDef,
  Plugin
> = z.union([
  z.lazy(() => PluginModeration$outboundSchema),
  z.lazy(() => PluginWeb$outboundSchema),
  z.lazy(() => PluginChainOfThought$outboundSchema),
  z.lazy(() => PluginFileParser$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Plugin$ {
  /** @deprecated use `Plugin$inboundSchema` instead. */
  export const inboundSchema = Plugin$inboundSchema;
  /** @deprecated use `Plugin$outboundSchema` instead. */
  export const outboundSchema = Plugin$outboundSchema;
  /** @deprecated use `Plugin$Outbound` instead. */
  export type Outbound = Plugin$Outbound;
}

export function pluginToJSON(plugin: Plugin): string {
  return JSON.stringify(Plugin$outboundSchema.parse(plugin));
}

export function pluginFromJSON(
  jsonString: string,
): SafeParseResult<Plugin, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Plugin$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Plugin' from JSON`,
  );
}

/** @internal */
export const PostApiAlphaResponsesRequest$inboundSchema: z.ZodType<
  PostApiAlphaResponsesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  input: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => InputAssistant1$inboundSchema),
      z.lazy(() => InputFunctionCall1$inboundSchema),
      z.lazy(() => InputFunctionCallOutput$inboundSchema),
      z.lazy(() => InputImageGenerationCall1$inboundSchema),
      z.lazy(() => InputMessage2$inboundSchema),
      z.lazy(() => InputMessage1$inboundSchema),
      z.union([
        z.lazy(() => InputAssistant2$inboundSchema),
        z.lazy(() => InputFunctionCall2$inboundSchema),
        z.lazy(() => InputFileSearchCall$inboundSchema),
        z.lazy(() =>
          InputImageGenerationCall2$inboundSchema
        ),
        z.lazy(() => InputReasoning$inboundSchema),
        z.lazy(() => InputWebSearchCall$inboundSchema),
      ]),
    ])),
  ]).optional(),
  instructions: z.nullable(z.string()).optional(),
  metadata: z.nullable(z.record(z.string())).optional(),
  tools: z.array(
    z.union([
      z.lazy(() => ToolFunctionRequest$inboundSchema),
      z.lazy(() => ToolWebSearchPreviewRequest$inboundSchema),
      z.lazy(() => ToolWebSearchPreview20250311Request$inboundSchema),
      z.lazy(() => ToolWebSearchRequest$inboundSchema),
      z.lazy(() => ToolWebSearch20250826Request$inboundSchema),
    ]),
  ).optional(),
  tool_choice: z.union([
    z.lazy(() => ToolChoiceFunctionRequest$inboundSchema),
    z.lazy(() => ToolChoiceRequest$inboundSchema),
    ToolChoiceAutoRequest$inboundSchema,
    ToolChoiceNoneRequest$inboundSchema,
    ToolChoiceRequiredRequest$inboundSchema,
  ]).optional(),
  parallel_tool_calls: z.nullable(z.boolean()).optional(),
  model: z.string().optional(),
  models: z.array(z.string()).optional(),
  text: z.lazy(() => TextRequest$inboundSchema).optional(),
  reasoning: z.nullable(z.lazy(() => ReasoningRequest$inboundSchema))
    .optional(),
  max_output_tokens: z.nullable(z.number()).optional(),
  temperature: z.nullable(z.number()).optional(),
  top_p: z.nullable(z.number()).optional(),
  top_k: z.number().optional(),
  prompt_cache_key: z.string().optional(),
  previous_response_id: z.nullable(z.string()).optional(),
  prompt: z.nullable(
    z.lazy(() => PostApiAlphaResponsesPromptRequest$inboundSchema),
  ).optional(),
  include: z.nullable(z.array(Include$inboundSchema)).optional(),
  background: z.nullable(z.boolean()).optional(),
  safety_identifier: z.string().optional(),
  store: z.nullable(z.boolean()).optional(),
  service_tier: z.nullable(ServiceTierRequest$inboundSchema).optional(),
  truncation: z.nullable(TruncationRequest$inboundSchema).optional(),
  stream: z.nullable(z.boolean()).optional(),
  provider: z.nullable(
    z.lazy(() => PostApiAlphaResponsesProvider$inboundSchema),
  ).optional(),
  plugins: z.array(
    z.union([
      z.lazy(() => PluginModeration$inboundSchema),
      z.lazy(() => PluginWeb$inboundSchema),
      z.lazy(() => PluginChainOfThought$inboundSchema),
      z.lazy(() => PluginFileParser$inboundSchema),
    ]),
  ).optional(),
  user: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_choice": "toolChoice",
    "parallel_tool_calls": "parallelToolCalls",
    "max_output_tokens": "maxOutputTokens",
    "top_p": "topP",
    "top_k": "topK",
    "prompt_cache_key": "promptCacheKey",
    "previous_response_id": "previousResponseId",
    "safety_identifier": "safetyIdentifier",
    "service_tier": "serviceTier",
  });
});

/** @internal */
export type PostApiAlphaResponsesRequest$Outbound = {
  input?:
    | string
    | Array<
      | InputAssistant1$Outbound
      | InputFunctionCall1$Outbound
      | InputFunctionCallOutput$Outbound
      | InputImageGenerationCall1$Outbound
      | InputMessage2$Outbound
      | InputMessage1$Outbound
      | InputAssistant2$Outbound
      | InputFunctionCall2$Outbound
      | InputFileSearchCall$Outbound
      | InputImageGenerationCall2$Outbound
      | InputReasoning$Outbound
      | InputWebSearchCall$Outbound
    >
    | undefined;
  instructions?: string | null | undefined;
  metadata?: { [k: string]: string } | null | undefined;
  tools?:
    | Array<
      | ToolFunctionRequest$Outbound
      | ToolWebSearchPreviewRequest$Outbound
      | ToolWebSearchPreview20250311Request$Outbound
      | ToolWebSearchRequest$Outbound
      | ToolWebSearch20250826Request$Outbound
    >
    | undefined;
  tool_choice?:
    | ToolChoiceFunctionRequest$Outbound
    | ToolChoiceRequest$Outbound
    | string
    | string
    | string
    | undefined;
  parallel_tool_calls?: boolean | null | undefined;
  model?: string | undefined;
  models?: Array<string> | undefined;
  text?: TextRequest$Outbound | undefined;
  reasoning?: ReasoningRequest$Outbound | null | undefined;
  max_output_tokens?: number | null | undefined;
  temperature?: number | null | undefined;
  top_p?: number | null | undefined;
  top_k?: number | undefined;
  prompt_cache_key?: string | undefined;
  previous_response_id?: string | null | undefined;
  prompt?: PostApiAlphaResponsesPromptRequest$Outbound | null | undefined;
  include?: Array<string> | null | undefined;
  background?: boolean | null | undefined;
  safety_identifier?: string | undefined;
  store?: boolean | null | undefined;
  service_tier?: string | null | undefined;
  truncation?: string | null | undefined;
  stream?: boolean | null | undefined;
  provider?: PostApiAlphaResponsesProvider$Outbound | null | undefined;
  plugins?:
    | Array<
      | PluginModeration$Outbound
      | PluginWeb$Outbound
      | PluginChainOfThought$Outbound
      | PluginFileParser$Outbound
    >
    | undefined;
  user?: string | undefined;
};

/** @internal */
export const PostApiAlphaResponsesRequest$outboundSchema: z.ZodType<
  PostApiAlphaResponsesRequest$Outbound,
  z.ZodTypeDef,
  PostApiAlphaResponsesRequest
> = z.object({
  input: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => InputAssistant1$outboundSchema),
      z.lazy(() => InputFunctionCall1$outboundSchema),
      z.lazy(() => InputFunctionCallOutput$outboundSchema),
      z.lazy(() => InputImageGenerationCall1$outboundSchema),
      z.lazy(() => InputMessage2$outboundSchema),
      z.lazy(() => InputMessage1$outboundSchema),
      z.union([
        z.lazy(() => InputAssistant2$outboundSchema),
        z.lazy(() => InputFunctionCall2$outboundSchema),
        z.lazy(() => InputFileSearchCall$outboundSchema),
        z.lazy(() =>
          InputImageGenerationCall2$outboundSchema
        ),
        z.lazy(() => InputReasoning$outboundSchema),
        z.lazy(() => InputWebSearchCall$outboundSchema),
      ]),
    ])),
  ]).optional(),
  instructions: z.nullable(z.string()).optional(),
  metadata: z.nullable(z.record(z.string())).optional(),
  tools: z.array(
    z.union([
      z.lazy(() => ToolFunctionRequest$outboundSchema),
      z.lazy(() => ToolWebSearchPreviewRequest$outboundSchema),
      z.lazy(() => ToolWebSearchPreview20250311Request$outboundSchema),
      z.lazy(() => ToolWebSearchRequest$outboundSchema),
      z.lazy(() => ToolWebSearch20250826Request$outboundSchema),
    ]),
  ).optional(),
  toolChoice: z.union([
    z.lazy(() => ToolChoiceFunctionRequest$outboundSchema),
    z.lazy(() => ToolChoiceRequest$outboundSchema),
    ToolChoiceAutoRequest$outboundSchema,
    ToolChoiceNoneRequest$outboundSchema,
    ToolChoiceRequiredRequest$outboundSchema,
  ]).optional(),
  parallelToolCalls: z.nullable(z.boolean()).optional(),
  model: z.string().optional(),
  models: z.array(z.string()).optional(),
  text: z.lazy(() => TextRequest$outboundSchema).optional(),
  reasoning: z.nullable(z.lazy(() => ReasoningRequest$outboundSchema))
    .optional(),
  maxOutputTokens: z.nullable(z.number()).optional(),
  temperature: z.nullable(z.number()).optional(),
  topP: z.nullable(z.number()).optional(),
  topK: z.number().optional(),
  promptCacheKey: z.string().optional(),
  previousResponseId: z.nullable(z.string()).optional(),
  prompt: z.nullable(
    z.lazy(() => PostApiAlphaResponsesPromptRequest$outboundSchema),
  ).optional(),
  include: z.nullable(z.array(Include$outboundSchema)).optional(),
  background: z.nullable(z.boolean()).optional(),
  safetyIdentifier: z.string().optional(),
  store: z.nullable(z.boolean()).optional(),
  serviceTier: z.nullable(ServiceTierRequest$outboundSchema).optional(),
  truncation: z.nullable(TruncationRequest$outboundSchema).optional(),
  stream: z.nullable(z.boolean()).optional(),
  provider: z.nullable(
    z.lazy(() => PostApiAlphaResponsesProvider$outboundSchema),
  ).optional(),
  plugins: z.array(
    z.union([
      z.lazy(() => PluginModeration$outboundSchema),
      z.lazy(() => PluginWeb$outboundSchema),
      z.lazy(() => PluginChainOfThought$outboundSchema),
      z.lazy(() => PluginFileParser$outboundSchema),
    ]),
  ).optional(),
  user: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    toolChoice: "tool_choice",
    parallelToolCalls: "parallel_tool_calls",
    maxOutputTokens: "max_output_tokens",
    topP: "top_p",
    topK: "top_k",
    promptCacheKey: "prompt_cache_key",
    previousResponseId: "previous_response_id",
    safetyIdentifier: "safety_identifier",
    serviceTier: "service_tier",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiAlphaResponsesRequest$ {
  /** @deprecated use `PostApiAlphaResponsesRequest$inboundSchema` instead. */
  export const inboundSchema = PostApiAlphaResponsesRequest$inboundSchema;
  /** @deprecated use `PostApiAlphaResponsesRequest$outboundSchema` instead. */
  export const outboundSchema = PostApiAlphaResponsesRequest$outboundSchema;
  /** @deprecated use `PostApiAlphaResponsesRequest$Outbound` instead. */
  export type Outbound = PostApiAlphaResponsesRequest$Outbound;
}

export function postApiAlphaResponsesRequestToJSON(
  postApiAlphaResponsesRequest: PostApiAlphaResponsesRequest,
): string {
  return JSON.stringify(
    PostApiAlphaResponsesRequest$outboundSchema.parse(
      postApiAlphaResponsesRequest,
    ),
  );
}

export function postApiAlphaResponsesRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostApiAlphaResponsesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostApiAlphaResponsesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostApiAlphaResponsesRequest' from JSON`,
  );
}

/** @internal */
export const PostApiAlphaResponsesObject$inboundSchema: z.ZodNativeEnum<
  typeof PostApiAlphaResponsesObject
> = z.nativeEnum(PostApiAlphaResponsesObject);

/** @internal */
export const PostApiAlphaResponsesObject$outboundSchema: z.ZodNativeEnum<
  typeof PostApiAlphaResponsesObject
> = PostApiAlphaResponsesObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiAlphaResponsesObject$ {
  /** @deprecated use `PostApiAlphaResponsesObject$inboundSchema` instead. */
  export const inboundSchema = PostApiAlphaResponsesObject$inboundSchema;
  /** @deprecated use `PostApiAlphaResponsesObject$outboundSchema` instead. */
  export const outboundSchema = PostApiAlphaResponsesObject$outboundSchema;
}

/** @internal */
export const PostApiAlphaResponsesStatusResponseEnum$inboundSchema:
  z.ZodNativeEnum<typeof PostApiAlphaResponsesStatusResponseEnum> = z
    .nativeEnum(PostApiAlphaResponsesStatusResponseEnum);

/** @internal */
export const PostApiAlphaResponsesStatusResponseEnum$outboundSchema:
  z.ZodNativeEnum<typeof PostApiAlphaResponsesStatusResponseEnum> =
    PostApiAlphaResponsesStatusResponseEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiAlphaResponsesStatusResponseEnum$ {
  /** @deprecated use `PostApiAlphaResponsesStatusResponseEnum$inboundSchema` instead. */
  export const inboundSchema =
    PostApiAlphaResponsesStatusResponseEnum$inboundSchema;
  /** @deprecated use `PostApiAlphaResponsesStatusResponseEnum$outboundSchema` instead. */
  export const outboundSchema =
    PostApiAlphaResponsesStatusResponseEnum$outboundSchema;
}

/** @internal */
export const OutputTypeImageGenerationCall$inboundSchema: z.ZodNativeEnum<
  typeof OutputTypeImageGenerationCall
> = z.nativeEnum(OutputTypeImageGenerationCall);

/** @internal */
export const OutputTypeImageGenerationCall$outboundSchema: z.ZodNativeEnum<
  typeof OutputTypeImageGenerationCall
> = OutputTypeImageGenerationCall$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputTypeImageGenerationCall$ {
  /** @deprecated use `OutputTypeImageGenerationCall$inboundSchema` instead. */
  export const inboundSchema = OutputTypeImageGenerationCall$inboundSchema;
  /** @deprecated use `OutputTypeImageGenerationCall$outboundSchema` instead. */
  export const outboundSchema = OutputTypeImageGenerationCall$outboundSchema;
}

/** @internal */
export const OutputStatusEnum3$inboundSchema: z.ZodNativeEnum<
  typeof OutputStatusEnum3
> = z.nativeEnum(OutputStatusEnum3);

/** @internal */
export const OutputStatusEnum3$outboundSchema: z.ZodNativeEnum<
  typeof OutputStatusEnum3
> = OutputStatusEnum3$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputStatusEnum3$ {
  /** @deprecated use `OutputStatusEnum3$inboundSchema` instead. */
  export const inboundSchema = OutputStatusEnum3$inboundSchema;
  /** @deprecated use `OutputStatusEnum3$outboundSchema` instead. */
  export const outboundSchema = OutputStatusEnum3$outboundSchema;
}

/** @internal */
export const OutputImageGenerationCall$inboundSchema: z.ZodType<
  OutputImageGenerationCall,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: OutputTypeImageGenerationCall$inboundSchema,
  id: z.string(),
  result: z.nullable(z.string()),
  status: OutputStatusEnum3$inboundSchema,
});

/** @internal */
export type OutputImageGenerationCall$Outbound = {
  type: string;
  id: string;
  result: string | null;
  status: string;
};

/** @internal */
export const OutputImageGenerationCall$outboundSchema: z.ZodType<
  OutputImageGenerationCall$Outbound,
  z.ZodTypeDef,
  OutputImageGenerationCall
> = z.object({
  type: OutputTypeImageGenerationCall$outboundSchema,
  id: z.string(),
  result: z.nullable(z.string()),
  status: OutputStatusEnum3$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputImageGenerationCall$ {
  /** @deprecated use `OutputImageGenerationCall$inboundSchema` instead. */
  export const inboundSchema = OutputImageGenerationCall$inboundSchema;
  /** @deprecated use `OutputImageGenerationCall$outboundSchema` instead. */
  export const outboundSchema = OutputImageGenerationCall$outboundSchema;
  /** @deprecated use `OutputImageGenerationCall$Outbound` instead. */
  export type Outbound = OutputImageGenerationCall$Outbound;
}

export function outputImageGenerationCallToJSON(
  outputImageGenerationCall: OutputImageGenerationCall,
): string {
  return JSON.stringify(
    OutputImageGenerationCall$outboundSchema.parse(outputImageGenerationCall),
  );
}

export function outputImageGenerationCallFromJSON(
  jsonString: string,
): SafeParseResult<OutputImageGenerationCall, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputImageGenerationCall$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputImageGenerationCall' from JSON`,
  );
}

/** @internal */
export const OutputTypeFileSearchCall$inboundSchema: z.ZodNativeEnum<
  typeof OutputTypeFileSearchCall
> = z.nativeEnum(OutputTypeFileSearchCall);

/** @internal */
export const OutputTypeFileSearchCall$outboundSchema: z.ZodNativeEnum<
  typeof OutputTypeFileSearchCall
> = OutputTypeFileSearchCall$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputTypeFileSearchCall$ {
  /** @deprecated use `OutputTypeFileSearchCall$inboundSchema` instead. */
  export const inboundSchema = OutputTypeFileSearchCall$inboundSchema;
  /** @deprecated use `OutputTypeFileSearchCall$outboundSchema` instead. */
  export const outboundSchema = OutputTypeFileSearchCall$outboundSchema;
}

/** @internal */
export const OutputStatusEnum2$inboundSchema: z.ZodNativeEnum<
  typeof OutputStatusEnum2
> = z.nativeEnum(OutputStatusEnum2);

/** @internal */
export const OutputStatusEnum2$outboundSchema: z.ZodNativeEnum<
  typeof OutputStatusEnum2
> = OutputStatusEnum2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputStatusEnum2$ {
  /** @deprecated use `OutputStatusEnum2$inboundSchema` instead. */
  export const inboundSchema = OutputStatusEnum2$inboundSchema;
  /** @deprecated use `OutputStatusEnum2$outboundSchema` instead. */
  export const outboundSchema = OutputStatusEnum2$outboundSchema;
}

/** @internal */
export const OutputFileSearchCall$inboundSchema: z.ZodType<
  OutputFileSearchCall,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: OutputTypeFileSearchCall$inboundSchema,
  id: z.string(),
  queries: z.array(z.string()),
  status: OutputStatusEnum2$inboundSchema,
});

/** @internal */
export type OutputFileSearchCall$Outbound = {
  type: string;
  id: string;
  queries: Array<string>;
  status: string;
};

/** @internal */
export const OutputFileSearchCall$outboundSchema: z.ZodType<
  OutputFileSearchCall$Outbound,
  z.ZodTypeDef,
  OutputFileSearchCall
> = z.object({
  type: OutputTypeFileSearchCall$outboundSchema,
  id: z.string(),
  queries: z.array(z.string()),
  status: OutputStatusEnum2$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputFileSearchCall$ {
  /** @deprecated use `OutputFileSearchCall$inboundSchema` instead. */
  export const inboundSchema = OutputFileSearchCall$inboundSchema;
  /** @deprecated use `OutputFileSearchCall$outboundSchema` instead. */
  export const outboundSchema = OutputFileSearchCall$outboundSchema;
  /** @deprecated use `OutputFileSearchCall$Outbound` instead. */
  export type Outbound = OutputFileSearchCall$Outbound;
}

export function outputFileSearchCallToJSON(
  outputFileSearchCall: OutputFileSearchCall,
): string {
  return JSON.stringify(
    OutputFileSearchCall$outboundSchema.parse(outputFileSearchCall),
  );
}

export function outputFileSearchCallFromJSON(
  jsonString: string,
): SafeParseResult<OutputFileSearchCall, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputFileSearchCall$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputFileSearchCall' from JSON`,
  );
}

/** @internal */
export const OutputTypeWebSearchCall$inboundSchema: z.ZodNativeEnum<
  typeof OutputTypeWebSearchCall
> = z.nativeEnum(OutputTypeWebSearchCall);

/** @internal */
export const OutputTypeWebSearchCall$outboundSchema: z.ZodNativeEnum<
  typeof OutputTypeWebSearchCall
> = OutputTypeWebSearchCall$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputTypeWebSearchCall$ {
  /** @deprecated use `OutputTypeWebSearchCall$inboundSchema` instead. */
  export const inboundSchema = OutputTypeWebSearchCall$inboundSchema;
  /** @deprecated use `OutputTypeWebSearchCall$outboundSchema` instead. */
  export const outboundSchema = OutputTypeWebSearchCall$outboundSchema;
}

/** @internal */
export const OutputStatusEnum1$inboundSchema: z.ZodNativeEnum<
  typeof OutputStatusEnum1
> = z.nativeEnum(OutputStatusEnum1);

/** @internal */
export const OutputStatusEnum1$outboundSchema: z.ZodNativeEnum<
  typeof OutputStatusEnum1
> = OutputStatusEnum1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputStatusEnum1$ {
  /** @deprecated use `OutputStatusEnum1$inboundSchema` instead. */
  export const inboundSchema = OutputStatusEnum1$inboundSchema;
  /** @deprecated use `OutputStatusEnum1$outboundSchema` instead. */
  export const outboundSchema = OutputStatusEnum1$outboundSchema;
}

/** @internal */
export const OutputWebSearchCall$inboundSchema: z.ZodType<
  OutputWebSearchCall,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: OutputTypeWebSearchCall$inboundSchema,
  id: z.string(),
  status: OutputStatusEnum1$inboundSchema,
});

/** @internal */
export type OutputWebSearchCall$Outbound = {
  type: string;
  id: string;
  status: string;
};

/** @internal */
export const OutputWebSearchCall$outboundSchema: z.ZodType<
  OutputWebSearchCall$Outbound,
  z.ZodTypeDef,
  OutputWebSearchCall
> = z.object({
  type: OutputTypeWebSearchCall$outboundSchema,
  id: z.string(),
  status: OutputStatusEnum1$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputWebSearchCall$ {
  /** @deprecated use `OutputWebSearchCall$inboundSchema` instead. */
  export const inboundSchema = OutputWebSearchCall$inboundSchema;
  /** @deprecated use `OutputWebSearchCall$outboundSchema` instead. */
  export const outboundSchema = OutputWebSearchCall$outboundSchema;
  /** @deprecated use `OutputWebSearchCall$Outbound` instead. */
  export type Outbound = OutputWebSearchCall$Outbound;
}

export function outputWebSearchCallToJSON(
  outputWebSearchCall: OutputWebSearchCall,
): string {
  return JSON.stringify(
    OutputWebSearchCall$outboundSchema.parse(outputWebSearchCall),
  );
}

export function outputWebSearchCallFromJSON(
  jsonString: string,
): SafeParseResult<OutputWebSearchCall, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputWebSearchCall$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputWebSearchCall' from JSON`,
  );
}

/** @internal */
export const OutputTypeFunctionCall$inboundSchema: z.ZodNativeEnum<
  typeof OutputTypeFunctionCall
> = z.nativeEnum(OutputTypeFunctionCall);

/** @internal */
export const OutputTypeFunctionCall$outboundSchema: z.ZodNativeEnum<
  typeof OutputTypeFunctionCall
> = OutputTypeFunctionCall$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputTypeFunctionCall$ {
  /** @deprecated use `OutputTypeFunctionCall$inboundSchema` instead. */
  export const inboundSchema = OutputTypeFunctionCall$inboundSchema;
  /** @deprecated use `OutputTypeFunctionCall$outboundSchema` instead. */
  export const outboundSchema = OutputTypeFunctionCall$outboundSchema;
}

/** @internal */
export const OutputFunctionCall$inboundSchema: z.ZodType<
  OutputFunctionCall,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: OutputTypeFunctionCall$inboundSchema,
  id: z.string().optional(),
  name: z.string(),
  arguments: z.string(),
  call_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "call_id": "callId",
  });
});

/** @internal */
export type OutputFunctionCall$Outbound = {
  type: string;
  id?: string | undefined;
  name: string;
  arguments: string;
  call_id: string;
};

/** @internal */
export const OutputFunctionCall$outboundSchema: z.ZodType<
  OutputFunctionCall$Outbound,
  z.ZodTypeDef,
  OutputFunctionCall
> = z.object({
  type: OutputTypeFunctionCall$outboundSchema,
  id: z.string().optional(),
  name: z.string(),
  arguments: z.string(),
  callId: z.string(),
}).transform((v) => {
  return remap$(v, {
    callId: "call_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputFunctionCall$ {
  /** @deprecated use `OutputFunctionCall$inboundSchema` instead. */
  export const inboundSchema = OutputFunctionCall$inboundSchema;
  /** @deprecated use `OutputFunctionCall$outboundSchema` instead. */
  export const outboundSchema = OutputFunctionCall$outboundSchema;
  /** @deprecated use `OutputFunctionCall$Outbound` instead. */
  export type Outbound = OutputFunctionCall$Outbound;
}

export function outputFunctionCallToJSON(
  outputFunctionCall: OutputFunctionCall,
): string {
  return JSON.stringify(
    OutputFunctionCall$outboundSchema.parse(outputFunctionCall),
  );
}

export function outputFunctionCallFromJSON(
  jsonString: string,
): SafeParseResult<OutputFunctionCall, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputFunctionCall$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputFunctionCall' from JSON`,
  );
}

/** @internal */
export const OutputTypeReasoning$inboundSchema: z.ZodNativeEnum<
  typeof OutputTypeReasoning
> = z.nativeEnum(OutputTypeReasoning);

/** @internal */
export const OutputTypeReasoning$outboundSchema: z.ZodNativeEnum<
  typeof OutputTypeReasoning
> = OutputTypeReasoning$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputTypeReasoning$ {
  /** @deprecated use `OutputTypeReasoning$inboundSchema` instead. */
  export const inboundSchema = OutputTypeReasoning$inboundSchema;
  /** @deprecated use `OutputTypeReasoning$outboundSchema` instead. */
  export const outboundSchema = OutputTypeReasoning$outboundSchema;
}

/** @internal */
export const OutputTypeReasoningText$inboundSchema: z.ZodNativeEnum<
  typeof OutputTypeReasoningText
> = z.nativeEnum(OutputTypeReasoningText);

/** @internal */
export const OutputTypeReasoningText$outboundSchema: z.ZodNativeEnum<
  typeof OutputTypeReasoningText
> = OutputTypeReasoningText$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputTypeReasoningText$ {
  /** @deprecated use `OutputTypeReasoningText$inboundSchema` instead. */
  export const inboundSchema = OutputTypeReasoningText$inboundSchema;
  /** @deprecated use `OutputTypeReasoningText$outboundSchema` instead. */
  export const outboundSchema = OutputTypeReasoningText$outboundSchema;
}

/** @internal */
export const OutputContentReasoningText$inboundSchema: z.ZodType<
  OutputContentReasoningText,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: OutputTypeReasoningText$inboundSchema,
  text: z.string(),
});

/** @internal */
export type OutputContentReasoningText$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const OutputContentReasoningText$outboundSchema: z.ZodType<
  OutputContentReasoningText$Outbound,
  z.ZodTypeDef,
  OutputContentReasoningText
> = z.object({
  type: OutputTypeReasoningText$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputContentReasoningText$ {
  /** @deprecated use `OutputContentReasoningText$inboundSchema` instead. */
  export const inboundSchema = OutputContentReasoningText$inboundSchema;
  /** @deprecated use `OutputContentReasoningText$outboundSchema` instead. */
  export const outboundSchema = OutputContentReasoningText$outboundSchema;
  /** @deprecated use `OutputContentReasoningText$Outbound` instead. */
  export type Outbound = OutputContentReasoningText$Outbound;
}

export function outputContentReasoningTextToJSON(
  outputContentReasoningText: OutputContentReasoningText,
): string {
  return JSON.stringify(
    OutputContentReasoningText$outboundSchema.parse(outputContentReasoningText),
  );
}

export function outputContentReasoningTextFromJSON(
  jsonString: string,
): SafeParseResult<OutputContentReasoningText, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputContentReasoningText$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputContentReasoningText' from JSON`,
  );
}

/** @internal */
export const OutputTypeSummaryText$inboundSchema: z.ZodNativeEnum<
  typeof OutputTypeSummaryText
> = z.nativeEnum(OutputTypeSummaryText);

/** @internal */
export const OutputTypeSummaryText$outboundSchema: z.ZodNativeEnum<
  typeof OutputTypeSummaryText
> = OutputTypeSummaryText$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputTypeSummaryText$ {
  /** @deprecated use `OutputTypeSummaryText$inboundSchema` instead. */
  export const inboundSchema = OutputTypeSummaryText$inboundSchema;
  /** @deprecated use `OutputTypeSummaryText$outboundSchema` instead. */
  export const outboundSchema = OutputTypeSummaryText$outboundSchema;
}

/** @internal */
export const OutputSummary$inboundSchema: z.ZodType<
  OutputSummary,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: OutputTypeSummaryText$inboundSchema,
  text: z.string(),
});

/** @internal */
export type OutputSummary$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const OutputSummary$outboundSchema: z.ZodType<
  OutputSummary$Outbound,
  z.ZodTypeDef,
  OutputSummary
> = z.object({
  type: OutputTypeSummaryText$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSummary$ {
  /** @deprecated use `OutputSummary$inboundSchema` instead. */
  export const inboundSchema = OutputSummary$inboundSchema;
  /** @deprecated use `OutputSummary$outboundSchema` instead. */
  export const outboundSchema = OutputSummary$outboundSchema;
  /** @deprecated use `OutputSummary$Outbound` instead. */
  export type Outbound = OutputSummary$Outbound;
}

export function outputSummaryToJSON(outputSummary: OutputSummary): string {
  return JSON.stringify(OutputSummary$outboundSchema.parse(outputSummary));
}

export function outputSummaryFromJSON(
  jsonString: string,
): SafeParseResult<OutputSummary, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputSummary$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputSummary' from JSON`,
  );
}

/** @internal */
export const OutputFormat$inboundSchema: z.ZodNativeEnum<typeof OutputFormat> =
  z.nativeEnum(OutputFormat);

/** @internal */
export const OutputFormat$outboundSchema: z.ZodNativeEnum<typeof OutputFormat> =
  OutputFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputFormat$ {
  /** @deprecated use `OutputFormat$inboundSchema` instead. */
  export const inboundSchema = OutputFormat$inboundSchema;
  /** @deprecated use `OutputFormat$outboundSchema` instead. */
  export const outboundSchema = OutputFormat$outboundSchema;
}

/** @internal */
export const OutputReasoning$inboundSchema: z.ZodType<
  OutputReasoning,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: OutputTypeReasoning$inboundSchema,
  id: z.string(),
  content: z.array(z.lazy(() => OutputContentReasoningText$inboundSchema))
    .optional(),
  summary: z.array(z.lazy(() => OutputSummary$inboundSchema)),
  encrypted_content: z.nullable(z.string()).optional(),
  signature: z.nullable(z.string()).optional(),
  format: z.nullable(OutputFormat$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "encrypted_content": "encryptedContent",
  });
});

/** @internal */
export type OutputReasoning$Outbound = {
  type: string;
  id: string;
  content?: Array<OutputContentReasoningText$Outbound> | undefined;
  summary: Array<OutputSummary$Outbound>;
  encrypted_content?: string | null | undefined;
  signature?: string | null | undefined;
  format?: string | null | undefined;
};

/** @internal */
export const OutputReasoning$outboundSchema: z.ZodType<
  OutputReasoning$Outbound,
  z.ZodTypeDef,
  OutputReasoning
> = z.object({
  type: OutputTypeReasoning$outboundSchema,
  id: z.string(),
  content: z.array(z.lazy(() => OutputContentReasoningText$outboundSchema))
    .optional(),
  summary: z.array(z.lazy(() => OutputSummary$outboundSchema)),
  encryptedContent: z.nullable(z.string()).optional(),
  signature: z.nullable(z.string()).optional(),
  format: z.nullable(OutputFormat$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    encryptedContent: "encrypted_content",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputReasoning$ {
  /** @deprecated use `OutputReasoning$inboundSchema` instead. */
  export const inboundSchema = OutputReasoning$inboundSchema;
  /** @deprecated use `OutputReasoning$outboundSchema` instead. */
  export const outboundSchema = OutputReasoning$outboundSchema;
  /** @deprecated use `OutputReasoning$Outbound` instead. */
  export type Outbound = OutputReasoning$Outbound;
}

export function outputReasoningToJSON(
  outputReasoning: OutputReasoning,
): string {
  return JSON.stringify(OutputReasoning$outboundSchema.parse(outputReasoning));
}

export function outputReasoningFromJSON(
  jsonString: string,
): SafeParseResult<OutputReasoning, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputReasoning$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputReasoning' from JSON`,
  );
}

/** @internal */
export const OutputTypeMessage$inboundSchema: z.ZodNativeEnum<
  typeof OutputTypeMessage
> = z.nativeEnum(OutputTypeMessage);

/** @internal */
export const OutputTypeMessage$outboundSchema: z.ZodNativeEnum<
  typeof OutputTypeMessage
> = OutputTypeMessage$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputTypeMessage$ {
  /** @deprecated use `OutputTypeMessage$inboundSchema` instead. */
  export const inboundSchema = OutputTypeMessage$inboundSchema;
  /** @deprecated use `OutputTypeMessage$outboundSchema` instead. */
  export const outboundSchema = OutputTypeMessage$outboundSchema;
}

/** @internal */
export const OutputStatusInProgress$inboundSchema: z.ZodNativeEnum<
  typeof OutputStatusInProgress
> = z.nativeEnum(OutputStatusInProgress);

/** @internal */
export const OutputStatusInProgress$outboundSchema: z.ZodNativeEnum<
  typeof OutputStatusInProgress
> = OutputStatusInProgress$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputStatusInProgress$ {
  /** @deprecated use `OutputStatusInProgress$inboundSchema` instead. */
  export const inboundSchema = OutputStatusInProgress$inboundSchema;
  /** @deprecated use `OutputStatusInProgress$outboundSchema` instead. */
  export const outboundSchema = OutputStatusInProgress$outboundSchema;
}

/** @internal */
export const OutputStatusIncomplete$inboundSchema: z.ZodNativeEnum<
  typeof OutputStatusIncomplete
> = z.nativeEnum(OutputStatusIncomplete);

/** @internal */
export const OutputStatusIncomplete$outboundSchema: z.ZodNativeEnum<
  typeof OutputStatusIncomplete
> = OutputStatusIncomplete$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputStatusIncomplete$ {
  /** @deprecated use `OutputStatusIncomplete$inboundSchema` instead. */
  export const inboundSchema = OutputStatusIncomplete$inboundSchema;
  /** @deprecated use `OutputStatusIncomplete$outboundSchema` instead. */
  export const outboundSchema = OutputStatusIncomplete$outboundSchema;
}

/** @internal */
export const OutputStatusCompleted$inboundSchema: z.ZodNativeEnum<
  typeof OutputStatusCompleted
> = z.nativeEnum(OutputStatusCompleted);

/** @internal */
export const OutputStatusCompleted$outboundSchema: z.ZodNativeEnum<
  typeof OutputStatusCompleted
> = OutputStatusCompleted$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputStatusCompleted$ {
  /** @deprecated use `OutputStatusCompleted$inboundSchema` instead. */
  export const inboundSchema = OutputStatusCompleted$inboundSchema;
  /** @deprecated use `OutputStatusCompleted$outboundSchema` instead. */
  export const outboundSchema = OutputStatusCompleted$outboundSchema;
}

/** @internal */
export const OutputStatusUnion$inboundSchema: z.ZodType<
  OutputStatusUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  OutputStatusCompleted$inboundSchema,
  OutputStatusIncomplete$inboundSchema,
  OutputStatusInProgress$inboundSchema,
]);

/** @internal */
export type OutputStatusUnion$Outbound = string | string | string;

/** @internal */
export const OutputStatusUnion$outboundSchema: z.ZodType<
  OutputStatusUnion$Outbound,
  z.ZodTypeDef,
  OutputStatusUnion
> = z.union([
  OutputStatusCompleted$outboundSchema,
  OutputStatusIncomplete$outboundSchema,
  OutputStatusInProgress$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputStatusUnion$ {
  /** @deprecated use `OutputStatusUnion$inboundSchema` instead. */
  export const inboundSchema = OutputStatusUnion$inboundSchema;
  /** @deprecated use `OutputStatusUnion$outboundSchema` instead. */
  export const outboundSchema = OutputStatusUnion$outboundSchema;
  /** @deprecated use `OutputStatusUnion$Outbound` instead. */
  export type Outbound = OutputStatusUnion$Outbound;
}

export function outputStatusUnionToJSON(
  outputStatusUnion: OutputStatusUnion,
): string {
  return JSON.stringify(
    OutputStatusUnion$outboundSchema.parse(outputStatusUnion),
  );
}

export function outputStatusUnionFromJSON(
  jsonString: string,
): SafeParseResult<OutputStatusUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputStatusUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputStatusUnion' from JSON`,
  );
}

/** @internal */
export const OutputRole$inboundSchema: z.ZodNativeEnum<typeof OutputRole> = z
  .nativeEnum(OutputRole);

/** @internal */
export const OutputRole$outboundSchema: z.ZodNativeEnum<typeof OutputRole> =
  OutputRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputRole$ {
  /** @deprecated use `OutputRole$inboundSchema` instead. */
  export const inboundSchema = OutputRole$inboundSchema;
  /** @deprecated use `OutputRole$outboundSchema` instead. */
  export const outboundSchema = OutputRole$outboundSchema;
}

/** @internal */
export const OutputTypeRefusal$inboundSchema: z.ZodNativeEnum<
  typeof OutputTypeRefusal
> = z.nativeEnum(OutputTypeRefusal);

/** @internal */
export const OutputTypeRefusal$outboundSchema: z.ZodNativeEnum<
  typeof OutputTypeRefusal
> = OutputTypeRefusal$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputTypeRefusal$ {
  /** @deprecated use `OutputTypeRefusal$inboundSchema` instead. */
  export const inboundSchema = OutputTypeRefusal$inboundSchema;
  /** @deprecated use `OutputTypeRefusal$outboundSchema` instead. */
  export const outboundSchema = OutputTypeRefusal$outboundSchema;
}

/** @internal */
export const OutputContentRefusal$inboundSchema: z.ZodType<
  OutputContentRefusal,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: OutputTypeRefusal$inboundSchema,
  refusal: z.string(),
});

/** @internal */
export type OutputContentRefusal$Outbound = {
  type: string;
  refusal: string;
};

/** @internal */
export const OutputContentRefusal$outboundSchema: z.ZodType<
  OutputContentRefusal$Outbound,
  z.ZodTypeDef,
  OutputContentRefusal
> = z.object({
  type: OutputTypeRefusal$outboundSchema,
  refusal: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputContentRefusal$ {
  /** @deprecated use `OutputContentRefusal$inboundSchema` instead. */
  export const inboundSchema = OutputContentRefusal$inboundSchema;
  /** @deprecated use `OutputContentRefusal$outboundSchema` instead. */
  export const outboundSchema = OutputContentRefusal$outboundSchema;
  /** @deprecated use `OutputContentRefusal$Outbound` instead. */
  export type Outbound = OutputContentRefusal$Outbound;
}

export function outputContentRefusalToJSON(
  outputContentRefusal: OutputContentRefusal,
): string {
  return JSON.stringify(
    OutputContentRefusal$outboundSchema.parse(outputContentRefusal),
  );
}

export function outputContentRefusalFromJSON(
  jsonString: string,
): SafeParseResult<OutputContentRefusal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputContentRefusal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputContentRefusal' from JSON`,
  );
}

/** @internal */
export const OutputTypeOutputText$inboundSchema: z.ZodNativeEnum<
  typeof OutputTypeOutputText
> = z.nativeEnum(OutputTypeOutputText);

/** @internal */
export const OutputTypeOutputText$outboundSchema: z.ZodNativeEnum<
  typeof OutputTypeOutputText
> = OutputTypeOutputText$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputTypeOutputText$ {
  /** @deprecated use `OutputTypeOutputText$inboundSchema` instead. */
  export const inboundSchema = OutputTypeOutputText$inboundSchema;
  /** @deprecated use `OutputTypeOutputText$outboundSchema` instead. */
  export const outboundSchema = OutputTypeOutputText$outboundSchema;
}

/** @internal */
export const OutputTypeFilePath$inboundSchema: z.ZodNativeEnum<
  typeof OutputTypeFilePath
> = z.nativeEnum(OutputTypeFilePath);

/** @internal */
export const OutputTypeFilePath$outboundSchema: z.ZodNativeEnum<
  typeof OutputTypeFilePath
> = OutputTypeFilePath$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputTypeFilePath$ {
  /** @deprecated use `OutputTypeFilePath$inboundSchema` instead. */
  export const inboundSchema = OutputTypeFilePath$inboundSchema;
  /** @deprecated use `OutputTypeFilePath$outboundSchema` instead. */
  export const outboundSchema = OutputTypeFilePath$outboundSchema;
}

/** @internal */
export const OutputAnnotationFilePath$inboundSchema: z.ZodType<
  OutputAnnotationFilePath,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: OutputTypeFilePath$inboundSchema,
  file_id: z.string(),
  index: z.number(),
}).transform((v) => {
  return remap$(v, {
    "file_id": "fileId",
  });
});

/** @internal */
export type OutputAnnotationFilePath$Outbound = {
  type: string;
  file_id: string;
  index: number;
};

/** @internal */
export const OutputAnnotationFilePath$outboundSchema: z.ZodType<
  OutputAnnotationFilePath$Outbound,
  z.ZodTypeDef,
  OutputAnnotationFilePath
> = z.object({
  type: OutputTypeFilePath$outboundSchema,
  fileId: z.string(),
  index: z.number(),
}).transform((v) => {
  return remap$(v, {
    fileId: "file_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputAnnotationFilePath$ {
  /** @deprecated use `OutputAnnotationFilePath$inboundSchema` instead. */
  export const inboundSchema = OutputAnnotationFilePath$inboundSchema;
  /** @deprecated use `OutputAnnotationFilePath$outboundSchema` instead. */
  export const outboundSchema = OutputAnnotationFilePath$outboundSchema;
  /** @deprecated use `OutputAnnotationFilePath$Outbound` instead. */
  export type Outbound = OutputAnnotationFilePath$Outbound;
}

export function outputAnnotationFilePathToJSON(
  outputAnnotationFilePath: OutputAnnotationFilePath,
): string {
  return JSON.stringify(
    OutputAnnotationFilePath$outboundSchema.parse(outputAnnotationFilePath),
  );
}

export function outputAnnotationFilePathFromJSON(
  jsonString: string,
): SafeParseResult<OutputAnnotationFilePath, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputAnnotationFilePath$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputAnnotationFilePath' from JSON`,
  );
}

/** @internal */
export const OutputTypeURLCitation$inboundSchema: z.ZodNativeEnum<
  typeof OutputTypeURLCitation
> = z.nativeEnum(OutputTypeURLCitation);

/** @internal */
export const OutputTypeURLCitation$outboundSchema: z.ZodNativeEnum<
  typeof OutputTypeURLCitation
> = OutputTypeURLCitation$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputTypeURLCitation$ {
  /** @deprecated use `OutputTypeURLCitation$inboundSchema` instead. */
  export const inboundSchema = OutputTypeURLCitation$inboundSchema;
  /** @deprecated use `OutputTypeURLCitation$outboundSchema` instead. */
  export const outboundSchema = OutputTypeURLCitation$outboundSchema;
}

/** @internal */
export const OutputAnnotationURLCitation$inboundSchema: z.ZodType<
  OutputAnnotationURLCitation,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: OutputTypeURLCitation$inboundSchema,
  end_index: z.number(),
  start_index: z.number(),
  title: z.string(),
  url: z.string(),
}).transform((v) => {
  return remap$(v, {
    "end_index": "endIndex",
    "start_index": "startIndex",
  });
});

/** @internal */
export type OutputAnnotationURLCitation$Outbound = {
  type: string;
  end_index: number;
  start_index: number;
  title: string;
  url: string;
};

/** @internal */
export const OutputAnnotationURLCitation$outboundSchema: z.ZodType<
  OutputAnnotationURLCitation$Outbound,
  z.ZodTypeDef,
  OutputAnnotationURLCitation
> = z.object({
  type: OutputTypeURLCitation$outboundSchema,
  endIndex: z.number(),
  startIndex: z.number(),
  title: z.string(),
  url: z.string(),
}).transform((v) => {
  return remap$(v, {
    endIndex: "end_index",
    startIndex: "start_index",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputAnnotationURLCitation$ {
  /** @deprecated use `OutputAnnotationURLCitation$inboundSchema` instead. */
  export const inboundSchema = OutputAnnotationURLCitation$inboundSchema;
  /** @deprecated use `OutputAnnotationURLCitation$outboundSchema` instead. */
  export const outboundSchema = OutputAnnotationURLCitation$outboundSchema;
  /** @deprecated use `OutputAnnotationURLCitation$Outbound` instead. */
  export type Outbound = OutputAnnotationURLCitation$Outbound;
}

export function outputAnnotationURLCitationToJSON(
  outputAnnotationURLCitation: OutputAnnotationURLCitation,
): string {
  return JSON.stringify(
    OutputAnnotationURLCitation$outboundSchema.parse(
      outputAnnotationURLCitation,
    ),
  );
}

export function outputAnnotationURLCitationFromJSON(
  jsonString: string,
): SafeParseResult<OutputAnnotationURLCitation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputAnnotationURLCitation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputAnnotationURLCitation' from JSON`,
  );
}

/** @internal */
export const OutputTypeFileCitation$inboundSchema: z.ZodNativeEnum<
  typeof OutputTypeFileCitation
> = z.nativeEnum(OutputTypeFileCitation);

/** @internal */
export const OutputTypeFileCitation$outboundSchema: z.ZodNativeEnum<
  typeof OutputTypeFileCitation
> = OutputTypeFileCitation$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputTypeFileCitation$ {
  /** @deprecated use `OutputTypeFileCitation$inboundSchema` instead. */
  export const inboundSchema = OutputTypeFileCitation$inboundSchema;
  /** @deprecated use `OutputTypeFileCitation$outboundSchema` instead. */
  export const outboundSchema = OutputTypeFileCitation$outboundSchema;
}

/** @internal */
export const OutputAnnotationFileCitation$inboundSchema: z.ZodType<
  OutputAnnotationFileCitation,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: OutputTypeFileCitation$inboundSchema,
  file_id: z.string(),
  filename: z.string(),
  index: z.number(),
}).transform((v) => {
  return remap$(v, {
    "file_id": "fileId",
  });
});

/** @internal */
export type OutputAnnotationFileCitation$Outbound = {
  type: string;
  file_id: string;
  filename: string;
  index: number;
};

/** @internal */
export const OutputAnnotationFileCitation$outboundSchema: z.ZodType<
  OutputAnnotationFileCitation$Outbound,
  z.ZodTypeDef,
  OutputAnnotationFileCitation
> = z.object({
  type: OutputTypeFileCitation$outboundSchema,
  fileId: z.string(),
  filename: z.string(),
  index: z.number(),
}).transform((v) => {
  return remap$(v, {
    fileId: "file_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputAnnotationFileCitation$ {
  /** @deprecated use `OutputAnnotationFileCitation$inboundSchema` instead. */
  export const inboundSchema = OutputAnnotationFileCitation$inboundSchema;
  /** @deprecated use `OutputAnnotationFileCitation$outboundSchema` instead. */
  export const outboundSchema = OutputAnnotationFileCitation$outboundSchema;
  /** @deprecated use `OutputAnnotationFileCitation$Outbound` instead. */
  export type Outbound = OutputAnnotationFileCitation$Outbound;
}

export function outputAnnotationFileCitationToJSON(
  outputAnnotationFileCitation: OutputAnnotationFileCitation,
): string {
  return JSON.stringify(
    OutputAnnotationFileCitation$outboundSchema.parse(
      outputAnnotationFileCitation,
    ),
  );
}

export function outputAnnotationFileCitationFromJSON(
  jsonString: string,
): SafeParseResult<OutputAnnotationFileCitation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputAnnotationFileCitation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputAnnotationFileCitation' from JSON`,
  );
}

/** @internal */
export const OutputAnnotationUnion$inboundSchema: z.ZodType<
  OutputAnnotationUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => OutputAnnotationURLCitation$inboundSchema),
  z.lazy(() => OutputAnnotationFileCitation$inboundSchema),
  z.lazy(() => OutputAnnotationFilePath$inboundSchema),
]);

/** @internal */
export type OutputAnnotationUnion$Outbound =
  | OutputAnnotationURLCitation$Outbound
  | OutputAnnotationFileCitation$Outbound
  | OutputAnnotationFilePath$Outbound;

/** @internal */
export const OutputAnnotationUnion$outboundSchema: z.ZodType<
  OutputAnnotationUnion$Outbound,
  z.ZodTypeDef,
  OutputAnnotationUnion
> = z.union([
  z.lazy(() => OutputAnnotationURLCitation$outboundSchema),
  z.lazy(() => OutputAnnotationFileCitation$outboundSchema),
  z.lazy(() => OutputAnnotationFilePath$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputAnnotationUnion$ {
  /** @deprecated use `OutputAnnotationUnion$inboundSchema` instead. */
  export const inboundSchema = OutputAnnotationUnion$inboundSchema;
  /** @deprecated use `OutputAnnotationUnion$outboundSchema` instead. */
  export const outboundSchema = OutputAnnotationUnion$outboundSchema;
  /** @deprecated use `OutputAnnotationUnion$Outbound` instead. */
  export type Outbound = OutputAnnotationUnion$Outbound;
}

export function outputAnnotationUnionToJSON(
  outputAnnotationUnion: OutputAnnotationUnion,
): string {
  return JSON.stringify(
    OutputAnnotationUnion$outboundSchema.parse(outputAnnotationUnion),
  );
}

export function outputAnnotationUnionFromJSON(
  jsonString: string,
): SafeParseResult<OutputAnnotationUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputAnnotationUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputAnnotationUnion' from JSON`,
  );
}

/** @internal */
export const OutputContentOutputText$inboundSchema: z.ZodType<
  OutputContentOutputText,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: OutputTypeOutputText$inboundSchema,
  text: z.string(),
  annotations: z.array(
    z.union([
      z.lazy(() => OutputAnnotationURLCitation$inboundSchema),
      z.lazy(() => OutputAnnotationFileCitation$inboundSchema),
      z.lazy(() => OutputAnnotationFilePath$inboundSchema),
    ]),
  ),
});

/** @internal */
export type OutputContentOutputText$Outbound = {
  type: string;
  text: string;
  annotations: Array<
    | OutputAnnotationURLCitation$Outbound
    | OutputAnnotationFileCitation$Outbound
    | OutputAnnotationFilePath$Outbound
  >;
};

/** @internal */
export const OutputContentOutputText$outboundSchema: z.ZodType<
  OutputContentOutputText$Outbound,
  z.ZodTypeDef,
  OutputContentOutputText
> = z.object({
  type: OutputTypeOutputText$outboundSchema,
  text: z.string(),
  annotations: z.array(
    z.union([
      z.lazy(() => OutputAnnotationURLCitation$outboundSchema),
      z.lazy(() => OutputAnnotationFileCitation$outboundSchema),
      z.lazy(() => OutputAnnotationFilePath$outboundSchema),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputContentOutputText$ {
  /** @deprecated use `OutputContentOutputText$inboundSchema` instead. */
  export const inboundSchema = OutputContentOutputText$inboundSchema;
  /** @deprecated use `OutputContentOutputText$outboundSchema` instead. */
  export const outboundSchema = OutputContentOutputText$outboundSchema;
  /** @deprecated use `OutputContentOutputText$Outbound` instead. */
  export type Outbound = OutputContentOutputText$Outbound;
}

export function outputContentOutputTextToJSON(
  outputContentOutputText: OutputContentOutputText,
): string {
  return JSON.stringify(
    OutputContentOutputText$outboundSchema.parse(outputContentOutputText),
  );
}

export function outputContentOutputTextFromJSON(
  jsonString: string,
): SafeParseResult<OutputContentOutputText, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputContentOutputText$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputContentOutputText' from JSON`,
  );
}

/** @internal */
export const OutputContentUnion$inboundSchema: z.ZodType<
  OutputContentUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => OutputContentOutputText$inboundSchema),
  z.lazy(() => OutputContentRefusal$inboundSchema),
]);

/** @internal */
export type OutputContentUnion$Outbound =
  | OutputContentOutputText$Outbound
  | OutputContentRefusal$Outbound;

/** @internal */
export const OutputContentUnion$outboundSchema: z.ZodType<
  OutputContentUnion$Outbound,
  z.ZodTypeDef,
  OutputContentUnion
> = z.union([
  z.lazy(() => OutputContentOutputText$outboundSchema),
  z.lazy(() => OutputContentRefusal$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputContentUnion$ {
  /** @deprecated use `OutputContentUnion$inboundSchema` instead. */
  export const inboundSchema = OutputContentUnion$inboundSchema;
  /** @deprecated use `OutputContentUnion$outboundSchema` instead. */
  export const outboundSchema = OutputContentUnion$outboundSchema;
  /** @deprecated use `OutputContentUnion$Outbound` instead. */
  export type Outbound = OutputContentUnion$Outbound;
}

export function outputContentUnionToJSON(
  outputContentUnion: OutputContentUnion,
): string {
  return JSON.stringify(
    OutputContentUnion$outboundSchema.parse(outputContentUnion),
  );
}

export function outputContentUnionFromJSON(
  jsonString: string,
): SafeParseResult<OutputContentUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputContentUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputContentUnion' from JSON`,
  );
}

/** @internal */
export const OutputAssistant$inboundSchema: z.ZodType<
  OutputAssistant,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: OutputTypeMessage$inboundSchema,
  id: z.string(),
  status: z.union([
    OutputStatusCompleted$inboundSchema,
    OutputStatusIncomplete$inboundSchema,
    OutputStatusInProgress$inboundSchema,
  ]),
  role: OutputRole$inboundSchema,
  content: z.array(
    z.union([
      z.lazy(() => OutputContentOutputText$inboundSchema),
      z.lazy(() => OutputContentRefusal$inboundSchema),
    ]),
  ),
});

/** @internal */
export type OutputAssistant$Outbound = {
  type: string;
  id: string;
  status: string | string | string;
  role: string;
  content: Array<
    OutputContentOutputText$Outbound | OutputContentRefusal$Outbound
  >;
};

/** @internal */
export const OutputAssistant$outboundSchema: z.ZodType<
  OutputAssistant$Outbound,
  z.ZodTypeDef,
  OutputAssistant
> = z.object({
  type: OutputTypeMessage$outboundSchema,
  id: z.string(),
  status: z.union([
    OutputStatusCompleted$outboundSchema,
    OutputStatusIncomplete$outboundSchema,
    OutputStatusInProgress$outboundSchema,
  ]),
  role: OutputRole$outboundSchema,
  content: z.array(
    z.union([
      z.lazy(() => OutputContentOutputText$outboundSchema),
      z.lazy(() => OutputContentRefusal$outboundSchema),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputAssistant$ {
  /** @deprecated use `OutputAssistant$inboundSchema` instead. */
  export const inboundSchema = OutputAssistant$inboundSchema;
  /** @deprecated use `OutputAssistant$outboundSchema` instead. */
  export const outboundSchema = OutputAssistant$outboundSchema;
  /** @deprecated use `OutputAssistant$Outbound` instead. */
  export type Outbound = OutputAssistant$Outbound;
}

export function outputAssistantToJSON(
  outputAssistant: OutputAssistant,
): string {
  return JSON.stringify(OutputAssistant$outboundSchema.parse(outputAssistant));
}

export function outputAssistantFromJSON(
  jsonString: string,
): SafeParseResult<OutputAssistant, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputAssistant$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputAssistant' from JSON`,
  );
}

/** @internal */
export const Output$inboundSchema: z.ZodType<Output, z.ZodTypeDef, unknown> = z
  .union([
    z.lazy(() => OutputAssistant$inboundSchema),
    z.lazy(() => OutputFunctionCall$inboundSchema),
    z.lazy(() => OutputFileSearchCall$inboundSchema),
    z.lazy(() => OutputImageGenerationCall$inboundSchema),
    z.lazy(() => OutputReasoning$inboundSchema),
    z.lazy(() => OutputWebSearchCall$inboundSchema),
  ]);

/** @internal */
export type Output$Outbound =
  | OutputAssistant$Outbound
  | OutputFunctionCall$Outbound
  | OutputFileSearchCall$Outbound
  | OutputImageGenerationCall$Outbound
  | OutputReasoning$Outbound
  | OutputWebSearchCall$Outbound;

/** @internal */
export const Output$outboundSchema: z.ZodType<
  Output$Outbound,
  z.ZodTypeDef,
  Output
> = z.union([
  z.lazy(() => OutputAssistant$outboundSchema),
  z.lazy(() => OutputFunctionCall$outboundSchema),
  z.lazy(() => OutputFileSearchCall$outboundSchema),
  z.lazy(() => OutputImageGenerationCall$outboundSchema),
  z.lazy(() => OutputReasoning$outboundSchema),
  z.lazy(() => OutputWebSearchCall$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Output$ {
  /** @deprecated use `Output$inboundSchema` instead. */
  export const inboundSchema = Output$inboundSchema;
  /** @deprecated use `Output$outboundSchema` instead. */
  export const outboundSchema = Output$outboundSchema;
  /** @deprecated use `Output$Outbound` instead. */
  export type Outbound = Output$Outbound;
}

export function outputToJSON(output: Output): string {
  return JSON.stringify(Output$outboundSchema.parse(output));
}

export function outputFromJSON(
  jsonString: string,
): SafeParseResult<Output, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Output$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Output' from JSON`,
  );
}

/** @internal */
export const Code$inboundSchema: z.ZodNativeEnum<typeof Code> = z.nativeEnum(
  Code,
);

/** @internal */
export const Code$outboundSchema: z.ZodNativeEnum<typeof Code> =
  Code$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Code$ {
  /** @deprecated use `Code$inboundSchema` instead. */
  export const inboundSchema = Code$inboundSchema;
  /** @deprecated use `Code$outboundSchema` instead. */
  export const outboundSchema = Code$outboundSchema;
}

/** @internal */
export const PostApiAlphaResponsesError$inboundSchema: z.ZodType<
  PostApiAlphaResponsesError,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: Code$inboundSchema,
  message: z.string(),
});

/** @internal */
export type PostApiAlphaResponsesError$Outbound = {
  code: string;
  message: string;
};

/** @internal */
export const PostApiAlphaResponsesError$outboundSchema: z.ZodType<
  PostApiAlphaResponsesError$Outbound,
  z.ZodTypeDef,
  PostApiAlphaResponsesError
> = z.object({
  code: Code$outboundSchema,
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiAlphaResponsesError$ {
  /** @deprecated use `PostApiAlphaResponsesError$inboundSchema` instead. */
  export const inboundSchema = PostApiAlphaResponsesError$inboundSchema;
  /** @deprecated use `PostApiAlphaResponsesError$outboundSchema` instead. */
  export const outboundSchema = PostApiAlphaResponsesError$outboundSchema;
  /** @deprecated use `PostApiAlphaResponsesError$Outbound` instead. */
  export type Outbound = PostApiAlphaResponsesError$Outbound;
}

export function postApiAlphaResponsesErrorToJSON(
  postApiAlphaResponsesError: PostApiAlphaResponsesError,
): string {
  return JSON.stringify(
    PostApiAlphaResponsesError$outboundSchema.parse(postApiAlphaResponsesError),
  );
}

export function postApiAlphaResponsesErrorFromJSON(
  jsonString: string,
): SafeParseResult<PostApiAlphaResponsesError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostApiAlphaResponsesError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostApiAlphaResponsesError' from JSON`,
  );
}

/** @internal */
export const Reason$inboundSchema: z.ZodNativeEnum<typeof Reason> = z
  .nativeEnum(Reason);

/** @internal */
export const Reason$outboundSchema: z.ZodNativeEnum<typeof Reason> =
  Reason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Reason$ {
  /** @deprecated use `Reason$inboundSchema` instead. */
  export const inboundSchema = Reason$inboundSchema;
  /** @deprecated use `Reason$outboundSchema` instead. */
  export const outboundSchema = Reason$outboundSchema;
}

/** @internal */
export const IncompleteDetails$inboundSchema: z.ZodType<
  IncompleteDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  reason: Reason$inboundSchema.optional(),
});

/** @internal */
export type IncompleteDetails$Outbound = {
  reason?: string | undefined;
};

/** @internal */
export const IncompleteDetails$outboundSchema: z.ZodType<
  IncompleteDetails$Outbound,
  z.ZodTypeDef,
  IncompleteDetails
> = z.object({
  reason: Reason$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncompleteDetails$ {
  /** @deprecated use `IncompleteDetails$inboundSchema` instead. */
  export const inboundSchema = IncompleteDetails$inboundSchema;
  /** @deprecated use `IncompleteDetails$outboundSchema` instead. */
  export const outboundSchema = IncompleteDetails$outboundSchema;
  /** @deprecated use `IncompleteDetails$Outbound` instead. */
  export type Outbound = IncompleteDetails$Outbound;
}

export function incompleteDetailsToJSON(
  incompleteDetails: IncompleteDetails,
): string {
  return JSON.stringify(
    IncompleteDetails$outboundSchema.parse(incompleteDetails),
  );
}

export function incompleteDetailsFromJSON(
  jsonString: string,
): SafeParseResult<IncompleteDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IncompleteDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IncompleteDetails' from JSON`,
  );
}

/** @internal */
export const InputTokensDetails$inboundSchema: z.ZodType<
  InputTokensDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  cached_tokens: z.number(),
}).transform((v) => {
  return remap$(v, {
    "cached_tokens": "cachedTokens",
  });
});

/** @internal */
export type InputTokensDetails$Outbound = {
  cached_tokens: number;
};

/** @internal */
export const InputTokensDetails$outboundSchema: z.ZodType<
  InputTokensDetails$Outbound,
  z.ZodTypeDef,
  InputTokensDetails
> = z.object({
  cachedTokens: z.number(),
}).transform((v) => {
  return remap$(v, {
    cachedTokens: "cached_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputTokensDetails$ {
  /** @deprecated use `InputTokensDetails$inboundSchema` instead. */
  export const inboundSchema = InputTokensDetails$inboundSchema;
  /** @deprecated use `InputTokensDetails$outboundSchema` instead. */
  export const outboundSchema = InputTokensDetails$outboundSchema;
  /** @deprecated use `InputTokensDetails$Outbound` instead. */
  export type Outbound = InputTokensDetails$Outbound;
}

export function inputTokensDetailsToJSON(
  inputTokensDetails: InputTokensDetails,
): string {
  return JSON.stringify(
    InputTokensDetails$outboundSchema.parse(inputTokensDetails),
  );
}

export function inputTokensDetailsFromJSON(
  jsonString: string,
): SafeParseResult<InputTokensDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputTokensDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputTokensDetails' from JSON`,
  );
}

/** @internal */
export const OutputTokensDetails$inboundSchema: z.ZodType<
  OutputTokensDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  reasoning_tokens: z.number(),
}).transform((v) => {
  return remap$(v, {
    "reasoning_tokens": "reasoningTokens",
  });
});

/** @internal */
export type OutputTokensDetails$Outbound = {
  reasoning_tokens: number;
};

/** @internal */
export const OutputTokensDetails$outboundSchema: z.ZodType<
  OutputTokensDetails$Outbound,
  z.ZodTypeDef,
  OutputTokensDetails
> = z.object({
  reasoningTokens: z.number(),
}).transform((v) => {
  return remap$(v, {
    reasoningTokens: "reasoning_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputTokensDetails$ {
  /** @deprecated use `OutputTokensDetails$inboundSchema` instead. */
  export const inboundSchema = OutputTokensDetails$inboundSchema;
  /** @deprecated use `OutputTokensDetails$outboundSchema` instead. */
  export const outboundSchema = OutputTokensDetails$outboundSchema;
  /** @deprecated use `OutputTokensDetails$Outbound` instead. */
  export type Outbound = OutputTokensDetails$Outbound;
}

export function outputTokensDetailsToJSON(
  outputTokensDetails: OutputTokensDetails,
): string {
  return JSON.stringify(
    OutputTokensDetails$outboundSchema.parse(outputTokensDetails),
  );
}

export function outputTokensDetailsFromJSON(
  jsonString: string,
): SafeParseResult<OutputTokensDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputTokensDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputTokensDetails' from JSON`,
  );
}

/** @internal */
export const PostApiAlphaResponsesUsage$inboundSchema: z.ZodType<
  PostApiAlphaResponsesUsage,
  z.ZodTypeDef,
  unknown
> = z.object({
  input_tokens: z.number(),
  input_tokens_details: z.lazy(() => InputTokensDetails$inboundSchema),
  output_tokens: z.number(),
  output_tokens_details: z.lazy(() => OutputTokensDetails$inboundSchema),
  total_tokens: z.number(),
}).transform((v) => {
  return remap$(v, {
    "input_tokens": "inputTokens",
    "input_tokens_details": "inputTokensDetails",
    "output_tokens": "outputTokens",
    "output_tokens_details": "outputTokensDetails",
    "total_tokens": "totalTokens",
  });
});

/** @internal */
export type PostApiAlphaResponsesUsage$Outbound = {
  input_tokens: number;
  input_tokens_details: InputTokensDetails$Outbound;
  output_tokens: number;
  output_tokens_details: OutputTokensDetails$Outbound;
  total_tokens: number;
};

/** @internal */
export const PostApiAlphaResponsesUsage$outboundSchema: z.ZodType<
  PostApiAlphaResponsesUsage$Outbound,
  z.ZodTypeDef,
  PostApiAlphaResponsesUsage
> = z.object({
  inputTokens: z.number(),
  inputTokensDetails: z.lazy(() => InputTokensDetails$outboundSchema),
  outputTokens: z.number(),
  outputTokensDetails: z.lazy(() => OutputTokensDetails$outboundSchema),
  totalTokens: z.number(),
}).transform((v) => {
  return remap$(v, {
    inputTokens: "input_tokens",
    inputTokensDetails: "input_tokens_details",
    outputTokens: "output_tokens",
    outputTokensDetails: "output_tokens_details",
    totalTokens: "total_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiAlphaResponsesUsage$ {
  /** @deprecated use `PostApiAlphaResponsesUsage$inboundSchema` instead. */
  export const inboundSchema = PostApiAlphaResponsesUsage$inboundSchema;
  /** @deprecated use `PostApiAlphaResponsesUsage$outboundSchema` instead. */
  export const outboundSchema = PostApiAlphaResponsesUsage$outboundSchema;
  /** @deprecated use `PostApiAlphaResponsesUsage$Outbound` instead. */
  export type Outbound = PostApiAlphaResponsesUsage$Outbound;
}

export function postApiAlphaResponsesUsageToJSON(
  postApiAlphaResponsesUsage: PostApiAlphaResponsesUsage,
): string {
  return JSON.stringify(
    PostApiAlphaResponsesUsage$outboundSchema.parse(postApiAlphaResponsesUsage),
  );
}

export function postApiAlphaResponsesUsageFromJSON(
  jsonString: string,
): SafeParseResult<PostApiAlphaResponsesUsage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostApiAlphaResponsesUsage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostApiAlphaResponsesUsage' from JSON`,
  );
}

/** @internal */
export const InstructionsTypeImageGenerationCall2$inboundSchema:
  z.ZodNativeEnum<typeof InstructionsTypeImageGenerationCall2> = z.nativeEnum(
    InstructionsTypeImageGenerationCall2,
  );

/** @internal */
export const InstructionsTypeImageGenerationCall2$outboundSchema:
  z.ZodNativeEnum<typeof InstructionsTypeImageGenerationCall2> =
    InstructionsTypeImageGenerationCall2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsTypeImageGenerationCall2$ {
  /** @deprecated use `InstructionsTypeImageGenerationCall2$inboundSchema` instead. */
  export const inboundSchema =
    InstructionsTypeImageGenerationCall2$inboundSchema;
  /** @deprecated use `InstructionsTypeImageGenerationCall2$outboundSchema` instead. */
  export const outboundSchema =
    InstructionsTypeImageGenerationCall2$outboundSchema;
}

/** @internal */
export const InstructionsStatusEnum6$inboundSchema: z.ZodNativeEnum<
  typeof InstructionsStatusEnum6
> = z.nativeEnum(InstructionsStatusEnum6);

/** @internal */
export const InstructionsStatusEnum6$outboundSchema: z.ZodNativeEnum<
  typeof InstructionsStatusEnum6
> = InstructionsStatusEnum6$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsStatusEnum6$ {
  /** @deprecated use `InstructionsStatusEnum6$inboundSchema` instead. */
  export const inboundSchema = InstructionsStatusEnum6$inboundSchema;
  /** @deprecated use `InstructionsStatusEnum6$outboundSchema` instead. */
  export const outboundSchema = InstructionsStatusEnum6$outboundSchema;
}

/** @internal */
export const InstructionsImageGenerationCall2$inboundSchema: z.ZodType<
  InstructionsImageGenerationCall2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: InstructionsTypeImageGenerationCall2$inboundSchema,
  id: z.string(),
  result: z.nullable(z.string()),
  status: InstructionsStatusEnum6$inboundSchema,
});

/** @internal */
export type InstructionsImageGenerationCall2$Outbound = {
  type: string;
  id: string;
  result: string | null;
  status: string;
};

/** @internal */
export const InstructionsImageGenerationCall2$outboundSchema: z.ZodType<
  InstructionsImageGenerationCall2$Outbound,
  z.ZodTypeDef,
  InstructionsImageGenerationCall2
> = z.object({
  type: InstructionsTypeImageGenerationCall2$outboundSchema,
  id: z.string(),
  result: z.nullable(z.string()),
  status: InstructionsStatusEnum6$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsImageGenerationCall2$ {
  /** @deprecated use `InstructionsImageGenerationCall2$inboundSchema` instead. */
  export const inboundSchema = InstructionsImageGenerationCall2$inboundSchema;
  /** @deprecated use `InstructionsImageGenerationCall2$outboundSchema` instead. */
  export const outboundSchema = InstructionsImageGenerationCall2$outboundSchema;
  /** @deprecated use `InstructionsImageGenerationCall2$Outbound` instead. */
  export type Outbound = InstructionsImageGenerationCall2$Outbound;
}

export function instructionsImageGenerationCall2ToJSON(
  instructionsImageGenerationCall2: InstructionsImageGenerationCall2,
): string {
  return JSON.stringify(
    InstructionsImageGenerationCall2$outboundSchema.parse(
      instructionsImageGenerationCall2,
    ),
  );
}

export function instructionsImageGenerationCall2FromJSON(
  jsonString: string,
): SafeParseResult<InstructionsImageGenerationCall2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InstructionsImageGenerationCall2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InstructionsImageGenerationCall2' from JSON`,
  );
}

/** @internal */
export const InstructionsTypeFileSearchCall$inboundSchema: z.ZodNativeEnum<
  typeof InstructionsTypeFileSearchCall
> = z.nativeEnum(InstructionsTypeFileSearchCall);

/** @internal */
export const InstructionsTypeFileSearchCall$outboundSchema: z.ZodNativeEnum<
  typeof InstructionsTypeFileSearchCall
> = InstructionsTypeFileSearchCall$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsTypeFileSearchCall$ {
  /** @deprecated use `InstructionsTypeFileSearchCall$inboundSchema` instead. */
  export const inboundSchema = InstructionsTypeFileSearchCall$inboundSchema;
  /** @deprecated use `InstructionsTypeFileSearchCall$outboundSchema` instead. */
  export const outboundSchema = InstructionsTypeFileSearchCall$outboundSchema;
}

/** @internal */
export const InstructionsStatusEnum5$inboundSchema: z.ZodNativeEnum<
  typeof InstructionsStatusEnum5
> = z.nativeEnum(InstructionsStatusEnum5);

/** @internal */
export const InstructionsStatusEnum5$outboundSchema: z.ZodNativeEnum<
  typeof InstructionsStatusEnum5
> = InstructionsStatusEnum5$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsStatusEnum5$ {
  /** @deprecated use `InstructionsStatusEnum5$inboundSchema` instead. */
  export const inboundSchema = InstructionsStatusEnum5$inboundSchema;
  /** @deprecated use `InstructionsStatusEnum5$outboundSchema` instead. */
  export const outboundSchema = InstructionsStatusEnum5$outboundSchema;
}

/** @internal */
export const InstructionsFileSearchCall$inboundSchema: z.ZodType<
  InstructionsFileSearchCall,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: InstructionsTypeFileSearchCall$inboundSchema,
  id: z.string(),
  queries: z.array(z.string()),
  status: InstructionsStatusEnum5$inboundSchema,
});

/** @internal */
export type InstructionsFileSearchCall$Outbound = {
  type: string;
  id: string;
  queries: Array<string>;
  status: string;
};

/** @internal */
export const InstructionsFileSearchCall$outboundSchema: z.ZodType<
  InstructionsFileSearchCall$Outbound,
  z.ZodTypeDef,
  InstructionsFileSearchCall
> = z.object({
  type: InstructionsTypeFileSearchCall$outboundSchema,
  id: z.string(),
  queries: z.array(z.string()),
  status: InstructionsStatusEnum5$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsFileSearchCall$ {
  /** @deprecated use `InstructionsFileSearchCall$inboundSchema` instead. */
  export const inboundSchema = InstructionsFileSearchCall$inboundSchema;
  /** @deprecated use `InstructionsFileSearchCall$outboundSchema` instead. */
  export const outboundSchema = InstructionsFileSearchCall$outboundSchema;
  /** @deprecated use `InstructionsFileSearchCall$Outbound` instead. */
  export type Outbound = InstructionsFileSearchCall$Outbound;
}

export function instructionsFileSearchCallToJSON(
  instructionsFileSearchCall: InstructionsFileSearchCall,
): string {
  return JSON.stringify(
    InstructionsFileSearchCall$outboundSchema.parse(instructionsFileSearchCall),
  );
}

export function instructionsFileSearchCallFromJSON(
  jsonString: string,
): SafeParseResult<InstructionsFileSearchCall, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InstructionsFileSearchCall$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InstructionsFileSearchCall' from JSON`,
  );
}

/** @internal */
export const InstructionsTypeWebSearchCall$inboundSchema: z.ZodNativeEnum<
  typeof InstructionsTypeWebSearchCall
> = z.nativeEnum(InstructionsTypeWebSearchCall);

/** @internal */
export const InstructionsTypeWebSearchCall$outboundSchema: z.ZodNativeEnum<
  typeof InstructionsTypeWebSearchCall
> = InstructionsTypeWebSearchCall$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsTypeWebSearchCall$ {
  /** @deprecated use `InstructionsTypeWebSearchCall$inboundSchema` instead. */
  export const inboundSchema = InstructionsTypeWebSearchCall$inboundSchema;
  /** @deprecated use `InstructionsTypeWebSearchCall$outboundSchema` instead. */
  export const outboundSchema = InstructionsTypeWebSearchCall$outboundSchema;
}

/** @internal */
export const InstructionsStatusEnum4$inboundSchema: z.ZodNativeEnum<
  typeof InstructionsStatusEnum4
> = z.nativeEnum(InstructionsStatusEnum4);

/** @internal */
export const InstructionsStatusEnum4$outboundSchema: z.ZodNativeEnum<
  typeof InstructionsStatusEnum4
> = InstructionsStatusEnum4$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsStatusEnum4$ {
  /** @deprecated use `InstructionsStatusEnum4$inboundSchema` instead. */
  export const inboundSchema = InstructionsStatusEnum4$inboundSchema;
  /** @deprecated use `InstructionsStatusEnum4$outboundSchema` instead. */
  export const outboundSchema = InstructionsStatusEnum4$outboundSchema;
}

/** @internal */
export const InstructionsWebSearchCall$inboundSchema: z.ZodType<
  InstructionsWebSearchCall,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: InstructionsTypeWebSearchCall$inboundSchema,
  id: z.string(),
  status: InstructionsStatusEnum4$inboundSchema,
});

/** @internal */
export type InstructionsWebSearchCall$Outbound = {
  type: string;
  id: string;
  status: string;
};

/** @internal */
export const InstructionsWebSearchCall$outboundSchema: z.ZodType<
  InstructionsWebSearchCall$Outbound,
  z.ZodTypeDef,
  InstructionsWebSearchCall
> = z.object({
  type: InstructionsTypeWebSearchCall$outboundSchema,
  id: z.string(),
  status: InstructionsStatusEnum4$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsWebSearchCall$ {
  /** @deprecated use `InstructionsWebSearchCall$inboundSchema` instead. */
  export const inboundSchema = InstructionsWebSearchCall$inboundSchema;
  /** @deprecated use `InstructionsWebSearchCall$outboundSchema` instead. */
  export const outboundSchema = InstructionsWebSearchCall$outboundSchema;
  /** @deprecated use `InstructionsWebSearchCall$Outbound` instead. */
  export type Outbound = InstructionsWebSearchCall$Outbound;
}

export function instructionsWebSearchCallToJSON(
  instructionsWebSearchCall: InstructionsWebSearchCall,
): string {
  return JSON.stringify(
    InstructionsWebSearchCall$outboundSchema.parse(instructionsWebSearchCall),
  );
}

export function instructionsWebSearchCallFromJSON(
  jsonString: string,
): SafeParseResult<InstructionsWebSearchCall, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InstructionsWebSearchCall$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InstructionsWebSearchCall' from JSON`,
  );
}

/** @internal */
export const InstructionsTypeFunctionCall2$inboundSchema: z.ZodNativeEnum<
  typeof InstructionsTypeFunctionCall2
> = z.nativeEnum(InstructionsTypeFunctionCall2);

/** @internal */
export const InstructionsTypeFunctionCall2$outboundSchema: z.ZodNativeEnum<
  typeof InstructionsTypeFunctionCall2
> = InstructionsTypeFunctionCall2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsTypeFunctionCall2$ {
  /** @deprecated use `InstructionsTypeFunctionCall2$inboundSchema` instead. */
  export const inboundSchema = InstructionsTypeFunctionCall2$inboundSchema;
  /** @deprecated use `InstructionsTypeFunctionCall2$outboundSchema` instead. */
  export const outboundSchema = InstructionsTypeFunctionCall2$outboundSchema;
}

/** @internal */
export const InstructionsFunctionCall2$inboundSchema: z.ZodType<
  InstructionsFunctionCall2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: InstructionsTypeFunctionCall2$inboundSchema,
  id: z.string().optional(),
  name: z.string(),
  arguments: z.string(),
  call_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "call_id": "callId",
  });
});

/** @internal */
export type InstructionsFunctionCall2$Outbound = {
  type: string;
  id?: string | undefined;
  name: string;
  arguments: string;
  call_id: string;
};

/** @internal */
export const InstructionsFunctionCall2$outboundSchema: z.ZodType<
  InstructionsFunctionCall2$Outbound,
  z.ZodTypeDef,
  InstructionsFunctionCall2
> = z.object({
  type: InstructionsTypeFunctionCall2$outboundSchema,
  id: z.string().optional(),
  name: z.string(),
  arguments: z.string(),
  callId: z.string(),
}).transform((v) => {
  return remap$(v, {
    callId: "call_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsFunctionCall2$ {
  /** @deprecated use `InstructionsFunctionCall2$inboundSchema` instead. */
  export const inboundSchema = InstructionsFunctionCall2$inboundSchema;
  /** @deprecated use `InstructionsFunctionCall2$outboundSchema` instead. */
  export const outboundSchema = InstructionsFunctionCall2$outboundSchema;
  /** @deprecated use `InstructionsFunctionCall2$Outbound` instead. */
  export type Outbound = InstructionsFunctionCall2$Outbound;
}

export function instructionsFunctionCall2ToJSON(
  instructionsFunctionCall2: InstructionsFunctionCall2,
): string {
  return JSON.stringify(
    InstructionsFunctionCall2$outboundSchema.parse(instructionsFunctionCall2),
  );
}

export function instructionsFunctionCall2FromJSON(
  jsonString: string,
): SafeParseResult<InstructionsFunctionCall2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InstructionsFunctionCall2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InstructionsFunctionCall2' from JSON`,
  );
}

/** @internal */
export const InstructionsTypeReasoning$inboundSchema: z.ZodNativeEnum<
  typeof InstructionsTypeReasoning
> = z.nativeEnum(InstructionsTypeReasoning);

/** @internal */
export const InstructionsTypeReasoning$outboundSchema: z.ZodNativeEnum<
  typeof InstructionsTypeReasoning
> = InstructionsTypeReasoning$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsTypeReasoning$ {
  /** @deprecated use `InstructionsTypeReasoning$inboundSchema` instead. */
  export const inboundSchema = InstructionsTypeReasoning$inboundSchema;
  /** @deprecated use `InstructionsTypeReasoning$outboundSchema` instead. */
  export const outboundSchema = InstructionsTypeReasoning$outboundSchema;
}

/** @internal */
export const InstructionsTypeReasoningText$inboundSchema: z.ZodNativeEnum<
  typeof InstructionsTypeReasoningText
> = z.nativeEnum(InstructionsTypeReasoningText);

/** @internal */
export const InstructionsTypeReasoningText$outboundSchema: z.ZodNativeEnum<
  typeof InstructionsTypeReasoningText
> = InstructionsTypeReasoningText$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsTypeReasoningText$ {
  /** @deprecated use `InstructionsTypeReasoningText$inboundSchema` instead. */
  export const inboundSchema = InstructionsTypeReasoningText$inboundSchema;
  /** @deprecated use `InstructionsTypeReasoningText$outboundSchema` instead. */
  export const outboundSchema = InstructionsTypeReasoningText$outboundSchema;
}

/** @internal */
export const InstructionsContentReasoningText$inboundSchema: z.ZodType<
  InstructionsContentReasoningText,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: InstructionsTypeReasoningText$inboundSchema,
  text: z.string(),
});

/** @internal */
export type InstructionsContentReasoningText$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const InstructionsContentReasoningText$outboundSchema: z.ZodType<
  InstructionsContentReasoningText$Outbound,
  z.ZodTypeDef,
  InstructionsContentReasoningText
> = z.object({
  type: InstructionsTypeReasoningText$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsContentReasoningText$ {
  /** @deprecated use `InstructionsContentReasoningText$inboundSchema` instead. */
  export const inboundSchema = InstructionsContentReasoningText$inboundSchema;
  /** @deprecated use `InstructionsContentReasoningText$outboundSchema` instead. */
  export const outboundSchema = InstructionsContentReasoningText$outboundSchema;
  /** @deprecated use `InstructionsContentReasoningText$Outbound` instead. */
  export type Outbound = InstructionsContentReasoningText$Outbound;
}

export function instructionsContentReasoningTextToJSON(
  instructionsContentReasoningText: InstructionsContentReasoningText,
): string {
  return JSON.stringify(
    InstructionsContentReasoningText$outboundSchema.parse(
      instructionsContentReasoningText,
    ),
  );
}

export function instructionsContentReasoningTextFromJSON(
  jsonString: string,
): SafeParseResult<InstructionsContentReasoningText, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InstructionsContentReasoningText$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InstructionsContentReasoningText' from JSON`,
  );
}

/** @internal */
export const InstructionsTypeSummaryText$inboundSchema: z.ZodNativeEnum<
  typeof InstructionsTypeSummaryText
> = z.nativeEnum(InstructionsTypeSummaryText);

/** @internal */
export const InstructionsTypeSummaryText$outboundSchema: z.ZodNativeEnum<
  typeof InstructionsTypeSummaryText
> = InstructionsTypeSummaryText$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsTypeSummaryText$ {
  /** @deprecated use `InstructionsTypeSummaryText$inboundSchema` instead. */
  export const inboundSchema = InstructionsTypeSummaryText$inboundSchema;
  /** @deprecated use `InstructionsTypeSummaryText$outboundSchema` instead. */
  export const outboundSchema = InstructionsTypeSummaryText$outboundSchema;
}

/** @internal */
export const InstructionsSummary$inboundSchema: z.ZodType<
  InstructionsSummary,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: InstructionsTypeSummaryText$inboundSchema,
  text: z.string(),
});

/** @internal */
export type InstructionsSummary$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const InstructionsSummary$outboundSchema: z.ZodType<
  InstructionsSummary$Outbound,
  z.ZodTypeDef,
  InstructionsSummary
> = z.object({
  type: InstructionsTypeSummaryText$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsSummary$ {
  /** @deprecated use `InstructionsSummary$inboundSchema` instead. */
  export const inboundSchema = InstructionsSummary$inboundSchema;
  /** @deprecated use `InstructionsSummary$outboundSchema` instead. */
  export const outboundSchema = InstructionsSummary$outboundSchema;
  /** @deprecated use `InstructionsSummary$Outbound` instead. */
  export type Outbound = InstructionsSummary$Outbound;
}

export function instructionsSummaryToJSON(
  instructionsSummary: InstructionsSummary,
): string {
  return JSON.stringify(
    InstructionsSummary$outboundSchema.parse(instructionsSummary),
  );
}

export function instructionsSummaryFromJSON(
  jsonString: string,
): SafeParseResult<InstructionsSummary, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InstructionsSummary$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InstructionsSummary' from JSON`,
  );
}

/** @internal */
export const InstructionsFormat$inboundSchema: z.ZodNativeEnum<
  typeof InstructionsFormat
> = z.nativeEnum(InstructionsFormat);

/** @internal */
export const InstructionsFormat$outboundSchema: z.ZodNativeEnum<
  typeof InstructionsFormat
> = InstructionsFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsFormat$ {
  /** @deprecated use `InstructionsFormat$inboundSchema` instead. */
  export const inboundSchema = InstructionsFormat$inboundSchema;
  /** @deprecated use `InstructionsFormat$outboundSchema` instead. */
  export const outboundSchema = InstructionsFormat$outboundSchema;
}

/** @internal */
export const InstructionsReasoning$inboundSchema: z.ZodType<
  InstructionsReasoning,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: InstructionsTypeReasoning$inboundSchema,
  id: z.string(),
  content: z.array(z.lazy(() => InstructionsContentReasoningText$inboundSchema))
    .optional(),
  summary: z.array(z.lazy(() => InstructionsSummary$inboundSchema)),
  encrypted_content: z.nullable(z.string()).optional(),
  signature: z.nullable(z.string()).optional(),
  format: z.nullable(InstructionsFormat$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "encrypted_content": "encryptedContent",
  });
});

/** @internal */
export type InstructionsReasoning$Outbound = {
  type: string;
  id: string;
  content?: Array<InstructionsContentReasoningText$Outbound> | undefined;
  summary: Array<InstructionsSummary$Outbound>;
  encrypted_content?: string | null | undefined;
  signature?: string | null | undefined;
  format?: string | null | undefined;
};

/** @internal */
export const InstructionsReasoning$outboundSchema: z.ZodType<
  InstructionsReasoning$Outbound,
  z.ZodTypeDef,
  InstructionsReasoning
> = z.object({
  type: InstructionsTypeReasoning$outboundSchema,
  id: z.string(),
  content: z.array(
    z.lazy(() => InstructionsContentReasoningText$outboundSchema),
  ).optional(),
  summary: z.array(z.lazy(() => InstructionsSummary$outboundSchema)),
  encryptedContent: z.nullable(z.string()).optional(),
  signature: z.nullable(z.string()).optional(),
  format: z.nullable(InstructionsFormat$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    encryptedContent: "encrypted_content",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsReasoning$ {
  /** @deprecated use `InstructionsReasoning$inboundSchema` instead. */
  export const inboundSchema = InstructionsReasoning$inboundSchema;
  /** @deprecated use `InstructionsReasoning$outboundSchema` instead. */
  export const outboundSchema = InstructionsReasoning$outboundSchema;
  /** @deprecated use `InstructionsReasoning$Outbound` instead. */
  export type Outbound = InstructionsReasoning$Outbound;
}

export function instructionsReasoningToJSON(
  instructionsReasoning: InstructionsReasoning,
): string {
  return JSON.stringify(
    InstructionsReasoning$outboundSchema.parse(instructionsReasoning),
  );
}

export function instructionsReasoningFromJSON(
  jsonString: string,
): SafeParseResult<InstructionsReasoning, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InstructionsReasoning$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InstructionsReasoning' from JSON`,
  );
}

/** @internal */
export const InstructionsTypeMessage4$inboundSchema: z.ZodNativeEnum<
  typeof InstructionsTypeMessage4
> = z.nativeEnum(InstructionsTypeMessage4);

/** @internal */
export const InstructionsTypeMessage4$outboundSchema: z.ZodNativeEnum<
  typeof InstructionsTypeMessage4
> = InstructionsTypeMessage4$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsTypeMessage4$ {
  /** @deprecated use `InstructionsTypeMessage4$inboundSchema` instead. */
  export const inboundSchema = InstructionsTypeMessage4$inboundSchema;
  /** @deprecated use `InstructionsTypeMessage4$outboundSchema` instead. */
  export const outboundSchema = InstructionsTypeMessage4$outboundSchema;
}

/** @internal */
export const InstructionsStatusInProgress2$inboundSchema: z.ZodNativeEnum<
  typeof InstructionsStatusInProgress2
> = z.nativeEnum(InstructionsStatusInProgress2);

/** @internal */
export const InstructionsStatusInProgress2$outboundSchema: z.ZodNativeEnum<
  typeof InstructionsStatusInProgress2
> = InstructionsStatusInProgress2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsStatusInProgress2$ {
  /** @deprecated use `InstructionsStatusInProgress2$inboundSchema` instead. */
  export const inboundSchema = InstructionsStatusInProgress2$inboundSchema;
  /** @deprecated use `InstructionsStatusInProgress2$outboundSchema` instead. */
  export const outboundSchema = InstructionsStatusInProgress2$outboundSchema;
}

/** @internal */
export const InstructionsStatusIncomplete2$inboundSchema: z.ZodNativeEnum<
  typeof InstructionsStatusIncomplete2
> = z.nativeEnum(InstructionsStatusIncomplete2);

/** @internal */
export const InstructionsStatusIncomplete2$outboundSchema: z.ZodNativeEnum<
  typeof InstructionsStatusIncomplete2
> = InstructionsStatusIncomplete2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsStatusIncomplete2$ {
  /** @deprecated use `InstructionsStatusIncomplete2$inboundSchema` instead. */
  export const inboundSchema = InstructionsStatusIncomplete2$inboundSchema;
  /** @deprecated use `InstructionsStatusIncomplete2$outboundSchema` instead. */
  export const outboundSchema = InstructionsStatusIncomplete2$outboundSchema;
}

/** @internal */
export const InstructionsStatusCompleted2$inboundSchema: z.ZodNativeEnum<
  typeof InstructionsStatusCompleted2
> = z.nativeEnum(InstructionsStatusCompleted2);

/** @internal */
export const InstructionsStatusCompleted2$outboundSchema: z.ZodNativeEnum<
  typeof InstructionsStatusCompleted2
> = InstructionsStatusCompleted2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsStatusCompleted2$ {
  /** @deprecated use `InstructionsStatusCompleted2$inboundSchema` instead. */
  export const inboundSchema = InstructionsStatusCompleted2$inboundSchema;
  /** @deprecated use `InstructionsStatusCompleted2$outboundSchema` instead. */
  export const outboundSchema = InstructionsStatusCompleted2$outboundSchema;
}

/** @internal */
export const InstructionsStatusUnion2$inboundSchema: z.ZodType<
  InstructionsStatusUnion2,
  z.ZodTypeDef,
  unknown
> = z.union([
  InstructionsStatusCompleted2$inboundSchema,
  InstructionsStatusIncomplete2$inboundSchema,
  InstructionsStatusInProgress2$inboundSchema,
]);

/** @internal */
export type InstructionsStatusUnion2$Outbound = string | string | string;

/** @internal */
export const InstructionsStatusUnion2$outboundSchema: z.ZodType<
  InstructionsStatusUnion2$Outbound,
  z.ZodTypeDef,
  InstructionsStatusUnion2
> = z.union([
  InstructionsStatusCompleted2$outboundSchema,
  InstructionsStatusIncomplete2$outboundSchema,
  InstructionsStatusInProgress2$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsStatusUnion2$ {
  /** @deprecated use `InstructionsStatusUnion2$inboundSchema` instead. */
  export const inboundSchema = InstructionsStatusUnion2$inboundSchema;
  /** @deprecated use `InstructionsStatusUnion2$outboundSchema` instead. */
  export const outboundSchema = InstructionsStatusUnion2$outboundSchema;
  /** @deprecated use `InstructionsStatusUnion2$Outbound` instead. */
  export type Outbound = InstructionsStatusUnion2$Outbound;
}

export function instructionsStatusUnion2ToJSON(
  instructionsStatusUnion2: InstructionsStatusUnion2,
): string {
  return JSON.stringify(
    InstructionsStatusUnion2$outboundSchema.parse(instructionsStatusUnion2),
  );
}

export function instructionsStatusUnion2FromJSON(
  jsonString: string,
): SafeParseResult<InstructionsStatusUnion2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InstructionsStatusUnion2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InstructionsStatusUnion2' from JSON`,
  );
}

/** @internal */
export const InstructionsRoleAssistant3$inboundSchema: z.ZodNativeEnum<
  typeof InstructionsRoleAssistant3
> = z.nativeEnum(InstructionsRoleAssistant3);

/** @internal */
export const InstructionsRoleAssistant3$outboundSchema: z.ZodNativeEnum<
  typeof InstructionsRoleAssistant3
> = InstructionsRoleAssistant3$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsRoleAssistant3$ {
  /** @deprecated use `InstructionsRoleAssistant3$inboundSchema` instead. */
  export const inboundSchema = InstructionsRoleAssistant3$inboundSchema;
  /** @deprecated use `InstructionsRoleAssistant3$outboundSchema` instead. */
  export const outboundSchema = InstructionsRoleAssistant3$outboundSchema;
}

/** @internal */
export const InstructionsTypeRefusal2$inboundSchema: z.ZodNativeEnum<
  typeof InstructionsTypeRefusal2
> = z.nativeEnum(InstructionsTypeRefusal2);

/** @internal */
export const InstructionsTypeRefusal2$outboundSchema: z.ZodNativeEnum<
  typeof InstructionsTypeRefusal2
> = InstructionsTypeRefusal2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsTypeRefusal2$ {
  /** @deprecated use `InstructionsTypeRefusal2$inboundSchema` instead. */
  export const inboundSchema = InstructionsTypeRefusal2$inboundSchema;
  /** @deprecated use `InstructionsTypeRefusal2$outboundSchema` instead. */
  export const outboundSchema = InstructionsTypeRefusal2$outboundSchema;
}

/** @internal */
export const InstructionsContentRefusal2$inboundSchema: z.ZodType<
  InstructionsContentRefusal2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: InstructionsTypeRefusal2$inboundSchema,
  refusal: z.string(),
});

/** @internal */
export type InstructionsContentRefusal2$Outbound = {
  type: string;
  refusal: string;
};

/** @internal */
export const InstructionsContentRefusal2$outboundSchema: z.ZodType<
  InstructionsContentRefusal2$Outbound,
  z.ZodTypeDef,
  InstructionsContentRefusal2
> = z.object({
  type: InstructionsTypeRefusal2$outboundSchema,
  refusal: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsContentRefusal2$ {
  /** @deprecated use `InstructionsContentRefusal2$inboundSchema` instead. */
  export const inboundSchema = InstructionsContentRefusal2$inboundSchema;
  /** @deprecated use `InstructionsContentRefusal2$outboundSchema` instead. */
  export const outboundSchema = InstructionsContentRefusal2$outboundSchema;
  /** @deprecated use `InstructionsContentRefusal2$Outbound` instead. */
  export type Outbound = InstructionsContentRefusal2$Outbound;
}

export function instructionsContentRefusal2ToJSON(
  instructionsContentRefusal2: InstructionsContentRefusal2,
): string {
  return JSON.stringify(
    InstructionsContentRefusal2$outboundSchema.parse(
      instructionsContentRefusal2,
    ),
  );
}

export function instructionsContentRefusal2FromJSON(
  jsonString: string,
): SafeParseResult<InstructionsContentRefusal2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InstructionsContentRefusal2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InstructionsContentRefusal2' from JSON`,
  );
}

/** @internal */
export const InstructionsTypeOutputText2$inboundSchema: z.ZodNativeEnum<
  typeof InstructionsTypeOutputText2
> = z.nativeEnum(InstructionsTypeOutputText2);

/** @internal */
export const InstructionsTypeOutputText2$outboundSchema: z.ZodNativeEnum<
  typeof InstructionsTypeOutputText2
> = InstructionsTypeOutputText2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsTypeOutputText2$ {
  /** @deprecated use `InstructionsTypeOutputText2$inboundSchema` instead. */
  export const inboundSchema = InstructionsTypeOutputText2$inboundSchema;
  /** @deprecated use `InstructionsTypeOutputText2$outboundSchema` instead. */
  export const outboundSchema = InstructionsTypeOutputText2$outboundSchema;
}

/** @internal */
export const InstructionsTypeFilePath2$inboundSchema: z.ZodNativeEnum<
  typeof InstructionsTypeFilePath2
> = z.nativeEnum(InstructionsTypeFilePath2);

/** @internal */
export const InstructionsTypeFilePath2$outboundSchema: z.ZodNativeEnum<
  typeof InstructionsTypeFilePath2
> = InstructionsTypeFilePath2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsTypeFilePath2$ {
  /** @deprecated use `InstructionsTypeFilePath2$inboundSchema` instead. */
  export const inboundSchema = InstructionsTypeFilePath2$inboundSchema;
  /** @deprecated use `InstructionsTypeFilePath2$outboundSchema` instead. */
  export const outboundSchema = InstructionsTypeFilePath2$outboundSchema;
}

/** @internal */
export const InstructionsAnnotationFilePath2$inboundSchema: z.ZodType<
  InstructionsAnnotationFilePath2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: InstructionsTypeFilePath2$inboundSchema,
  file_id: z.string(),
  index: z.number(),
}).transform((v) => {
  return remap$(v, {
    "file_id": "fileId",
  });
});

/** @internal */
export type InstructionsAnnotationFilePath2$Outbound = {
  type: string;
  file_id: string;
  index: number;
};

/** @internal */
export const InstructionsAnnotationFilePath2$outboundSchema: z.ZodType<
  InstructionsAnnotationFilePath2$Outbound,
  z.ZodTypeDef,
  InstructionsAnnotationFilePath2
> = z.object({
  type: InstructionsTypeFilePath2$outboundSchema,
  fileId: z.string(),
  index: z.number(),
}).transform((v) => {
  return remap$(v, {
    fileId: "file_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsAnnotationFilePath2$ {
  /** @deprecated use `InstructionsAnnotationFilePath2$inboundSchema` instead. */
  export const inboundSchema = InstructionsAnnotationFilePath2$inboundSchema;
  /** @deprecated use `InstructionsAnnotationFilePath2$outboundSchema` instead. */
  export const outboundSchema = InstructionsAnnotationFilePath2$outboundSchema;
  /** @deprecated use `InstructionsAnnotationFilePath2$Outbound` instead. */
  export type Outbound = InstructionsAnnotationFilePath2$Outbound;
}

export function instructionsAnnotationFilePath2ToJSON(
  instructionsAnnotationFilePath2: InstructionsAnnotationFilePath2,
): string {
  return JSON.stringify(
    InstructionsAnnotationFilePath2$outboundSchema.parse(
      instructionsAnnotationFilePath2,
    ),
  );
}

export function instructionsAnnotationFilePath2FromJSON(
  jsonString: string,
): SafeParseResult<InstructionsAnnotationFilePath2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InstructionsAnnotationFilePath2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InstructionsAnnotationFilePath2' from JSON`,
  );
}

/** @internal */
export const InstructionsTypeURLCitation2$inboundSchema: z.ZodNativeEnum<
  typeof InstructionsTypeURLCitation2
> = z.nativeEnum(InstructionsTypeURLCitation2);

/** @internal */
export const InstructionsTypeURLCitation2$outboundSchema: z.ZodNativeEnum<
  typeof InstructionsTypeURLCitation2
> = InstructionsTypeURLCitation2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsTypeURLCitation2$ {
  /** @deprecated use `InstructionsTypeURLCitation2$inboundSchema` instead. */
  export const inboundSchema = InstructionsTypeURLCitation2$inboundSchema;
  /** @deprecated use `InstructionsTypeURLCitation2$outboundSchema` instead. */
  export const outboundSchema = InstructionsTypeURLCitation2$outboundSchema;
}

/** @internal */
export const InstructionsAnnotationURLCitation2$inboundSchema: z.ZodType<
  InstructionsAnnotationURLCitation2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: InstructionsTypeURLCitation2$inboundSchema,
  end_index: z.number(),
  start_index: z.number(),
  title: z.string(),
  url: z.string(),
}).transform((v) => {
  return remap$(v, {
    "end_index": "endIndex",
    "start_index": "startIndex",
  });
});

/** @internal */
export type InstructionsAnnotationURLCitation2$Outbound = {
  type: string;
  end_index: number;
  start_index: number;
  title: string;
  url: string;
};

/** @internal */
export const InstructionsAnnotationURLCitation2$outboundSchema: z.ZodType<
  InstructionsAnnotationURLCitation2$Outbound,
  z.ZodTypeDef,
  InstructionsAnnotationURLCitation2
> = z.object({
  type: InstructionsTypeURLCitation2$outboundSchema,
  endIndex: z.number(),
  startIndex: z.number(),
  title: z.string(),
  url: z.string(),
}).transform((v) => {
  return remap$(v, {
    endIndex: "end_index",
    startIndex: "start_index",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsAnnotationURLCitation2$ {
  /** @deprecated use `InstructionsAnnotationURLCitation2$inboundSchema` instead. */
  export const inboundSchema = InstructionsAnnotationURLCitation2$inboundSchema;
  /** @deprecated use `InstructionsAnnotationURLCitation2$outboundSchema` instead. */
  export const outboundSchema =
    InstructionsAnnotationURLCitation2$outboundSchema;
  /** @deprecated use `InstructionsAnnotationURLCitation2$Outbound` instead. */
  export type Outbound = InstructionsAnnotationURLCitation2$Outbound;
}

export function instructionsAnnotationURLCitation2ToJSON(
  instructionsAnnotationURLCitation2: InstructionsAnnotationURLCitation2,
): string {
  return JSON.stringify(
    InstructionsAnnotationURLCitation2$outboundSchema.parse(
      instructionsAnnotationURLCitation2,
    ),
  );
}

export function instructionsAnnotationURLCitation2FromJSON(
  jsonString: string,
): SafeParseResult<InstructionsAnnotationURLCitation2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      InstructionsAnnotationURLCitation2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InstructionsAnnotationURLCitation2' from JSON`,
  );
}

/** @internal */
export const InstructionsTypeFileCitation2$inboundSchema: z.ZodNativeEnum<
  typeof InstructionsTypeFileCitation2
> = z.nativeEnum(InstructionsTypeFileCitation2);

/** @internal */
export const InstructionsTypeFileCitation2$outboundSchema: z.ZodNativeEnum<
  typeof InstructionsTypeFileCitation2
> = InstructionsTypeFileCitation2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsTypeFileCitation2$ {
  /** @deprecated use `InstructionsTypeFileCitation2$inboundSchema` instead. */
  export const inboundSchema = InstructionsTypeFileCitation2$inboundSchema;
  /** @deprecated use `InstructionsTypeFileCitation2$outboundSchema` instead. */
  export const outboundSchema = InstructionsTypeFileCitation2$outboundSchema;
}

/** @internal */
export const InstructionsAnnotationFileCitation2$inboundSchema: z.ZodType<
  InstructionsAnnotationFileCitation2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: InstructionsTypeFileCitation2$inboundSchema,
  file_id: z.string(),
  filename: z.string(),
  index: z.number(),
}).transform((v) => {
  return remap$(v, {
    "file_id": "fileId",
  });
});

/** @internal */
export type InstructionsAnnotationFileCitation2$Outbound = {
  type: string;
  file_id: string;
  filename: string;
  index: number;
};

/** @internal */
export const InstructionsAnnotationFileCitation2$outboundSchema: z.ZodType<
  InstructionsAnnotationFileCitation2$Outbound,
  z.ZodTypeDef,
  InstructionsAnnotationFileCitation2
> = z.object({
  type: InstructionsTypeFileCitation2$outboundSchema,
  fileId: z.string(),
  filename: z.string(),
  index: z.number(),
}).transform((v) => {
  return remap$(v, {
    fileId: "file_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsAnnotationFileCitation2$ {
  /** @deprecated use `InstructionsAnnotationFileCitation2$inboundSchema` instead. */
  export const inboundSchema =
    InstructionsAnnotationFileCitation2$inboundSchema;
  /** @deprecated use `InstructionsAnnotationFileCitation2$outboundSchema` instead. */
  export const outboundSchema =
    InstructionsAnnotationFileCitation2$outboundSchema;
  /** @deprecated use `InstructionsAnnotationFileCitation2$Outbound` instead. */
  export type Outbound = InstructionsAnnotationFileCitation2$Outbound;
}

export function instructionsAnnotationFileCitation2ToJSON(
  instructionsAnnotationFileCitation2: InstructionsAnnotationFileCitation2,
): string {
  return JSON.stringify(
    InstructionsAnnotationFileCitation2$outboundSchema.parse(
      instructionsAnnotationFileCitation2,
    ),
  );
}

export function instructionsAnnotationFileCitation2FromJSON(
  jsonString: string,
): SafeParseResult<InstructionsAnnotationFileCitation2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      InstructionsAnnotationFileCitation2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InstructionsAnnotationFileCitation2' from JSON`,
  );
}

/** @internal */
export const InstructionsAnnotationUnion2$inboundSchema: z.ZodType<
  InstructionsAnnotationUnion2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => InstructionsAnnotationURLCitation2$inboundSchema),
  z.lazy(() => InstructionsAnnotationFileCitation2$inboundSchema),
  z.lazy(() => InstructionsAnnotationFilePath2$inboundSchema),
]);

/** @internal */
export type InstructionsAnnotationUnion2$Outbound =
  | InstructionsAnnotationURLCitation2$Outbound
  | InstructionsAnnotationFileCitation2$Outbound
  | InstructionsAnnotationFilePath2$Outbound;

/** @internal */
export const InstructionsAnnotationUnion2$outboundSchema: z.ZodType<
  InstructionsAnnotationUnion2$Outbound,
  z.ZodTypeDef,
  InstructionsAnnotationUnion2
> = z.union([
  z.lazy(() => InstructionsAnnotationURLCitation2$outboundSchema),
  z.lazy(() => InstructionsAnnotationFileCitation2$outboundSchema),
  z.lazy(() => InstructionsAnnotationFilePath2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsAnnotationUnion2$ {
  /** @deprecated use `InstructionsAnnotationUnion2$inboundSchema` instead. */
  export const inboundSchema = InstructionsAnnotationUnion2$inboundSchema;
  /** @deprecated use `InstructionsAnnotationUnion2$outboundSchema` instead. */
  export const outboundSchema = InstructionsAnnotationUnion2$outboundSchema;
  /** @deprecated use `InstructionsAnnotationUnion2$Outbound` instead. */
  export type Outbound = InstructionsAnnotationUnion2$Outbound;
}

export function instructionsAnnotationUnion2ToJSON(
  instructionsAnnotationUnion2: InstructionsAnnotationUnion2,
): string {
  return JSON.stringify(
    InstructionsAnnotationUnion2$outboundSchema.parse(
      instructionsAnnotationUnion2,
    ),
  );
}

export function instructionsAnnotationUnion2FromJSON(
  jsonString: string,
): SafeParseResult<InstructionsAnnotationUnion2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InstructionsAnnotationUnion2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InstructionsAnnotationUnion2' from JSON`,
  );
}

/** @internal */
export const InstructionsContentOutputText2$inboundSchema: z.ZodType<
  InstructionsContentOutputText2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: InstructionsTypeOutputText2$inboundSchema,
  text: z.string(),
  annotations: z.array(
    z.union([
      z.lazy(() => InstructionsAnnotationURLCitation2$inboundSchema),
      z.lazy(() => InstructionsAnnotationFileCitation2$inboundSchema),
      z.lazy(() => InstructionsAnnotationFilePath2$inboundSchema),
    ]),
  ),
});

/** @internal */
export type InstructionsContentOutputText2$Outbound = {
  type: string;
  text: string;
  annotations: Array<
    | InstructionsAnnotationURLCitation2$Outbound
    | InstructionsAnnotationFileCitation2$Outbound
    | InstructionsAnnotationFilePath2$Outbound
  >;
};

/** @internal */
export const InstructionsContentOutputText2$outboundSchema: z.ZodType<
  InstructionsContentOutputText2$Outbound,
  z.ZodTypeDef,
  InstructionsContentOutputText2
> = z.object({
  type: InstructionsTypeOutputText2$outboundSchema,
  text: z.string(),
  annotations: z.array(
    z.union([
      z.lazy(() => InstructionsAnnotationURLCitation2$outboundSchema),
      z.lazy(() => InstructionsAnnotationFileCitation2$outboundSchema),
      z.lazy(() => InstructionsAnnotationFilePath2$outboundSchema),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsContentOutputText2$ {
  /** @deprecated use `InstructionsContentOutputText2$inboundSchema` instead. */
  export const inboundSchema = InstructionsContentOutputText2$inboundSchema;
  /** @deprecated use `InstructionsContentOutputText2$outboundSchema` instead. */
  export const outboundSchema = InstructionsContentOutputText2$outboundSchema;
  /** @deprecated use `InstructionsContentOutputText2$Outbound` instead. */
  export type Outbound = InstructionsContentOutputText2$Outbound;
}

export function instructionsContentOutputText2ToJSON(
  instructionsContentOutputText2: InstructionsContentOutputText2,
): string {
  return JSON.stringify(
    InstructionsContentOutputText2$outboundSchema.parse(
      instructionsContentOutputText2,
    ),
  );
}

export function instructionsContentOutputText2FromJSON(
  jsonString: string,
): SafeParseResult<InstructionsContentOutputText2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InstructionsContentOutputText2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InstructionsContentOutputText2' from JSON`,
  );
}

/** @internal */
export const InstructionsContentUnion5$inboundSchema: z.ZodType<
  InstructionsContentUnion5,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => InstructionsContentOutputText2$inboundSchema),
  z.lazy(() => InstructionsContentRefusal2$inboundSchema),
]);

/** @internal */
export type InstructionsContentUnion5$Outbound =
  | InstructionsContentOutputText2$Outbound
  | InstructionsContentRefusal2$Outbound;

/** @internal */
export const InstructionsContentUnion5$outboundSchema: z.ZodType<
  InstructionsContentUnion5$Outbound,
  z.ZodTypeDef,
  InstructionsContentUnion5
> = z.union([
  z.lazy(() => InstructionsContentOutputText2$outboundSchema),
  z.lazy(() => InstructionsContentRefusal2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsContentUnion5$ {
  /** @deprecated use `InstructionsContentUnion5$inboundSchema` instead. */
  export const inboundSchema = InstructionsContentUnion5$inboundSchema;
  /** @deprecated use `InstructionsContentUnion5$outboundSchema` instead. */
  export const outboundSchema = InstructionsContentUnion5$outboundSchema;
  /** @deprecated use `InstructionsContentUnion5$Outbound` instead. */
  export type Outbound = InstructionsContentUnion5$Outbound;
}

export function instructionsContentUnion5ToJSON(
  instructionsContentUnion5: InstructionsContentUnion5,
): string {
  return JSON.stringify(
    InstructionsContentUnion5$outboundSchema.parse(instructionsContentUnion5),
  );
}

export function instructionsContentUnion5FromJSON(
  jsonString: string,
): SafeParseResult<InstructionsContentUnion5, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InstructionsContentUnion5$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InstructionsContentUnion5' from JSON`,
  );
}

/** @internal */
export const InstructionsAssistant2$inboundSchema: z.ZodType<
  InstructionsAssistant2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: InstructionsTypeMessage4$inboundSchema,
  id: z.string(),
  status: z.union([
    InstructionsStatusCompleted2$inboundSchema,
    InstructionsStatusIncomplete2$inboundSchema,
    InstructionsStatusInProgress2$inboundSchema,
  ]),
  role: InstructionsRoleAssistant3$inboundSchema,
  content: z.array(
    z.union([
      z.lazy(() => InstructionsContentOutputText2$inboundSchema),
      z.lazy(() => InstructionsContentRefusal2$inboundSchema),
    ]),
  ),
});

/** @internal */
export type InstructionsAssistant2$Outbound = {
  type: string;
  id: string;
  status: string | string | string;
  role: string;
  content: Array<
    | InstructionsContentOutputText2$Outbound
    | InstructionsContentRefusal2$Outbound
  >;
};

/** @internal */
export const InstructionsAssistant2$outboundSchema: z.ZodType<
  InstructionsAssistant2$Outbound,
  z.ZodTypeDef,
  InstructionsAssistant2
> = z.object({
  type: InstructionsTypeMessage4$outboundSchema,
  id: z.string(),
  status: z.union([
    InstructionsStatusCompleted2$outboundSchema,
    InstructionsStatusIncomplete2$outboundSchema,
    InstructionsStatusInProgress2$outboundSchema,
  ]),
  role: InstructionsRoleAssistant3$outboundSchema,
  content: z.array(
    z.union([
      z.lazy(() => InstructionsContentOutputText2$outboundSchema),
      z.lazy(() => InstructionsContentRefusal2$outboundSchema),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsAssistant2$ {
  /** @deprecated use `InstructionsAssistant2$inboundSchema` instead. */
  export const inboundSchema = InstructionsAssistant2$inboundSchema;
  /** @deprecated use `InstructionsAssistant2$outboundSchema` instead. */
  export const outboundSchema = InstructionsAssistant2$outboundSchema;
  /** @deprecated use `InstructionsAssistant2$Outbound` instead. */
  export type Outbound = InstructionsAssistant2$Outbound;
}

export function instructionsAssistant2ToJSON(
  instructionsAssistant2: InstructionsAssistant2,
): string {
  return JSON.stringify(
    InstructionsAssistant2$outboundSchema.parse(instructionsAssistant2),
  );
}

export function instructionsAssistant2FromJSON(
  jsonString: string,
): SafeParseResult<InstructionsAssistant2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InstructionsAssistant2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InstructionsAssistant2' from JSON`,
  );
}

/** @internal */
export const InstructionsUnion1$inboundSchema: z.ZodType<
  InstructionsUnion1,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => InstructionsAssistant2$inboundSchema),
  z.lazy(() => InstructionsFunctionCall2$inboundSchema),
  z.lazy(() => InstructionsFileSearchCall$inboundSchema),
  z.lazy(() => InstructionsImageGenerationCall2$inboundSchema),
  z.lazy(() => InstructionsReasoning$inboundSchema),
  z.lazy(() => InstructionsWebSearchCall$inboundSchema),
]);

/** @internal */
export type InstructionsUnion1$Outbound =
  | InstructionsAssistant2$Outbound
  | InstructionsFunctionCall2$Outbound
  | InstructionsFileSearchCall$Outbound
  | InstructionsImageGenerationCall2$Outbound
  | InstructionsReasoning$Outbound
  | InstructionsWebSearchCall$Outbound;

/** @internal */
export const InstructionsUnion1$outboundSchema: z.ZodType<
  InstructionsUnion1$Outbound,
  z.ZodTypeDef,
  InstructionsUnion1
> = z.union([
  z.lazy(() => InstructionsAssistant2$outboundSchema),
  z.lazy(() => InstructionsFunctionCall2$outboundSchema),
  z.lazy(() => InstructionsFileSearchCall$outboundSchema),
  z.lazy(() => InstructionsImageGenerationCall2$outboundSchema),
  z.lazy(() => InstructionsReasoning$outboundSchema),
  z.lazy(() => InstructionsWebSearchCall$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsUnion1$ {
  /** @deprecated use `InstructionsUnion1$inboundSchema` instead. */
  export const inboundSchema = InstructionsUnion1$inboundSchema;
  /** @deprecated use `InstructionsUnion1$outboundSchema` instead. */
  export const outboundSchema = InstructionsUnion1$outboundSchema;
  /** @deprecated use `InstructionsUnion1$Outbound` instead. */
  export type Outbound = InstructionsUnion1$Outbound;
}

export function instructionsUnion1ToJSON(
  instructionsUnion1: InstructionsUnion1,
): string {
  return JSON.stringify(
    InstructionsUnion1$outboundSchema.parse(instructionsUnion1),
  );
}

export function instructionsUnion1FromJSON(
  jsonString: string,
): SafeParseResult<InstructionsUnion1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InstructionsUnion1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InstructionsUnion1' from JSON`,
  );
}

/** @internal */
export const InstructionsTypeMessage3$inboundSchema: z.ZodNativeEnum<
  typeof InstructionsTypeMessage3
> = z.nativeEnum(InstructionsTypeMessage3);

/** @internal */
export const InstructionsTypeMessage3$outboundSchema: z.ZodNativeEnum<
  typeof InstructionsTypeMessage3
> = InstructionsTypeMessage3$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsTypeMessage3$ {
  /** @deprecated use `InstructionsTypeMessage3$inboundSchema` instead. */
  export const inboundSchema = InstructionsTypeMessage3$inboundSchema;
  /** @deprecated use `InstructionsTypeMessage3$outboundSchema` instead. */
  export const outboundSchema = InstructionsTypeMessage3$outboundSchema;
}

/** @internal */
export const InstructionsStatusInProgress1$inboundSchema: z.ZodNativeEnum<
  typeof InstructionsStatusInProgress1
> = z.nativeEnum(InstructionsStatusInProgress1);

/** @internal */
export const InstructionsStatusInProgress1$outboundSchema: z.ZodNativeEnum<
  typeof InstructionsStatusInProgress1
> = InstructionsStatusInProgress1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsStatusInProgress1$ {
  /** @deprecated use `InstructionsStatusInProgress1$inboundSchema` instead. */
  export const inboundSchema = InstructionsStatusInProgress1$inboundSchema;
  /** @deprecated use `InstructionsStatusInProgress1$outboundSchema` instead. */
  export const outboundSchema = InstructionsStatusInProgress1$outboundSchema;
}

/** @internal */
export const InstructionsStatusIncomplete1$inboundSchema: z.ZodNativeEnum<
  typeof InstructionsStatusIncomplete1
> = z.nativeEnum(InstructionsStatusIncomplete1);

/** @internal */
export const InstructionsStatusIncomplete1$outboundSchema: z.ZodNativeEnum<
  typeof InstructionsStatusIncomplete1
> = InstructionsStatusIncomplete1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsStatusIncomplete1$ {
  /** @deprecated use `InstructionsStatusIncomplete1$inboundSchema` instead. */
  export const inboundSchema = InstructionsStatusIncomplete1$inboundSchema;
  /** @deprecated use `InstructionsStatusIncomplete1$outboundSchema` instead. */
  export const outboundSchema = InstructionsStatusIncomplete1$outboundSchema;
}

/** @internal */
export const InstructionsStatusCompleted1$inboundSchema: z.ZodNativeEnum<
  typeof InstructionsStatusCompleted1
> = z.nativeEnum(InstructionsStatusCompleted1);

/** @internal */
export const InstructionsStatusCompleted1$outboundSchema: z.ZodNativeEnum<
  typeof InstructionsStatusCompleted1
> = InstructionsStatusCompleted1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsStatusCompleted1$ {
  /** @deprecated use `InstructionsStatusCompleted1$inboundSchema` instead. */
  export const inboundSchema = InstructionsStatusCompleted1$inboundSchema;
  /** @deprecated use `InstructionsStatusCompleted1$outboundSchema` instead. */
  export const outboundSchema = InstructionsStatusCompleted1$outboundSchema;
}

/** @internal */
export const InstructionsStatusUnion1$inboundSchema: z.ZodType<
  InstructionsStatusUnion1,
  z.ZodTypeDef,
  unknown
> = z.union([
  InstructionsStatusCompleted1$inboundSchema,
  InstructionsStatusIncomplete1$inboundSchema,
  InstructionsStatusInProgress1$inboundSchema,
]);

/** @internal */
export type InstructionsStatusUnion1$Outbound = string | string | string;

/** @internal */
export const InstructionsStatusUnion1$outboundSchema: z.ZodType<
  InstructionsStatusUnion1$Outbound,
  z.ZodTypeDef,
  InstructionsStatusUnion1
> = z.union([
  InstructionsStatusCompleted1$outboundSchema,
  InstructionsStatusIncomplete1$outboundSchema,
  InstructionsStatusInProgress1$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsStatusUnion1$ {
  /** @deprecated use `InstructionsStatusUnion1$inboundSchema` instead. */
  export const inboundSchema = InstructionsStatusUnion1$inboundSchema;
  /** @deprecated use `InstructionsStatusUnion1$outboundSchema` instead. */
  export const outboundSchema = InstructionsStatusUnion1$outboundSchema;
  /** @deprecated use `InstructionsStatusUnion1$Outbound` instead. */
  export type Outbound = InstructionsStatusUnion1$Outbound;
}

export function instructionsStatusUnion1ToJSON(
  instructionsStatusUnion1: InstructionsStatusUnion1,
): string {
  return JSON.stringify(
    InstructionsStatusUnion1$outboundSchema.parse(instructionsStatusUnion1),
  );
}

export function instructionsStatusUnion1FromJSON(
  jsonString: string,
): SafeParseResult<InstructionsStatusUnion1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InstructionsStatusUnion1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InstructionsStatusUnion1' from JSON`,
  );
}

/** @internal */
export const InstructionsRoleAssistant2$inboundSchema: z.ZodNativeEnum<
  typeof InstructionsRoleAssistant2
> = z.nativeEnum(InstructionsRoleAssistant2);

/** @internal */
export const InstructionsRoleAssistant2$outboundSchema: z.ZodNativeEnum<
  typeof InstructionsRoleAssistant2
> = InstructionsRoleAssistant2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsRoleAssistant2$ {
  /** @deprecated use `InstructionsRoleAssistant2$inboundSchema` instead. */
  export const inboundSchema = InstructionsRoleAssistant2$inboundSchema;
  /** @deprecated use `InstructionsRoleAssistant2$outboundSchema` instead. */
  export const outboundSchema = InstructionsRoleAssistant2$outboundSchema;
}

/** @internal */
export const InstructionsTypeRefusal1$inboundSchema: z.ZodNativeEnum<
  typeof InstructionsTypeRefusal1
> = z.nativeEnum(InstructionsTypeRefusal1);

/** @internal */
export const InstructionsTypeRefusal1$outboundSchema: z.ZodNativeEnum<
  typeof InstructionsTypeRefusal1
> = InstructionsTypeRefusal1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsTypeRefusal1$ {
  /** @deprecated use `InstructionsTypeRefusal1$inboundSchema` instead. */
  export const inboundSchema = InstructionsTypeRefusal1$inboundSchema;
  /** @deprecated use `InstructionsTypeRefusal1$outboundSchema` instead. */
  export const outboundSchema = InstructionsTypeRefusal1$outboundSchema;
}

/** @internal */
export const InstructionsContentRefusal1$inboundSchema: z.ZodType<
  InstructionsContentRefusal1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: InstructionsTypeRefusal1$inboundSchema,
  refusal: z.string(),
});

/** @internal */
export type InstructionsContentRefusal1$Outbound = {
  type: string;
  refusal: string;
};

/** @internal */
export const InstructionsContentRefusal1$outboundSchema: z.ZodType<
  InstructionsContentRefusal1$Outbound,
  z.ZodTypeDef,
  InstructionsContentRefusal1
> = z.object({
  type: InstructionsTypeRefusal1$outboundSchema,
  refusal: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsContentRefusal1$ {
  /** @deprecated use `InstructionsContentRefusal1$inboundSchema` instead. */
  export const inboundSchema = InstructionsContentRefusal1$inboundSchema;
  /** @deprecated use `InstructionsContentRefusal1$outboundSchema` instead. */
  export const outboundSchema = InstructionsContentRefusal1$outboundSchema;
  /** @deprecated use `InstructionsContentRefusal1$Outbound` instead. */
  export type Outbound = InstructionsContentRefusal1$Outbound;
}

export function instructionsContentRefusal1ToJSON(
  instructionsContentRefusal1: InstructionsContentRefusal1,
): string {
  return JSON.stringify(
    InstructionsContentRefusal1$outboundSchema.parse(
      instructionsContentRefusal1,
    ),
  );
}

export function instructionsContentRefusal1FromJSON(
  jsonString: string,
): SafeParseResult<InstructionsContentRefusal1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InstructionsContentRefusal1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InstructionsContentRefusal1' from JSON`,
  );
}

/** @internal */
export const InstructionsTypeOutputText1$inboundSchema: z.ZodNativeEnum<
  typeof InstructionsTypeOutputText1
> = z.nativeEnum(InstructionsTypeOutputText1);

/** @internal */
export const InstructionsTypeOutputText1$outboundSchema: z.ZodNativeEnum<
  typeof InstructionsTypeOutputText1
> = InstructionsTypeOutputText1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsTypeOutputText1$ {
  /** @deprecated use `InstructionsTypeOutputText1$inboundSchema` instead. */
  export const inboundSchema = InstructionsTypeOutputText1$inboundSchema;
  /** @deprecated use `InstructionsTypeOutputText1$outboundSchema` instead. */
  export const outboundSchema = InstructionsTypeOutputText1$outboundSchema;
}

/** @internal */
export const InstructionsTypeFilePath1$inboundSchema: z.ZodNativeEnum<
  typeof InstructionsTypeFilePath1
> = z.nativeEnum(InstructionsTypeFilePath1);

/** @internal */
export const InstructionsTypeFilePath1$outboundSchema: z.ZodNativeEnum<
  typeof InstructionsTypeFilePath1
> = InstructionsTypeFilePath1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsTypeFilePath1$ {
  /** @deprecated use `InstructionsTypeFilePath1$inboundSchema` instead. */
  export const inboundSchema = InstructionsTypeFilePath1$inboundSchema;
  /** @deprecated use `InstructionsTypeFilePath1$outboundSchema` instead. */
  export const outboundSchema = InstructionsTypeFilePath1$outboundSchema;
}

/** @internal */
export const InstructionsAnnotationFilePath1$inboundSchema: z.ZodType<
  InstructionsAnnotationFilePath1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: InstructionsTypeFilePath1$inboundSchema,
  file_id: z.string(),
  index: z.number(),
}).transform((v) => {
  return remap$(v, {
    "file_id": "fileId",
  });
});

/** @internal */
export type InstructionsAnnotationFilePath1$Outbound = {
  type: string;
  file_id: string;
  index: number;
};

/** @internal */
export const InstructionsAnnotationFilePath1$outboundSchema: z.ZodType<
  InstructionsAnnotationFilePath1$Outbound,
  z.ZodTypeDef,
  InstructionsAnnotationFilePath1
> = z.object({
  type: InstructionsTypeFilePath1$outboundSchema,
  fileId: z.string(),
  index: z.number(),
}).transform((v) => {
  return remap$(v, {
    fileId: "file_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsAnnotationFilePath1$ {
  /** @deprecated use `InstructionsAnnotationFilePath1$inboundSchema` instead. */
  export const inboundSchema = InstructionsAnnotationFilePath1$inboundSchema;
  /** @deprecated use `InstructionsAnnotationFilePath1$outboundSchema` instead. */
  export const outboundSchema = InstructionsAnnotationFilePath1$outboundSchema;
  /** @deprecated use `InstructionsAnnotationFilePath1$Outbound` instead. */
  export type Outbound = InstructionsAnnotationFilePath1$Outbound;
}

export function instructionsAnnotationFilePath1ToJSON(
  instructionsAnnotationFilePath1: InstructionsAnnotationFilePath1,
): string {
  return JSON.stringify(
    InstructionsAnnotationFilePath1$outboundSchema.parse(
      instructionsAnnotationFilePath1,
    ),
  );
}

export function instructionsAnnotationFilePath1FromJSON(
  jsonString: string,
): SafeParseResult<InstructionsAnnotationFilePath1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InstructionsAnnotationFilePath1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InstructionsAnnotationFilePath1' from JSON`,
  );
}

/** @internal */
export const InstructionsTypeURLCitation1$inboundSchema: z.ZodNativeEnum<
  typeof InstructionsTypeURLCitation1
> = z.nativeEnum(InstructionsTypeURLCitation1);

/** @internal */
export const InstructionsTypeURLCitation1$outboundSchema: z.ZodNativeEnum<
  typeof InstructionsTypeURLCitation1
> = InstructionsTypeURLCitation1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsTypeURLCitation1$ {
  /** @deprecated use `InstructionsTypeURLCitation1$inboundSchema` instead. */
  export const inboundSchema = InstructionsTypeURLCitation1$inboundSchema;
  /** @deprecated use `InstructionsTypeURLCitation1$outboundSchema` instead. */
  export const outboundSchema = InstructionsTypeURLCitation1$outboundSchema;
}

/** @internal */
export const InstructionsAnnotationURLCitation1$inboundSchema: z.ZodType<
  InstructionsAnnotationURLCitation1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: InstructionsTypeURLCitation1$inboundSchema,
  end_index: z.number(),
  start_index: z.number(),
  title: z.string(),
  url: z.string(),
}).transform((v) => {
  return remap$(v, {
    "end_index": "endIndex",
    "start_index": "startIndex",
  });
});

/** @internal */
export type InstructionsAnnotationURLCitation1$Outbound = {
  type: string;
  end_index: number;
  start_index: number;
  title: string;
  url: string;
};

/** @internal */
export const InstructionsAnnotationURLCitation1$outboundSchema: z.ZodType<
  InstructionsAnnotationURLCitation1$Outbound,
  z.ZodTypeDef,
  InstructionsAnnotationURLCitation1
> = z.object({
  type: InstructionsTypeURLCitation1$outboundSchema,
  endIndex: z.number(),
  startIndex: z.number(),
  title: z.string(),
  url: z.string(),
}).transform((v) => {
  return remap$(v, {
    endIndex: "end_index",
    startIndex: "start_index",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsAnnotationURLCitation1$ {
  /** @deprecated use `InstructionsAnnotationURLCitation1$inboundSchema` instead. */
  export const inboundSchema = InstructionsAnnotationURLCitation1$inboundSchema;
  /** @deprecated use `InstructionsAnnotationURLCitation1$outboundSchema` instead. */
  export const outboundSchema =
    InstructionsAnnotationURLCitation1$outboundSchema;
  /** @deprecated use `InstructionsAnnotationURLCitation1$Outbound` instead. */
  export type Outbound = InstructionsAnnotationURLCitation1$Outbound;
}

export function instructionsAnnotationURLCitation1ToJSON(
  instructionsAnnotationURLCitation1: InstructionsAnnotationURLCitation1,
): string {
  return JSON.stringify(
    InstructionsAnnotationURLCitation1$outboundSchema.parse(
      instructionsAnnotationURLCitation1,
    ),
  );
}

export function instructionsAnnotationURLCitation1FromJSON(
  jsonString: string,
): SafeParseResult<InstructionsAnnotationURLCitation1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      InstructionsAnnotationURLCitation1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InstructionsAnnotationURLCitation1' from JSON`,
  );
}

/** @internal */
export const InstructionsTypeFileCitation1$inboundSchema: z.ZodNativeEnum<
  typeof InstructionsTypeFileCitation1
> = z.nativeEnum(InstructionsTypeFileCitation1);

/** @internal */
export const InstructionsTypeFileCitation1$outboundSchema: z.ZodNativeEnum<
  typeof InstructionsTypeFileCitation1
> = InstructionsTypeFileCitation1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsTypeFileCitation1$ {
  /** @deprecated use `InstructionsTypeFileCitation1$inboundSchema` instead. */
  export const inboundSchema = InstructionsTypeFileCitation1$inboundSchema;
  /** @deprecated use `InstructionsTypeFileCitation1$outboundSchema` instead. */
  export const outboundSchema = InstructionsTypeFileCitation1$outboundSchema;
}

/** @internal */
export const InstructionsAnnotationFileCitation1$inboundSchema: z.ZodType<
  InstructionsAnnotationFileCitation1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: InstructionsTypeFileCitation1$inboundSchema,
  file_id: z.string(),
  filename: z.string(),
  index: z.number(),
}).transform((v) => {
  return remap$(v, {
    "file_id": "fileId",
  });
});

/** @internal */
export type InstructionsAnnotationFileCitation1$Outbound = {
  type: string;
  file_id: string;
  filename: string;
  index: number;
};

/** @internal */
export const InstructionsAnnotationFileCitation1$outboundSchema: z.ZodType<
  InstructionsAnnotationFileCitation1$Outbound,
  z.ZodTypeDef,
  InstructionsAnnotationFileCitation1
> = z.object({
  type: InstructionsTypeFileCitation1$outboundSchema,
  fileId: z.string(),
  filename: z.string(),
  index: z.number(),
}).transform((v) => {
  return remap$(v, {
    fileId: "file_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsAnnotationFileCitation1$ {
  /** @deprecated use `InstructionsAnnotationFileCitation1$inboundSchema` instead. */
  export const inboundSchema =
    InstructionsAnnotationFileCitation1$inboundSchema;
  /** @deprecated use `InstructionsAnnotationFileCitation1$outboundSchema` instead. */
  export const outboundSchema =
    InstructionsAnnotationFileCitation1$outboundSchema;
  /** @deprecated use `InstructionsAnnotationFileCitation1$Outbound` instead. */
  export type Outbound = InstructionsAnnotationFileCitation1$Outbound;
}

export function instructionsAnnotationFileCitation1ToJSON(
  instructionsAnnotationFileCitation1: InstructionsAnnotationFileCitation1,
): string {
  return JSON.stringify(
    InstructionsAnnotationFileCitation1$outboundSchema.parse(
      instructionsAnnotationFileCitation1,
    ),
  );
}

export function instructionsAnnotationFileCitation1FromJSON(
  jsonString: string,
): SafeParseResult<InstructionsAnnotationFileCitation1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      InstructionsAnnotationFileCitation1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InstructionsAnnotationFileCitation1' from JSON`,
  );
}

/** @internal */
export const InstructionsAnnotationUnion1$inboundSchema: z.ZodType<
  InstructionsAnnotationUnion1,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => InstructionsAnnotationURLCitation1$inboundSchema),
  z.lazy(() => InstructionsAnnotationFileCitation1$inboundSchema),
  z.lazy(() => InstructionsAnnotationFilePath1$inboundSchema),
]);

/** @internal */
export type InstructionsAnnotationUnion1$Outbound =
  | InstructionsAnnotationURLCitation1$Outbound
  | InstructionsAnnotationFileCitation1$Outbound
  | InstructionsAnnotationFilePath1$Outbound;

/** @internal */
export const InstructionsAnnotationUnion1$outboundSchema: z.ZodType<
  InstructionsAnnotationUnion1$Outbound,
  z.ZodTypeDef,
  InstructionsAnnotationUnion1
> = z.union([
  z.lazy(() => InstructionsAnnotationURLCitation1$outboundSchema),
  z.lazy(() => InstructionsAnnotationFileCitation1$outboundSchema),
  z.lazy(() => InstructionsAnnotationFilePath1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsAnnotationUnion1$ {
  /** @deprecated use `InstructionsAnnotationUnion1$inboundSchema` instead. */
  export const inboundSchema = InstructionsAnnotationUnion1$inboundSchema;
  /** @deprecated use `InstructionsAnnotationUnion1$outboundSchema` instead. */
  export const outboundSchema = InstructionsAnnotationUnion1$outboundSchema;
  /** @deprecated use `InstructionsAnnotationUnion1$Outbound` instead. */
  export type Outbound = InstructionsAnnotationUnion1$Outbound;
}

export function instructionsAnnotationUnion1ToJSON(
  instructionsAnnotationUnion1: InstructionsAnnotationUnion1,
): string {
  return JSON.stringify(
    InstructionsAnnotationUnion1$outboundSchema.parse(
      instructionsAnnotationUnion1,
    ),
  );
}

export function instructionsAnnotationUnion1FromJSON(
  jsonString: string,
): SafeParseResult<InstructionsAnnotationUnion1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InstructionsAnnotationUnion1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InstructionsAnnotationUnion1' from JSON`,
  );
}

/** @internal */
export const InstructionsContentOutputText1$inboundSchema: z.ZodType<
  InstructionsContentOutputText1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: InstructionsTypeOutputText1$inboundSchema,
  text: z.string(),
  annotations: z.array(
    z.union([
      z.lazy(() => InstructionsAnnotationURLCitation1$inboundSchema),
      z.lazy(() => InstructionsAnnotationFileCitation1$inboundSchema),
      z.lazy(() => InstructionsAnnotationFilePath1$inboundSchema),
    ]),
  ),
});

/** @internal */
export type InstructionsContentOutputText1$Outbound = {
  type: string;
  text: string;
  annotations: Array<
    | InstructionsAnnotationURLCitation1$Outbound
    | InstructionsAnnotationFileCitation1$Outbound
    | InstructionsAnnotationFilePath1$Outbound
  >;
};

/** @internal */
export const InstructionsContentOutputText1$outboundSchema: z.ZodType<
  InstructionsContentOutputText1$Outbound,
  z.ZodTypeDef,
  InstructionsContentOutputText1
> = z.object({
  type: InstructionsTypeOutputText1$outboundSchema,
  text: z.string(),
  annotations: z.array(
    z.union([
      z.lazy(() => InstructionsAnnotationURLCitation1$outboundSchema),
      z.lazy(() => InstructionsAnnotationFileCitation1$outboundSchema),
      z.lazy(() => InstructionsAnnotationFilePath1$outboundSchema),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsContentOutputText1$ {
  /** @deprecated use `InstructionsContentOutputText1$inboundSchema` instead. */
  export const inboundSchema = InstructionsContentOutputText1$inboundSchema;
  /** @deprecated use `InstructionsContentOutputText1$outboundSchema` instead. */
  export const outboundSchema = InstructionsContentOutputText1$outboundSchema;
  /** @deprecated use `InstructionsContentOutputText1$Outbound` instead. */
  export type Outbound = InstructionsContentOutputText1$Outbound;
}

export function instructionsContentOutputText1ToJSON(
  instructionsContentOutputText1: InstructionsContentOutputText1,
): string {
  return JSON.stringify(
    InstructionsContentOutputText1$outboundSchema.parse(
      instructionsContentOutputText1,
    ),
  );
}

export function instructionsContentOutputText1FromJSON(
  jsonString: string,
): SafeParseResult<InstructionsContentOutputText1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InstructionsContentOutputText1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InstructionsContentOutputText1' from JSON`,
  );
}

/** @internal */
export const InstructionsContentUnion4$inboundSchema: z.ZodType<
  InstructionsContentUnion4,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => InstructionsContentOutputText1$inboundSchema),
  z.lazy(() => InstructionsContentRefusal1$inboundSchema),
]);

/** @internal */
export type InstructionsContentUnion4$Outbound =
  | InstructionsContentOutputText1$Outbound
  | InstructionsContentRefusal1$Outbound;

/** @internal */
export const InstructionsContentUnion4$outboundSchema: z.ZodType<
  InstructionsContentUnion4$Outbound,
  z.ZodTypeDef,
  InstructionsContentUnion4
> = z.union([
  z.lazy(() => InstructionsContentOutputText1$outboundSchema),
  z.lazy(() => InstructionsContentRefusal1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsContentUnion4$ {
  /** @deprecated use `InstructionsContentUnion4$inboundSchema` instead. */
  export const inboundSchema = InstructionsContentUnion4$inboundSchema;
  /** @deprecated use `InstructionsContentUnion4$outboundSchema` instead. */
  export const outboundSchema = InstructionsContentUnion4$outboundSchema;
  /** @deprecated use `InstructionsContentUnion4$Outbound` instead. */
  export type Outbound = InstructionsContentUnion4$Outbound;
}

export function instructionsContentUnion4ToJSON(
  instructionsContentUnion4: InstructionsContentUnion4,
): string {
  return JSON.stringify(
    InstructionsContentUnion4$outboundSchema.parse(instructionsContentUnion4),
  );
}

export function instructionsContentUnion4FromJSON(
  jsonString: string,
): SafeParseResult<InstructionsContentUnion4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InstructionsContentUnion4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InstructionsContentUnion4' from JSON`,
  );
}

/** @internal */
export const InstructionsAssistant1$inboundSchema: z.ZodType<
  InstructionsAssistant1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: InstructionsTypeMessage3$inboundSchema,
  id: z.string(),
  status: z.union([
    InstructionsStatusCompleted1$inboundSchema,
    InstructionsStatusIncomplete1$inboundSchema,
    InstructionsStatusInProgress1$inboundSchema,
  ]),
  role: InstructionsRoleAssistant2$inboundSchema,
  content: z.array(
    z.union([
      z.lazy(() => InstructionsContentOutputText1$inboundSchema),
      z.lazy(() => InstructionsContentRefusal1$inboundSchema),
    ]),
  ),
});

/** @internal */
export type InstructionsAssistant1$Outbound = {
  type: string;
  id: string;
  status: string | string | string;
  role: string;
  content: Array<
    | InstructionsContentOutputText1$Outbound
    | InstructionsContentRefusal1$Outbound
  >;
};

/** @internal */
export const InstructionsAssistant1$outboundSchema: z.ZodType<
  InstructionsAssistant1$Outbound,
  z.ZodTypeDef,
  InstructionsAssistant1
> = z.object({
  type: InstructionsTypeMessage3$outboundSchema,
  id: z.string(),
  status: z.union([
    InstructionsStatusCompleted1$outboundSchema,
    InstructionsStatusIncomplete1$outboundSchema,
    InstructionsStatusInProgress1$outboundSchema,
  ]),
  role: InstructionsRoleAssistant2$outboundSchema,
  content: z.array(
    z.union([
      z.lazy(() => InstructionsContentOutputText1$outboundSchema),
      z.lazy(() => InstructionsContentRefusal1$outboundSchema),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsAssistant1$ {
  /** @deprecated use `InstructionsAssistant1$inboundSchema` instead. */
  export const inboundSchema = InstructionsAssistant1$inboundSchema;
  /** @deprecated use `InstructionsAssistant1$outboundSchema` instead. */
  export const outboundSchema = InstructionsAssistant1$outboundSchema;
  /** @deprecated use `InstructionsAssistant1$Outbound` instead. */
  export type Outbound = InstructionsAssistant1$Outbound;
}

export function instructionsAssistant1ToJSON(
  instructionsAssistant1: InstructionsAssistant1,
): string {
  return JSON.stringify(
    InstructionsAssistant1$outboundSchema.parse(instructionsAssistant1),
  );
}

export function instructionsAssistant1FromJSON(
  jsonString: string,
): SafeParseResult<InstructionsAssistant1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InstructionsAssistant1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InstructionsAssistant1' from JSON`,
  );
}

/** @internal */
export const InstructionsTypeImageGenerationCall1$inboundSchema:
  z.ZodNativeEnum<typeof InstructionsTypeImageGenerationCall1> = z.nativeEnum(
    InstructionsTypeImageGenerationCall1,
  );

/** @internal */
export const InstructionsTypeImageGenerationCall1$outboundSchema:
  z.ZodNativeEnum<typeof InstructionsTypeImageGenerationCall1> =
    InstructionsTypeImageGenerationCall1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsTypeImageGenerationCall1$ {
  /** @deprecated use `InstructionsTypeImageGenerationCall1$inboundSchema` instead. */
  export const inboundSchema =
    InstructionsTypeImageGenerationCall1$inboundSchema;
  /** @deprecated use `InstructionsTypeImageGenerationCall1$outboundSchema` instead. */
  export const outboundSchema =
    InstructionsTypeImageGenerationCall1$outboundSchema;
}

/** @internal */
export const InstructionsStatusEnum3$inboundSchema: z.ZodNativeEnum<
  typeof InstructionsStatusEnum3
> = z.nativeEnum(InstructionsStatusEnum3);

/** @internal */
export const InstructionsStatusEnum3$outboundSchema: z.ZodNativeEnum<
  typeof InstructionsStatusEnum3
> = InstructionsStatusEnum3$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsStatusEnum3$ {
  /** @deprecated use `InstructionsStatusEnum3$inboundSchema` instead. */
  export const inboundSchema = InstructionsStatusEnum3$inboundSchema;
  /** @deprecated use `InstructionsStatusEnum3$outboundSchema` instead. */
  export const outboundSchema = InstructionsStatusEnum3$outboundSchema;
}

/** @internal */
export const InstructionsImageGenerationCall1$inboundSchema: z.ZodType<
  InstructionsImageGenerationCall1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: InstructionsTypeImageGenerationCall1$inboundSchema,
  id: z.string(),
  result: z.nullable(z.string()),
  status: InstructionsStatusEnum3$inboundSchema,
});

/** @internal */
export type InstructionsImageGenerationCall1$Outbound = {
  type: string;
  id: string;
  result: string | null;
  status: string;
};

/** @internal */
export const InstructionsImageGenerationCall1$outboundSchema: z.ZodType<
  InstructionsImageGenerationCall1$Outbound,
  z.ZodTypeDef,
  InstructionsImageGenerationCall1
> = z.object({
  type: InstructionsTypeImageGenerationCall1$outboundSchema,
  id: z.string(),
  result: z.nullable(z.string()),
  status: InstructionsStatusEnum3$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsImageGenerationCall1$ {
  /** @deprecated use `InstructionsImageGenerationCall1$inboundSchema` instead. */
  export const inboundSchema = InstructionsImageGenerationCall1$inboundSchema;
  /** @deprecated use `InstructionsImageGenerationCall1$outboundSchema` instead. */
  export const outboundSchema = InstructionsImageGenerationCall1$outboundSchema;
  /** @deprecated use `InstructionsImageGenerationCall1$Outbound` instead. */
  export type Outbound = InstructionsImageGenerationCall1$Outbound;
}

export function instructionsImageGenerationCall1ToJSON(
  instructionsImageGenerationCall1: InstructionsImageGenerationCall1,
): string {
  return JSON.stringify(
    InstructionsImageGenerationCall1$outboundSchema.parse(
      instructionsImageGenerationCall1,
    ),
  );
}

export function instructionsImageGenerationCall1FromJSON(
  jsonString: string,
): SafeParseResult<InstructionsImageGenerationCall1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InstructionsImageGenerationCall1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InstructionsImageGenerationCall1' from JSON`,
  );
}

/** @internal */
export const InstructionsTypeFunctionCallOutput$inboundSchema: z.ZodNativeEnum<
  typeof InstructionsTypeFunctionCallOutput
> = z.nativeEnum(InstructionsTypeFunctionCallOutput);

/** @internal */
export const InstructionsTypeFunctionCallOutput$outboundSchema: z.ZodNativeEnum<
  typeof InstructionsTypeFunctionCallOutput
> = InstructionsTypeFunctionCallOutput$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsTypeFunctionCallOutput$ {
  /** @deprecated use `InstructionsTypeFunctionCallOutput$inboundSchema` instead. */
  export const inboundSchema = InstructionsTypeFunctionCallOutput$inboundSchema;
  /** @deprecated use `InstructionsTypeFunctionCallOutput$outboundSchema` instead. */
  export const outboundSchema =
    InstructionsTypeFunctionCallOutput$outboundSchema;
}

/** @internal */
export const InstructionsStatusEnum2$inboundSchema: z.ZodNativeEnum<
  typeof InstructionsStatusEnum2
> = z.nativeEnum(InstructionsStatusEnum2);

/** @internal */
export const InstructionsStatusEnum2$outboundSchema: z.ZodNativeEnum<
  typeof InstructionsStatusEnum2
> = InstructionsStatusEnum2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsStatusEnum2$ {
  /** @deprecated use `InstructionsStatusEnum2$inboundSchema` instead. */
  export const inboundSchema = InstructionsStatusEnum2$inboundSchema;
  /** @deprecated use `InstructionsStatusEnum2$outboundSchema` instead. */
  export const outboundSchema = InstructionsStatusEnum2$outboundSchema;
}

/** @internal */
export const InstructionsFunctionCallOutput$inboundSchema: z.ZodType<
  InstructionsFunctionCallOutput,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: InstructionsTypeFunctionCallOutput$inboundSchema,
  id: z.string(),
  call_id: z.string(),
  output: z.string(),
  status: InstructionsStatusEnum2$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "call_id": "callId",
  });
});

/** @internal */
export type InstructionsFunctionCallOutput$Outbound = {
  type: string;
  id: string;
  call_id: string;
  output: string;
  status?: string | undefined;
};

/** @internal */
export const InstructionsFunctionCallOutput$outboundSchema: z.ZodType<
  InstructionsFunctionCallOutput$Outbound,
  z.ZodTypeDef,
  InstructionsFunctionCallOutput
> = z.object({
  type: InstructionsTypeFunctionCallOutput$outboundSchema,
  id: z.string(),
  callId: z.string(),
  output: z.string(),
  status: InstructionsStatusEnum2$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    callId: "call_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsFunctionCallOutput$ {
  /** @deprecated use `InstructionsFunctionCallOutput$inboundSchema` instead. */
  export const inboundSchema = InstructionsFunctionCallOutput$inboundSchema;
  /** @deprecated use `InstructionsFunctionCallOutput$outboundSchema` instead. */
  export const outboundSchema = InstructionsFunctionCallOutput$outboundSchema;
  /** @deprecated use `InstructionsFunctionCallOutput$Outbound` instead. */
  export type Outbound = InstructionsFunctionCallOutput$Outbound;
}

export function instructionsFunctionCallOutputToJSON(
  instructionsFunctionCallOutput: InstructionsFunctionCallOutput,
): string {
  return JSON.stringify(
    InstructionsFunctionCallOutput$outboundSchema.parse(
      instructionsFunctionCallOutput,
    ),
  );
}

export function instructionsFunctionCallOutputFromJSON(
  jsonString: string,
): SafeParseResult<InstructionsFunctionCallOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InstructionsFunctionCallOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InstructionsFunctionCallOutput' from JSON`,
  );
}

/** @internal */
export const InstructionsTypeFunctionCall1$inboundSchema: z.ZodNativeEnum<
  typeof InstructionsTypeFunctionCall1
> = z.nativeEnum(InstructionsTypeFunctionCall1);

/** @internal */
export const InstructionsTypeFunctionCall1$outboundSchema: z.ZodNativeEnum<
  typeof InstructionsTypeFunctionCall1
> = InstructionsTypeFunctionCall1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsTypeFunctionCall1$ {
  /** @deprecated use `InstructionsTypeFunctionCall1$inboundSchema` instead. */
  export const inboundSchema = InstructionsTypeFunctionCall1$inboundSchema;
  /** @deprecated use `InstructionsTypeFunctionCall1$outboundSchema` instead. */
  export const outboundSchema = InstructionsTypeFunctionCall1$outboundSchema;
}

/** @internal */
export const InstructionsStatusEnum1$inboundSchema: z.ZodNativeEnum<
  typeof InstructionsStatusEnum1
> = z.nativeEnum(InstructionsStatusEnum1);

/** @internal */
export const InstructionsStatusEnum1$outboundSchema: z.ZodNativeEnum<
  typeof InstructionsStatusEnum1
> = InstructionsStatusEnum1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsStatusEnum1$ {
  /** @deprecated use `InstructionsStatusEnum1$inboundSchema` instead. */
  export const inboundSchema = InstructionsStatusEnum1$inboundSchema;
  /** @deprecated use `InstructionsStatusEnum1$outboundSchema` instead. */
  export const outboundSchema = InstructionsStatusEnum1$outboundSchema;
}

/** @internal */
export const InstructionsFunctionCall1$inboundSchema: z.ZodType<
  InstructionsFunctionCall1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: InstructionsTypeFunctionCall1$inboundSchema,
  call_id: z.string(),
  name: z.string(),
  arguments: z.string(),
  id: z.string().optional(),
  status: InstructionsStatusEnum1$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "call_id": "callId",
  });
});

/** @internal */
export type InstructionsFunctionCall1$Outbound = {
  type: string;
  call_id: string;
  name: string;
  arguments: string;
  id?: string | undefined;
  status?: string | undefined;
};

/** @internal */
export const InstructionsFunctionCall1$outboundSchema: z.ZodType<
  InstructionsFunctionCall1$Outbound,
  z.ZodTypeDef,
  InstructionsFunctionCall1
> = z.object({
  type: InstructionsTypeFunctionCall1$outboundSchema,
  callId: z.string(),
  name: z.string(),
  arguments: z.string(),
  id: z.string().optional(),
  status: InstructionsStatusEnum1$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    callId: "call_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsFunctionCall1$ {
  /** @deprecated use `InstructionsFunctionCall1$inboundSchema` instead. */
  export const inboundSchema = InstructionsFunctionCall1$inboundSchema;
  /** @deprecated use `InstructionsFunctionCall1$outboundSchema` instead. */
  export const outboundSchema = InstructionsFunctionCall1$outboundSchema;
  /** @deprecated use `InstructionsFunctionCall1$Outbound` instead. */
  export type Outbound = InstructionsFunctionCall1$Outbound;
}

export function instructionsFunctionCall1ToJSON(
  instructionsFunctionCall1: InstructionsFunctionCall1,
): string {
  return JSON.stringify(
    InstructionsFunctionCall1$outboundSchema.parse(instructionsFunctionCall1),
  );
}

export function instructionsFunctionCall1FromJSON(
  jsonString: string,
): SafeParseResult<InstructionsFunctionCall1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InstructionsFunctionCall1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InstructionsFunctionCall1' from JSON`,
  );
}

/** @internal */
export const InstructionsTypeMessage2$inboundSchema: z.ZodNativeEnum<
  typeof InstructionsTypeMessage2
> = z.nativeEnum(InstructionsTypeMessage2);

/** @internal */
export const InstructionsTypeMessage2$outboundSchema: z.ZodNativeEnum<
  typeof InstructionsTypeMessage2
> = InstructionsTypeMessage2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsTypeMessage2$ {
  /** @deprecated use `InstructionsTypeMessage2$inboundSchema` instead. */
  export const inboundSchema = InstructionsTypeMessage2$inboundSchema;
  /** @deprecated use `InstructionsTypeMessage2$outboundSchema` instead. */
  export const outboundSchema = InstructionsTypeMessage2$outboundSchema;
}

/** @internal */
export const InstructionsRoleDeveloper2$inboundSchema: z.ZodNativeEnum<
  typeof InstructionsRoleDeveloper2
> = z.nativeEnum(InstructionsRoleDeveloper2);

/** @internal */
export const InstructionsRoleDeveloper2$outboundSchema: z.ZodNativeEnum<
  typeof InstructionsRoleDeveloper2
> = InstructionsRoleDeveloper2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsRoleDeveloper2$ {
  /** @deprecated use `InstructionsRoleDeveloper2$inboundSchema` instead. */
  export const inboundSchema = InstructionsRoleDeveloper2$inboundSchema;
  /** @deprecated use `InstructionsRoleDeveloper2$outboundSchema` instead. */
  export const outboundSchema = InstructionsRoleDeveloper2$outboundSchema;
}

/** @internal */
export const InstructionsRoleSystem2$inboundSchema: z.ZodNativeEnum<
  typeof InstructionsRoleSystem2
> = z.nativeEnum(InstructionsRoleSystem2);

/** @internal */
export const InstructionsRoleSystem2$outboundSchema: z.ZodNativeEnum<
  typeof InstructionsRoleSystem2
> = InstructionsRoleSystem2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsRoleSystem2$ {
  /** @deprecated use `InstructionsRoleSystem2$inboundSchema` instead. */
  export const inboundSchema = InstructionsRoleSystem2$inboundSchema;
  /** @deprecated use `InstructionsRoleSystem2$outboundSchema` instead. */
  export const outboundSchema = InstructionsRoleSystem2$outboundSchema;
}

/** @internal */
export const InstructionsRoleUser2$inboundSchema: z.ZodNativeEnum<
  typeof InstructionsRoleUser2
> = z.nativeEnum(InstructionsRoleUser2);

/** @internal */
export const InstructionsRoleUser2$outboundSchema: z.ZodNativeEnum<
  typeof InstructionsRoleUser2
> = InstructionsRoleUser2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsRoleUser2$ {
  /** @deprecated use `InstructionsRoleUser2$inboundSchema` instead. */
  export const inboundSchema = InstructionsRoleUser2$inboundSchema;
  /** @deprecated use `InstructionsRoleUser2$outboundSchema` instead. */
  export const outboundSchema = InstructionsRoleUser2$outboundSchema;
}

/** @internal */
export const InstructionsRoleUnion2$inboundSchema: z.ZodType<
  InstructionsRoleUnion2,
  z.ZodTypeDef,
  unknown
> = z.union([
  InstructionsRoleUser2$inboundSchema,
  InstructionsRoleSystem2$inboundSchema,
  InstructionsRoleDeveloper2$inboundSchema,
]);

/** @internal */
export type InstructionsRoleUnion2$Outbound = string | string | string;

/** @internal */
export const InstructionsRoleUnion2$outboundSchema: z.ZodType<
  InstructionsRoleUnion2$Outbound,
  z.ZodTypeDef,
  InstructionsRoleUnion2
> = z.union([
  InstructionsRoleUser2$outboundSchema,
  InstructionsRoleSystem2$outboundSchema,
  InstructionsRoleDeveloper2$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsRoleUnion2$ {
  /** @deprecated use `InstructionsRoleUnion2$inboundSchema` instead. */
  export const inboundSchema = InstructionsRoleUnion2$inboundSchema;
  /** @deprecated use `InstructionsRoleUnion2$outboundSchema` instead. */
  export const outboundSchema = InstructionsRoleUnion2$outboundSchema;
  /** @deprecated use `InstructionsRoleUnion2$Outbound` instead. */
  export type Outbound = InstructionsRoleUnion2$Outbound;
}

export function instructionsRoleUnion2ToJSON(
  instructionsRoleUnion2: InstructionsRoleUnion2,
): string {
  return JSON.stringify(
    InstructionsRoleUnion2$outboundSchema.parse(instructionsRoleUnion2),
  );
}

export function instructionsRoleUnion2FromJSON(
  jsonString: string,
): SafeParseResult<InstructionsRoleUnion2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InstructionsRoleUnion2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InstructionsRoleUnion2' from JSON`,
  );
}

/** @internal */
export const InstructionsTypeInputFile2$inboundSchema: z.ZodNativeEnum<
  typeof InstructionsTypeInputFile2
> = z.nativeEnum(InstructionsTypeInputFile2);

/** @internal */
export const InstructionsTypeInputFile2$outboundSchema: z.ZodNativeEnum<
  typeof InstructionsTypeInputFile2
> = InstructionsTypeInputFile2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsTypeInputFile2$ {
  /** @deprecated use `InstructionsTypeInputFile2$inboundSchema` instead. */
  export const inboundSchema = InstructionsTypeInputFile2$inboundSchema;
  /** @deprecated use `InstructionsTypeInputFile2$outboundSchema` instead. */
  export const outboundSchema = InstructionsTypeInputFile2$outboundSchema;
}

/** @internal */
export const InstructionsContentInputFile2$inboundSchema: z.ZodType<
  InstructionsContentInputFile2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: InstructionsTypeInputFile2$inboundSchema,
  file_id: z.nullable(z.string()).optional(),
  file_data: z.string().optional(),
  filename: z.string().optional(),
  file_url: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "file_id": "fileId",
    "file_data": "fileData",
    "file_url": "fileUrl",
  });
});

/** @internal */
export type InstructionsContentInputFile2$Outbound = {
  type: string;
  file_id?: string | null | undefined;
  file_data?: string | undefined;
  filename?: string | undefined;
  file_url?: string | undefined;
};

/** @internal */
export const InstructionsContentInputFile2$outboundSchema: z.ZodType<
  InstructionsContentInputFile2$Outbound,
  z.ZodTypeDef,
  InstructionsContentInputFile2
> = z.object({
  type: InstructionsTypeInputFile2$outboundSchema,
  fileId: z.nullable(z.string()).optional(),
  fileData: z.string().optional(),
  filename: z.string().optional(),
  fileUrl: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    fileId: "file_id",
    fileData: "file_data",
    fileUrl: "file_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsContentInputFile2$ {
  /** @deprecated use `InstructionsContentInputFile2$inboundSchema` instead. */
  export const inboundSchema = InstructionsContentInputFile2$inboundSchema;
  /** @deprecated use `InstructionsContentInputFile2$outboundSchema` instead. */
  export const outboundSchema = InstructionsContentInputFile2$outboundSchema;
  /** @deprecated use `InstructionsContentInputFile2$Outbound` instead. */
  export type Outbound = InstructionsContentInputFile2$Outbound;
}

export function instructionsContentInputFile2ToJSON(
  instructionsContentInputFile2: InstructionsContentInputFile2,
): string {
  return JSON.stringify(
    InstructionsContentInputFile2$outboundSchema.parse(
      instructionsContentInputFile2,
    ),
  );
}

export function instructionsContentInputFile2FromJSON(
  jsonString: string,
): SafeParseResult<InstructionsContentInputFile2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InstructionsContentInputFile2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InstructionsContentInputFile2' from JSON`,
  );
}

/** @internal */
export const InstructionsTypeInputImage2$inboundSchema: z.ZodNativeEnum<
  typeof InstructionsTypeInputImage2
> = z.nativeEnum(InstructionsTypeInputImage2);

/** @internal */
export const InstructionsTypeInputImage2$outboundSchema: z.ZodNativeEnum<
  typeof InstructionsTypeInputImage2
> = InstructionsTypeInputImage2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsTypeInputImage2$ {
  /** @deprecated use `InstructionsTypeInputImage2$inboundSchema` instead. */
  export const inboundSchema = InstructionsTypeInputImage2$inboundSchema;
  /** @deprecated use `InstructionsTypeInputImage2$outboundSchema` instead. */
  export const outboundSchema = InstructionsTypeInputImage2$outboundSchema;
}

/** @internal */
export const InstructionsDetail2$inboundSchema: z.ZodNativeEnum<
  typeof InstructionsDetail2
> = z.nativeEnum(InstructionsDetail2);

/** @internal */
export const InstructionsDetail2$outboundSchema: z.ZodNativeEnum<
  typeof InstructionsDetail2
> = InstructionsDetail2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsDetail2$ {
  /** @deprecated use `InstructionsDetail2$inboundSchema` instead. */
  export const inboundSchema = InstructionsDetail2$inboundSchema;
  /** @deprecated use `InstructionsDetail2$outboundSchema` instead. */
  export const outboundSchema = InstructionsDetail2$outboundSchema;
}

/** @internal */
export const InstructionsContentInputImage2$inboundSchema: z.ZodType<
  InstructionsContentInputImage2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: InstructionsTypeInputImage2$inboundSchema,
  detail: InstructionsDetail2$inboundSchema,
  image_url: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type InstructionsContentInputImage2$Outbound = {
  type: string;
  detail: string;
  image_url?: string | null | undefined;
};

/** @internal */
export const InstructionsContentInputImage2$outboundSchema: z.ZodType<
  InstructionsContentInputImage2$Outbound,
  z.ZodTypeDef,
  InstructionsContentInputImage2
> = z.object({
  type: InstructionsTypeInputImage2$outboundSchema,
  detail: InstructionsDetail2$outboundSchema,
  imageUrl: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsContentInputImage2$ {
  /** @deprecated use `InstructionsContentInputImage2$inboundSchema` instead. */
  export const inboundSchema = InstructionsContentInputImage2$inboundSchema;
  /** @deprecated use `InstructionsContentInputImage2$outboundSchema` instead. */
  export const outboundSchema = InstructionsContentInputImage2$outboundSchema;
  /** @deprecated use `InstructionsContentInputImage2$Outbound` instead. */
  export type Outbound = InstructionsContentInputImage2$Outbound;
}

export function instructionsContentInputImage2ToJSON(
  instructionsContentInputImage2: InstructionsContentInputImage2,
): string {
  return JSON.stringify(
    InstructionsContentInputImage2$outboundSchema.parse(
      instructionsContentInputImage2,
    ),
  );
}

export function instructionsContentInputImage2FromJSON(
  jsonString: string,
): SafeParseResult<InstructionsContentInputImage2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InstructionsContentInputImage2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InstructionsContentInputImage2' from JSON`,
  );
}

/** @internal */
export const InstructionsTypeInputText2$inboundSchema: z.ZodNativeEnum<
  typeof InstructionsTypeInputText2
> = z.nativeEnum(InstructionsTypeInputText2);

/** @internal */
export const InstructionsTypeInputText2$outboundSchema: z.ZodNativeEnum<
  typeof InstructionsTypeInputText2
> = InstructionsTypeInputText2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsTypeInputText2$ {
  /** @deprecated use `InstructionsTypeInputText2$inboundSchema` instead. */
  export const inboundSchema = InstructionsTypeInputText2$inboundSchema;
  /** @deprecated use `InstructionsTypeInputText2$outboundSchema` instead. */
  export const outboundSchema = InstructionsTypeInputText2$outboundSchema;
}

/** @internal */
export const InstructionsContentInputText2$inboundSchema: z.ZodType<
  InstructionsContentInputText2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: InstructionsTypeInputText2$inboundSchema,
  text: z.string(),
});

/** @internal */
export type InstructionsContentInputText2$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const InstructionsContentInputText2$outboundSchema: z.ZodType<
  InstructionsContentInputText2$Outbound,
  z.ZodTypeDef,
  InstructionsContentInputText2
> = z.object({
  type: InstructionsTypeInputText2$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsContentInputText2$ {
  /** @deprecated use `InstructionsContentInputText2$inboundSchema` instead. */
  export const inboundSchema = InstructionsContentInputText2$inboundSchema;
  /** @deprecated use `InstructionsContentInputText2$outboundSchema` instead. */
  export const outboundSchema = InstructionsContentInputText2$outboundSchema;
  /** @deprecated use `InstructionsContentInputText2$Outbound` instead. */
  export type Outbound = InstructionsContentInputText2$Outbound;
}

export function instructionsContentInputText2ToJSON(
  instructionsContentInputText2: InstructionsContentInputText2,
): string {
  return JSON.stringify(
    InstructionsContentInputText2$outboundSchema.parse(
      instructionsContentInputText2,
    ),
  );
}

export function instructionsContentInputText2FromJSON(
  jsonString: string,
): SafeParseResult<InstructionsContentInputText2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InstructionsContentInputText2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InstructionsContentInputText2' from JSON`,
  );
}

/** @internal */
export const InstructionsContentUnion3$inboundSchema: z.ZodType<
  InstructionsContentUnion3,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => InstructionsContentInputText2$inboundSchema),
  z.lazy(() => InstructionsContentInputImage2$inboundSchema),
  z.lazy(() => InstructionsContentInputFile2$inboundSchema),
]);

/** @internal */
export type InstructionsContentUnion3$Outbound =
  | InstructionsContentInputText2$Outbound
  | InstructionsContentInputImage2$Outbound
  | InstructionsContentInputFile2$Outbound;

/** @internal */
export const InstructionsContentUnion3$outboundSchema: z.ZodType<
  InstructionsContentUnion3$Outbound,
  z.ZodTypeDef,
  InstructionsContentUnion3
> = z.union([
  z.lazy(() => InstructionsContentInputText2$outboundSchema),
  z.lazy(() => InstructionsContentInputImage2$outboundSchema),
  z.lazy(() => InstructionsContentInputFile2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsContentUnion3$ {
  /** @deprecated use `InstructionsContentUnion3$inboundSchema` instead. */
  export const inboundSchema = InstructionsContentUnion3$inboundSchema;
  /** @deprecated use `InstructionsContentUnion3$outboundSchema` instead. */
  export const outboundSchema = InstructionsContentUnion3$outboundSchema;
  /** @deprecated use `InstructionsContentUnion3$Outbound` instead. */
  export type Outbound = InstructionsContentUnion3$Outbound;
}

export function instructionsContentUnion3ToJSON(
  instructionsContentUnion3: InstructionsContentUnion3,
): string {
  return JSON.stringify(
    InstructionsContentUnion3$outboundSchema.parse(instructionsContentUnion3),
  );
}

export function instructionsContentUnion3FromJSON(
  jsonString: string,
): SafeParseResult<InstructionsContentUnion3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InstructionsContentUnion3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InstructionsContentUnion3' from JSON`,
  );
}

/** @internal */
export const InstructionsMessage2$inboundSchema: z.ZodType<
  InstructionsMessage2,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  type: InstructionsTypeMessage2$inboundSchema.optional(),
  role: z.union([
    InstructionsRoleUser2$inboundSchema,
    InstructionsRoleSystem2$inboundSchema,
    InstructionsRoleDeveloper2$inboundSchema,
  ]),
  content: z.array(
    z.union([
      z.lazy(() => InstructionsContentInputText2$inboundSchema),
      z.lazy(() => InstructionsContentInputImage2$inboundSchema),
      z.lazy(() => InstructionsContentInputFile2$inboundSchema),
    ]),
  ),
});

/** @internal */
export type InstructionsMessage2$Outbound = {
  id: string;
  type?: string | undefined;
  role: string | string | string;
  content: Array<
    | InstructionsContentInputText2$Outbound
    | InstructionsContentInputImage2$Outbound
    | InstructionsContentInputFile2$Outbound
  >;
};

/** @internal */
export const InstructionsMessage2$outboundSchema: z.ZodType<
  InstructionsMessage2$Outbound,
  z.ZodTypeDef,
  InstructionsMessage2
> = z.object({
  id: z.string(),
  type: InstructionsTypeMessage2$outboundSchema.optional(),
  role: z.union([
    InstructionsRoleUser2$outboundSchema,
    InstructionsRoleSystem2$outboundSchema,
    InstructionsRoleDeveloper2$outboundSchema,
  ]),
  content: z.array(
    z.union([
      z.lazy(() => InstructionsContentInputText2$outboundSchema),
      z.lazy(() => InstructionsContentInputImage2$outboundSchema),
      z.lazy(() => InstructionsContentInputFile2$outboundSchema),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsMessage2$ {
  /** @deprecated use `InstructionsMessage2$inboundSchema` instead. */
  export const inboundSchema = InstructionsMessage2$inboundSchema;
  /** @deprecated use `InstructionsMessage2$outboundSchema` instead. */
  export const outboundSchema = InstructionsMessage2$outboundSchema;
  /** @deprecated use `InstructionsMessage2$Outbound` instead. */
  export type Outbound = InstructionsMessage2$Outbound;
}

export function instructionsMessage2ToJSON(
  instructionsMessage2: InstructionsMessage2,
): string {
  return JSON.stringify(
    InstructionsMessage2$outboundSchema.parse(instructionsMessage2),
  );
}

export function instructionsMessage2FromJSON(
  jsonString: string,
): SafeParseResult<InstructionsMessage2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InstructionsMessage2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InstructionsMessage2' from JSON`,
  );
}

/** @internal */
export const InstructionsTypeMessage1$inboundSchema: z.ZodNativeEnum<
  typeof InstructionsTypeMessage1
> = z.nativeEnum(InstructionsTypeMessage1);

/** @internal */
export const InstructionsTypeMessage1$outboundSchema: z.ZodNativeEnum<
  typeof InstructionsTypeMessage1
> = InstructionsTypeMessage1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsTypeMessage1$ {
  /** @deprecated use `InstructionsTypeMessage1$inboundSchema` instead. */
  export const inboundSchema = InstructionsTypeMessage1$inboundSchema;
  /** @deprecated use `InstructionsTypeMessage1$outboundSchema` instead. */
  export const outboundSchema = InstructionsTypeMessage1$outboundSchema;
}

/** @internal */
export const InstructionsRoleDeveloper1$inboundSchema: z.ZodNativeEnum<
  typeof InstructionsRoleDeveloper1
> = z.nativeEnum(InstructionsRoleDeveloper1);

/** @internal */
export const InstructionsRoleDeveloper1$outboundSchema: z.ZodNativeEnum<
  typeof InstructionsRoleDeveloper1
> = InstructionsRoleDeveloper1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsRoleDeveloper1$ {
  /** @deprecated use `InstructionsRoleDeveloper1$inboundSchema` instead. */
  export const inboundSchema = InstructionsRoleDeveloper1$inboundSchema;
  /** @deprecated use `InstructionsRoleDeveloper1$outboundSchema` instead. */
  export const outboundSchema = InstructionsRoleDeveloper1$outboundSchema;
}

/** @internal */
export const InstructionsRoleAssistant1$inboundSchema: z.ZodNativeEnum<
  typeof InstructionsRoleAssistant1
> = z.nativeEnum(InstructionsRoleAssistant1);

/** @internal */
export const InstructionsRoleAssistant1$outboundSchema: z.ZodNativeEnum<
  typeof InstructionsRoleAssistant1
> = InstructionsRoleAssistant1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsRoleAssistant1$ {
  /** @deprecated use `InstructionsRoleAssistant1$inboundSchema` instead. */
  export const inboundSchema = InstructionsRoleAssistant1$inboundSchema;
  /** @deprecated use `InstructionsRoleAssistant1$outboundSchema` instead. */
  export const outboundSchema = InstructionsRoleAssistant1$outboundSchema;
}

/** @internal */
export const InstructionsRoleSystem1$inboundSchema: z.ZodNativeEnum<
  typeof InstructionsRoleSystem1
> = z.nativeEnum(InstructionsRoleSystem1);

/** @internal */
export const InstructionsRoleSystem1$outboundSchema: z.ZodNativeEnum<
  typeof InstructionsRoleSystem1
> = InstructionsRoleSystem1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsRoleSystem1$ {
  /** @deprecated use `InstructionsRoleSystem1$inboundSchema` instead. */
  export const inboundSchema = InstructionsRoleSystem1$inboundSchema;
  /** @deprecated use `InstructionsRoleSystem1$outboundSchema` instead. */
  export const outboundSchema = InstructionsRoleSystem1$outboundSchema;
}

/** @internal */
export const InstructionsRoleUser1$inboundSchema: z.ZodNativeEnum<
  typeof InstructionsRoleUser1
> = z.nativeEnum(InstructionsRoleUser1);

/** @internal */
export const InstructionsRoleUser1$outboundSchema: z.ZodNativeEnum<
  typeof InstructionsRoleUser1
> = InstructionsRoleUser1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsRoleUser1$ {
  /** @deprecated use `InstructionsRoleUser1$inboundSchema` instead. */
  export const inboundSchema = InstructionsRoleUser1$inboundSchema;
  /** @deprecated use `InstructionsRoleUser1$outboundSchema` instead. */
  export const outboundSchema = InstructionsRoleUser1$outboundSchema;
}

/** @internal */
export const InstructionsRoleUnion1$inboundSchema: z.ZodType<
  InstructionsRoleUnion1,
  z.ZodTypeDef,
  unknown
> = z.union([
  InstructionsRoleUser1$inboundSchema,
  InstructionsRoleSystem1$inboundSchema,
  InstructionsRoleAssistant1$inboundSchema,
  InstructionsRoleDeveloper1$inboundSchema,
]);

/** @internal */
export type InstructionsRoleUnion1$Outbound = string | string | string | string;

/** @internal */
export const InstructionsRoleUnion1$outboundSchema: z.ZodType<
  InstructionsRoleUnion1$Outbound,
  z.ZodTypeDef,
  InstructionsRoleUnion1
> = z.union([
  InstructionsRoleUser1$outboundSchema,
  InstructionsRoleSystem1$outboundSchema,
  InstructionsRoleAssistant1$outboundSchema,
  InstructionsRoleDeveloper1$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsRoleUnion1$ {
  /** @deprecated use `InstructionsRoleUnion1$inboundSchema` instead. */
  export const inboundSchema = InstructionsRoleUnion1$inboundSchema;
  /** @deprecated use `InstructionsRoleUnion1$outboundSchema` instead. */
  export const outboundSchema = InstructionsRoleUnion1$outboundSchema;
  /** @deprecated use `InstructionsRoleUnion1$Outbound` instead. */
  export type Outbound = InstructionsRoleUnion1$Outbound;
}

export function instructionsRoleUnion1ToJSON(
  instructionsRoleUnion1: InstructionsRoleUnion1,
): string {
  return JSON.stringify(
    InstructionsRoleUnion1$outboundSchema.parse(instructionsRoleUnion1),
  );
}

export function instructionsRoleUnion1FromJSON(
  jsonString: string,
): SafeParseResult<InstructionsRoleUnion1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InstructionsRoleUnion1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InstructionsRoleUnion1' from JSON`,
  );
}

/** @internal */
export const InstructionsTypeInputFile1$inboundSchema: z.ZodNativeEnum<
  typeof InstructionsTypeInputFile1
> = z.nativeEnum(InstructionsTypeInputFile1);

/** @internal */
export const InstructionsTypeInputFile1$outboundSchema: z.ZodNativeEnum<
  typeof InstructionsTypeInputFile1
> = InstructionsTypeInputFile1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsTypeInputFile1$ {
  /** @deprecated use `InstructionsTypeInputFile1$inboundSchema` instead. */
  export const inboundSchema = InstructionsTypeInputFile1$inboundSchema;
  /** @deprecated use `InstructionsTypeInputFile1$outboundSchema` instead. */
  export const outboundSchema = InstructionsTypeInputFile1$outboundSchema;
}

/** @internal */
export const InstructionsContentInputFile1$inboundSchema: z.ZodType<
  InstructionsContentInputFile1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: InstructionsTypeInputFile1$inboundSchema,
  file_id: z.nullable(z.string()).optional(),
  file_data: z.string().optional(),
  filename: z.string().optional(),
  file_url: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "file_id": "fileId",
    "file_data": "fileData",
    "file_url": "fileUrl",
  });
});

/** @internal */
export type InstructionsContentInputFile1$Outbound = {
  type: string;
  file_id?: string | null | undefined;
  file_data?: string | undefined;
  filename?: string | undefined;
  file_url?: string | undefined;
};

/** @internal */
export const InstructionsContentInputFile1$outboundSchema: z.ZodType<
  InstructionsContentInputFile1$Outbound,
  z.ZodTypeDef,
  InstructionsContentInputFile1
> = z.object({
  type: InstructionsTypeInputFile1$outboundSchema,
  fileId: z.nullable(z.string()).optional(),
  fileData: z.string().optional(),
  filename: z.string().optional(),
  fileUrl: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    fileId: "file_id",
    fileData: "file_data",
    fileUrl: "file_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsContentInputFile1$ {
  /** @deprecated use `InstructionsContentInputFile1$inboundSchema` instead. */
  export const inboundSchema = InstructionsContentInputFile1$inboundSchema;
  /** @deprecated use `InstructionsContentInputFile1$outboundSchema` instead. */
  export const outboundSchema = InstructionsContentInputFile1$outboundSchema;
  /** @deprecated use `InstructionsContentInputFile1$Outbound` instead. */
  export type Outbound = InstructionsContentInputFile1$Outbound;
}

export function instructionsContentInputFile1ToJSON(
  instructionsContentInputFile1: InstructionsContentInputFile1,
): string {
  return JSON.stringify(
    InstructionsContentInputFile1$outboundSchema.parse(
      instructionsContentInputFile1,
    ),
  );
}

export function instructionsContentInputFile1FromJSON(
  jsonString: string,
): SafeParseResult<InstructionsContentInputFile1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InstructionsContentInputFile1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InstructionsContentInputFile1' from JSON`,
  );
}

/** @internal */
export const InstructionsTypeInputImage1$inboundSchema: z.ZodNativeEnum<
  typeof InstructionsTypeInputImage1
> = z.nativeEnum(InstructionsTypeInputImage1);

/** @internal */
export const InstructionsTypeInputImage1$outboundSchema: z.ZodNativeEnum<
  typeof InstructionsTypeInputImage1
> = InstructionsTypeInputImage1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsTypeInputImage1$ {
  /** @deprecated use `InstructionsTypeInputImage1$inboundSchema` instead. */
  export const inboundSchema = InstructionsTypeInputImage1$inboundSchema;
  /** @deprecated use `InstructionsTypeInputImage1$outboundSchema` instead. */
  export const outboundSchema = InstructionsTypeInputImage1$outboundSchema;
}

/** @internal */
export const InstructionsDetail1$inboundSchema: z.ZodNativeEnum<
  typeof InstructionsDetail1
> = z.nativeEnum(InstructionsDetail1);

/** @internal */
export const InstructionsDetail1$outboundSchema: z.ZodNativeEnum<
  typeof InstructionsDetail1
> = InstructionsDetail1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsDetail1$ {
  /** @deprecated use `InstructionsDetail1$inboundSchema` instead. */
  export const inboundSchema = InstructionsDetail1$inboundSchema;
  /** @deprecated use `InstructionsDetail1$outboundSchema` instead. */
  export const outboundSchema = InstructionsDetail1$outboundSchema;
}

/** @internal */
export const InstructionsContentInputImage1$inboundSchema: z.ZodType<
  InstructionsContentInputImage1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: InstructionsTypeInputImage1$inboundSchema,
  detail: InstructionsDetail1$inboundSchema,
  image_url: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type InstructionsContentInputImage1$Outbound = {
  type: string;
  detail: string;
  image_url?: string | null | undefined;
};

/** @internal */
export const InstructionsContentInputImage1$outboundSchema: z.ZodType<
  InstructionsContentInputImage1$Outbound,
  z.ZodTypeDef,
  InstructionsContentInputImage1
> = z.object({
  type: InstructionsTypeInputImage1$outboundSchema,
  detail: InstructionsDetail1$outboundSchema,
  imageUrl: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsContentInputImage1$ {
  /** @deprecated use `InstructionsContentInputImage1$inboundSchema` instead. */
  export const inboundSchema = InstructionsContentInputImage1$inboundSchema;
  /** @deprecated use `InstructionsContentInputImage1$outboundSchema` instead. */
  export const outboundSchema = InstructionsContentInputImage1$outboundSchema;
  /** @deprecated use `InstructionsContentInputImage1$Outbound` instead. */
  export type Outbound = InstructionsContentInputImage1$Outbound;
}

export function instructionsContentInputImage1ToJSON(
  instructionsContentInputImage1: InstructionsContentInputImage1,
): string {
  return JSON.stringify(
    InstructionsContentInputImage1$outboundSchema.parse(
      instructionsContentInputImage1,
    ),
  );
}

export function instructionsContentInputImage1FromJSON(
  jsonString: string,
): SafeParseResult<InstructionsContentInputImage1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InstructionsContentInputImage1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InstructionsContentInputImage1' from JSON`,
  );
}

/** @internal */
export const InstructionsTypeInputText1$inboundSchema: z.ZodNativeEnum<
  typeof InstructionsTypeInputText1
> = z.nativeEnum(InstructionsTypeInputText1);

/** @internal */
export const InstructionsTypeInputText1$outboundSchema: z.ZodNativeEnum<
  typeof InstructionsTypeInputText1
> = InstructionsTypeInputText1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsTypeInputText1$ {
  /** @deprecated use `InstructionsTypeInputText1$inboundSchema` instead. */
  export const inboundSchema = InstructionsTypeInputText1$inboundSchema;
  /** @deprecated use `InstructionsTypeInputText1$outboundSchema` instead. */
  export const outboundSchema = InstructionsTypeInputText1$outboundSchema;
}

/** @internal */
export const InstructionsContentInputText1$inboundSchema: z.ZodType<
  InstructionsContentInputText1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: InstructionsTypeInputText1$inboundSchema,
  text: z.string(),
});

/** @internal */
export type InstructionsContentInputText1$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const InstructionsContentInputText1$outboundSchema: z.ZodType<
  InstructionsContentInputText1$Outbound,
  z.ZodTypeDef,
  InstructionsContentInputText1
> = z.object({
  type: InstructionsTypeInputText1$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsContentInputText1$ {
  /** @deprecated use `InstructionsContentInputText1$inboundSchema` instead. */
  export const inboundSchema = InstructionsContentInputText1$inboundSchema;
  /** @deprecated use `InstructionsContentInputText1$outboundSchema` instead. */
  export const outboundSchema = InstructionsContentInputText1$outboundSchema;
  /** @deprecated use `InstructionsContentInputText1$Outbound` instead. */
  export type Outbound = InstructionsContentInputText1$Outbound;
}

export function instructionsContentInputText1ToJSON(
  instructionsContentInputText1: InstructionsContentInputText1,
): string {
  return JSON.stringify(
    InstructionsContentInputText1$outboundSchema.parse(
      instructionsContentInputText1,
    ),
  );
}

export function instructionsContentInputText1FromJSON(
  jsonString: string,
): SafeParseResult<InstructionsContentInputText1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InstructionsContentInputText1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InstructionsContentInputText1' from JSON`,
  );
}

/** @internal */
export const InstructionsContentUnion1$inboundSchema: z.ZodType<
  InstructionsContentUnion1,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => InstructionsContentInputText1$inboundSchema),
  z.lazy(() => InstructionsContentInputImage1$inboundSchema),
  z.lazy(() => InstructionsContentInputFile1$inboundSchema),
]);

/** @internal */
export type InstructionsContentUnion1$Outbound =
  | InstructionsContentInputText1$Outbound
  | InstructionsContentInputImage1$Outbound
  | InstructionsContentInputFile1$Outbound;

/** @internal */
export const InstructionsContentUnion1$outboundSchema: z.ZodType<
  InstructionsContentUnion1$Outbound,
  z.ZodTypeDef,
  InstructionsContentUnion1
> = z.union([
  z.lazy(() => InstructionsContentInputText1$outboundSchema),
  z.lazy(() => InstructionsContentInputImage1$outboundSchema),
  z.lazy(() => InstructionsContentInputFile1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsContentUnion1$ {
  /** @deprecated use `InstructionsContentUnion1$inboundSchema` instead. */
  export const inboundSchema = InstructionsContentUnion1$inboundSchema;
  /** @deprecated use `InstructionsContentUnion1$outboundSchema` instead. */
  export const outboundSchema = InstructionsContentUnion1$outboundSchema;
  /** @deprecated use `InstructionsContentUnion1$Outbound` instead. */
  export type Outbound = InstructionsContentUnion1$Outbound;
}

export function instructionsContentUnion1ToJSON(
  instructionsContentUnion1: InstructionsContentUnion1,
): string {
  return JSON.stringify(
    InstructionsContentUnion1$outboundSchema.parse(instructionsContentUnion1),
  );
}

export function instructionsContentUnion1FromJSON(
  jsonString: string,
): SafeParseResult<InstructionsContentUnion1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InstructionsContentUnion1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InstructionsContentUnion1' from JSON`,
  );
}

/** @internal */
export const InstructionsContentUnion2$inboundSchema: z.ZodType<
  InstructionsContentUnion2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.array(z.union([
    z.lazy(() => InstructionsContentInputText1$inboundSchema),
    z.lazy(() =>
      InstructionsContentInputImage1$inboundSchema
    ),
    z.lazy(() => InstructionsContentInputFile1$inboundSchema),
  ])),
  z.string(),
]);

/** @internal */
export type InstructionsContentUnion2$Outbound =
  | Array<
    | InstructionsContentInputText1$Outbound
    | InstructionsContentInputImage1$Outbound
    | InstructionsContentInputFile1$Outbound
  >
  | string;

/** @internal */
export const InstructionsContentUnion2$outboundSchema: z.ZodType<
  InstructionsContentUnion2$Outbound,
  z.ZodTypeDef,
  InstructionsContentUnion2
> = z.union([
  z.array(z.union([
    z.lazy(() => InstructionsContentInputText1$outboundSchema),
    z.lazy(() =>
      InstructionsContentInputImage1$outboundSchema
    ),
    z.lazy(() => InstructionsContentInputFile1$outboundSchema),
  ])),
  z.string(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsContentUnion2$ {
  /** @deprecated use `InstructionsContentUnion2$inboundSchema` instead. */
  export const inboundSchema = InstructionsContentUnion2$inboundSchema;
  /** @deprecated use `InstructionsContentUnion2$outboundSchema` instead. */
  export const outboundSchema = InstructionsContentUnion2$outboundSchema;
  /** @deprecated use `InstructionsContentUnion2$Outbound` instead. */
  export type Outbound = InstructionsContentUnion2$Outbound;
}

export function instructionsContentUnion2ToJSON(
  instructionsContentUnion2: InstructionsContentUnion2,
): string {
  return JSON.stringify(
    InstructionsContentUnion2$outboundSchema.parse(instructionsContentUnion2),
  );
}

export function instructionsContentUnion2FromJSON(
  jsonString: string,
): SafeParseResult<InstructionsContentUnion2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InstructionsContentUnion2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InstructionsContentUnion2' from JSON`,
  );
}

/** @internal */
export const InstructionsMessage1$inboundSchema: z.ZodType<
  InstructionsMessage1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: InstructionsTypeMessage1$inboundSchema.optional(),
  role: z.union([
    InstructionsRoleUser1$inboundSchema,
    InstructionsRoleSystem1$inboundSchema,
    InstructionsRoleAssistant1$inboundSchema,
    InstructionsRoleDeveloper1$inboundSchema,
  ]),
  content: z.union([
    z.array(z.union([
      z.lazy(() => InstructionsContentInputText1$inboundSchema),
      z.lazy(() =>
        InstructionsContentInputImage1$inboundSchema
      ),
      z.lazy(() => InstructionsContentInputFile1$inboundSchema),
    ])),
    z.string(),
  ]),
});

/** @internal */
export type InstructionsMessage1$Outbound = {
  type?: string | undefined;
  role: string | string | string | string;
  content:
    | Array<
      | InstructionsContentInputText1$Outbound
      | InstructionsContentInputImage1$Outbound
      | InstructionsContentInputFile1$Outbound
    >
    | string;
};

/** @internal */
export const InstructionsMessage1$outboundSchema: z.ZodType<
  InstructionsMessage1$Outbound,
  z.ZodTypeDef,
  InstructionsMessage1
> = z.object({
  type: InstructionsTypeMessage1$outboundSchema.optional(),
  role: z.union([
    InstructionsRoleUser1$outboundSchema,
    InstructionsRoleSystem1$outboundSchema,
    InstructionsRoleAssistant1$outboundSchema,
    InstructionsRoleDeveloper1$outboundSchema,
  ]),
  content: z.union([
    z.array(z.union([
      z.lazy(() => InstructionsContentInputText1$outboundSchema),
      z.lazy(() =>
        InstructionsContentInputImage1$outboundSchema
      ),
      z.lazy(() => InstructionsContentInputFile1$outboundSchema),
    ])),
    z.string(),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsMessage1$ {
  /** @deprecated use `InstructionsMessage1$inboundSchema` instead. */
  export const inboundSchema = InstructionsMessage1$inboundSchema;
  /** @deprecated use `InstructionsMessage1$outboundSchema` instead. */
  export const outboundSchema = InstructionsMessage1$outboundSchema;
  /** @deprecated use `InstructionsMessage1$Outbound` instead. */
  export type Outbound = InstructionsMessage1$Outbound;
}

export function instructionsMessage1ToJSON(
  instructionsMessage1: InstructionsMessage1,
): string {
  return JSON.stringify(
    InstructionsMessage1$outboundSchema.parse(instructionsMessage1),
  );
}

export function instructionsMessage1FromJSON(
  jsonString: string,
): SafeParseResult<InstructionsMessage1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InstructionsMessage1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InstructionsMessage1' from JSON`,
  );
}

/** @internal */
export const InstructionsUnion2$inboundSchema: z.ZodType<
  InstructionsUnion2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => InstructionsAssistant1$inboundSchema),
  z.lazy(() => InstructionsFunctionCall1$inboundSchema),
  z.lazy(() => InstructionsFunctionCallOutput$inboundSchema),
  z.lazy(() => InstructionsImageGenerationCall1$inboundSchema),
  z.lazy(() => InstructionsMessage2$inboundSchema),
  z.lazy(() => InstructionsMessage1$inboundSchema),
  z.union([
    z.lazy(() => InstructionsAssistant2$inboundSchema),
    z.lazy(() => InstructionsFunctionCall2$inboundSchema),
    z.lazy(() => InstructionsFileSearchCall$inboundSchema),
    z.lazy(() => InstructionsImageGenerationCall2$inboundSchema),
    z.lazy(() => InstructionsReasoning$inboundSchema),
    z.lazy(() => InstructionsWebSearchCall$inboundSchema),
  ]),
]);

/** @internal */
export type InstructionsUnion2$Outbound =
  | InstructionsAssistant1$Outbound
  | InstructionsFunctionCall1$Outbound
  | InstructionsFunctionCallOutput$Outbound
  | InstructionsImageGenerationCall1$Outbound
  | InstructionsMessage2$Outbound
  | InstructionsMessage1$Outbound
  | InstructionsAssistant2$Outbound
  | InstructionsFunctionCall2$Outbound
  | InstructionsFileSearchCall$Outbound
  | InstructionsImageGenerationCall2$Outbound
  | InstructionsReasoning$Outbound
  | InstructionsWebSearchCall$Outbound;

/** @internal */
export const InstructionsUnion2$outboundSchema: z.ZodType<
  InstructionsUnion2$Outbound,
  z.ZodTypeDef,
  InstructionsUnion2
> = z.union([
  z.lazy(() => InstructionsAssistant1$outboundSchema),
  z.lazy(() => InstructionsFunctionCall1$outboundSchema),
  z.lazy(() => InstructionsFunctionCallOutput$outboundSchema),
  z.lazy(() => InstructionsImageGenerationCall1$outboundSchema),
  z.lazy(() => InstructionsMessage2$outboundSchema),
  z.lazy(() => InstructionsMessage1$outboundSchema),
  z.union([
    z.lazy(() => InstructionsAssistant2$outboundSchema),
    z.lazy(() => InstructionsFunctionCall2$outboundSchema),
    z.lazy(() => InstructionsFileSearchCall$outboundSchema),
    z.lazy(() => InstructionsImageGenerationCall2$outboundSchema),
    z.lazy(() => InstructionsReasoning$outboundSchema),
    z.lazy(() => InstructionsWebSearchCall$outboundSchema),
  ]),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsUnion2$ {
  /** @deprecated use `InstructionsUnion2$inboundSchema` instead. */
  export const inboundSchema = InstructionsUnion2$inboundSchema;
  /** @deprecated use `InstructionsUnion2$outboundSchema` instead. */
  export const outboundSchema = InstructionsUnion2$outboundSchema;
  /** @deprecated use `InstructionsUnion2$Outbound` instead. */
  export type Outbound = InstructionsUnion2$Outbound;
}

export function instructionsUnion2ToJSON(
  instructionsUnion2: InstructionsUnion2,
): string {
  return JSON.stringify(
    InstructionsUnion2$outboundSchema.parse(instructionsUnion2),
  );
}

export function instructionsUnion2FromJSON(
  jsonString: string,
): SafeParseResult<InstructionsUnion2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InstructionsUnion2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InstructionsUnion2' from JSON`,
  );
}

/** @internal */
export const InstructionsUnion3$inboundSchema: z.ZodType<
  InstructionsUnion3,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => InstructionsAssistant1$inboundSchema),
    z.lazy(() => InstructionsFunctionCall1$inboundSchema),
    z.lazy(() => InstructionsFunctionCallOutput$inboundSchema),
    z.lazy(() => InstructionsImageGenerationCall1$inboundSchema),
    z.lazy(() => InstructionsMessage2$inboundSchema),
    z.lazy(() => InstructionsMessage1$inboundSchema),
    z.union([
      z.lazy(() => InstructionsAssistant2$inboundSchema),
      z.lazy(() => InstructionsFunctionCall2$inboundSchema),
      z.lazy(() => InstructionsFileSearchCall$inboundSchema),
      z.lazy(() =>
        InstructionsImageGenerationCall2$inboundSchema
      ),
      z.lazy(() => InstructionsReasoning$inboundSchema),
      z.lazy(() => InstructionsWebSearchCall$inboundSchema),
    ]),
  ])),
  z.any(),
]);

/** @internal */
export type InstructionsUnion3$Outbound =
  | string
  | Array<
    | InstructionsAssistant1$Outbound
    | InstructionsFunctionCall1$Outbound
    | InstructionsFunctionCallOutput$Outbound
    | InstructionsImageGenerationCall1$Outbound
    | InstructionsMessage2$Outbound
    | InstructionsMessage1$Outbound
    | InstructionsAssistant2$Outbound
    | InstructionsFunctionCall2$Outbound
    | InstructionsFileSearchCall$Outbound
    | InstructionsImageGenerationCall2$Outbound
    | InstructionsReasoning$Outbound
    | InstructionsWebSearchCall$Outbound
  >
  | any;

/** @internal */
export const InstructionsUnion3$outboundSchema: z.ZodType<
  InstructionsUnion3$Outbound,
  z.ZodTypeDef,
  InstructionsUnion3
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => InstructionsAssistant1$outboundSchema),
    z.lazy(() => InstructionsFunctionCall1$outboundSchema),
    z.lazy(() => InstructionsFunctionCallOutput$outboundSchema),
    z.lazy(() => InstructionsImageGenerationCall1$outboundSchema),
    z.lazy(() => InstructionsMessage2$outboundSchema),
    z.lazy(() => InstructionsMessage1$outboundSchema),
    z.union([
      z.lazy(() => InstructionsAssistant2$outboundSchema),
      z.lazy(() => InstructionsFunctionCall2$outboundSchema),
      z.lazy(() => InstructionsFileSearchCall$outboundSchema),
      z.lazy(() =>
        InstructionsImageGenerationCall2$outboundSchema
      ),
      z.lazy(() => InstructionsReasoning$outboundSchema),
      z.lazy(() => InstructionsWebSearchCall$outboundSchema),
    ]),
  ])),
  z.any(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructionsUnion3$ {
  /** @deprecated use `InstructionsUnion3$inboundSchema` instead. */
  export const inboundSchema = InstructionsUnion3$inboundSchema;
  /** @deprecated use `InstructionsUnion3$outboundSchema` instead. */
  export const outboundSchema = InstructionsUnion3$outboundSchema;
  /** @deprecated use `InstructionsUnion3$Outbound` instead. */
  export type Outbound = InstructionsUnion3$Outbound;
}

export function instructionsUnion3ToJSON(
  instructionsUnion3: InstructionsUnion3,
): string {
  return JSON.stringify(
    InstructionsUnion3$outboundSchema.parse(instructionsUnion3),
  );
}

export function instructionsUnion3FromJSON(
  jsonString: string,
): SafeParseResult<InstructionsUnion3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InstructionsUnion3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InstructionsUnion3' from JSON`,
  );
}

/** @internal */
export const TypeWebSearch20250826Response$inboundSchema: z.ZodNativeEnum<
  typeof TypeWebSearch20250826Response
> = z.nativeEnum(TypeWebSearch20250826Response);

/** @internal */
export const TypeWebSearch20250826Response$outboundSchema: z.ZodNativeEnum<
  typeof TypeWebSearch20250826Response
> = TypeWebSearch20250826Response$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeWebSearch20250826Response$ {
  /** @deprecated use `TypeWebSearch20250826Response$inboundSchema` instead. */
  export const inboundSchema = TypeWebSearch20250826Response$inboundSchema;
  /** @deprecated use `TypeWebSearch20250826Response$outboundSchema` instead. */
  export const outboundSchema = TypeWebSearch20250826Response$outboundSchema;
}

/** @internal */
export const FiltersResponse2$inboundSchema: z.ZodType<
  FiltersResponse2,
  z.ZodTypeDef,
  unknown
> = z.object({
  allowed_domains: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    "allowed_domains": "allowedDomains",
  });
});

/** @internal */
export type FiltersResponse2$Outbound = {
  allowed_domains?: Array<string> | null | undefined;
};

/** @internal */
export const FiltersResponse2$outboundSchema: z.ZodType<
  FiltersResponse2$Outbound,
  z.ZodTypeDef,
  FiltersResponse2
> = z.object({
  allowedDomains: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    allowedDomains: "allowed_domains",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FiltersResponse2$ {
  /** @deprecated use `FiltersResponse2$inboundSchema` instead. */
  export const inboundSchema = FiltersResponse2$inboundSchema;
  /** @deprecated use `FiltersResponse2$outboundSchema` instead. */
  export const outboundSchema = FiltersResponse2$outboundSchema;
  /** @deprecated use `FiltersResponse2$Outbound` instead. */
  export type Outbound = FiltersResponse2$Outbound;
}

export function filtersResponse2ToJSON(
  filtersResponse2: FiltersResponse2,
): string {
  return JSON.stringify(
    FiltersResponse2$outboundSchema.parse(filtersResponse2),
  );
}

export function filtersResponse2FromJSON(
  jsonString: string,
): SafeParseResult<FiltersResponse2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FiltersResponse2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FiltersResponse2' from JSON`,
  );
}

/** @internal */
export const SearchContextSizeResponse4$inboundSchema: z.ZodNativeEnum<
  typeof SearchContextSizeResponse4
> = z.nativeEnum(SearchContextSizeResponse4);

/** @internal */
export const SearchContextSizeResponse4$outboundSchema: z.ZodNativeEnum<
  typeof SearchContextSizeResponse4
> = SearchContextSizeResponse4$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchContextSizeResponse4$ {
  /** @deprecated use `SearchContextSizeResponse4$inboundSchema` instead. */
  export const inboundSchema = SearchContextSizeResponse4$inboundSchema;
  /** @deprecated use `SearchContextSizeResponse4$outboundSchema` instead. */
  export const outboundSchema = SearchContextSizeResponse4$outboundSchema;
}

/** @internal */
export const TypeApproximateResponse4$inboundSchema: z.ZodNativeEnum<
  typeof TypeApproximateResponse4
> = z.nativeEnum(TypeApproximateResponse4);

/** @internal */
export const TypeApproximateResponse4$outboundSchema: z.ZodNativeEnum<
  typeof TypeApproximateResponse4
> = TypeApproximateResponse4$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeApproximateResponse4$ {
  /** @deprecated use `TypeApproximateResponse4$inboundSchema` instead. */
  export const inboundSchema = TypeApproximateResponse4$inboundSchema;
  /** @deprecated use `TypeApproximateResponse4$outboundSchema` instead. */
  export const outboundSchema = TypeApproximateResponse4$outboundSchema;
}

/** @internal */
export const UserLocationResponse4$inboundSchema: z.ZodType<
  UserLocationResponse4,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TypeApproximateResponse4$inboundSchema.optional(),
  city: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  region: z.nullable(z.string()).optional(),
  timezone: z.nullable(z.string()).optional(),
});

/** @internal */
export type UserLocationResponse4$Outbound = {
  type?: string | undefined;
  city?: string | null | undefined;
  country?: string | null | undefined;
  region?: string | null | undefined;
  timezone?: string | null | undefined;
};

/** @internal */
export const UserLocationResponse4$outboundSchema: z.ZodType<
  UserLocationResponse4$Outbound,
  z.ZodTypeDef,
  UserLocationResponse4
> = z.object({
  type: TypeApproximateResponse4$outboundSchema.optional(),
  city: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  region: z.nullable(z.string()).optional(),
  timezone: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserLocationResponse4$ {
  /** @deprecated use `UserLocationResponse4$inboundSchema` instead. */
  export const inboundSchema = UserLocationResponse4$inboundSchema;
  /** @deprecated use `UserLocationResponse4$outboundSchema` instead. */
  export const outboundSchema = UserLocationResponse4$outboundSchema;
  /** @deprecated use `UserLocationResponse4$Outbound` instead. */
  export type Outbound = UserLocationResponse4$Outbound;
}

export function userLocationResponse4ToJSON(
  userLocationResponse4: UserLocationResponse4,
): string {
  return JSON.stringify(
    UserLocationResponse4$outboundSchema.parse(userLocationResponse4),
  );
}

export function userLocationResponse4FromJSON(
  jsonString: string,
): SafeParseResult<UserLocationResponse4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserLocationResponse4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserLocationResponse4' from JSON`,
  );
}

/** @internal */
export const ToolWebSearch20250826Response$inboundSchema: z.ZodType<
  ToolWebSearch20250826Response,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TypeWebSearch20250826Response$inboundSchema,
  filters: z.nullable(z.lazy(() => FiltersResponse2$inboundSchema)).optional(),
  search_context_size: SearchContextSizeResponse4$inboundSchema.optional(),
  user_location: z.nullable(z.lazy(() => UserLocationResponse4$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "search_context_size": "searchContextSize",
    "user_location": "userLocation",
  });
});

/** @internal */
export type ToolWebSearch20250826Response$Outbound = {
  type: string;
  filters?: FiltersResponse2$Outbound | null | undefined;
  search_context_size?: string | undefined;
  user_location?: UserLocationResponse4$Outbound | null | undefined;
};

/** @internal */
export const ToolWebSearch20250826Response$outboundSchema: z.ZodType<
  ToolWebSearch20250826Response$Outbound,
  z.ZodTypeDef,
  ToolWebSearch20250826Response
> = z.object({
  type: TypeWebSearch20250826Response$outboundSchema,
  filters: z.nullable(z.lazy(() => FiltersResponse2$outboundSchema)).optional(),
  searchContextSize: SearchContextSizeResponse4$outboundSchema.optional(),
  userLocation: z.nullable(z.lazy(() => UserLocationResponse4$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    searchContextSize: "search_context_size",
    userLocation: "user_location",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolWebSearch20250826Response$ {
  /** @deprecated use `ToolWebSearch20250826Response$inboundSchema` instead. */
  export const inboundSchema = ToolWebSearch20250826Response$inboundSchema;
  /** @deprecated use `ToolWebSearch20250826Response$outboundSchema` instead. */
  export const outboundSchema = ToolWebSearch20250826Response$outboundSchema;
  /** @deprecated use `ToolWebSearch20250826Response$Outbound` instead. */
  export type Outbound = ToolWebSearch20250826Response$Outbound;
}

export function toolWebSearch20250826ResponseToJSON(
  toolWebSearch20250826Response: ToolWebSearch20250826Response,
): string {
  return JSON.stringify(
    ToolWebSearch20250826Response$outboundSchema.parse(
      toolWebSearch20250826Response,
    ),
  );
}

export function toolWebSearch20250826ResponseFromJSON(
  jsonString: string,
): SafeParseResult<ToolWebSearch20250826Response, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolWebSearch20250826Response$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolWebSearch20250826Response' from JSON`,
  );
}

/** @internal */
export const TypeWebSearchResponse$inboundSchema: z.ZodNativeEnum<
  typeof TypeWebSearchResponse
> = z.nativeEnum(TypeWebSearchResponse);

/** @internal */
export const TypeWebSearchResponse$outboundSchema: z.ZodNativeEnum<
  typeof TypeWebSearchResponse
> = TypeWebSearchResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeWebSearchResponse$ {
  /** @deprecated use `TypeWebSearchResponse$inboundSchema` instead. */
  export const inboundSchema = TypeWebSearchResponse$inboundSchema;
  /** @deprecated use `TypeWebSearchResponse$outboundSchema` instead. */
  export const outboundSchema = TypeWebSearchResponse$outboundSchema;
}

/** @internal */
export const FiltersResponse1$inboundSchema: z.ZodType<
  FiltersResponse1,
  z.ZodTypeDef,
  unknown
> = z.object({
  allowed_domains: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    "allowed_domains": "allowedDomains",
  });
});

/** @internal */
export type FiltersResponse1$Outbound = {
  allowed_domains?: Array<string> | null | undefined;
};

/** @internal */
export const FiltersResponse1$outboundSchema: z.ZodType<
  FiltersResponse1$Outbound,
  z.ZodTypeDef,
  FiltersResponse1
> = z.object({
  allowedDomains: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    allowedDomains: "allowed_domains",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FiltersResponse1$ {
  /** @deprecated use `FiltersResponse1$inboundSchema` instead. */
  export const inboundSchema = FiltersResponse1$inboundSchema;
  /** @deprecated use `FiltersResponse1$outboundSchema` instead. */
  export const outboundSchema = FiltersResponse1$outboundSchema;
  /** @deprecated use `FiltersResponse1$Outbound` instead. */
  export type Outbound = FiltersResponse1$Outbound;
}

export function filtersResponse1ToJSON(
  filtersResponse1: FiltersResponse1,
): string {
  return JSON.stringify(
    FiltersResponse1$outboundSchema.parse(filtersResponse1),
  );
}

export function filtersResponse1FromJSON(
  jsonString: string,
): SafeParseResult<FiltersResponse1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FiltersResponse1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FiltersResponse1' from JSON`,
  );
}

/** @internal */
export const SearchContextSizeResponse3$inboundSchema: z.ZodNativeEnum<
  typeof SearchContextSizeResponse3
> = z.nativeEnum(SearchContextSizeResponse3);

/** @internal */
export const SearchContextSizeResponse3$outboundSchema: z.ZodNativeEnum<
  typeof SearchContextSizeResponse3
> = SearchContextSizeResponse3$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchContextSizeResponse3$ {
  /** @deprecated use `SearchContextSizeResponse3$inboundSchema` instead. */
  export const inboundSchema = SearchContextSizeResponse3$inboundSchema;
  /** @deprecated use `SearchContextSizeResponse3$outboundSchema` instead. */
  export const outboundSchema = SearchContextSizeResponse3$outboundSchema;
}

/** @internal */
export const TypeApproximateResponse3$inboundSchema: z.ZodNativeEnum<
  typeof TypeApproximateResponse3
> = z.nativeEnum(TypeApproximateResponse3);

/** @internal */
export const TypeApproximateResponse3$outboundSchema: z.ZodNativeEnum<
  typeof TypeApproximateResponse3
> = TypeApproximateResponse3$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeApproximateResponse3$ {
  /** @deprecated use `TypeApproximateResponse3$inboundSchema` instead. */
  export const inboundSchema = TypeApproximateResponse3$inboundSchema;
  /** @deprecated use `TypeApproximateResponse3$outboundSchema` instead. */
  export const outboundSchema = TypeApproximateResponse3$outboundSchema;
}

/** @internal */
export const UserLocationResponse3$inboundSchema: z.ZodType<
  UserLocationResponse3,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TypeApproximateResponse3$inboundSchema.optional(),
  city: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  region: z.nullable(z.string()).optional(),
  timezone: z.nullable(z.string()).optional(),
});

/** @internal */
export type UserLocationResponse3$Outbound = {
  type?: string | undefined;
  city?: string | null | undefined;
  country?: string | null | undefined;
  region?: string | null | undefined;
  timezone?: string | null | undefined;
};

/** @internal */
export const UserLocationResponse3$outboundSchema: z.ZodType<
  UserLocationResponse3$Outbound,
  z.ZodTypeDef,
  UserLocationResponse3
> = z.object({
  type: TypeApproximateResponse3$outboundSchema.optional(),
  city: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  region: z.nullable(z.string()).optional(),
  timezone: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserLocationResponse3$ {
  /** @deprecated use `UserLocationResponse3$inboundSchema` instead. */
  export const inboundSchema = UserLocationResponse3$inboundSchema;
  /** @deprecated use `UserLocationResponse3$outboundSchema` instead. */
  export const outboundSchema = UserLocationResponse3$outboundSchema;
  /** @deprecated use `UserLocationResponse3$Outbound` instead. */
  export type Outbound = UserLocationResponse3$Outbound;
}

export function userLocationResponse3ToJSON(
  userLocationResponse3: UserLocationResponse3,
): string {
  return JSON.stringify(
    UserLocationResponse3$outboundSchema.parse(userLocationResponse3),
  );
}

export function userLocationResponse3FromJSON(
  jsonString: string,
): SafeParseResult<UserLocationResponse3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserLocationResponse3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserLocationResponse3' from JSON`,
  );
}

/** @internal */
export const ToolWebSearchResponse$inboundSchema: z.ZodType<
  ToolWebSearchResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TypeWebSearchResponse$inboundSchema,
  filters: z.nullable(z.lazy(() => FiltersResponse1$inboundSchema)).optional(),
  search_context_size: SearchContextSizeResponse3$inboundSchema.optional(),
  user_location: z.nullable(z.lazy(() => UserLocationResponse3$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "search_context_size": "searchContextSize",
    "user_location": "userLocation",
  });
});

/** @internal */
export type ToolWebSearchResponse$Outbound = {
  type: string;
  filters?: FiltersResponse1$Outbound | null | undefined;
  search_context_size?: string | undefined;
  user_location?: UserLocationResponse3$Outbound | null | undefined;
};

/** @internal */
export const ToolWebSearchResponse$outboundSchema: z.ZodType<
  ToolWebSearchResponse$Outbound,
  z.ZodTypeDef,
  ToolWebSearchResponse
> = z.object({
  type: TypeWebSearchResponse$outboundSchema,
  filters: z.nullable(z.lazy(() => FiltersResponse1$outboundSchema)).optional(),
  searchContextSize: SearchContextSizeResponse3$outboundSchema.optional(),
  userLocation: z.nullable(z.lazy(() => UserLocationResponse3$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    searchContextSize: "search_context_size",
    userLocation: "user_location",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolWebSearchResponse$ {
  /** @deprecated use `ToolWebSearchResponse$inboundSchema` instead. */
  export const inboundSchema = ToolWebSearchResponse$inboundSchema;
  /** @deprecated use `ToolWebSearchResponse$outboundSchema` instead. */
  export const outboundSchema = ToolWebSearchResponse$outboundSchema;
  /** @deprecated use `ToolWebSearchResponse$Outbound` instead. */
  export type Outbound = ToolWebSearchResponse$Outbound;
}

export function toolWebSearchResponseToJSON(
  toolWebSearchResponse: ToolWebSearchResponse,
): string {
  return JSON.stringify(
    ToolWebSearchResponse$outboundSchema.parse(toolWebSearchResponse),
  );
}

export function toolWebSearchResponseFromJSON(
  jsonString: string,
): SafeParseResult<ToolWebSearchResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolWebSearchResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolWebSearchResponse' from JSON`,
  );
}

/** @internal */
export const ToolTypeWebSearchPreview20250311Response$inboundSchema:
  z.ZodNativeEnum<typeof ToolTypeWebSearchPreview20250311Response> = z
    .nativeEnum(ToolTypeWebSearchPreview20250311Response);

/** @internal */
export const ToolTypeWebSearchPreview20250311Response$outboundSchema:
  z.ZodNativeEnum<typeof ToolTypeWebSearchPreview20250311Response> =
    ToolTypeWebSearchPreview20250311Response$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolTypeWebSearchPreview20250311Response$ {
  /** @deprecated use `ToolTypeWebSearchPreview20250311Response$inboundSchema` instead. */
  export const inboundSchema =
    ToolTypeWebSearchPreview20250311Response$inboundSchema;
  /** @deprecated use `ToolTypeWebSearchPreview20250311Response$outboundSchema` instead. */
  export const outboundSchema =
    ToolTypeWebSearchPreview20250311Response$outboundSchema;
}

/** @internal */
export const SearchContextSizeResponse2$inboundSchema: z.ZodNativeEnum<
  typeof SearchContextSizeResponse2
> = z.nativeEnum(SearchContextSizeResponse2);

/** @internal */
export const SearchContextSizeResponse2$outboundSchema: z.ZodNativeEnum<
  typeof SearchContextSizeResponse2
> = SearchContextSizeResponse2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchContextSizeResponse2$ {
  /** @deprecated use `SearchContextSizeResponse2$inboundSchema` instead. */
  export const inboundSchema = SearchContextSizeResponse2$inboundSchema;
  /** @deprecated use `SearchContextSizeResponse2$outboundSchema` instead. */
  export const outboundSchema = SearchContextSizeResponse2$outboundSchema;
}

/** @internal */
export const TypeApproximateResponse2$inboundSchema: z.ZodNativeEnum<
  typeof TypeApproximateResponse2
> = z.nativeEnum(TypeApproximateResponse2);

/** @internal */
export const TypeApproximateResponse2$outboundSchema: z.ZodNativeEnum<
  typeof TypeApproximateResponse2
> = TypeApproximateResponse2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeApproximateResponse2$ {
  /** @deprecated use `TypeApproximateResponse2$inboundSchema` instead. */
  export const inboundSchema = TypeApproximateResponse2$inboundSchema;
  /** @deprecated use `TypeApproximateResponse2$outboundSchema` instead. */
  export const outboundSchema = TypeApproximateResponse2$outboundSchema;
}

/** @internal */
export const UserLocationResponse2$inboundSchema: z.ZodType<
  UserLocationResponse2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TypeApproximateResponse2$inboundSchema,
  city: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  region: z.nullable(z.string()).optional(),
  timezone: z.nullable(z.string()).optional(),
});

/** @internal */
export type UserLocationResponse2$Outbound = {
  type: string;
  city?: string | null | undefined;
  country?: string | null | undefined;
  region?: string | null | undefined;
  timezone?: string | null | undefined;
};

/** @internal */
export const UserLocationResponse2$outboundSchema: z.ZodType<
  UserLocationResponse2$Outbound,
  z.ZodTypeDef,
  UserLocationResponse2
> = z.object({
  type: TypeApproximateResponse2$outboundSchema,
  city: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  region: z.nullable(z.string()).optional(),
  timezone: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserLocationResponse2$ {
  /** @deprecated use `UserLocationResponse2$inboundSchema` instead. */
  export const inboundSchema = UserLocationResponse2$inboundSchema;
  /** @deprecated use `UserLocationResponse2$outboundSchema` instead. */
  export const outboundSchema = UserLocationResponse2$outboundSchema;
  /** @deprecated use `UserLocationResponse2$Outbound` instead. */
  export type Outbound = UserLocationResponse2$Outbound;
}

export function userLocationResponse2ToJSON(
  userLocationResponse2: UserLocationResponse2,
): string {
  return JSON.stringify(
    UserLocationResponse2$outboundSchema.parse(userLocationResponse2),
  );
}

export function userLocationResponse2FromJSON(
  jsonString: string,
): SafeParseResult<UserLocationResponse2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserLocationResponse2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserLocationResponse2' from JSON`,
  );
}

/** @internal */
export const ToolWebSearchPreview20250311Response$inboundSchema: z.ZodType<
  ToolWebSearchPreview20250311Response,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ToolTypeWebSearchPreview20250311Response$inboundSchema,
  search_context_size: SearchContextSizeResponse2$inboundSchema.optional(),
  user_location: z.nullable(z.lazy(() => UserLocationResponse2$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "search_context_size": "searchContextSize",
    "user_location": "userLocation",
  });
});

/** @internal */
export type ToolWebSearchPreview20250311Response$Outbound = {
  type: string;
  search_context_size?: string | undefined;
  user_location?: UserLocationResponse2$Outbound | null | undefined;
};

/** @internal */
export const ToolWebSearchPreview20250311Response$outboundSchema: z.ZodType<
  ToolWebSearchPreview20250311Response$Outbound,
  z.ZodTypeDef,
  ToolWebSearchPreview20250311Response
> = z.object({
  type: ToolTypeWebSearchPreview20250311Response$outboundSchema,
  searchContextSize: SearchContextSizeResponse2$outboundSchema.optional(),
  userLocation: z.nullable(z.lazy(() => UserLocationResponse2$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    searchContextSize: "search_context_size",
    userLocation: "user_location",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolWebSearchPreview20250311Response$ {
  /** @deprecated use `ToolWebSearchPreview20250311Response$inboundSchema` instead. */
  export const inboundSchema =
    ToolWebSearchPreview20250311Response$inboundSchema;
  /** @deprecated use `ToolWebSearchPreview20250311Response$outboundSchema` instead. */
  export const outboundSchema =
    ToolWebSearchPreview20250311Response$outboundSchema;
  /** @deprecated use `ToolWebSearchPreview20250311Response$Outbound` instead. */
  export type Outbound = ToolWebSearchPreview20250311Response$Outbound;
}

export function toolWebSearchPreview20250311ResponseToJSON(
  toolWebSearchPreview20250311Response: ToolWebSearchPreview20250311Response,
): string {
  return JSON.stringify(
    ToolWebSearchPreview20250311Response$outboundSchema.parse(
      toolWebSearchPreview20250311Response,
    ),
  );
}

export function toolWebSearchPreview20250311ResponseFromJSON(
  jsonString: string,
): SafeParseResult<ToolWebSearchPreview20250311Response, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ToolWebSearchPreview20250311Response$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolWebSearchPreview20250311Response' from JSON`,
  );
}

/** @internal */
export const ToolTypeWebSearchPreviewResponse$inboundSchema: z.ZodNativeEnum<
  typeof ToolTypeWebSearchPreviewResponse
> = z.nativeEnum(ToolTypeWebSearchPreviewResponse);

/** @internal */
export const ToolTypeWebSearchPreviewResponse$outboundSchema: z.ZodNativeEnum<
  typeof ToolTypeWebSearchPreviewResponse
> = ToolTypeWebSearchPreviewResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolTypeWebSearchPreviewResponse$ {
  /** @deprecated use `ToolTypeWebSearchPreviewResponse$inboundSchema` instead. */
  export const inboundSchema = ToolTypeWebSearchPreviewResponse$inboundSchema;
  /** @deprecated use `ToolTypeWebSearchPreviewResponse$outboundSchema` instead. */
  export const outboundSchema = ToolTypeWebSearchPreviewResponse$outboundSchema;
}

/** @internal */
export const SearchContextSizeResponse1$inboundSchema: z.ZodNativeEnum<
  typeof SearchContextSizeResponse1
> = z.nativeEnum(SearchContextSizeResponse1);

/** @internal */
export const SearchContextSizeResponse1$outboundSchema: z.ZodNativeEnum<
  typeof SearchContextSizeResponse1
> = SearchContextSizeResponse1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchContextSizeResponse1$ {
  /** @deprecated use `SearchContextSizeResponse1$inboundSchema` instead. */
  export const inboundSchema = SearchContextSizeResponse1$inboundSchema;
  /** @deprecated use `SearchContextSizeResponse1$outboundSchema` instead. */
  export const outboundSchema = SearchContextSizeResponse1$outboundSchema;
}

/** @internal */
export const TypeApproximateResponse1$inboundSchema: z.ZodNativeEnum<
  typeof TypeApproximateResponse1
> = z.nativeEnum(TypeApproximateResponse1);

/** @internal */
export const TypeApproximateResponse1$outboundSchema: z.ZodNativeEnum<
  typeof TypeApproximateResponse1
> = TypeApproximateResponse1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeApproximateResponse1$ {
  /** @deprecated use `TypeApproximateResponse1$inboundSchema` instead. */
  export const inboundSchema = TypeApproximateResponse1$inboundSchema;
  /** @deprecated use `TypeApproximateResponse1$outboundSchema` instead. */
  export const outboundSchema = TypeApproximateResponse1$outboundSchema;
}

/** @internal */
export const UserLocationResponse1$inboundSchema: z.ZodType<
  UserLocationResponse1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TypeApproximateResponse1$inboundSchema,
  city: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  region: z.nullable(z.string()).optional(),
  timezone: z.nullable(z.string()).optional(),
});

/** @internal */
export type UserLocationResponse1$Outbound = {
  type: string;
  city?: string | null | undefined;
  country?: string | null | undefined;
  region?: string | null | undefined;
  timezone?: string | null | undefined;
};

/** @internal */
export const UserLocationResponse1$outboundSchema: z.ZodType<
  UserLocationResponse1$Outbound,
  z.ZodTypeDef,
  UserLocationResponse1
> = z.object({
  type: TypeApproximateResponse1$outboundSchema,
  city: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  region: z.nullable(z.string()).optional(),
  timezone: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserLocationResponse1$ {
  /** @deprecated use `UserLocationResponse1$inboundSchema` instead. */
  export const inboundSchema = UserLocationResponse1$inboundSchema;
  /** @deprecated use `UserLocationResponse1$outboundSchema` instead. */
  export const outboundSchema = UserLocationResponse1$outboundSchema;
  /** @deprecated use `UserLocationResponse1$Outbound` instead. */
  export type Outbound = UserLocationResponse1$Outbound;
}

export function userLocationResponse1ToJSON(
  userLocationResponse1: UserLocationResponse1,
): string {
  return JSON.stringify(
    UserLocationResponse1$outboundSchema.parse(userLocationResponse1),
  );
}

export function userLocationResponse1FromJSON(
  jsonString: string,
): SafeParseResult<UserLocationResponse1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserLocationResponse1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserLocationResponse1' from JSON`,
  );
}

/** @internal */
export const ToolWebSearchPreviewResponse$inboundSchema: z.ZodType<
  ToolWebSearchPreviewResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ToolTypeWebSearchPreviewResponse$inboundSchema,
  search_context_size: SearchContextSizeResponse1$inboundSchema.optional(),
  user_location: z.nullable(z.lazy(() => UserLocationResponse1$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "search_context_size": "searchContextSize",
    "user_location": "userLocation",
  });
});

/** @internal */
export type ToolWebSearchPreviewResponse$Outbound = {
  type: string;
  search_context_size?: string | undefined;
  user_location?: UserLocationResponse1$Outbound | null | undefined;
};

/** @internal */
export const ToolWebSearchPreviewResponse$outboundSchema: z.ZodType<
  ToolWebSearchPreviewResponse$Outbound,
  z.ZodTypeDef,
  ToolWebSearchPreviewResponse
> = z.object({
  type: ToolTypeWebSearchPreviewResponse$outboundSchema,
  searchContextSize: SearchContextSizeResponse1$outboundSchema.optional(),
  userLocation: z.nullable(z.lazy(() => UserLocationResponse1$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    searchContextSize: "search_context_size",
    userLocation: "user_location",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolWebSearchPreviewResponse$ {
  /** @deprecated use `ToolWebSearchPreviewResponse$inboundSchema` instead. */
  export const inboundSchema = ToolWebSearchPreviewResponse$inboundSchema;
  /** @deprecated use `ToolWebSearchPreviewResponse$outboundSchema` instead. */
  export const outboundSchema = ToolWebSearchPreviewResponse$outboundSchema;
  /** @deprecated use `ToolWebSearchPreviewResponse$Outbound` instead. */
  export type Outbound = ToolWebSearchPreviewResponse$Outbound;
}

export function toolWebSearchPreviewResponseToJSON(
  toolWebSearchPreviewResponse: ToolWebSearchPreviewResponse,
): string {
  return JSON.stringify(
    ToolWebSearchPreviewResponse$outboundSchema.parse(
      toolWebSearchPreviewResponse,
    ),
  );
}

export function toolWebSearchPreviewResponseFromJSON(
  jsonString: string,
): SafeParseResult<ToolWebSearchPreviewResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolWebSearchPreviewResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolWebSearchPreviewResponse' from JSON`,
  );
}

/** @internal */
export const ToolTypeFunctionResponse$inboundSchema: z.ZodNativeEnum<
  typeof ToolTypeFunctionResponse
> = z.nativeEnum(ToolTypeFunctionResponse);

/** @internal */
export const ToolTypeFunctionResponse$outboundSchema: z.ZodNativeEnum<
  typeof ToolTypeFunctionResponse
> = ToolTypeFunctionResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolTypeFunctionResponse$ {
  /** @deprecated use `ToolTypeFunctionResponse$inboundSchema` instead. */
  export const inboundSchema = ToolTypeFunctionResponse$inboundSchema;
  /** @deprecated use `ToolTypeFunctionResponse$outboundSchema` instead. */
  export const outboundSchema = ToolTypeFunctionResponse$outboundSchema;
}

/** @internal */
export const ToolFunctionResponse$inboundSchema: z.ZodType<
  ToolFunctionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ToolTypeFunctionResponse$inboundSchema,
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  strict: z.nullable(z.boolean()).optional(),
  parameters: z.nullable(z.record(z.nullable(z.any()))),
});

/** @internal */
export type ToolFunctionResponse$Outbound = {
  type: string;
  name: string;
  description?: string | null | undefined;
  strict?: boolean | null | undefined;
  parameters: { [k: string]: any | null } | null;
};

/** @internal */
export const ToolFunctionResponse$outboundSchema: z.ZodType<
  ToolFunctionResponse$Outbound,
  z.ZodTypeDef,
  ToolFunctionResponse
> = z.object({
  type: ToolTypeFunctionResponse$outboundSchema,
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  strict: z.nullable(z.boolean()).optional(),
  parameters: z.nullable(z.record(z.nullable(z.any()))),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolFunctionResponse$ {
  /** @deprecated use `ToolFunctionResponse$inboundSchema` instead. */
  export const inboundSchema = ToolFunctionResponse$inboundSchema;
  /** @deprecated use `ToolFunctionResponse$outboundSchema` instead. */
  export const outboundSchema = ToolFunctionResponse$outboundSchema;
  /** @deprecated use `ToolFunctionResponse$Outbound` instead. */
  export type Outbound = ToolFunctionResponse$Outbound;
}

export function toolFunctionResponseToJSON(
  toolFunctionResponse: ToolFunctionResponse,
): string {
  return JSON.stringify(
    ToolFunctionResponse$outboundSchema.parse(toolFunctionResponse),
  );
}

export function toolFunctionResponseFromJSON(
  jsonString: string,
): SafeParseResult<ToolFunctionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolFunctionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolFunctionResponse' from JSON`,
  );
}

/** @internal */
export const ToolResponseUnion$inboundSchema: z.ZodType<
  ToolResponseUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ToolFunctionResponse$inboundSchema),
  z.lazy(() => ToolWebSearchPreviewResponse$inboundSchema),
  z.lazy(() => ToolWebSearchPreview20250311Response$inboundSchema),
  z.lazy(() => ToolWebSearchResponse$inboundSchema),
  z.lazy(() => ToolWebSearch20250826Response$inboundSchema),
]);

/** @internal */
export type ToolResponseUnion$Outbound =
  | ToolFunctionResponse$Outbound
  | ToolWebSearchPreviewResponse$Outbound
  | ToolWebSearchPreview20250311Response$Outbound
  | ToolWebSearchResponse$Outbound
  | ToolWebSearch20250826Response$Outbound;

/** @internal */
export const ToolResponseUnion$outboundSchema: z.ZodType<
  ToolResponseUnion$Outbound,
  z.ZodTypeDef,
  ToolResponseUnion
> = z.union([
  z.lazy(() => ToolFunctionResponse$outboundSchema),
  z.lazy(() => ToolWebSearchPreviewResponse$outboundSchema),
  z.lazy(() => ToolWebSearchPreview20250311Response$outboundSchema),
  z.lazy(() => ToolWebSearchResponse$outboundSchema),
  z.lazy(() => ToolWebSearch20250826Response$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolResponseUnion$ {
  /** @deprecated use `ToolResponseUnion$inboundSchema` instead. */
  export const inboundSchema = ToolResponseUnion$inboundSchema;
  /** @deprecated use `ToolResponseUnion$outboundSchema` instead. */
  export const outboundSchema = ToolResponseUnion$outboundSchema;
  /** @deprecated use `ToolResponseUnion$Outbound` instead. */
  export type Outbound = ToolResponseUnion$Outbound;
}

export function toolResponseUnionToJSON(
  toolResponseUnion: ToolResponseUnion,
): string {
  return JSON.stringify(
    ToolResponseUnion$outboundSchema.parse(toolResponseUnion),
  );
}

export function toolResponseUnionFromJSON(
  jsonString: string,
): SafeParseResult<ToolResponseUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolResponseUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolResponseUnion' from JSON`,
  );
}

/** @internal */
export const ToolChoiceTypeFunctionResponse$inboundSchema: z.ZodNativeEnum<
  typeof ToolChoiceTypeFunctionResponse
> = z.nativeEnum(ToolChoiceTypeFunctionResponse);

/** @internal */
export const ToolChoiceTypeFunctionResponse$outboundSchema: z.ZodNativeEnum<
  typeof ToolChoiceTypeFunctionResponse
> = ToolChoiceTypeFunctionResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolChoiceTypeFunctionResponse$ {
  /** @deprecated use `ToolChoiceTypeFunctionResponse$inboundSchema` instead. */
  export const inboundSchema = ToolChoiceTypeFunctionResponse$inboundSchema;
  /** @deprecated use `ToolChoiceTypeFunctionResponse$outboundSchema` instead. */
  export const outboundSchema = ToolChoiceTypeFunctionResponse$outboundSchema;
}

/** @internal */
export const ToolChoiceFunctionResponse$inboundSchema: z.ZodType<
  ToolChoiceFunctionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ToolChoiceTypeFunctionResponse$inboundSchema,
  name: z.string(),
});

/** @internal */
export type ToolChoiceFunctionResponse$Outbound = {
  type: string;
  name: string;
};

/** @internal */
export const ToolChoiceFunctionResponse$outboundSchema: z.ZodType<
  ToolChoiceFunctionResponse$Outbound,
  z.ZodTypeDef,
  ToolChoiceFunctionResponse
> = z.object({
  type: ToolChoiceTypeFunctionResponse$outboundSchema,
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolChoiceFunctionResponse$ {
  /** @deprecated use `ToolChoiceFunctionResponse$inboundSchema` instead. */
  export const inboundSchema = ToolChoiceFunctionResponse$inboundSchema;
  /** @deprecated use `ToolChoiceFunctionResponse$outboundSchema` instead. */
  export const outboundSchema = ToolChoiceFunctionResponse$outboundSchema;
  /** @deprecated use `ToolChoiceFunctionResponse$Outbound` instead. */
  export type Outbound = ToolChoiceFunctionResponse$Outbound;
}

export function toolChoiceFunctionResponseToJSON(
  toolChoiceFunctionResponse: ToolChoiceFunctionResponse,
): string {
  return JSON.stringify(
    ToolChoiceFunctionResponse$outboundSchema.parse(toolChoiceFunctionResponse),
  );
}

export function toolChoiceFunctionResponseFromJSON(
  jsonString: string,
): SafeParseResult<ToolChoiceFunctionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolChoiceFunctionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolChoiceFunctionResponse' from JSON`,
  );
}

/** @internal */
export const TypeCodeInterpreterResponse$inboundSchema: z.ZodNativeEnum<
  typeof TypeCodeInterpreterResponse
> = z.nativeEnum(TypeCodeInterpreterResponse);

/** @internal */
export const TypeCodeInterpreterResponse$outboundSchema: z.ZodNativeEnum<
  typeof TypeCodeInterpreterResponse
> = TypeCodeInterpreterResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeCodeInterpreterResponse$ {
  /** @deprecated use `TypeCodeInterpreterResponse$inboundSchema` instead. */
  export const inboundSchema = TypeCodeInterpreterResponse$inboundSchema;
  /** @deprecated use `TypeCodeInterpreterResponse$outboundSchema` instead. */
  export const outboundSchema = TypeCodeInterpreterResponse$outboundSchema;
}

/** @internal */
export const TypeComputerUsePreviewResponse$inboundSchema: z.ZodNativeEnum<
  typeof TypeComputerUsePreviewResponse
> = z.nativeEnum(TypeComputerUsePreviewResponse);

/** @internal */
export const TypeComputerUsePreviewResponse$outboundSchema: z.ZodNativeEnum<
  typeof TypeComputerUsePreviewResponse
> = TypeComputerUsePreviewResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeComputerUsePreviewResponse$ {
  /** @deprecated use `TypeComputerUsePreviewResponse$inboundSchema` instead. */
  export const inboundSchema = TypeComputerUsePreviewResponse$inboundSchema;
  /** @deprecated use `TypeComputerUsePreviewResponse$outboundSchema` instead. */
  export const outboundSchema = TypeComputerUsePreviewResponse$outboundSchema;
}

/** @internal */
export const ToolChoiceTypeWebSearchPreview20250311Response$inboundSchema:
  z.ZodNativeEnum<typeof ToolChoiceTypeWebSearchPreview20250311Response> = z
    .nativeEnum(ToolChoiceTypeWebSearchPreview20250311Response);

/** @internal */
export const ToolChoiceTypeWebSearchPreview20250311Response$outboundSchema:
  z.ZodNativeEnum<typeof ToolChoiceTypeWebSearchPreview20250311Response> =
    ToolChoiceTypeWebSearchPreview20250311Response$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolChoiceTypeWebSearchPreview20250311Response$ {
  /** @deprecated use `ToolChoiceTypeWebSearchPreview20250311Response$inboundSchema` instead. */
  export const inboundSchema =
    ToolChoiceTypeWebSearchPreview20250311Response$inboundSchema;
  /** @deprecated use `ToolChoiceTypeWebSearchPreview20250311Response$outboundSchema` instead. */
  export const outboundSchema =
    ToolChoiceTypeWebSearchPreview20250311Response$outboundSchema;
}

/** @internal */
export const ToolChoiceTypeWebSearchPreviewResponse$inboundSchema:
  z.ZodNativeEnum<typeof ToolChoiceTypeWebSearchPreviewResponse> = z.nativeEnum(
    ToolChoiceTypeWebSearchPreviewResponse,
  );

/** @internal */
export const ToolChoiceTypeWebSearchPreviewResponse$outboundSchema:
  z.ZodNativeEnum<typeof ToolChoiceTypeWebSearchPreviewResponse> =
    ToolChoiceTypeWebSearchPreviewResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolChoiceTypeWebSearchPreviewResponse$ {
  /** @deprecated use `ToolChoiceTypeWebSearchPreviewResponse$inboundSchema` instead. */
  export const inboundSchema =
    ToolChoiceTypeWebSearchPreviewResponse$inboundSchema;
  /** @deprecated use `ToolChoiceTypeWebSearchPreviewResponse$outboundSchema` instead. */
  export const outboundSchema =
    ToolChoiceTypeWebSearchPreviewResponse$outboundSchema;
}

/** @internal */
export const TypeFileSearchResponse$inboundSchema: z.ZodNativeEnum<
  typeof TypeFileSearchResponse
> = z.nativeEnum(TypeFileSearchResponse);

/** @internal */
export const TypeFileSearchResponse$outboundSchema: z.ZodNativeEnum<
  typeof TypeFileSearchResponse
> = TypeFileSearchResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeFileSearchResponse$ {
  /** @deprecated use `TypeFileSearchResponse$inboundSchema` instead. */
  export const inboundSchema = TypeFileSearchResponse$inboundSchema;
  /** @deprecated use `TypeFileSearchResponse$outboundSchema` instead. */
  export const outboundSchema = TypeFileSearchResponse$outboundSchema;
}

/** @internal */
export const TypeResponseUnion$inboundSchema: z.ZodType<
  TypeResponseUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  TypeFileSearchResponse$inboundSchema,
  ToolChoiceTypeWebSearchPreviewResponse$inboundSchema,
  ToolChoiceTypeWebSearchPreview20250311Response$inboundSchema,
  TypeComputerUsePreviewResponse$inboundSchema,
  TypeCodeInterpreterResponse$inboundSchema,
]);

/** @internal */
export type TypeResponseUnion$Outbound =
  | string
  | string
  | string
  | string
  | string;

/** @internal */
export const TypeResponseUnion$outboundSchema: z.ZodType<
  TypeResponseUnion$Outbound,
  z.ZodTypeDef,
  TypeResponseUnion
> = z.union([
  TypeFileSearchResponse$outboundSchema,
  ToolChoiceTypeWebSearchPreviewResponse$outboundSchema,
  ToolChoiceTypeWebSearchPreview20250311Response$outboundSchema,
  TypeComputerUsePreviewResponse$outboundSchema,
  TypeCodeInterpreterResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeResponseUnion$ {
  /** @deprecated use `TypeResponseUnion$inboundSchema` instead. */
  export const inboundSchema = TypeResponseUnion$inboundSchema;
  /** @deprecated use `TypeResponseUnion$outboundSchema` instead. */
  export const outboundSchema = TypeResponseUnion$outboundSchema;
  /** @deprecated use `TypeResponseUnion$Outbound` instead. */
  export type Outbound = TypeResponseUnion$Outbound;
}

export function typeResponseUnionToJSON(
  typeResponseUnion: TypeResponseUnion,
): string {
  return JSON.stringify(
    TypeResponseUnion$outboundSchema.parse(typeResponseUnion),
  );
}

export function typeResponseUnionFromJSON(
  jsonString: string,
): SafeParseResult<TypeResponseUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TypeResponseUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TypeResponseUnion' from JSON`,
  );
}

/** @internal */
export const ToolChoiceResponse$inboundSchema: z.ZodType<
  ToolChoiceResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.union([
    TypeFileSearchResponse$inboundSchema,
    ToolChoiceTypeWebSearchPreviewResponse$inboundSchema,
    ToolChoiceTypeWebSearchPreview20250311Response$inboundSchema,
    TypeComputerUsePreviewResponse$inboundSchema,
    TypeCodeInterpreterResponse$inboundSchema,
  ]),
});

/** @internal */
export type ToolChoiceResponse$Outbound = {
  type: string | string | string | string | string;
};

/** @internal */
export const ToolChoiceResponse$outboundSchema: z.ZodType<
  ToolChoiceResponse$Outbound,
  z.ZodTypeDef,
  ToolChoiceResponse
> = z.object({
  type: z.union([
    TypeFileSearchResponse$outboundSchema,
    ToolChoiceTypeWebSearchPreviewResponse$outboundSchema,
    ToolChoiceTypeWebSearchPreview20250311Response$outboundSchema,
    TypeComputerUsePreviewResponse$outboundSchema,
    TypeCodeInterpreterResponse$outboundSchema,
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolChoiceResponse$ {
  /** @deprecated use `ToolChoiceResponse$inboundSchema` instead. */
  export const inboundSchema = ToolChoiceResponse$inboundSchema;
  /** @deprecated use `ToolChoiceResponse$outboundSchema` instead. */
  export const outboundSchema = ToolChoiceResponse$outboundSchema;
  /** @deprecated use `ToolChoiceResponse$Outbound` instead. */
  export type Outbound = ToolChoiceResponse$Outbound;
}

export function toolChoiceResponseToJSON(
  toolChoiceResponse: ToolChoiceResponse,
): string {
  return JSON.stringify(
    ToolChoiceResponse$outboundSchema.parse(toolChoiceResponse),
  );
}

export function toolChoiceResponseFromJSON(
  jsonString: string,
): SafeParseResult<ToolChoiceResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolChoiceResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolChoiceResponse' from JSON`,
  );
}

/** @internal */
export const ToolChoiceRequiredResponse$inboundSchema: z.ZodNativeEnum<
  typeof ToolChoiceRequiredResponse
> = z.nativeEnum(ToolChoiceRequiredResponse);

/** @internal */
export const ToolChoiceRequiredResponse$outboundSchema: z.ZodNativeEnum<
  typeof ToolChoiceRequiredResponse
> = ToolChoiceRequiredResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolChoiceRequiredResponse$ {
  /** @deprecated use `ToolChoiceRequiredResponse$inboundSchema` instead. */
  export const inboundSchema = ToolChoiceRequiredResponse$inboundSchema;
  /** @deprecated use `ToolChoiceRequiredResponse$outboundSchema` instead. */
  export const outboundSchema = ToolChoiceRequiredResponse$outboundSchema;
}

/** @internal */
export const ToolChoiceNoneResponse$inboundSchema: z.ZodNativeEnum<
  typeof ToolChoiceNoneResponse
> = z.nativeEnum(ToolChoiceNoneResponse);

/** @internal */
export const ToolChoiceNoneResponse$outboundSchema: z.ZodNativeEnum<
  typeof ToolChoiceNoneResponse
> = ToolChoiceNoneResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolChoiceNoneResponse$ {
  /** @deprecated use `ToolChoiceNoneResponse$inboundSchema` instead. */
  export const inboundSchema = ToolChoiceNoneResponse$inboundSchema;
  /** @deprecated use `ToolChoiceNoneResponse$outboundSchema` instead. */
  export const outboundSchema = ToolChoiceNoneResponse$outboundSchema;
}

/** @internal */
export const ToolChoiceAutoResponse$inboundSchema: z.ZodNativeEnum<
  typeof ToolChoiceAutoResponse
> = z.nativeEnum(ToolChoiceAutoResponse);

/** @internal */
export const ToolChoiceAutoResponse$outboundSchema: z.ZodNativeEnum<
  typeof ToolChoiceAutoResponse
> = ToolChoiceAutoResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolChoiceAutoResponse$ {
  /** @deprecated use `ToolChoiceAutoResponse$inboundSchema` instead. */
  export const inboundSchema = ToolChoiceAutoResponse$inboundSchema;
  /** @deprecated use `ToolChoiceAutoResponse$outboundSchema` instead. */
  export const outboundSchema = ToolChoiceAutoResponse$outboundSchema;
}

/** @internal */
export const ToolChoiceResponseUnion$inboundSchema: z.ZodType<
  ToolChoiceResponseUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ToolChoiceFunctionResponse$inboundSchema),
  z.lazy(() => ToolChoiceResponse$inboundSchema),
  ToolChoiceAutoResponse$inboundSchema,
  ToolChoiceNoneResponse$inboundSchema,
  ToolChoiceRequiredResponse$inboundSchema,
]);

/** @internal */
export type ToolChoiceResponseUnion$Outbound =
  | ToolChoiceFunctionResponse$Outbound
  | ToolChoiceResponse$Outbound
  | string
  | string
  | string;

/** @internal */
export const ToolChoiceResponseUnion$outboundSchema: z.ZodType<
  ToolChoiceResponseUnion$Outbound,
  z.ZodTypeDef,
  ToolChoiceResponseUnion
> = z.union([
  z.lazy(() => ToolChoiceFunctionResponse$outboundSchema),
  z.lazy(() => ToolChoiceResponse$outboundSchema),
  ToolChoiceAutoResponse$outboundSchema,
  ToolChoiceNoneResponse$outboundSchema,
  ToolChoiceRequiredResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolChoiceResponseUnion$ {
  /** @deprecated use `ToolChoiceResponseUnion$inboundSchema` instead. */
  export const inboundSchema = ToolChoiceResponseUnion$inboundSchema;
  /** @deprecated use `ToolChoiceResponseUnion$outboundSchema` instead. */
  export const outboundSchema = ToolChoiceResponseUnion$outboundSchema;
  /** @deprecated use `ToolChoiceResponseUnion$Outbound` instead. */
  export type Outbound = ToolChoiceResponseUnion$Outbound;
}

export function toolChoiceResponseUnionToJSON(
  toolChoiceResponseUnion: ToolChoiceResponseUnion,
): string {
  return JSON.stringify(
    ToolChoiceResponseUnion$outboundSchema.parse(toolChoiceResponseUnion),
  );
}

export function toolChoiceResponseUnionFromJSON(
  jsonString: string,
): SafeParseResult<ToolChoiceResponseUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolChoiceResponseUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolChoiceResponseUnion' from JSON`,
  );
}

/** @internal */
export const VariablesTypeInputFileResponse$inboundSchema: z.ZodNativeEnum<
  typeof VariablesTypeInputFileResponse
> = z.nativeEnum(VariablesTypeInputFileResponse);

/** @internal */
export const VariablesTypeInputFileResponse$outboundSchema: z.ZodNativeEnum<
  typeof VariablesTypeInputFileResponse
> = VariablesTypeInputFileResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VariablesTypeInputFileResponse$ {
  /** @deprecated use `VariablesTypeInputFileResponse$inboundSchema` instead. */
  export const inboundSchema = VariablesTypeInputFileResponse$inboundSchema;
  /** @deprecated use `VariablesTypeInputFileResponse$outboundSchema` instead. */
  export const outboundSchema = VariablesTypeInputFileResponse$outboundSchema;
}

/** @internal */
export const VariablesInputFileResponse$inboundSchema: z.ZodType<
  VariablesInputFileResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: VariablesTypeInputFileResponse$inboundSchema,
  file_id: z.nullable(z.string()).optional(),
  file_data: z.string().optional(),
  filename: z.string().optional(),
  file_url: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "file_id": "fileId",
    "file_data": "fileData",
    "file_url": "fileUrl",
  });
});

/** @internal */
export type VariablesInputFileResponse$Outbound = {
  type: string;
  file_id?: string | null | undefined;
  file_data?: string | undefined;
  filename?: string | undefined;
  file_url?: string | undefined;
};

/** @internal */
export const VariablesInputFileResponse$outboundSchema: z.ZodType<
  VariablesInputFileResponse$Outbound,
  z.ZodTypeDef,
  VariablesInputFileResponse
> = z.object({
  type: VariablesTypeInputFileResponse$outboundSchema,
  fileId: z.nullable(z.string()).optional(),
  fileData: z.string().optional(),
  filename: z.string().optional(),
  fileUrl: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    fileId: "file_id",
    fileData: "file_data",
    fileUrl: "file_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VariablesInputFileResponse$ {
  /** @deprecated use `VariablesInputFileResponse$inboundSchema` instead. */
  export const inboundSchema = VariablesInputFileResponse$inboundSchema;
  /** @deprecated use `VariablesInputFileResponse$outboundSchema` instead. */
  export const outboundSchema = VariablesInputFileResponse$outboundSchema;
  /** @deprecated use `VariablesInputFileResponse$Outbound` instead. */
  export type Outbound = VariablesInputFileResponse$Outbound;
}

export function variablesInputFileResponseToJSON(
  variablesInputFileResponse: VariablesInputFileResponse,
): string {
  return JSON.stringify(
    VariablesInputFileResponse$outboundSchema.parse(variablesInputFileResponse),
  );
}

export function variablesInputFileResponseFromJSON(
  jsonString: string,
): SafeParseResult<VariablesInputFileResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VariablesInputFileResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VariablesInputFileResponse' from JSON`,
  );
}

/** @internal */
export const VariablesTypeInputImageResponse$inboundSchema: z.ZodNativeEnum<
  typeof VariablesTypeInputImageResponse
> = z.nativeEnum(VariablesTypeInputImageResponse);

/** @internal */
export const VariablesTypeInputImageResponse$outboundSchema: z.ZodNativeEnum<
  typeof VariablesTypeInputImageResponse
> = VariablesTypeInputImageResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VariablesTypeInputImageResponse$ {
  /** @deprecated use `VariablesTypeInputImageResponse$inboundSchema` instead. */
  export const inboundSchema = VariablesTypeInputImageResponse$inboundSchema;
  /** @deprecated use `VariablesTypeInputImageResponse$outboundSchema` instead. */
  export const outboundSchema = VariablesTypeInputImageResponse$outboundSchema;
}

/** @internal */
export const VariablesDetailResponse$inboundSchema: z.ZodNativeEnum<
  typeof VariablesDetailResponse
> = z.nativeEnum(VariablesDetailResponse);

/** @internal */
export const VariablesDetailResponse$outboundSchema: z.ZodNativeEnum<
  typeof VariablesDetailResponse
> = VariablesDetailResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VariablesDetailResponse$ {
  /** @deprecated use `VariablesDetailResponse$inboundSchema` instead. */
  export const inboundSchema = VariablesDetailResponse$inboundSchema;
  /** @deprecated use `VariablesDetailResponse$outboundSchema` instead. */
  export const outboundSchema = VariablesDetailResponse$outboundSchema;
}

/** @internal */
export const VariablesInputImageResponse$inboundSchema: z.ZodType<
  VariablesInputImageResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: VariablesTypeInputImageResponse$inboundSchema,
  detail: VariablesDetailResponse$inboundSchema,
  image_url: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type VariablesInputImageResponse$Outbound = {
  type: string;
  detail: string;
  image_url?: string | null | undefined;
};

/** @internal */
export const VariablesInputImageResponse$outboundSchema: z.ZodType<
  VariablesInputImageResponse$Outbound,
  z.ZodTypeDef,
  VariablesInputImageResponse
> = z.object({
  type: VariablesTypeInputImageResponse$outboundSchema,
  detail: VariablesDetailResponse$outboundSchema,
  imageUrl: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VariablesInputImageResponse$ {
  /** @deprecated use `VariablesInputImageResponse$inboundSchema` instead. */
  export const inboundSchema = VariablesInputImageResponse$inboundSchema;
  /** @deprecated use `VariablesInputImageResponse$outboundSchema` instead. */
  export const outboundSchema = VariablesInputImageResponse$outboundSchema;
  /** @deprecated use `VariablesInputImageResponse$Outbound` instead. */
  export type Outbound = VariablesInputImageResponse$Outbound;
}

export function variablesInputImageResponseToJSON(
  variablesInputImageResponse: VariablesInputImageResponse,
): string {
  return JSON.stringify(
    VariablesInputImageResponse$outboundSchema.parse(
      variablesInputImageResponse,
    ),
  );
}

export function variablesInputImageResponseFromJSON(
  jsonString: string,
): SafeParseResult<VariablesInputImageResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VariablesInputImageResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VariablesInputImageResponse' from JSON`,
  );
}

/** @internal */
export const VariablesTypeInputTextResponse$inboundSchema: z.ZodNativeEnum<
  typeof VariablesTypeInputTextResponse
> = z.nativeEnum(VariablesTypeInputTextResponse);

/** @internal */
export const VariablesTypeInputTextResponse$outboundSchema: z.ZodNativeEnum<
  typeof VariablesTypeInputTextResponse
> = VariablesTypeInputTextResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VariablesTypeInputTextResponse$ {
  /** @deprecated use `VariablesTypeInputTextResponse$inboundSchema` instead. */
  export const inboundSchema = VariablesTypeInputTextResponse$inboundSchema;
  /** @deprecated use `VariablesTypeInputTextResponse$outboundSchema` instead. */
  export const outboundSchema = VariablesTypeInputTextResponse$outboundSchema;
}

/** @internal */
export const VariablesInputTextResponse$inboundSchema: z.ZodType<
  VariablesInputTextResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: VariablesTypeInputTextResponse$inboundSchema,
  text: z.string(),
});

/** @internal */
export type VariablesInputTextResponse$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const VariablesInputTextResponse$outboundSchema: z.ZodType<
  VariablesInputTextResponse$Outbound,
  z.ZodTypeDef,
  VariablesInputTextResponse
> = z.object({
  type: VariablesTypeInputTextResponse$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VariablesInputTextResponse$ {
  /** @deprecated use `VariablesInputTextResponse$inboundSchema` instead. */
  export const inboundSchema = VariablesInputTextResponse$inboundSchema;
  /** @deprecated use `VariablesInputTextResponse$outboundSchema` instead. */
  export const outboundSchema = VariablesInputTextResponse$outboundSchema;
  /** @deprecated use `VariablesInputTextResponse$Outbound` instead. */
  export type Outbound = VariablesInputTextResponse$Outbound;
}

export function variablesInputTextResponseToJSON(
  variablesInputTextResponse: VariablesInputTextResponse,
): string {
  return JSON.stringify(
    VariablesInputTextResponse$outboundSchema.parse(variablesInputTextResponse),
  );
}

export function variablesInputTextResponseFromJSON(
  jsonString: string,
): SafeParseResult<VariablesInputTextResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VariablesInputTextResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VariablesInputTextResponse' from JSON`,
  );
}

/** @internal */
export const VariablesResponseUnion$inboundSchema: z.ZodType<
  VariablesResponseUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => VariablesInputTextResponse$inboundSchema),
  z.lazy(() => VariablesInputImageResponse$inboundSchema),
  z.lazy(() => VariablesInputFileResponse$inboundSchema),
]);

/** @internal */
export type VariablesResponseUnion$Outbound =
  | VariablesInputTextResponse$Outbound
  | VariablesInputImageResponse$Outbound
  | VariablesInputFileResponse$Outbound;

/** @internal */
export const VariablesResponseUnion$outboundSchema: z.ZodType<
  VariablesResponseUnion$Outbound,
  z.ZodTypeDef,
  VariablesResponseUnion
> = z.union([
  z.lazy(() => VariablesInputTextResponse$outboundSchema),
  z.lazy(() => VariablesInputImageResponse$outboundSchema),
  z.lazy(() => VariablesInputFileResponse$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VariablesResponseUnion$ {
  /** @deprecated use `VariablesResponseUnion$inboundSchema` instead. */
  export const inboundSchema = VariablesResponseUnion$inboundSchema;
  /** @deprecated use `VariablesResponseUnion$outboundSchema` instead. */
  export const outboundSchema = VariablesResponseUnion$outboundSchema;
  /** @deprecated use `VariablesResponseUnion$Outbound` instead. */
  export type Outbound = VariablesResponseUnion$Outbound;
}

export function variablesResponseUnionToJSON(
  variablesResponseUnion: VariablesResponseUnion,
): string {
  return JSON.stringify(
    VariablesResponseUnion$outboundSchema.parse(variablesResponseUnion),
  );
}

export function variablesResponseUnionFromJSON(
  jsonString: string,
): SafeParseResult<VariablesResponseUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VariablesResponseUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VariablesResponseUnion' from JSON`,
  );
}

/** @internal */
export const PostApiAlphaResponsesPromptResponse$inboundSchema: z.ZodType<
  PostApiAlphaResponsesPromptResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  variables: z.nullable(
    z.record(z.union([
      z.lazy(() => VariablesInputTextResponse$inboundSchema),
      z.lazy(() =>
        VariablesInputImageResponse$inboundSchema
      ),
      z.lazy(() => VariablesInputFileResponse$inboundSchema),
    ])),
  ).optional(),
});

/** @internal */
export type PostApiAlphaResponsesPromptResponse$Outbound = {
  id: string;
  variables?:
    | {
      [k: string]:
        | VariablesInputTextResponse$Outbound
        | VariablesInputImageResponse$Outbound
        | VariablesInputFileResponse$Outbound;
    }
    | null
    | undefined;
};

/** @internal */
export const PostApiAlphaResponsesPromptResponse$outboundSchema: z.ZodType<
  PostApiAlphaResponsesPromptResponse$Outbound,
  z.ZodTypeDef,
  PostApiAlphaResponsesPromptResponse
> = z.object({
  id: z.string(),
  variables: z.nullable(
    z.record(z.union([
      z.lazy(() => VariablesInputTextResponse$outboundSchema),
      z.lazy(() =>
        VariablesInputImageResponse$outboundSchema
      ),
      z.lazy(() => VariablesInputFileResponse$outboundSchema),
    ])),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiAlphaResponsesPromptResponse$ {
  /** @deprecated use `PostApiAlphaResponsesPromptResponse$inboundSchema` instead. */
  export const inboundSchema =
    PostApiAlphaResponsesPromptResponse$inboundSchema;
  /** @deprecated use `PostApiAlphaResponsesPromptResponse$outboundSchema` instead. */
  export const outboundSchema =
    PostApiAlphaResponsesPromptResponse$outboundSchema;
  /** @deprecated use `PostApiAlphaResponsesPromptResponse$Outbound` instead. */
  export type Outbound = PostApiAlphaResponsesPromptResponse$Outbound;
}

export function postApiAlphaResponsesPromptResponseToJSON(
  postApiAlphaResponsesPromptResponse: PostApiAlphaResponsesPromptResponse,
): string {
  return JSON.stringify(
    PostApiAlphaResponsesPromptResponse$outboundSchema.parse(
      postApiAlphaResponsesPromptResponse,
    ),
  );
}

export function postApiAlphaResponsesPromptResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostApiAlphaResponsesPromptResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiAlphaResponsesPromptResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostApiAlphaResponsesPromptResponse' from JSON`,
  );
}

/** @internal */
export const EffortResponse$inboundSchema: z.ZodNativeEnum<
  typeof EffortResponse
> = z.nativeEnum(EffortResponse);

/** @internal */
export const EffortResponse$outboundSchema: z.ZodNativeEnum<
  typeof EffortResponse
> = EffortResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EffortResponse$ {
  /** @deprecated use `EffortResponse$inboundSchema` instead. */
  export const inboundSchema = EffortResponse$inboundSchema;
  /** @deprecated use `EffortResponse$outboundSchema` instead. */
  export const outboundSchema = EffortResponse$outboundSchema;
}

/** @internal */
export const SummaryResponseEnum$inboundSchema: z.ZodNativeEnum<
  typeof SummaryResponseEnum
> = z.nativeEnum(SummaryResponseEnum);

/** @internal */
export const SummaryResponseEnum$outboundSchema: z.ZodNativeEnum<
  typeof SummaryResponseEnum
> = SummaryResponseEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SummaryResponseEnum$ {
  /** @deprecated use `SummaryResponseEnum$inboundSchema` instead. */
  export const inboundSchema = SummaryResponseEnum$inboundSchema;
  /** @deprecated use `SummaryResponseEnum$outboundSchema` instead. */
  export const outboundSchema = SummaryResponseEnum$outboundSchema;
}

/** @internal */
export const ReasoningResponse$inboundSchema: z.ZodType<
  ReasoningResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  effort: z.nullable(EffortResponse$inboundSchema).optional(),
  summary: z.nullable(SummaryResponseEnum$inboundSchema).optional(),
});

/** @internal */
export type ReasoningResponse$Outbound = {
  effort?: string | null | undefined;
  summary?: string | null | undefined;
};

/** @internal */
export const ReasoningResponse$outboundSchema: z.ZodType<
  ReasoningResponse$Outbound,
  z.ZodTypeDef,
  ReasoningResponse
> = z.object({
  effort: z.nullable(EffortResponse$outboundSchema).optional(),
  summary: z.nullable(SummaryResponseEnum$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReasoningResponse$ {
  /** @deprecated use `ReasoningResponse$inboundSchema` instead. */
  export const inboundSchema = ReasoningResponse$inboundSchema;
  /** @deprecated use `ReasoningResponse$outboundSchema` instead. */
  export const outboundSchema = ReasoningResponse$outboundSchema;
  /** @deprecated use `ReasoningResponse$Outbound` instead. */
  export type Outbound = ReasoningResponse$Outbound;
}

export function reasoningResponseToJSON(
  reasoningResponse: ReasoningResponse,
): string {
  return JSON.stringify(
    ReasoningResponse$outboundSchema.parse(reasoningResponse),
  );
}

export function reasoningResponseFromJSON(
  jsonString: string,
): SafeParseResult<ReasoningResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReasoningResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReasoningResponse' from JSON`,
  );
}

/** @internal */
export const ServiceTierResponse$inboundSchema: z.ZodNativeEnum<
  typeof ServiceTierResponse
> = z.nativeEnum(ServiceTierResponse);

/** @internal */
export const ServiceTierResponse$outboundSchema: z.ZodNativeEnum<
  typeof ServiceTierResponse
> = ServiceTierResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceTierResponse$ {
  /** @deprecated use `ServiceTierResponse$inboundSchema` instead. */
  export const inboundSchema = ServiceTierResponse$inboundSchema;
  /** @deprecated use `ServiceTierResponse$outboundSchema` instead. */
  export const outboundSchema = ServiceTierResponse$outboundSchema;
}

/** @internal */
export const TruncationResponse$inboundSchema: z.ZodNativeEnum<
  typeof TruncationResponse
> = z.nativeEnum(TruncationResponse);

/** @internal */
export const TruncationResponse$outboundSchema: z.ZodNativeEnum<
  typeof TruncationResponse
> = TruncationResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TruncationResponse$ {
  /** @deprecated use `TruncationResponse$inboundSchema` instead. */
  export const inboundSchema = TruncationResponse$inboundSchema;
  /** @deprecated use `TruncationResponse$outboundSchema` instead. */
  export const outboundSchema = TruncationResponse$outboundSchema;
}

/** @internal */
export const TypeJSONSchemaResponse$inboundSchema: z.ZodNativeEnum<
  typeof TypeJSONSchemaResponse
> = z.nativeEnum(TypeJSONSchemaResponse);

/** @internal */
export const TypeJSONSchemaResponse$outboundSchema: z.ZodNativeEnum<
  typeof TypeJSONSchemaResponse
> = TypeJSONSchemaResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeJSONSchemaResponse$ {
  /** @deprecated use `TypeJSONSchemaResponse$inboundSchema` instead. */
  export const inboundSchema = TypeJSONSchemaResponse$inboundSchema;
  /** @deprecated use `TypeJSONSchemaResponse$outboundSchema` instead. */
  export const outboundSchema = TypeJSONSchemaResponse$outboundSchema;
}

/** @internal */
export const FormatJSONSchemaResponse$inboundSchema: z.ZodType<
  FormatJSONSchemaResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TypeJSONSchemaResponse$inboundSchema,
  name: z.string(),
  description: z.string().optional(),
  strict: z.nullable(z.boolean()).optional(),
  schema: z.record(z.nullable(z.any())),
});

/** @internal */
export type FormatJSONSchemaResponse$Outbound = {
  type: string;
  name: string;
  description?: string | undefined;
  strict?: boolean | null | undefined;
  schema: { [k: string]: any | null };
};

/** @internal */
export const FormatJSONSchemaResponse$outboundSchema: z.ZodType<
  FormatJSONSchemaResponse$Outbound,
  z.ZodTypeDef,
  FormatJSONSchemaResponse
> = z.object({
  type: TypeJSONSchemaResponse$outboundSchema,
  name: z.string(),
  description: z.string().optional(),
  strict: z.nullable(z.boolean()).optional(),
  schema: z.record(z.nullable(z.any())),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FormatJSONSchemaResponse$ {
  /** @deprecated use `FormatJSONSchemaResponse$inboundSchema` instead. */
  export const inboundSchema = FormatJSONSchemaResponse$inboundSchema;
  /** @deprecated use `FormatJSONSchemaResponse$outboundSchema` instead. */
  export const outboundSchema = FormatJSONSchemaResponse$outboundSchema;
  /** @deprecated use `FormatJSONSchemaResponse$Outbound` instead. */
  export type Outbound = FormatJSONSchemaResponse$Outbound;
}

export function formatJSONSchemaResponseToJSON(
  formatJSONSchemaResponse: FormatJSONSchemaResponse,
): string {
  return JSON.stringify(
    FormatJSONSchemaResponse$outboundSchema.parse(formatJSONSchemaResponse),
  );
}

export function formatJSONSchemaResponseFromJSON(
  jsonString: string,
): SafeParseResult<FormatJSONSchemaResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FormatJSONSchemaResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FormatJSONSchemaResponse' from JSON`,
  );
}

/** @internal */
export const TypeJSONObjectResponse$inboundSchema: z.ZodNativeEnum<
  typeof TypeJSONObjectResponse
> = z.nativeEnum(TypeJSONObjectResponse);

/** @internal */
export const TypeJSONObjectResponse$outboundSchema: z.ZodNativeEnum<
  typeof TypeJSONObjectResponse
> = TypeJSONObjectResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeJSONObjectResponse$ {
  /** @deprecated use `TypeJSONObjectResponse$inboundSchema` instead. */
  export const inboundSchema = TypeJSONObjectResponse$inboundSchema;
  /** @deprecated use `TypeJSONObjectResponse$outboundSchema` instead. */
  export const outboundSchema = TypeJSONObjectResponse$outboundSchema;
}

/** @internal */
export const FormatJSONObjectResponse$inboundSchema: z.ZodType<
  FormatJSONObjectResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TypeJSONObjectResponse$inboundSchema,
});

/** @internal */
export type FormatJSONObjectResponse$Outbound = {
  type: string;
};

/** @internal */
export const FormatJSONObjectResponse$outboundSchema: z.ZodType<
  FormatJSONObjectResponse$Outbound,
  z.ZodTypeDef,
  FormatJSONObjectResponse
> = z.object({
  type: TypeJSONObjectResponse$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FormatJSONObjectResponse$ {
  /** @deprecated use `FormatJSONObjectResponse$inboundSchema` instead. */
  export const inboundSchema = FormatJSONObjectResponse$inboundSchema;
  /** @deprecated use `FormatJSONObjectResponse$outboundSchema` instead. */
  export const outboundSchema = FormatJSONObjectResponse$outboundSchema;
  /** @deprecated use `FormatJSONObjectResponse$Outbound` instead. */
  export type Outbound = FormatJSONObjectResponse$Outbound;
}

export function formatJSONObjectResponseToJSON(
  formatJSONObjectResponse: FormatJSONObjectResponse,
): string {
  return JSON.stringify(
    FormatJSONObjectResponse$outboundSchema.parse(formatJSONObjectResponse),
  );
}

export function formatJSONObjectResponseFromJSON(
  jsonString: string,
): SafeParseResult<FormatJSONObjectResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FormatJSONObjectResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FormatJSONObjectResponse' from JSON`,
  );
}

/** @internal */
export const FormatTypeResponse$inboundSchema: z.ZodNativeEnum<
  typeof FormatTypeResponse
> = z.nativeEnum(FormatTypeResponse);

/** @internal */
export const FormatTypeResponse$outboundSchema: z.ZodNativeEnum<
  typeof FormatTypeResponse
> = FormatTypeResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FormatTypeResponse$ {
  /** @deprecated use `FormatTypeResponse$inboundSchema` instead. */
  export const inboundSchema = FormatTypeResponse$inboundSchema;
  /** @deprecated use `FormatTypeResponse$outboundSchema` instead. */
  export const outboundSchema = FormatTypeResponse$outboundSchema;
}

/** @internal */
export const FormatTextResponse$inboundSchema: z.ZodType<
  FormatTextResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FormatTypeResponse$inboundSchema,
});

/** @internal */
export type FormatTextResponse$Outbound = {
  type: string;
};

/** @internal */
export const FormatTextResponse$outboundSchema: z.ZodType<
  FormatTextResponse$Outbound,
  z.ZodTypeDef,
  FormatTextResponse
> = z.object({
  type: FormatTypeResponse$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FormatTextResponse$ {
  /** @deprecated use `FormatTextResponse$inboundSchema` instead. */
  export const inboundSchema = FormatTextResponse$inboundSchema;
  /** @deprecated use `FormatTextResponse$outboundSchema` instead. */
  export const outboundSchema = FormatTextResponse$outboundSchema;
  /** @deprecated use `FormatTextResponse$Outbound` instead. */
  export type Outbound = FormatTextResponse$Outbound;
}

export function formatTextResponseToJSON(
  formatTextResponse: FormatTextResponse,
): string {
  return JSON.stringify(
    FormatTextResponse$outboundSchema.parse(formatTextResponse),
  );
}

export function formatTextResponseFromJSON(
  jsonString: string,
): SafeParseResult<FormatTextResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FormatTextResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FormatTextResponse' from JSON`,
  );
}

/** @internal */
export const FormatResponseUnion$inboundSchema: z.ZodType<
  FormatResponseUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => FormatJSONSchemaResponse$inboundSchema),
  z.lazy(() => FormatTextResponse$inboundSchema),
  z.lazy(() => FormatJSONObjectResponse$inboundSchema),
]);

/** @internal */
export type FormatResponseUnion$Outbound =
  | FormatJSONSchemaResponse$Outbound
  | FormatTextResponse$Outbound
  | FormatJSONObjectResponse$Outbound;

/** @internal */
export const FormatResponseUnion$outboundSchema: z.ZodType<
  FormatResponseUnion$Outbound,
  z.ZodTypeDef,
  FormatResponseUnion
> = z.union([
  z.lazy(() => FormatJSONSchemaResponse$outboundSchema),
  z.lazy(() => FormatTextResponse$outboundSchema),
  z.lazy(() => FormatJSONObjectResponse$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FormatResponseUnion$ {
  /** @deprecated use `FormatResponseUnion$inboundSchema` instead. */
  export const inboundSchema = FormatResponseUnion$inboundSchema;
  /** @deprecated use `FormatResponseUnion$outboundSchema` instead. */
  export const outboundSchema = FormatResponseUnion$outboundSchema;
  /** @deprecated use `FormatResponseUnion$Outbound` instead. */
  export type Outbound = FormatResponseUnion$Outbound;
}

export function formatResponseUnionToJSON(
  formatResponseUnion: FormatResponseUnion,
): string {
  return JSON.stringify(
    FormatResponseUnion$outboundSchema.parse(formatResponseUnion),
  );
}

export function formatResponseUnionFromJSON(
  jsonString: string,
): SafeParseResult<FormatResponseUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FormatResponseUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FormatResponseUnion' from JSON`,
  );
}

/** @internal */
export const VerbosityResponse$inboundSchema: z.ZodNativeEnum<
  typeof VerbosityResponse
> = z.nativeEnum(VerbosityResponse);

/** @internal */
export const VerbosityResponse$outboundSchema: z.ZodNativeEnum<
  typeof VerbosityResponse
> = VerbosityResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VerbosityResponse$ {
  /** @deprecated use `VerbosityResponse$inboundSchema` instead. */
  export const inboundSchema = VerbosityResponse$inboundSchema;
  /** @deprecated use `VerbosityResponse$outboundSchema` instead. */
  export const outboundSchema = VerbosityResponse$outboundSchema;
}

/** @internal */
export const TextResponse$inboundSchema: z.ZodType<
  TextResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  format: z.union([
    z.lazy(() => FormatJSONSchemaResponse$inboundSchema),
    z.lazy(() => FormatTextResponse$inboundSchema),
    z.lazy(() => FormatJSONObjectResponse$inboundSchema),
  ]).optional(),
  verbosity: z.nullable(VerbosityResponse$inboundSchema).optional(),
});

/** @internal */
export type TextResponse$Outbound = {
  format?:
    | FormatJSONSchemaResponse$Outbound
    | FormatTextResponse$Outbound
    | FormatJSONObjectResponse$Outbound
    | undefined;
  verbosity?: string | null | undefined;
};

/** @internal */
export const TextResponse$outboundSchema: z.ZodType<
  TextResponse$Outbound,
  z.ZodTypeDef,
  TextResponse
> = z.object({
  format: z.union([
    z.lazy(() => FormatJSONSchemaResponse$outboundSchema),
    z.lazy(() => FormatTextResponse$outboundSchema),
    z.lazy(() => FormatJSONObjectResponse$outboundSchema),
  ]).optional(),
  verbosity: z.nullable(VerbosityResponse$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TextResponse$ {
  /** @deprecated use `TextResponse$inboundSchema` instead. */
  export const inboundSchema = TextResponse$inboundSchema;
  /** @deprecated use `TextResponse$outboundSchema` instead. */
  export const outboundSchema = TextResponse$outboundSchema;
  /** @deprecated use `TextResponse$Outbound` instead. */
  export type Outbound = TextResponse$Outbound;
}

export function textResponseToJSON(textResponse: TextResponse): string {
  return JSON.stringify(TextResponse$outboundSchema.parse(textResponse));
}

export function textResponseFromJSON(
  jsonString: string,
): SafeParseResult<TextResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TextResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TextResponse' from JSON`,
  );
}

/** @internal */
export const PostApiAlphaResponsesResponseBody$inboundSchema: z.ZodType<
  PostApiAlphaResponsesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  object: PostApiAlphaResponsesObject$inboundSchema,
  created_at: z.number(),
  model: z.string(),
  status: PostApiAlphaResponsesStatusResponseEnum$inboundSchema.optional(),
  output: z.array(
    z.union([
      z.lazy(() => OutputAssistant$inboundSchema),
      z.lazy(() => OutputFunctionCall$inboundSchema),
      z.lazy(() => OutputFileSearchCall$inboundSchema),
      z.lazy(() => OutputImageGenerationCall$inboundSchema),
      z.lazy(() => OutputReasoning$inboundSchema),
      z.lazy(() => OutputWebSearchCall$inboundSchema),
    ]),
  ),
  user: z.nullable(z.string()).optional(),
  output_text: z.string().optional(),
  prompt_cache_key: z.nullable(z.string()).optional(),
  safety_identifier: z.nullable(z.string()).optional(),
  error: z.nullable(z.lazy(() => PostApiAlphaResponsesError$inboundSchema)),
  incomplete_details: z.nullable(z.lazy(() => IncompleteDetails$inboundSchema)),
  usage: z.lazy(() => PostApiAlphaResponsesUsage$inboundSchema).optional(),
  max_tool_calls: z.nullable(z.number()).optional(),
  top_logprobs: z.number().optional(),
  max_output_tokens: z.nullable(z.number()).optional(),
  temperature: z.nullable(z.number()),
  top_p: z.nullable(z.number()),
  instructions: z.nullable(
    z.union([
      z.string(),
      z.array(
        z.union([
          z.lazy(() => InstructionsAssistant1$inboundSchema),
          z.lazy(() => InstructionsFunctionCall1$inboundSchema),
          z.lazy(() => InstructionsFunctionCallOutput$inboundSchema),
          z.lazy(() => InstructionsImageGenerationCall1$inboundSchema),
          z.lazy(() => InstructionsMessage2$inboundSchema),
          z.lazy(() => InstructionsMessage1$inboundSchema),
          z.union([
            z.lazy(() => InstructionsAssistant2$inboundSchema),
            z.lazy(() => InstructionsFunctionCall2$inboundSchema),
            z.lazy(() => InstructionsFileSearchCall$inboundSchema),
            z.lazy(() => InstructionsImageGenerationCall2$inboundSchema),
            z.lazy(() => InstructionsReasoning$inboundSchema),
            z.lazy(() => InstructionsWebSearchCall$inboundSchema),
          ]),
        ]),
      ),
      z.any(),
    ]),
  ).optional(),
  metadata: z.nullable(z.record(z.string())),
  tools: z.array(
    z.union([
      z.lazy(() => ToolFunctionResponse$inboundSchema),
      z.lazy(() => ToolWebSearchPreviewResponse$inboundSchema),
      z.lazy(() => ToolWebSearchPreview20250311Response$inboundSchema),
      z.lazy(() => ToolWebSearchResponse$inboundSchema),
      z.lazy(() => ToolWebSearch20250826Response$inboundSchema),
    ]),
  ),
  tool_choice: z.union([
    z.lazy(() => ToolChoiceFunctionResponse$inboundSchema),
    z.lazy(() => ToolChoiceResponse$inboundSchema),
    ToolChoiceAutoResponse$inboundSchema,
    ToolChoiceNoneResponse$inboundSchema,
    ToolChoiceRequiredResponse$inboundSchema,
  ]),
  parallel_tool_calls: z.boolean(),
  prompt: z.nullable(
    z.lazy(() => PostApiAlphaResponsesPromptResponse$inboundSchema),
  ).optional(),
  background: z.nullable(z.boolean()).optional(),
  previous_response_id: z.nullable(z.string()).optional(),
  reasoning: z.nullable(z.lazy(() => ReasoningResponse$inboundSchema))
    .optional(),
  service_tier: z.nullable(ServiceTierResponse$inboundSchema).optional(),
  store: z.boolean().optional(),
  truncation: z.nullable(TruncationResponse$inboundSchema).optional(),
  text: z.lazy(() => TextResponse$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "output_text": "outputText",
    "prompt_cache_key": "promptCacheKey",
    "safety_identifier": "safetyIdentifier",
    "incomplete_details": "incompleteDetails",
    "max_tool_calls": "maxToolCalls",
    "top_logprobs": "topLogprobs",
    "max_output_tokens": "maxOutputTokens",
    "top_p": "topP",
    "tool_choice": "toolChoice",
    "parallel_tool_calls": "parallelToolCalls",
    "previous_response_id": "previousResponseId",
    "service_tier": "serviceTier",
  });
});

/** @internal */
export type PostApiAlphaResponsesResponseBody$Outbound = {
  id: string;
  object: string;
  created_at: number;
  model: string;
  status?: string | undefined;
  output: Array<
    | OutputAssistant$Outbound
    | OutputFunctionCall$Outbound
    | OutputFileSearchCall$Outbound
    | OutputImageGenerationCall$Outbound
    | OutputReasoning$Outbound
    | OutputWebSearchCall$Outbound
  >;
  user?: string | null | undefined;
  output_text?: string | undefined;
  prompt_cache_key?: string | null | undefined;
  safety_identifier?: string | null | undefined;
  error: PostApiAlphaResponsesError$Outbound | null;
  incomplete_details: IncompleteDetails$Outbound | null;
  usage?: PostApiAlphaResponsesUsage$Outbound | undefined;
  max_tool_calls?: number | null | undefined;
  top_logprobs?: number | undefined;
  max_output_tokens?: number | null | undefined;
  temperature: number | null;
  top_p: number | null;
  instructions?:
    | string
    | Array<
      | InstructionsAssistant1$Outbound
      | InstructionsFunctionCall1$Outbound
      | InstructionsFunctionCallOutput$Outbound
      | InstructionsImageGenerationCall1$Outbound
      | InstructionsMessage2$Outbound
      | InstructionsMessage1$Outbound
      | InstructionsAssistant2$Outbound
      | InstructionsFunctionCall2$Outbound
      | InstructionsFileSearchCall$Outbound
      | InstructionsImageGenerationCall2$Outbound
      | InstructionsReasoning$Outbound
      | InstructionsWebSearchCall$Outbound
    >
    | any
    | null
    | undefined;
  metadata: { [k: string]: string } | null;
  tools: Array<
    | ToolFunctionResponse$Outbound
    | ToolWebSearchPreviewResponse$Outbound
    | ToolWebSearchPreview20250311Response$Outbound
    | ToolWebSearchResponse$Outbound
    | ToolWebSearch20250826Response$Outbound
  >;
  tool_choice:
    | ToolChoiceFunctionResponse$Outbound
    | ToolChoiceResponse$Outbound
    | string
    | string
    | string;
  parallel_tool_calls: boolean;
  prompt?: PostApiAlphaResponsesPromptResponse$Outbound | null | undefined;
  background?: boolean | null | undefined;
  previous_response_id?: string | null | undefined;
  reasoning?: ReasoningResponse$Outbound | null | undefined;
  service_tier?: string | null | undefined;
  store?: boolean | undefined;
  truncation?: string | null | undefined;
  text?: TextResponse$Outbound | undefined;
};

/** @internal */
export const PostApiAlphaResponsesResponseBody$outboundSchema: z.ZodType<
  PostApiAlphaResponsesResponseBody$Outbound,
  z.ZodTypeDef,
  PostApiAlphaResponsesResponseBody
> = z.object({
  id: z.string(),
  object: PostApiAlphaResponsesObject$outboundSchema,
  createdAt: z.number(),
  model: z.string(),
  status: PostApiAlphaResponsesStatusResponseEnum$outboundSchema.optional(),
  output: z.array(
    z.union([
      z.lazy(() => OutputAssistant$outboundSchema),
      z.lazy(() => OutputFunctionCall$outboundSchema),
      z.lazy(() => OutputFileSearchCall$outboundSchema),
      z.lazy(() => OutputImageGenerationCall$outboundSchema),
      z.lazy(() => OutputReasoning$outboundSchema),
      z.lazy(() => OutputWebSearchCall$outboundSchema),
    ]),
  ),
  user: z.nullable(z.string()).optional(),
  outputText: z.string().optional(),
  promptCacheKey: z.nullable(z.string()).optional(),
  safetyIdentifier: z.nullable(z.string()).optional(),
  error: z.nullable(z.lazy(() => PostApiAlphaResponsesError$outboundSchema)),
  incompleteDetails: z.nullable(z.lazy(() => IncompleteDetails$outboundSchema)),
  usage: z.lazy(() => PostApiAlphaResponsesUsage$outboundSchema).optional(),
  maxToolCalls: z.nullable(z.number()).optional(),
  topLogprobs: z.number().optional(),
  maxOutputTokens: z.nullable(z.number()).optional(),
  temperature: z.nullable(z.number()),
  topP: z.nullable(z.number()),
  instructions: z.nullable(
    z.union([
      z.string(),
      z.array(
        z.union([
          z.lazy(() => InstructionsAssistant1$outboundSchema),
          z.lazy(() => InstructionsFunctionCall1$outboundSchema),
          z.lazy(() => InstructionsFunctionCallOutput$outboundSchema),
          z.lazy(() => InstructionsImageGenerationCall1$outboundSchema),
          z.lazy(() => InstructionsMessage2$outboundSchema),
          z.lazy(() => InstructionsMessage1$outboundSchema),
          z.union([
            z.lazy(() => InstructionsAssistant2$outboundSchema),
            z.lazy(() => InstructionsFunctionCall2$outboundSchema),
            z.lazy(() => InstructionsFileSearchCall$outboundSchema),
            z.lazy(() => InstructionsImageGenerationCall2$outboundSchema),
            z.lazy(() => InstructionsReasoning$outboundSchema),
            z.lazy(() => InstructionsWebSearchCall$outboundSchema),
          ]),
        ]),
      ),
      z.any(),
    ]),
  ).optional(),
  metadata: z.nullable(z.record(z.string())),
  tools: z.array(
    z.union([
      z.lazy(() => ToolFunctionResponse$outboundSchema),
      z.lazy(() => ToolWebSearchPreviewResponse$outboundSchema),
      z.lazy(() => ToolWebSearchPreview20250311Response$outboundSchema),
      z.lazy(() => ToolWebSearchResponse$outboundSchema),
      z.lazy(() => ToolWebSearch20250826Response$outboundSchema),
    ]),
  ),
  toolChoice: z.union([
    z.lazy(() => ToolChoiceFunctionResponse$outboundSchema),
    z.lazy(() => ToolChoiceResponse$outboundSchema),
    ToolChoiceAutoResponse$outboundSchema,
    ToolChoiceNoneResponse$outboundSchema,
    ToolChoiceRequiredResponse$outboundSchema,
  ]),
  parallelToolCalls: z.boolean(),
  prompt: z.nullable(
    z.lazy(() => PostApiAlphaResponsesPromptResponse$outboundSchema),
  ).optional(),
  background: z.nullable(z.boolean()).optional(),
  previousResponseId: z.nullable(z.string()).optional(),
  reasoning: z.nullable(z.lazy(() => ReasoningResponse$outboundSchema))
    .optional(),
  serviceTier: z.nullable(ServiceTierResponse$outboundSchema).optional(),
  store: z.boolean().optional(),
  truncation: z.nullable(TruncationResponse$outboundSchema).optional(),
  text: z.lazy(() => TextResponse$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    outputText: "output_text",
    promptCacheKey: "prompt_cache_key",
    safetyIdentifier: "safety_identifier",
    incompleteDetails: "incomplete_details",
    maxToolCalls: "max_tool_calls",
    topLogprobs: "top_logprobs",
    maxOutputTokens: "max_output_tokens",
    topP: "top_p",
    toolChoice: "tool_choice",
    parallelToolCalls: "parallel_tool_calls",
    previousResponseId: "previous_response_id",
    serviceTier: "service_tier",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiAlphaResponsesResponseBody$ {
  /** @deprecated use `PostApiAlphaResponsesResponseBody$inboundSchema` instead. */
  export const inboundSchema = PostApiAlphaResponsesResponseBody$inboundSchema;
  /** @deprecated use `PostApiAlphaResponsesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PostApiAlphaResponsesResponseBody$outboundSchema;
  /** @deprecated use `PostApiAlphaResponsesResponseBody$Outbound` instead. */
  export type Outbound = PostApiAlphaResponsesResponseBody$Outbound;
}

export function postApiAlphaResponsesResponseBodyToJSON(
  postApiAlphaResponsesResponseBody: PostApiAlphaResponsesResponseBody,
): string {
  return JSON.stringify(
    PostApiAlphaResponsesResponseBody$outboundSchema.parse(
      postApiAlphaResponsesResponseBody,
    ),
  );
}

export function postApiAlphaResponsesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostApiAlphaResponsesResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostApiAlphaResponsesResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostApiAlphaResponsesResponseBody' from JSON`,
  );
}

/** @internal */
export const PostApiAlphaResponsesResponse$inboundSchema: z.ZodType<
  PostApiAlphaResponsesResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => PostApiAlphaResponsesResponseBody$inboundSchema),
  z
    .instanceof(ReadableStream<Uint8Array>)
    .transform(stream => {
      return new EventStream(stream, rawEvent => {
        return { value: z.any().parse(rawEvent) };
      });
    }),
]);

/** @internal */
export type PostApiAlphaResponsesResponse$Outbound =
  | PostApiAlphaResponsesResponseBody$Outbound
  | never;

/** @internal */
export const PostApiAlphaResponsesResponse$outboundSchema: z.ZodType<
  PostApiAlphaResponsesResponse$Outbound,
  z.ZodTypeDef,
  PostApiAlphaResponsesResponse
> = z.union([
  z.lazy(() => PostApiAlphaResponsesResponseBody$outboundSchema),
  z.never(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiAlphaResponsesResponse$ {
  /** @deprecated use `PostApiAlphaResponsesResponse$inboundSchema` instead. */
  export const inboundSchema = PostApiAlphaResponsesResponse$inboundSchema;
  /** @deprecated use `PostApiAlphaResponsesResponse$outboundSchema` instead. */
  export const outboundSchema = PostApiAlphaResponsesResponse$outboundSchema;
  /** @deprecated use `PostApiAlphaResponsesResponse$Outbound` instead. */
  export type Outbound = PostApiAlphaResponsesResponse$Outbound;
}

export function postApiAlphaResponsesResponseToJSON(
  postApiAlphaResponsesResponse: PostApiAlphaResponsesResponse,
): string {
  return JSON.stringify(
    PostApiAlphaResponsesResponse$outboundSchema.parse(
      postApiAlphaResponsesResponse,
    ),
  );
}

export function postApiAlphaResponsesResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostApiAlphaResponsesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostApiAlphaResponsesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostApiAlphaResponsesResponse' from JSON`,
  );
}
