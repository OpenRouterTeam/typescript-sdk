/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v4";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetParametersSecurity = {
  bearer: string;
};

export const Provider = {
  Ai21: "AI21",
  AionLabs: "AionLabs",
  Alibaba: "Alibaba",
  AmazonBedrock: "Amazon Bedrock",
  Anthropic: "Anthropic",
  AtlasCloud: "AtlasCloud",
  Atoma: "Atoma",
  Avian: "Avian",
  Azure: "Azure",
  BaseTen: "BaseTen",
  Cerebras: "Cerebras",
  Chutes: "Chutes",
  Cirrascale: "Cirrascale",
  Clarifai: "Clarifai",
  Cloudflare: "Cloudflare",
  Cohere: "Cohere",
  CrofAI: "CrofAI",
  Crusoe: "Crusoe",
  DeepInfra: "DeepInfra",
  DeepSeek: "DeepSeek",
  Enfer: "Enfer",
  Featherless: "Featherless",
  Fireworks: "Fireworks",
  Friendli: "Friendli",
  GMICloud: "GMICloud",
  Google: "Google",
  GoogleAIStudio: "Google AI Studio",
  Groq: "Groq",
  Hyperbolic: "Hyperbolic",
  Inception: "Inception",
  InferenceNet: "InferenceNet",
  Infermatic: "Infermatic",
  Inflection: "Inflection",
  Kluster: "Kluster",
  Lambda: "Lambda",
  Liquid: "Liquid",
  Mancer2: "Mancer 2",
  Meta: "Meta",
  Minimax: "Minimax",
  Mistral: "Mistral",
  Modular: "Modular",
  MoonshotAI: "Moonshot AI",
  Morph: "Morph",
  NCompass: "NCompass",
  Nebius: "Nebius",
  NextBit: "NextBit",
  Nineteen: "Nineteen",
  Novita: "Novita",
  Nvidia: "Nvidia",
  OpenAI: "OpenAI",
  OpenInference: "OpenInference",
  Parasail: "Parasail",
  Perplexity: "Perplexity",
  Phala: "Phala",
  Relace: "Relace",
  SambaNova: "SambaNova",
  SiliconFlow: "SiliconFlow",
  Stealth: "Stealth",
  Switchpoint: "Switchpoint",
  Targon: "Targon",
  Together: "Together",
  Ubicloud: "Ubicloud",
  Venice: "Venice",
  WandB: "WandB",
  XAI: "xAI",
  ZAi: "Z.AI",
  FakeProvider: "FakeProvider",
} as const;
export type Provider = OpenEnum<typeof Provider>;

export type GetParametersRequest = {
  author: string;
  slug: string;
  provider?: Provider | undefined;
};

export const SupportedParameter = {
  Temperature: "temperature",
  TopP: "top_p",
  TopK: "top_k",
  MinP: "min_p",
  TopA: "top_a",
  FrequencyPenalty: "frequency_penalty",
  PresencePenalty: "presence_penalty",
  RepetitionPenalty: "repetition_penalty",
  MaxTokens: "max_tokens",
  LogitBias: "logit_bias",
  Logprobs: "logprobs",
  TopLogprobs: "top_logprobs",
  Seed: "seed",
  ResponseFormat: "response_format",
  StructuredOutputs: "structured_outputs",
  Stop: "stop",
  Tools: "tools",
  ToolChoice: "tool_choice",
  ParallelToolCalls: "parallel_tool_calls",
  IncludeReasoning: "include_reasoning",
  Reasoning: "reasoning",
  WebSearchOptions: "web_search_options",
  Verbosity: "verbosity",
} as const;
export type SupportedParameter = OpenEnum<typeof SupportedParameter>;

/**
 * Parameter analytics data
 */
export type GetParametersData = {
  /**
   * Model identifier
   */
  model: string;
  /**
   * List of parameters supported by this model
   */
  supportedParameters: Array<SupportedParameter>;
};

/**
 * Returns the parameters for the specified model
 */
export type GetParametersResponse = {
  /**
   * Parameter analytics data
   */
  data: GetParametersData;
};

/** @internal */
export const GetParametersSecurity$inboundSchema: z.ZodType<
  GetParametersSecurity,
  unknown
> = z.object({
  bearer: z.string(),
});

/** @internal */
export type GetParametersSecurity$Outbound = {
  bearer: string;
};

/** @internal */
export const GetParametersSecurity$outboundSchema: z.ZodType<
  GetParametersSecurity$Outbound,
  GetParametersSecurity
> = z.object({
  bearer: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetParametersSecurity$ {
  /** @deprecated use `GetParametersSecurity$inboundSchema` instead. */
  export const inboundSchema = GetParametersSecurity$inboundSchema;
  /** @deprecated use `GetParametersSecurity$outboundSchema` instead. */
  export const outboundSchema = GetParametersSecurity$outboundSchema;
  /** @deprecated use `GetParametersSecurity$Outbound` instead. */
  export type Outbound = GetParametersSecurity$Outbound;
}

export function getParametersSecurityToJSON(
  getParametersSecurity: GetParametersSecurity,
): string {
  return JSON.stringify(
    GetParametersSecurity$outboundSchema.parse(getParametersSecurity),
  );
}

export function getParametersSecurityFromJSON(
  jsonString: string,
): SafeParseResult<GetParametersSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetParametersSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetParametersSecurity' from JSON`,
  );
}

/** @internal */
export const Provider$inboundSchema: z.ZodType<Provider, unknown> = z
  .union([
    z.enum(Provider),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const Provider$outboundSchema: z.ZodType<Provider, Provider> = z.union([
  z.enum(Provider),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Provider$ {
  /** @deprecated use `Provider$inboundSchema` instead. */
  export const inboundSchema = Provider$inboundSchema;
  /** @deprecated use `Provider$outboundSchema` instead. */
  export const outboundSchema = Provider$outboundSchema;
}

/** @internal */
export const GetParametersRequest$inboundSchema: z.ZodType<
  GetParametersRequest,
  unknown
> = z.object({
  author: z.string(),
  slug: z.string(),
  provider: Provider$inboundSchema.optional(),
});

/** @internal */
export type GetParametersRequest$Outbound = {
  author: string;
  slug: string;
  provider?: string | undefined;
};

/** @internal */
export const GetParametersRequest$outboundSchema: z.ZodType<
  GetParametersRequest$Outbound,
  GetParametersRequest
> = z.object({
  author: z.string(),
  slug: z.string(),
  provider: Provider$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetParametersRequest$ {
  /** @deprecated use `GetParametersRequest$inboundSchema` instead. */
  export const inboundSchema = GetParametersRequest$inboundSchema;
  /** @deprecated use `GetParametersRequest$outboundSchema` instead. */
  export const outboundSchema = GetParametersRequest$outboundSchema;
  /** @deprecated use `GetParametersRequest$Outbound` instead. */
  export type Outbound = GetParametersRequest$Outbound;
}

export function getParametersRequestToJSON(
  getParametersRequest: GetParametersRequest,
): string {
  return JSON.stringify(
    GetParametersRequest$outboundSchema.parse(getParametersRequest),
  );
}

export function getParametersRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetParametersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetParametersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetParametersRequest' from JSON`,
  );
}

/** @internal */
export const SupportedParameter$inboundSchema: z.ZodType<
  SupportedParameter,
  unknown
> = z
  .union([
    z.enum(SupportedParameter),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const SupportedParameter$outboundSchema: z.ZodType<
  SupportedParameter,
  SupportedParameter
> = z.union([
  z.enum(SupportedParameter),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SupportedParameter$ {
  /** @deprecated use `SupportedParameter$inboundSchema` instead. */
  export const inboundSchema = SupportedParameter$inboundSchema;
  /** @deprecated use `SupportedParameter$outboundSchema` instead. */
  export const outboundSchema = SupportedParameter$outboundSchema;
}

/** @internal */
export const GetParametersData$inboundSchema: z.ZodType<
  GetParametersData,
  unknown
> = z.object({
  model: z.string(),
  supported_parameters: z.array(SupportedParameter$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "supported_parameters": "supportedParameters",
  });
});

/** @internal */
export type GetParametersData$Outbound = {
  model: string;
  supported_parameters: Array<string>;
};

/** @internal */
export const GetParametersData$outboundSchema: z.ZodType<
  GetParametersData$Outbound,
  GetParametersData
> = z.object({
  model: z.string(),
  supportedParameters: z.array(SupportedParameter$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    supportedParameters: "supported_parameters",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetParametersData$ {
  /** @deprecated use `GetParametersData$inboundSchema` instead. */
  export const inboundSchema = GetParametersData$inboundSchema;
  /** @deprecated use `GetParametersData$outboundSchema` instead. */
  export const outboundSchema = GetParametersData$outboundSchema;
  /** @deprecated use `GetParametersData$Outbound` instead. */
  export type Outbound = GetParametersData$Outbound;
}

export function getParametersDataToJSON(
  getParametersData: GetParametersData,
): string {
  return JSON.stringify(
    GetParametersData$outboundSchema.parse(getParametersData),
  );
}

export function getParametersDataFromJSON(
  jsonString: string,
): SafeParseResult<GetParametersData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetParametersData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetParametersData' from JSON`,
  );
}

/** @internal */
export const GetParametersResponse$inboundSchema: z.ZodType<
  GetParametersResponse,
  unknown
> = z.object({
  data: z.lazy(() => GetParametersData$inboundSchema),
});

/** @internal */
export type GetParametersResponse$Outbound = {
  data: GetParametersData$Outbound;
};

/** @internal */
export const GetParametersResponse$outboundSchema: z.ZodType<
  GetParametersResponse$Outbound,
  GetParametersResponse
> = z.object({
  data: z.lazy(() => GetParametersData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetParametersResponse$ {
  /** @deprecated use `GetParametersResponse$inboundSchema` instead. */
  export const inboundSchema = GetParametersResponse$inboundSchema;
  /** @deprecated use `GetParametersResponse$outboundSchema` instead. */
  export const outboundSchema = GetParametersResponse$outboundSchema;
  /** @deprecated use `GetParametersResponse$Outbound` instead. */
  export type Outbound = GetParametersResponse$Outbound;
}

export function getParametersResponseToJSON(
  getParametersResponse: GetParametersResponse,
): string {
  return JSON.stringify(
    GetParametersResponse$outboundSchema.parse(getParametersResponse),
  );
}

export function getParametersResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetParametersResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetParametersResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetParametersResponse' from JSON`,
  );
}
