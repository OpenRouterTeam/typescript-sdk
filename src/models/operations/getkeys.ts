/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetKeysRequest = {
  includeDisabled?: string | undefined;
  offset?: string | undefined;
};

export type GetKeysData = {
  /**
   * Unique hash identifier for the API key
   */
  hash: string;
  /**
   * Name of the API key
   */
  name: string;
  /**
   * Human-readable label for the API key
   */
  label: string;
  /**
   * Whether the API key is disabled
   */
  disabled: boolean;
  /**
   * Spending limit for the API key in USD
   */
  limit: number | null;
  /**
   * Current usage of the API key in USD
   */
  usage: number;
  /**
   * ISO 8601 timestamp of when the API key was created
   */
  createdAt: string;
  /**
   * ISO 8601 timestamp of when the API key was last updated
   */
  updatedAt: string | null;
};

/**
 * List of API keys
 */
export type GetKeysResponse = {
  /**
   * List of API keys
   */
  data: Array<GetKeysData>;
};

/** @internal */
export const GetKeysRequest$inboundSchema: z.ZodType<
  GetKeysRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  include_disabled: z.string().optional(),
  offset: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "include_disabled": "includeDisabled",
  });
});

/** @internal */
export type GetKeysRequest$Outbound = {
  include_disabled?: string | undefined;
  offset?: string | undefined;
};

/** @internal */
export const GetKeysRequest$outboundSchema: z.ZodType<
  GetKeysRequest$Outbound,
  z.ZodTypeDef,
  GetKeysRequest
> = z.object({
  includeDisabled: z.string().optional(),
  offset: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    includeDisabled: "include_disabled",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetKeysRequest$ {
  /** @deprecated use `GetKeysRequest$inboundSchema` instead. */
  export const inboundSchema = GetKeysRequest$inboundSchema;
  /** @deprecated use `GetKeysRequest$outboundSchema` instead. */
  export const outboundSchema = GetKeysRequest$outboundSchema;
  /** @deprecated use `GetKeysRequest$Outbound` instead. */
  export type Outbound = GetKeysRequest$Outbound;
}

export function getKeysRequestToJSON(getKeysRequest: GetKeysRequest): string {
  return JSON.stringify(GetKeysRequest$outboundSchema.parse(getKeysRequest));
}

export function getKeysRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetKeysRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetKeysRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetKeysRequest' from JSON`,
  );
}

/** @internal */
export const GetKeysData$inboundSchema: z.ZodType<
  GetKeysData,
  z.ZodTypeDef,
  unknown
> = z.object({
  hash: z.string(),
  name: z.string(),
  label: z.string(),
  disabled: z.boolean(),
  limit: z.nullable(z.number()),
  usage: z.number(),
  created_at: z.string(),
  updated_at: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type GetKeysData$Outbound = {
  hash: string;
  name: string;
  label: string;
  disabled: boolean;
  limit: number | null;
  usage: number;
  created_at: string;
  updated_at: string | null;
};

/** @internal */
export const GetKeysData$outboundSchema: z.ZodType<
  GetKeysData$Outbound,
  z.ZodTypeDef,
  GetKeysData
> = z.object({
  hash: z.string(),
  name: z.string(),
  label: z.string(),
  disabled: z.boolean(),
  limit: z.nullable(z.number()),
  usage: z.number(),
  createdAt: z.string(),
  updatedAt: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetKeysData$ {
  /** @deprecated use `GetKeysData$inboundSchema` instead. */
  export const inboundSchema = GetKeysData$inboundSchema;
  /** @deprecated use `GetKeysData$outboundSchema` instead. */
  export const outboundSchema = GetKeysData$outboundSchema;
  /** @deprecated use `GetKeysData$Outbound` instead. */
  export type Outbound = GetKeysData$Outbound;
}

export function getKeysDataToJSON(getKeysData: GetKeysData): string {
  return JSON.stringify(GetKeysData$outboundSchema.parse(getKeysData));
}

export function getKeysDataFromJSON(
  jsonString: string,
): SafeParseResult<GetKeysData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetKeysData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetKeysData' from JSON`,
  );
}

/** @internal */
export const GetKeysResponse$inboundSchema: z.ZodType<
  GetKeysResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(z.lazy(() => GetKeysData$inboundSchema)),
});

/** @internal */
export type GetKeysResponse$Outbound = {
  data: Array<GetKeysData$Outbound>;
};

/** @internal */
export const GetKeysResponse$outboundSchema: z.ZodType<
  GetKeysResponse$Outbound,
  z.ZodTypeDef,
  GetKeysResponse
> = z.object({
  data: z.array(z.lazy(() => GetKeysData$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetKeysResponse$ {
  /** @deprecated use `GetKeysResponse$inboundSchema` instead. */
  export const inboundSchema = GetKeysResponse$inboundSchema;
  /** @deprecated use `GetKeysResponse$outboundSchema` instead. */
  export const outboundSchema = GetKeysResponse$outboundSchema;
  /** @deprecated use `GetKeysResponse$Outbound` instead. */
  export type Outbound = GetKeysResponse$Outbound;
}

export function getKeysResponseToJSON(
  getKeysResponse: GetKeysResponse,
): string {
  return JSON.stringify(GetKeysResponse$outboundSchema.parse(getKeysResponse));
}

export function getKeysResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetKeysResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetKeysResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetKeysResponse' from JSON`,
  );
}
