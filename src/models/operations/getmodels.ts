/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetModelsRequestRequest = {
  category?: string | undefined;
  supportedParameters?: string | undefined;
  useRss?: string | undefined;
  useRssChatLinks?: string | undefined;
};

export type GetModelsPrompt = number | string | any;

export type GetModelsCompletion = number | string | any;

export type ModelsGetModelsRequest = number | string | any;

export type GetModelsImage = number | string | any;

export type GetModelsImageOutput = number | string | any;

export type GetModelsAudio = number | string | any;

export type GetModelsInputAudioCache = number | string | any;

export type GetModelsWebSearch = number | string | any;

export type GetModelsInternalReasoning = number | string | any;

export type GetModelsInputCacheRead = number | string | any;

export type GetModelsInputCacheWrite = number | string | any;

/**
 * Pricing information for the model
 */
export type GetModelsPricing = {
  prompt?: number | string | any | undefined;
  completion?: number | string | any | undefined;
  request?: number | string | any | undefined;
  image?: number | string | any | undefined;
  imageOutput?: number | string | any | undefined;
  audio?: number | string | any | undefined;
  inputAudioCache?: number | string | any | undefined;
  webSearch?: number | string | any | undefined;
  internalReasoning?: number | string | any | undefined;
  inputCacheRead?: number | string | any | undefined;
  inputCacheWrite?: number | string | any | undefined;
  discount?: number | undefined;
};

/**
 * Tokenizer type used by the model
 */
export const GetModelsTokenizer = {
  Router: "Router",
  Media: "Media",
  Other: "Other",
  Gpt: "GPT",
  Claude: "Claude",
  Gemini: "Gemini",
  Grok: "Grok",
  Cohere: "Cohere",
  Nova: "Nova",
  Qwen: "Qwen",
  Yi: "Yi",
  DeepSeek: "DeepSeek",
  Mistral: "Mistral",
  Llama2: "Llama2",
  Llama3: "Llama3",
  Llama4: "Llama4",
  PaLM: "PaLM",
  Rwkv: "RWKV",
  Qwen3: "Qwen3",
} as const;
/**
 * Tokenizer type used by the model
 */
export type GetModelsTokenizer = ClosedEnum<typeof GetModelsTokenizer>;

/**
 * Instruction format type
 */
export const GetModelsInstructType = {
  None: "none",
  Airoboros: "airoboros",
  Alpaca: "alpaca",
  AlpacaModif: "alpaca-modif",
  Chatml: "chatml",
  Claude: "claude",
  CodeLlama: "code-llama",
  Gemma: "gemma",
  Llama2: "llama2",
  Llama3: "llama3",
  Mistral: "mistral",
  Nemotron: "nemotron",
  Neural: "neural",
  Openchat: "openchat",
  Phi3: "phi3",
  Rwkv: "rwkv",
  Vicuna: "vicuna",
  Zephyr: "zephyr",
  DeepseekR1: "deepseek-r1",
  DeepseekV31: "deepseek-v3.1",
  Qwq: "qwq",
  Qwen3: "qwen3",
} as const;
/**
 * Instruction format type
 */
export type GetModelsInstructType = ClosedEnum<typeof GetModelsInstructType>;

export const GetModelsInputModality = {
  Text: "text",
  Image: "image",
  File: "file",
  Audio: "audio",
} as const;
export type GetModelsInputModality = ClosedEnum<typeof GetModelsInputModality>;

export const GetModelsOutputModality = {
  Text: "text",
  Image: "image",
  Embeddings: "embeddings",
} as const;
export type GetModelsOutputModality = ClosedEnum<
  typeof GetModelsOutputModality
>;

/**
 * Model architecture information
 */
export type GetModelsArchitecture = {
  /**
   * Tokenizer type used by the model
   */
  tokenizer?: GetModelsTokenizer | undefined;
  /**
   * Instruction format type
   */
  instructType?: GetModelsInstructType | null | undefined;
  /**
   * Primary modality of the model
   */
  modality: string | null;
  /**
   * Supported input modalities
   */
  inputModalities: Array<GetModelsInputModality>;
  /**
   * Supported output modalities
   */
  outputModalities: Array<GetModelsOutputModality>;
};

/**
 * Information about the top provider for this model
 */
export type GetModelsTopProvider = {
  /**
   * Context length from the top provider
   */
  contextLength?: number | null | undefined;
  /**
   * Maximum completion tokens from the top provider
   */
  maxCompletionTokens?: number | null | undefined;
  /**
   * Whether the top provider moderates content
   */
  isModerated: boolean;
};

/**
 * Per-request token limits
 */
export type GetModelsPerRequestLimits = {
  /**
   * Maximum prompt tokens per request
   */
  promptTokens?: any | undefined;
  /**
   * Maximum completion tokens per request
   */
  completionTokens?: any | undefined;
};

export const GetModelsSupportedParameter = {
  Temperature: "temperature",
  TopP: "top_p",
  TopK: "top_k",
  MinP: "min_p",
  TopA: "top_a",
  FrequencyPenalty: "frequency_penalty",
  PresencePenalty: "presence_penalty",
  RepetitionPenalty: "repetition_penalty",
  MaxTokens: "max_tokens",
  LogitBias: "logit_bias",
  Logprobs: "logprobs",
  TopLogprobs: "top_logprobs",
  Seed: "seed",
  ResponseFormat: "response_format",
  StructuredOutputs: "structured_outputs",
  Stop: "stop",
  Tools: "tools",
  ToolChoice: "tool_choice",
  ParallelToolCalls: "parallel_tool_calls",
  IncludeReasoning: "include_reasoning",
  Reasoning: "reasoning",
  WebSearchOptions: "web_search_options",
  Verbosity: "verbosity",
} as const;
export type GetModelsSupportedParameter = ClosedEnum<
  typeof GetModelsSupportedParameter
>;

export type GetModelsData = {
  /**
   * Unique identifier for the model
   */
  id: string;
  /**
   * Canonical slug for the model
   */
  canonicalSlug: string;
  /**
   * Hugging Face model identifier, if applicable
   */
  huggingFaceId?: string | null | undefined;
  /**
   * Display name of the model
   */
  name: string;
  /**
   * Unix timestamp of when the model was created
   */
  created: number;
  /**
   * Description of the model
   */
  description?: string | undefined;
  /**
   * Pricing information for the model
   */
  pricing: GetModelsPricing;
  /**
   * Maximum context length in tokens
   */
  contextLength: number | null;
  /**
   * Model architecture information
   */
  architecture: GetModelsArchitecture;
  /**
   * Information about the top provider for this model
   */
  topProvider: GetModelsTopProvider;
  /**
   * Per-request token limits
   */
  perRequestLimits: GetModelsPerRequestLimits | null;
  /**
   * List of supported parameters for this model
   */
  supportedParameters: Array<GetModelsSupportedParameter>;
};

/**
 * Returns a list of models or RSS feed
 */
export type GetModelsResponseBody = {
  /**
   * List of available models
   */
  data: Array<GetModelsData>;
};

export type GetModelsResponse = GetModelsResponseBody | string;

/** @internal */
export const GetModelsRequestRequest$inboundSchema: z.ZodType<
  GetModelsRequestRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  category: z.string().optional(),
  supported_parameters: z.string().optional(),
  use_rss: z.string().optional(),
  use_rss_chat_links: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "supported_parameters": "supportedParameters",
    "use_rss": "useRss",
    "use_rss_chat_links": "useRssChatLinks",
  });
});

/** @internal */
export type GetModelsRequestRequest$Outbound = {
  category?: string | undefined;
  supported_parameters?: string | undefined;
  use_rss?: string | undefined;
  use_rss_chat_links?: string | undefined;
};

/** @internal */
export const GetModelsRequestRequest$outboundSchema: z.ZodType<
  GetModelsRequestRequest$Outbound,
  z.ZodTypeDef,
  GetModelsRequestRequest
> = z.object({
  category: z.string().optional(),
  supportedParameters: z.string().optional(),
  useRss: z.string().optional(),
  useRssChatLinks: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    supportedParameters: "supported_parameters",
    useRss: "use_rss",
    useRssChatLinks: "use_rss_chat_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsRequestRequest$ {
  /** @deprecated use `GetModelsRequestRequest$inboundSchema` instead. */
  export const inboundSchema = GetModelsRequestRequest$inboundSchema;
  /** @deprecated use `GetModelsRequestRequest$outboundSchema` instead. */
  export const outboundSchema = GetModelsRequestRequest$outboundSchema;
  /** @deprecated use `GetModelsRequestRequest$Outbound` instead. */
  export type Outbound = GetModelsRequestRequest$Outbound;
}

export function getModelsRequestRequestToJSON(
  getModelsRequestRequest: GetModelsRequestRequest,
): string {
  return JSON.stringify(
    GetModelsRequestRequest$outboundSchema.parse(getModelsRequestRequest),
  );
}

export function getModelsRequestRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetModelsRequestRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetModelsRequestRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetModelsRequestRequest' from JSON`,
  );
}

/** @internal */
export const GetModelsPrompt$inboundSchema: z.ZodType<
  GetModelsPrompt,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type GetModelsPrompt$Outbound = number | string | any;

/** @internal */
export const GetModelsPrompt$outboundSchema: z.ZodType<
  GetModelsPrompt$Outbound,
  z.ZodTypeDef,
  GetModelsPrompt
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsPrompt$ {
  /** @deprecated use `GetModelsPrompt$inboundSchema` instead. */
  export const inboundSchema = GetModelsPrompt$inboundSchema;
  /** @deprecated use `GetModelsPrompt$outboundSchema` instead. */
  export const outboundSchema = GetModelsPrompt$outboundSchema;
  /** @deprecated use `GetModelsPrompt$Outbound` instead. */
  export type Outbound = GetModelsPrompt$Outbound;
}

export function getModelsPromptToJSON(
  getModelsPrompt: GetModelsPrompt,
): string {
  return JSON.stringify(GetModelsPrompt$outboundSchema.parse(getModelsPrompt));
}

export function getModelsPromptFromJSON(
  jsonString: string,
): SafeParseResult<GetModelsPrompt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetModelsPrompt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetModelsPrompt' from JSON`,
  );
}

/** @internal */
export const GetModelsCompletion$inboundSchema: z.ZodType<
  GetModelsCompletion,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type GetModelsCompletion$Outbound = number | string | any;

/** @internal */
export const GetModelsCompletion$outboundSchema: z.ZodType<
  GetModelsCompletion$Outbound,
  z.ZodTypeDef,
  GetModelsCompletion
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsCompletion$ {
  /** @deprecated use `GetModelsCompletion$inboundSchema` instead. */
  export const inboundSchema = GetModelsCompletion$inboundSchema;
  /** @deprecated use `GetModelsCompletion$outboundSchema` instead. */
  export const outboundSchema = GetModelsCompletion$outboundSchema;
  /** @deprecated use `GetModelsCompletion$Outbound` instead. */
  export type Outbound = GetModelsCompletion$Outbound;
}

export function getModelsCompletionToJSON(
  getModelsCompletion: GetModelsCompletion,
): string {
  return JSON.stringify(
    GetModelsCompletion$outboundSchema.parse(getModelsCompletion),
  );
}

export function getModelsCompletionFromJSON(
  jsonString: string,
): SafeParseResult<GetModelsCompletion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetModelsCompletion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetModelsCompletion' from JSON`,
  );
}

/** @internal */
export const ModelsGetModelsRequest$inboundSchema: z.ZodType<
  ModelsGetModelsRequest,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type ModelsGetModelsRequest$Outbound = number | string | any;

/** @internal */
export const ModelsGetModelsRequest$outboundSchema: z.ZodType<
  ModelsGetModelsRequest$Outbound,
  z.ZodTypeDef,
  ModelsGetModelsRequest
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModelsGetModelsRequest$ {
  /** @deprecated use `ModelsGetModelsRequest$inboundSchema` instead. */
  export const inboundSchema = ModelsGetModelsRequest$inboundSchema;
  /** @deprecated use `ModelsGetModelsRequest$outboundSchema` instead. */
  export const outboundSchema = ModelsGetModelsRequest$outboundSchema;
  /** @deprecated use `ModelsGetModelsRequest$Outbound` instead. */
  export type Outbound = ModelsGetModelsRequest$Outbound;
}

export function modelsGetModelsRequestToJSON(
  modelsGetModelsRequest: ModelsGetModelsRequest,
): string {
  return JSON.stringify(
    ModelsGetModelsRequest$outboundSchema.parse(modelsGetModelsRequest),
  );
}

export function modelsGetModelsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ModelsGetModelsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ModelsGetModelsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ModelsGetModelsRequest' from JSON`,
  );
}

/** @internal */
export const GetModelsImage$inboundSchema: z.ZodType<
  GetModelsImage,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type GetModelsImage$Outbound = number | string | any;

/** @internal */
export const GetModelsImage$outboundSchema: z.ZodType<
  GetModelsImage$Outbound,
  z.ZodTypeDef,
  GetModelsImage
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsImage$ {
  /** @deprecated use `GetModelsImage$inboundSchema` instead. */
  export const inboundSchema = GetModelsImage$inboundSchema;
  /** @deprecated use `GetModelsImage$outboundSchema` instead. */
  export const outboundSchema = GetModelsImage$outboundSchema;
  /** @deprecated use `GetModelsImage$Outbound` instead. */
  export type Outbound = GetModelsImage$Outbound;
}

export function getModelsImageToJSON(getModelsImage: GetModelsImage): string {
  return JSON.stringify(GetModelsImage$outboundSchema.parse(getModelsImage));
}

export function getModelsImageFromJSON(
  jsonString: string,
): SafeParseResult<GetModelsImage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetModelsImage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetModelsImage' from JSON`,
  );
}

/** @internal */
export const GetModelsImageOutput$inboundSchema: z.ZodType<
  GetModelsImageOutput,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type GetModelsImageOutput$Outbound = number | string | any;

/** @internal */
export const GetModelsImageOutput$outboundSchema: z.ZodType<
  GetModelsImageOutput$Outbound,
  z.ZodTypeDef,
  GetModelsImageOutput
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsImageOutput$ {
  /** @deprecated use `GetModelsImageOutput$inboundSchema` instead. */
  export const inboundSchema = GetModelsImageOutput$inboundSchema;
  /** @deprecated use `GetModelsImageOutput$outboundSchema` instead. */
  export const outboundSchema = GetModelsImageOutput$outboundSchema;
  /** @deprecated use `GetModelsImageOutput$Outbound` instead. */
  export type Outbound = GetModelsImageOutput$Outbound;
}

export function getModelsImageOutputToJSON(
  getModelsImageOutput: GetModelsImageOutput,
): string {
  return JSON.stringify(
    GetModelsImageOutput$outboundSchema.parse(getModelsImageOutput),
  );
}

export function getModelsImageOutputFromJSON(
  jsonString: string,
): SafeParseResult<GetModelsImageOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetModelsImageOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetModelsImageOutput' from JSON`,
  );
}

/** @internal */
export const GetModelsAudio$inboundSchema: z.ZodType<
  GetModelsAudio,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type GetModelsAudio$Outbound = number | string | any;

/** @internal */
export const GetModelsAudio$outboundSchema: z.ZodType<
  GetModelsAudio$Outbound,
  z.ZodTypeDef,
  GetModelsAudio
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsAudio$ {
  /** @deprecated use `GetModelsAudio$inboundSchema` instead. */
  export const inboundSchema = GetModelsAudio$inboundSchema;
  /** @deprecated use `GetModelsAudio$outboundSchema` instead. */
  export const outboundSchema = GetModelsAudio$outboundSchema;
  /** @deprecated use `GetModelsAudio$Outbound` instead. */
  export type Outbound = GetModelsAudio$Outbound;
}

export function getModelsAudioToJSON(getModelsAudio: GetModelsAudio): string {
  return JSON.stringify(GetModelsAudio$outboundSchema.parse(getModelsAudio));
}

export function getModelsAudioFromJSON(
  jsonString: string,
): SafeParseResult<GetModelsAudio, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetModelsAudio$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetModelsAudio' from JSON`,
  );
}

/** @internal */
export const GetModelsInputAudioCache$inboundSchema: z.ZodType<
  GetModelsInputAudioCache,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type GetModelsInputAudioCache$Outbound = number | string | any;

/** @internal */
export const GetModelsInputAudioCache$outboundSchema: z.ZodType<
  GetModelsInputAudioCache$Outbound,
  z.ZodTypeDef,
  GetModelsInputAudioCache
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsInputAudioCache$ {
  /** @deprecated use `GetModelsInputAudioCache$inboundSchema` instead. */
  export const inboundSchema = GetModelsInputAudioCache$inboundSchema;
  /** @deprecated use `GetModelsInputAudioCache$outboundSchema` instead. */
  export const outboundSchema = GetModelsInputAudioCache$outboundSchema;
  /** @deprecated use `GetModelsInputAudioCache$Outbound` instead. */
  export type Outbound = GetModelsInputAudioCache$Outbound;
}

export function getModelsInputAudioCacheToJSON(
  getModelsInputAudioCache: GetModelsInputAudioCache,
): string {
  return JSON.stringify(
    GetModelsInputAudioCache$outboundSchema.parse(getModelsInputAudioCache),
  );
}

export function getModelsInputAudioCacheFromJSON(
  jsonString: string,
): SafeParseResult<GetModelsInputAudioCache, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetModelsInputAudioCache$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetModelsInputAudioCache' from JSON`,
  );
}

/** @internal */
export const GetModelsWebSearch$inboundSchema: z.ZodType<
  GetModelsWebSearch,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type GetModelsWebSearch$Outbound = number | string | any;

/** @internal */
export const GetModelsWebSearch$outboundSchema: z.ZodType<
  GetModelsWebSearch$Outbound,
  z.ZodTypeDef,
  GetModelsWebSearch
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsWebSearch$ {
  /** @deprecated use `GetModelsWebSearch$inboundSchema` instead. */
  export const inboundSchema = GetModelsWebSearch$inboundSchema;
  /** @deprecated use `GetModelsWebSearch$outboundSchema` instead. */
  export const outboundSchema = GetModelsWebSearch$outboundSchema;
  /** @deprecated use `GetModelsWebSearch$Outbound` instead. */
  export type Outbound = GetModelsWebSearch$Outbound;
}

export function getModelsWebSearchToJSON(
  getModelsWebSearch: GetModelsWebSearch,
): string {
  return JSON.stringify(
    GetModelsWebSearch$outboundSchema.parse(getModelsWebSearch),
  );
}

export function getModelsWebSearchFromJSON(
  jsonString: string,
): SafeParseResult<GetModelsWebSearch, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetModelsWebSearch$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetModelsWebSearch' from JSON`,
  );
}

/** @internal */
export const GetModelsInternalReasoning$inboundSchema: z.ZodType<
  GetModelsInternalReasoning,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type GetModelsInternalReasoning$Outbound = number | string | any;

/** @internal */
export const GetModelsInternalReasoning$outboundSchema: z.ZodType<
  GetModelsInternalReasoning$Outbound,
  z.ZodTypeDef,
  GetModelsInternalReasoning
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsInternalReasoning$ {
  /** @deprecated use `GetModelsInternalReasoning$inboundSchema` instead. */
  export const inboundSchema = GetModelsInternalReasoning$inboundSchema;
  /** @deprecated use `GetModelsInternalReasoning$outboundSchema` instead. */
  export const outboundSchema = GetModelsInternalReasoning$outboundSchema;
  /** @deprecated use `GetModelsInternalReasoning$Outbound` instead. */
  export type Outbound = GetModelsInternalReasoning$Outbound;
}

export function getModelsInternalReasoningToJSON(
  getModelsInternalReasoning: GetModelsInternalReasoning,
): string {
  return JSON.stringify(
    GetModelsInternalReasoning$outboundSchema.parse(getModelsInternalReasoning),
  );
}

export function getModelsInternalReasoningFromJSON(
  jsonString: string,
): SafeParseResult<GetModelsInternalReasoning, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetModelsInternalReasoning$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetModelsInternalReasoning' from JSON`,
  );
}

/** @internal */
export const GetModelsInputCacheRead$inboundSchema: z.ZodType<
  GetModelsInputCacheRead,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type GetModelsInputCacheRead$Outbound = number | string | any;

/** @internal */
export const GetModelsInputCacheRead$outboundSchema: z.ZodType<
  GetModelsInputCacheRead$Outbound,
  z.ZodTypeDef,
  GetModelsInputCacheRead
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsInputCacheRead$ {
  /** @deprecated use `GetModelsInputCacheRead$inboundSchema` instead. */
  export const inboundSchema = GetModelsInputCacheRead$inboundSchema;
  /** @deprecated use `GetModelsInputCacheRead$outboundSchema` instead. */
  export const outboundSchema = GetModelsInputCacheRead$outboundSchema;
  /** @deprecated use `GetModelsInputCacheRead$Outbound` instead. */
  export type Outbound = GetModelsInputCacheRead$Outbound;
}

export function getModelsInputCacheReadToJSON(
  getModelsInputCacheRead: GetModelsInputCacheRead,
): string {
  return JSON.stringify(
    GetModelsInputCacheRead$outboundSchema.parse(getModelsInputCacheRead),
  );
}

export function getModelsInputCacheReadFromJSON(
  jsonString: string,
): SafeParseResult<GetModelsInputCacheRead, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetModelsInputCacheRead$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetModelsInputCacheRead' from JSON`,
  );
}

/** @internal */
export const GetModelsInputCacheWrite$inboundSchema: z.ZodType<
  GetModelsInputCacheWrite,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type GetModelsInputCacheWrite$Outbound = number | string | any;

/** @internal */
export const GetModelsInputCacheWrite$outboundSchema: z.ZodType<
  GetModelsInputCacheWrite$Outbound,
  z.ZodTypeDef,
  GetModelsInputCacheWrite
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsInputCacheWrite$ {
  /** @deprecated use `GetModelsInputCacheWrite$inboundSchema` instead. */
  export const inboundSchema = GetModelsInputCacheWrite$inboundSchema;
  /** @deprecated use `GetModelsInputCacheWrite$outboundSchema` instead. */
  export const outboundSchema = GetModelsInputCacheWrite$outboundSchema;
  /** @deprecated use `GetModelsInputCacheWrite$Outbound` instead. */
  export type Outbound = GetModelsInputCacheWrite$Outbound;
}

export function getModelsInputCacheWriteToJSON(
  getModelsInputCacheWrite: GetModelsInputCacheWrite,
): string {
  return JSON.stringify(
    GetModelsInputCacheWrite$outboundSchema.parse(getModelsInputCacheWrite),
  );
}

export function getModelsInputCacheWriteFromJSON(
  jsonString: string,
): SafeParseResult<GetModelsInputCacheWrite, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetModelsInputCacheWrite$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetModelsInputCacheWrite' from JSON`,
  );
}

/** @internal */
export const GetModelsPricing$inboundSchema: z.ZodType<
  GetModelsPricing,
  z.ZodTypeDef,
  unknown
> = z.object({
  prompt: z.union([z.number(), z.string(), z.any()]).optional(),
  completion: z.union([z.number(), z.string(), z.any()]).optional(),
  request: z.union([z.number(), z.string(), z.any()]).optional(),
  image: z.union([z.number(), z.string(), z.any()]).optional(),
  image_output: z.union([z.number(), z.string(), z.any()]).optional(),
  audio: z.union([z.number(), z.string(), z.any()]).optional(),
  input_audio_cache: z.union([z.number(), z.string(), z.any()]).optional(),
  web_search: z.union([z.number(), z.string(), z.any()]).optional(),
  internal_reasoning: z.union([z.number(), z.string(), z.any()]).optional(),
  input_cache_read: z.union([z.number(), z.string(), z.any()]).optional(),
  input_cache_write: z.union([z.number(), z.string(), z.any()]).optional(),
  discount: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "image_output": "imageOutput",
    "input_audio_cache": "inputAudioCache",
    "web_search": "webSearch",
    "internal_reasoning": "internalReasoning",
    "input_cache_read": "inputCacheRead",
    "input_cache_write": "inputCacheWrite",
  });
});

/** @internal */
export type GetModelsPricing$Outbound = {
  prompt?: number | string | any | undefined;
  completion?: number | string | any | undefined;
  request?: number | string | any | undefined;
  image?: number | string | any | undefined;
  image_output?: number | string | any | undefined;
  audio?: number | string | any | undefined;
  input_audio_cache?: number | string | any | undefined;
  web_search?: number | string | any | undefined;
  internal_reasoning?: number | string | any | undefined;
  input_cache_read?: number | string | any | undefined;
  input_cache_write?: number | string | any | undefined;
  discount?: number | undefined;
};

/** @internal */
export const GetModelsPricing$outboundSchema: z.ZodType<
  GetModelsPricing$Outbound,
  z.ZodTypeDef,
  GetModelsPricing
> = z.object({
  prompt: z.union([z.number(), z.string(), z.any()]).optional(),
  completion: z.union([z.number(), z.string(), z.any()]).optional(),
  request: z.union([z.number(), z.string(), z.any()]).optional(),
  image: z.union([z.number(), z.string(), z.any()]).optional(),
  imageOutput: z.union([z.number(), z.string(), z.any()]).optional(),
  audio: z.union([z.number(), z.string(), z.any()]).optional(),
  inputAudioCache: z.union([z.number(), z.string(), z.any()]).optional(),
  webSearch: z.union([z.number(), z.string(), z.any()]).optional(),
  internalReasoning: z.union([z.number(), z.string(), z.any()]).optional(),
  inputCacheRead: z.union([z.number(), z.string(), z.any()]).optional(),
  inputCacheWrite: z.union([z.number(), z.string(), z.any()]).optional(),
  discount: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    imageOutput: "image_output",
    inputAudioCache: "input_audio_cache",
    webSearch: "web_search",
    internalReasoning: "internal_reasoning",
    inputCacheRead: "input_cache_read",
    inputCacheWrite: "input_cache_write",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsPricing$ {
  /** @deprecated use `GetModelsPricing$inboundSchema` instead. */
  export const inboundSchema = GetModelsPricing$inboundSchema;
  /** @deprecated use `GetModelsPricing$outboundSchema` instead. */
  export const outboundSchema = GetModelsPricing$outboundSchema;
  /** @deprecated use `GetModelsPricing$Outbound` instead. */
  export type Outbound = GetModelsPricing$Outbound;
}

export function getModelsPricingToJSON(
  getModelsPricing: GetModelsPricing,
): string {
  return JSON.stringify(
    GetModelsPricing$outboundSchema.parse(getModelsPricing),
  );
}

export function getModelsPricingFromJSON(
  jsonString: string,
): SafeParseResult<GetModelsPricing, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetModelsPricing$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetModelsPricing' from JSON`,
  );
}

/** @internal */
export const GetModelsTokenizer$inboundSchema: z.ZodNativeEnum<
  typeof GetModelsTokenizer
> = z.nativeEnum(GetModelsTokenizer);

/** @internal */
export const GetModelsTokenizer$outboundSchema: z.ZodNativeEnum<
  typeof GetModelsTokenizer
> = GetModelsTokenizer$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsTokenizer$ {
  /** @deprecated use `GetModelsTokenizer$inboundSchema` instead. */
  export const inboundSchema = GetModelsTokenizer$inboundSchema;
  /** @deprecated use `GetModelsTokenizer$outboundSchema` instead. */
  export const outboundSchema = GetModelsTokenizer$outboundSchema;
}

/** @internal */
export const GetModelsInstructType$inboundSchema: z.ZodNativeEnum<
  typeof GetModelsInstructType
> = z.nativeEnum(GetModelsInstructType);

/** @internal */
export const GetModelsInstructType$outboundSchema: z.ZodNativeEnum<
  typeof GetModelsInstructType
> = GetModelsInstructType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsInstructType$ {
  /** @deprecated use `GetModelsInstructType$inboundSchema` instead. */
  export const inboundSchema = GetModelsInstructType$inboundSchema;
  /** @deprecated use `GetModelsInstructType$outboundSchema` instead. */
  export const outboundSchema = GetModelsInstructType$outboundSchema;
}

/** @internal */
export const GetModelsInputModality$inboundSchema: z.ZodNativeEnum<
  typeof GetModelsInputModality
> = z.nativeEnum(GetModelsInputModality);

/** @internal */
export const GetModelsInputModality$outboundSchema: z.ZodNativeEnum<
  typeof GetModelsInputModality
> = GetModelsInputModality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsInputModality$ {
  /** @deprecated use `GetModelsInputModality$inboundSchema` instead. */
  export const inboundSchema = GetModelsInputModality$inboundSchema;
  /** @deprecated use `GetModelsInputModality$outboundSchema` instead. */
  export const outboundSchema = GetModelsInputModality$outboundSchema;
}

/** @internal */
export const GetModelsOutputModality$inboundSchema: z.ZodNativeEnum<
  typeof GetModelsOutputModality
> = z.nativeEnum(GetModelsOutputModality);

/** @internal */
export const GetModelsOutputModality$outboundSchema: z.ZodNativeEnum<
  typeof GetModelsOutputModality
> = GetModelsOutputModality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsOutputModality$ {
  /** @deprecated use `GetModelsOutputModality$inboundSchema` instead. */
  export const inboundSchema = GetModelsOutputModality$inboundSchema;
  /** @deprecated use `GetModelsOutputModality$outboundSchema` instead. */
  export const outboundSchema = GetModelsOutputModality$outboundSchema;
}

/** @internal */
export const GetModelsArchitecture$inboundSchema: z.ZodType<
  GetModelsArchitecture,
  z.ZodTypeDef,
  unknown
> = z.object({
  tokenizer: GetModelsTokenizer$inboundSchema.optional(),
  instruct_type: z.nullable(GetModelsInstructType$inboundSchema).optional(),
  modality: z.nullable(z.string()),
  input_modalities: z.array(GetModelsInputModality$inboundSchema),
  output_modalities: z.array(GetModelsOutputModality$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "instruct_type": "instructType",
    "input_modalities": "inputModalities",
    "output_modalities": "outputModalities",
  });
});

/** @internal */
export type GetModelsArchitecture$Outbound = {
  tokenizer?: string | undefined;
  instruct_type?: string | null | undefined;
  modality: string | null;
  input_modalities: Array<string>;
  output_modalities: Array<string>;
};

/** @internal */
export const GetModelsArchitecture$outboundSchema: z.ZodType<
  GetModelsArchitecture$Outbound,
  z.ZodTypeDef,
  GetModelsArchitecture
> = z.object({
  tokenizer: GetModelsTokenizer$outboundSchema.optional(),
  instructType: z.nullable(GetModelsInstructType$outboundSchema).optional(),
  modality: z.nullable(z.string()),
  inputModalities: z.array(GetModelsInputModality$outboundSchema),
  outputModalities: z.array(GetModelsOutputModality$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    instructType: "instruct_type",
    inputModalities: "input_modalities",
    outputModalities: "output_modalities",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsArchitecture$ {
  /** @deprecated use `GetModelsArchitecture$inboundSchema` instead. */
  export const inboundSchema = GetModelsArchitecture$inboundSchema;
  /** @deprecated use `GetModelsArchitecture$outboundSchema` instead. */
  export const outboundSchema = GetModelsArchitecture$outboundSchema;
  /** @deprecated use `GetModelsArchitecture$Outbound` instead. */
  export type Outbound = GetModelsArchitecture$Outbound;
}

export function getModelsArchitectureToJSON(
  getModelsArchitecture: GetModelsArchitecture,
): string {
  return JSON.stringify(
    GetModelsArchitecture$outboundSchema.parse(getModelsArchitecture),
  );
}

export function getModelsArchitectureFromJSON(
  jsonString: string,
): SafeParseResult<GetModelsArchitecture, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetModelsArchitecture$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetModelsArchitecture' from JSON`,
  );
}

/** @internal */
export const GetModelsTopProvider$inboundSchema: z.ZodType<
  GetModelsTopProvider,
  z.ZodTypeDef,
  unknown
> = z.object({
  context_length: z.nullable(z.number()).optional(),
  max_completion_tokens: z.nullable(z.number()).optional(),
  is_moderated: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "context_length": "contextLength",
    "max_completion_tokens": "maxCompletionTokens",
    "is_moderated": "isModerated",
  });
});

/** @internal */
export type GetModelsTopProvider$Outbound = {
  context_length?: number | null | undefined;
  max_completion_tokens?: number | null | undefined;
  is_moderated: boolean;
};

/** @internal */
export const GetModelsTopProvider$outboundSchema: z.ZodType<
  GetModelsTopProvider$Outbound,
  z.ZodTypeDef,
  GetModelsTopProvider
> = z.object({
  contextLength: z.nullable(z.number()).optional(),
  maxCompletionTokens: z.nullable(z.number()).optional(),
  isModerated: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    contextLength: "context_length",
    maxCompletionTokens: "max_completion_tokens",
    isModerated: "is_moderated",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsTopProvider$ {
  /** @deprecated use `GetModelsTopProvider$inboundSchema` instead. */
  export const inboundSchema = GetModelsTopProvider$inboundSchema;
  /** @deprecated use `GetModelsTopProvider$outboundSchema` instead. */
  export const outboundSchema = GetModelsTopProvider$outboundSchema;
  /** @deprecated use `GetModelsTopProvider$Outbound` instead. */
  export type Outbound = GetModelsTopProvider$Outbound;
}

export function getModelsTopProviderToJSON(
  getModelsTopProvider: GetModelsTopProvider,
): string {
  return JSON.stringify(
    GetModelsTopProvider$outboundSchema.parse(getModelsTopProvider),
  );
}

export function getModelsTopProviderFromJSON(
  jsonString: string,
): SafeParseResult<GetModelsTopProvider, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetModelsTopProvider$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetModelsTopProvider' from JSON`,
  );
}

/** @internal */
export const GetModelsPerRequestLimits$inboundSchema: z.ZodType<
  GetModelsPerRequestLimits,
  z.ZodTypeDef,
  unknown
> = z.object({
  prompt_tokens: z.any().optional(),
  completion_tokens: z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    "prompt_tokens": "promptTokens",
    "completion_tokens": "completionTokens",
  });
});

/** @internal */
export type GetModelsPerRequestLimits$Outbound = {
  prompt_tokens?: any | undefined;
  completion_tokens?: any | undefined;
};

/** @internal */
export const GetModelsPerRequestLimits$outboundSchema: z.ZodType<
  GetModelsPerRequestLimits$Outbound,
  z.ZodTypeDef,
  GetModelsPerRequestLimits
> = z.object({
  promptTokens: z.any().optional(),
  completionTokens: z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    promptTokens: "prompt_tokens",
    completionTokens: "completion_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsPerRequestLimits$ {
  /** @deprecated use `GetModelsPerRequestLimits$inboundSchema` instead. */
  export const inboundSchema = GetModelsPerRequestLimits$inboundSchema;
  /** @deprecated use `GetModelsPerRequestLimits$outboundSchema` instead. */
  export const outboundSchema = GetModelsPerRequestLimits$outboundSchema;
  /** @deprecated use `GetModelsPerRequestLimits$Outbound` instead. */
  export type Outbound = GetModelsPerRequestLimits$Outbound;
}

export function getModelsPerRequestLimitsToJSON(
  getModelsPerRequestLimits: GetModelsPerRequestLimits,
): string {
  return JSON.stringify(
    GetModelsPerRequestLimits$outboundSchema.parse(getModelsPerRequestLimits),
  );
}

export function getModelsPerRequestLimitsFromJSON(
  jsonString: string,
): SafeParseResult<GetModelsPerRequestLimits, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetModelsPerRequestLimits$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetModelsPerRequestLimits' from JSON`,
  );
}

/** @internal */
export const GetModelsSupportedParameter$inboundSchema: z.ZodNativeEnum<
  typeof GetModelsSupportedParameter
> = z.nativeEnum(GetModelsSupportedParameter);

/** @internal */
export const GetModelsSupportedParameter$outboundSchema: z.ZodNativeEnum<
  typeof GetModelsSupportedParameter
> = GetModelsSupportedParameter$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsSupportedParameter$ {
  /** @deprecated use `GetModelsSupportedParameter$inboundSchema` instead. */
  export const inboundSchema = GetModelsSupportedParameter$inboundSchema;
  /** @deprecated use `GetModelsSupportedParameter$outboundSchema` instead. */
  export const outboundSchema = GetModelsSupportedParameter$outboundSchema;
}

/** @internal */
export const GetModelsData$inboundSchema: z.ZodType<
  GetModelsData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  canonical_slug: z.string(),
  hugging_face_id: z.nullable(z.string()).optional(),
  name: z.string(),
  created: z.number(),
  description: z.string().optional(),
  pricing: z.lazy(() => GetModelsPricing$inboundSchema),
  context_length: z.nullable(z.number()),
  architecture: z.lazy(() => GetModelsArchitecture$inboundSchema),
  top_provider: z.lazy(() => GetModelsTopProvider$inboundSchema),
  per_request_limits: z.nullable(
    z.lazy(() => GetModelsPerRequestLimits$inboundSchema),
  ),
  supported_parameters: z.array(GetModelsSupportedParameter$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "canonical_slug": "canonicalSlug",
    "hugging_face_id": "huggingFaceId",
    "context_length": "contextLength",
    "top_provider": "topProvider",
    "per_request_limits": "perRequestLimits",
    "supported_parameters": "supportedParameters",
  });
});

/** @internal */
export type GetModelsData$Outbound = {
  id: string;
  canonical_slug: string;
  hugging_face_id?: string | null | undefined;
  name: string;
  created: number;
  description?: string | undefined;
  pricing: GetModelsPricing$Outbound;
  context_length: number | null;
  architecture: GetModelsArchitecture$Outbound;
  top_provider: GetModelsTopProvider$Outbound;
  per_request_limits: GetModelsPerRequestLimits$Outbound | null;
  supported_parameters: Array<string>;
};

/** @internal */
export const GetModelsData$outboundSchema: z.ZodType<
  GetModelsData$Outbound,
  z.ZodTypeDef,
  GetModelsData
> = z.object({
  id: z.string(),
  canonicalSlug: z.string(),
  huggingFaceId: z.nullable(z.string()).optional(),
  name: z.string(),
  created: z.number(),
  description: z.string().optional(),
  pricing: z.lazy(() => GetModelsPricing$outboundSchema),
  contextLength: z.nullable(z.number()),
  architecture: z.lazy(() => GetModelsArchitecture$outboundSchema),
  topProvider: z.lazy(() => GetModelsTopProvider$outboundSchema),
  perRequestLimits: z.nullable(
    z.lazy(() => GetModelsPerRequestLimits$outboundSchema),
  ),
  supportedParameters: z.array(GetModelsSupportedParameter$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    canonicalSlug: "canonical_slug",
    huggingFaceId: "hugging_face_id",
    contextLength: "context_length",
    topProvider: "top_provider",
    perRequestLimits: "per_request_limits",
    supportedParameters: "supported_parameters",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsData$ {
  /** @deprecated use `GetModelsData$inboundSchema` instead. */
  export const inboundSchema = GetModelsData$inboundSchema;
  /** @deprecated use `GetModelsData$outboundSchema` instead. */
  export const outboundSchema = GetModelsData$outboundSchema;
  /** @deprecated use `GetModelsData$Outbound` instead. */
  export type Outbound = GetModelsData$Outbound;
}

export function getModelsDataToJSON(getModelsData: GetModelsData): string {
  return JSON.stringify(GetModelsData$outboundSchema.parse(getModelsData));
}

export function getModelsDataFromJSON(
  jsonString: string,
): SafeParseResult<GetModelsData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetModelsData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetModelsData' from JSON`,
  );
}

/** @internal */
export const GetModelsResponseBody$inboundSchema: z.ZodType<
  GetModelsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(z.lazy(() => GetModelsData$inboundSchema)),
});

/** @internal */
export type GetModelsResponseBody$Outbound = {
  data: Array<GetModelsData$Outbound>;
};

/** @internal */
export const GetModelsResponseBody$outboundSchema: z.ZodType<
  GetModelsResponseBody$Outbound,
  z.ZodTypeDef,
  GetModelsResponseBody
> = z.object({
  data: z.array(z.lazy(() => GetModelsData$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsResponseBody$ {
  /** @deprecated use `GetModelsResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetModelsResponseBody$inboundSchema;
  /** @deprecated use `GetModelsResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetModelsResponseBody$outboundSchema;
  /** @deprecated use `GetModelsResponseBody$Outbound` instead. */
  export type Outbound = GetModelsResponseBody$Outbound;
}

export function getModelsResponseBodyToJSON(
  getModelsResponseBody: GetModelsResponseBody,
): string {
  return JSON.stringify(
    GetModelsResponseBody$outboundSchema.parse(getModelsResponseBody),
  );
}

export function getModelsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetModelsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetModelsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetModelsResponseBody' from JSON`,
  );
}

/** @internal */
export const GetModelsResponse$inboundSchema: z.ZodType<
  GetModelsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([z.lazy(() => GetModelsResponseBody$inboundSchema), z.string()]);

/** @internal */
export type GetModelsResponse$Outbound =
  | GetModelsResponseBody$Outbound
  | string;

/** @internal */
export const GetModelsResponse$outboundSchema: z.ZodType<
  GetModelsResponse$Outbound,
  z.ZodTypeDef,
  GetModelsResponse
> = z.union([z.lazy(() => GetModelsResponseBody$outboundSchema), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsResponse$ {
  /** @deprecated use `GetModelsResponse$inboundSchema` instead. */
  export const inboundSchema = GetModelsResponse$inboundSchema;
  /** @deprecated use `GetModelsResponse$outboundSchema` instead. */
  export const outboundSchema = GetModelsResponse$outboundSchema;
  /** @deprecated use `GetModelsResponse$Outbound` instead. */
  export type Outbound = GetModelsResponse$Outbound;
}

export function getModelsResponseToJSON(
  getModelsResponse: GetModelsResponse,
): string {
  return JSON.stringify(
    GetModelsResponse$outboundSchema.parse(getModelsResponse),
  );
}

export function getModelsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetModelsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetModelsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetModelsResponse' from JSON`,
  );
}
