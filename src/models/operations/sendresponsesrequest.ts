/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { EventStream } from "../../lib/event-streams.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

/**
 * Successful response
 */
export type SendResponsesRequestResponseBody = {
  /**
   * Streaming chunk from Responses API
   */
  data: models.ResponsesStreamChunkUnion;
};

export type SendResponsesRequestResponse =
  | models.ResponsesNonStreamingResponse
  | EventStream<SendResponsesRequestResponseBody>;

/** @internal */
export const SendResponsesRequestResponseBody$inboundSchema: z.ZodType<
  SendResponsesRequestResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.string().transform((v, ctx) => {
    try {
      return JSON.parse(v);
    } catch (err) {
      ctx.addIssue({
        code: z.ZodIssueCode.custom,
        message: `malformed json: ${err}`,
      });
      return z.NEVER;
    }
  }).pipe(models.ResponsesStreamChunkUnion$inboundSchema),
});

/** @internal */
export type SendResponsesRequestResponseBody$Outbound = {
  data: models.ResponsesStreamChunkUnion$Outbound;
};

/** @internal */
export const SendResponsesRequestResponseBody$outboundSchema: z.ZodType<
  SendResponsesRequestResponseBody$Outbound,
  z.ZodTypeDef,
  SendResponsesRequestResponseBody
> = z.object({
  data: models.ResponsesStreamChunkUnion$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SendResponsesRequestResponseBody$ {
  /** @deprecated use `SendResponsesRequestResponseBody$inboundSchema` instead. */
  export const inboundSchema = SendResponsesRequestResponseBody$inboundSchema;
  /** @deprecated use `SendResponsesRequestResponseBody$outboundSchema` instead. */
  export const outboundSchema = SendResponsesRequestResponseBody$outboundSchema;
  /** @deprecated use `SendResponsesRequestResponseBody$Outbound` instead. */
  export type Outbound = SendResponsesRequestResponseBody$Outbound;
}

export function sendResponsesRequestResponseBodyToJSON(
  sendResponsesRequestResponseBody: SendResponsesRequestResponseBody,
): string {
  return JSON.stringify(
    SendResponsesRequestResponseBody$outboundSchema.parse(
      sendResponsesRequestResponseBody,
    ),
  );
}

export function sendResponsesRequestResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<SendResponsesRequestResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SendResponsesRequestResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SendResponsesRequestResponseBody' from JSON`,
  );
}

/** @internal */
export const SendResponsesRequestResponse$inboundSchema: z.ZodType<
  SendResponsesRequestResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.ResponsesNonStreamingResponse$inboundSchema,
  z
    .instanceof(ReadableStream<Uint8Array>)
    .transform(stream => {
      return new EventStream(stream, rawEvent => {
        if (rawEvent.data === "[DONE]") return { done: true };
        return {
          value: z.lazy(() => SendResponsesRequestResponseBody$inboundSchema)
            .parse(rawEvent),
        };
      });
    }),
]);

/** @internal */
export type SendResponsesRequestResponse$Outbound =
  | models.ResponsesNonStreamingResponse$Outbound
  | never;

/** @internal */
export const SendResponsesRequestResponse$outboundSchema: z.ZodType<
  SendResponsesRequestResponse$Outbound,
  z.ZodTypeDef,
  SendResponsesRequestResponse
> = z.union([models.ResponsesNonStreamingResponse$outboundSchema, z.never()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SendResponsesRequestResponse$ {
  /** @deprecated use `SendResponsesRequestResponse$inboundSchema` instead. */
  export const inboundSchema = SendResponsesRequestResponse$inboundSchema;
  /** @deprecated use `SendResponsesRequestResponse$outboundSchema` instead. */
  export const outboundSchema = SendResponsesRequestResponse$outboundSchema;
  /** @deprecated use `SendResponsesRequestResponse$Outbound` instead. */
  export type Outbound = SendResponsesRequestResponse$Outbound;
}

export function sendResponsesRequestResponseToJSON(
  sendResponsesRequestResponse: SendResponsesRequestResponse,
): string {
  return JSON.stringify(
    SendResponsesRequestResponse$outboundSchema.parse(
      sendResponsesRequestResponse,
    ),
  );
}

export function sendResponsesRequestResponseFromJSON(
  jsonString: string,
): SafeParseResult<SendResponsesRequestResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SendResponsesRequestResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SendResponsesRequestResponse' from JSON`,
  );
}
