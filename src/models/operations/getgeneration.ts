/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetGenerationRequest = {
  id: string;
};

/**
 * Type of API used for the generation
 */
export const ApiType = {
  Completions: "completions",
  Embeddings: "embeddings",
} as const;
/**
 * Type of API used for the generation
 */
export type ApiType = OpenEnum<typeof ApiType>;

/**
 * Generation data
 */
export type GetGenerationData = {
  /**
   * Unique identifier for the generation
   */
  id: string;
  /**
   * Upstream provider's identifier for this generation
   */
  upstreamId: string | null;
  /**
   * Total cost of the generation in USD
   */
  totalCost: number;
  /**
   * Discount applied due to caching
   */
  cacheDiscount: number | null;
  /**
   * Cost charged by the upstream provider
   */
  upstreamInferenceCost: number | null;
  /**
   * ISO 8601 timestamp of when the generation was created
   */
  createdAt: string;
  /**
   * Model used for the generation
   */
  model: string;
  /**
   * ID of the app that made the request
   */
  appId: number | null;
  /**
   * Whether the response was streamed
   */
  streamed: boolean | null;
  /**
   * Whether the generation was cancelled
   */
  cancelled: boolean | null;
  /**
   * Name of the provider that served the request
   */
  providerName: string | null;
  /**
   * Total latency in milliseconds
   */
  latency: number | null;
  /**
   * Moderation latency in milliseconds
   */
  moderationLatency: number | null;
  /**
   * Time taken for generation in milliseconds
   */
  generationTime: number | null;
  /**
   * Reason the generation finished
   */
  finishReason: string | null;
  /**
   * Number of tokens in the prompt
   */
  tokensPrompt: number | null;
  /**
   * Number of tokens in the completion
   */
  tokensCompletion: number | null;
  /**
   * Native prompt tokens as reported by provider
   */
  nativeTokensPrompt: number | null;
  /**
   * Native completion tokens as reported by provider
   */
  nativeTokensCompletion: number | null;
  /**
   * Native completion image tokens as reported by provider
   */
  nativeTokensCompletionImages: number | null;
  /**
   * Native reasoning tokens as reported by provider
   */
  nativeTokensReasoning: number | null;
  /**
   * Native cached tokens as reported by provider
   */
  nativeTokensCached: number | null;
  /**
   * Number of media items in the prompt
   */
  numMediaPrompt: number | null;
  /**
   * Number of audio inputs in the prompt
   */
  numInputAudioPrompt: number | null;
  /**
   * Number of media items in the completion
   */
  numMediaCompletion: number | null;
  /**
   * Number of search results included
   */
  numSearchResults: number | null;
  /**
   * Origin URL of the request
   */
  origin: string;
  /**
   * Usage amount in USD
   */
  usage: number;
  /**
   * Whether this used bring-your-own-key
   */
  isByok: boolean;
  /**
   * Native finish reason as reported by provider
   */
  nativeFinishReason: string | null;
  /**
   * External user identifier
   */
  externalUser: string | null;
  /**
   * Type of API used for the generation
   */
  apiType: ApiType | null;
};

/**
 * Generation response
 */
export type GetGenerationResponse = {
  /**
   * Generation data
   */
  data: GetGenerationData;
};

/** @internal */
export const GetGenerationRequest$inboundSchema: z.ZodType<
  GetGenerationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type GetGenerationRequest$Outbound = {
  id: string;
};

/** @internal */
export const GetGenerationRequest$outboundSchema: z.ZodType<
  GetGenerationRequest$Outbound,
  z.ZodTypeDef,
  GetGenerationRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetGenerationRequest$ {
  /** @deprecated use `GetGenerationRequest$inboundSchema` instead. */
  export const inboundSchema = GetGenerationRequest$inboundSchema;
  /** @deprecated use `GetGenerationRequest$outboundSchema` instead. */
  export const outboundSchema = GetGenerationRequest$outboundSchema;
  /** @deprecated use `GetGenerationRequest$Outbound` instead. */
  export type Outbound = GetGenerationRequest$Outbound;
}

export function getGenerationRequestToJSON(
  getGenerationRequest: GetGenerationRequest,
): string {
  return JSON.stringify(
    GetGenerationRequest$outboundSchema.parse(getGenerationRequest),
  );
}

export function getGenerationRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetGenerationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetGenerationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetGenerationRequest' from JSON`,
  );
}

/** @internal */
export const ApiType$inboundSchema: z.ZodType<ApiType, z.ZodTypeDef, unknown> =
  z
    .union([
      z.nativeEnum(ApiType),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const ApiType$outboundSchema: z.ZodType<ApiType, z.ZodTypeDef, ApiType> =
  z.union([
    z.nativeEnum(ApiType),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiType$ {
  /** @deprecated use `ApiType$inboundSchema` instead. */
  export const inboundSchema = ApiType$inboundSchema;
  /** @deprecated use `ApiType$outboundSchema` instead. */
  export const outboundSchema = ApiType$outboundSchema;
}

/** @internal */
export const GetGenerationData$inboundSchema: z.ZodType<
  GetGenerationData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  upstream_id: z.nullable(z.string()),
  total_cost: z.number(),
  cache_discount: z.nullable(z.number()),
  upstream_inference_cost: z.nullable(z.number()),
  created_at: z.string(),
  model: z.string(),
  app_id: z.nullable(z.number()),
  streamed: z.nullable(z.boolean()),
  cancelled: z.nullable(z.boolean()),
  provider_name: z.nullable(z.string()),
  latency: z.nullable(z.number()),
  moderation_latency: z.nullable(z.number()),
  generation_time: z.nullable(z.number()),
  finish_reason: z.nullable(z.string()),
  tokens_prompt: z.nullable(z.number()),
  tokens_completion: z.nullable(z.number()),
  native_tokens_prompt: z.nullable(z.number()),
  native_tokens_completion: z.nullable(z.number()),
  native_tokens_completion_images: z.nullable(z.number()),
  native_tokens_reasoning: z.nullable(z.number()),
  native_tokens_cached: z.nullable(z.number()),
  num_media_prompt: z.nullable(z.number()),
  num_input_audio_prompt: z.nullable(z.number()),
  num_media_completion: z.nullable(z.number()),
  num_search_results: z.nullable(z.number()),
  origin: z.string(),
  usage: z.number(),
  is_byok: z.boolean(),
  native_finish_reason: z.nullable(z.string()),
  external_user: z.nullable(z.string()),
  api_type: z.nullable(ApiType$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "upstream_id": "upstreamId",
    "total_cost": "totalCost",
    "cache_discount": "cacheDiscount",
    "upstream_inference_cost": "upstreamInferenceCost",
    "created_at": "createdAt",
    "app_id": "appId",
    "provider_name": "providerName",
    "moderation_latency": "moderationLatency",
    "generation_time": "generationTime",
    "finish_reason": "finishReason",
    "tokens_prompt": "tokensPrompt",
    "tokens_completion": "tokensCompletion",
    "native_tokens_prompt": "nativeTokensPrompt",
    "native_tokens_completion": "nativeTokensCompletion",
    "native_tokens_completion_images": "nativeTokensCompletionImages",
    "native_tokens_reasoning": "nativeTokensReasoning",
    "native_tokens_cached": "nativeTokensCached",
    "num_media_prompt": "numMediaPrompt",
    "num_input_audio_prompt": "numInputAudioPrompt",
    "num_media_completion": "numMediaCompletion",
    "num_search_results": "numSearchResults",
    "is_byok": "isByok",
    "native_finish_reason": "nativeFinishReason",
    "external_user": "externalUser",
    "api_type": "apiType",
  });
});

/** @internal */
export type GetGenerationData$Outbound = {
  id: string;
  upstream_id: string | null;
  total_cost: number;
  cache_discount: number | null;
  upstream_inference_cost: number | null;
  created_at: string;
  model: string;
  app_id: number | null;
  streamed: boolean | null;
  cancelled: boolean | null;
  provider_name: string | null;
  latency: number | null;
  moderation_latency: number | null;
  generation_time: number | null;
  finish_reason: string | null;
  tokens_prompt: number | null;
  tokens_completion: number | null;
  native_tokens_prompt: number | null;
  native_tokens_completion: number | null;
  native_tokens_completion_images: number | null;
  native_tokens_reasoning: number | null;
  native_tokens_cached: number | null;
  num_media_prompt: number | null;
  num_input_audio_prompt: number | null;
  num_media_completion: number | null;
  num_search_results: number | null;
  origin: string;
  usage: number;
  is_byok: boolean;
  native_finish_reason: string | null;
  external_user: string | null;
  api_type: string | null;
};

/** @internal */
export const GetGenerationData$outboundSchema: z.ZodType<
  GetGenerationData$Outbound,
  z.ZodTypeDef,
  GetGenerationData
> = z.object({
  id: z.string(),
  upstreamId: z.nullable(z.string()),
  totalCost: z.number(),
  cacheDiscount: z.nullable(z.number()),
  upstreamInferenceCost: z.nullable(z.number()),
  createdAt: z.string(),
  model: z.string(),
  appId: z.nullable(z.number()),
  streamed: z.nullable(z.boolean()),
  cancelled: z.nullable(z.boolean()),
  providerName: z.nullable(z.string()),
  latency: z.nullable(z.number()),
  moderationLatency: z.nullable(z.number()),
  generationTime: z.nullable(z.number()),
  finishReason: z.nullable(z.string()),
  tokensPrompt: z.nullable(z.number()),
  tokensCompletion: z.nullable(z.number()),
  nativeTokensPrompt: z.nullable(z.number()),
  nativeTokensCompletion: z.nullable(z.number()),
  nativeTokensCompletionImages: z.nullable(z.number()),
  nativeTokensReasoning: z.nullable(z.number()),
  nativeTokensCached: z.nullable(z.number()),
  numMediaPrompt: z.nullable(z.number()),
  numInputAudioPrompt: z.nullable(z.number()),
  numMediaCompletion: z.nullable(z.number()),
  numSearchResults: z.nullable(z.number()),
  origin: z.string(),
  usage: z.number(),
  isByok: z.boolean(),
  nativeFinishReason: z.nullable(z.string()),
  externalUser: z.nullable(z.string()),
  apiType: z.nullable(ApiType$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    upstreamId: "upstream_id",
    totalCost: "total_cost",
    cacheDiscount: "cache_discount",
    upstreamInferenceCost: "upstream_inference_cost",
    createdAt: "created_at",
    appId: "app_id",
    providerName: "provider_name",
    moderationLatency: "moderation_latency",
    generationTime: "generation_time",
    finishReason: "finish_reason",
    tokensPrompt: "tokens_prompt",
    tokensCompletion: "tokens_completion",
    nativeTokensPrompt: "native_tokens_prompt",
    nativeTokensCompletion: "native_tokens_completion",
    nativeTokensCompletionImages: "native_tokens_completion_images",
    nativeTokensReasoning: "native_tokens_reasoning",
    nativeTokensCached: "native_tokens_cached",
    numMediaPrompt: "num_media_prompt",
    numInputAudioPrompt: "num_input_audio_prompt",
    numMediaCompletion: "num_media_completion",
    numSearchResults: "num_search_results",
    isByok: "is_byok",
    nativeFinishReason: "native_finish_reason",
    externalUser: "external_user",
    apiType: "api_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetGenerationData$ {
  /** @deprecated use `GetGenerationData$inboundSchema` instead. */
  export const inboundSchema = GetGenerationData$inboundSchema;
  /** @deprecated use `GetGenerationData$outboundSchema` instead. */
  export const outboundSchema = GetGenerationData$outboundSchema;
  /** @deprecated use `GetGenerationData$Outbound` instead. */
  export type Outbound = GetGenerationData$Outbound;
}

export function getGenerationDataToJSON(
  getGenerationData: GetGenerationData,
): string {
  return JSON.stringify(
    GetGenerationData$outboundSchema.parse(getGenerationData),
  );
}

export function getGenerationDataFromJSON(
  jsonString: string,
): SafeParseResult<GetGenerationData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetGenerationData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetGenerationData' from JSON`,
  );
}

/** @internal */
export const GetGenerationResponse$inboundSchema: z.ZodType<
  GetGenerationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => GetGenerationData$inboundSchema),
});

/** @internal */
export type GetGenerationResponse$Outbound = {
  data: GetGenerationData$Outbound;
};

/** @internal */
export const GetGenerationResponse$outboundSchema: z.ZodType<
  GetGenerationResponse$Outbound,
  z.ZodTypeDef,
  GetGenerationResponse
> = z.object({
  data: z.lazy(() => GetGenerationData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetGenerationResponse$ {
  /** @deprecated use `GetGenerationResponse$inboundSchema` instead. */
  export const inboundSchema = GetGenerationResponse$inboundSchema;
  /** @deprecated use `GetGenerationResponse$outboundSchema` instead. */
  export const outboundSchema = GetGenerationResponse$outboundSchema;
  /** @deprecated use `GetGenerationResponse$Outbound` instead. */
  export type Outbound = GetGenerationResponse$Outbound;
}

export function getGenerationResponseToJSON(
  getGenerationResponse: GetGenerationResponse,
): string {
  return JSON.stringify(
    GetGenerationResponse$outboundSchema.parse(getGenerationResponse),
  );
}

export function getGenerationResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetGenerationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetGenerationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetGenerationResponse' from JSON`,
  );
}
