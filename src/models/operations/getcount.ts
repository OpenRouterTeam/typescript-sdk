/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Model count data
 */
export type GetCountData = {
  /**
   * Total number of available models
   */
  count: number;
};

/**
 * Returns the total count of available models
 */
export type GetCountResponse = {
  /**
   * Model count data
   */
  data: GetCountData;
};

/** @internal */
export const GetCountData$inboundSchema: z.ZodType<
  GetCountData,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number(),
});

/** @internal */
export type GetCountData$Outbound = {
  count: number;
};

/** @internal */
export const GetCountData$outboundSchema: z.ZodType<
  GetCountData$Outbound,
  z.ZodTypeDef,
  GetCountData
> = z.object({
  count: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCountData$ {
  /** @deprecated use `GetCountData$inboundSchema` instead. */
  export const inboundSchema = GetCountData$inboundSchema;
  /** @deprecated use `GetCountData$outboundSchema` instead. */
  export const outboundSchema = GetCountData$outboundSchema;
  /** @deprecated use `GetCountData$Outbound` instead. */
  export type Outbound = GetCountData$Outbound;
}

export function getCountDataToJSON(getCountData: GetCountData): string {
  return JSON.stringify(GetCountData$outboundSchema.parse(getCountData));
}

export function getCountDataFromJSON(
  jsonString: string,
): SafeParseResult<GetCountData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCountData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCountData' from JSON`,
  );
}

/** @internal */
export const GetCountResponse$inboundSchema: z.ZodType<
  GetCountResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => GetCountData$inboundSchema),
});

/** @internal */
export type GetCountResponse$Outbound = {
  data: GetCountData$Outbound;
};

/** @internal */
export const GetCountResponse$outboundSchema: z.ZodType<
  GetCountResponse$Outbound,
  z.ZodTypeDef,
  GetCountResponse
> = z.object({
  data: z.lazy(() => GetCountData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCountResponse$ {
  /** @deprecated use `GetCountResponse$inboundSchema` instead. */
  export const inboundSchema = GetCountResponse$inboundSchema;
  /** @deprecated use `GetCountResponse$outboundSchema` instead. */
  export const outboundSchema = GetCountResponse$outboundSchema;
  /** @deprecated use `GetCountResponse$Outbound` instead. */
  export type Outbound = GetCountResponse$Outbound;
}

export function getCountResponseToJSON(
  getCountResponse: GetCountResponse,
): string {
  return JSON.stringify(
    GetCountResponse$outboundSchema.parse(getCountResponse),
  );
}

export function getCountResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetCountResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCountResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCountResponse' from JSON`,
  );
}
