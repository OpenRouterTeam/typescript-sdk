/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { EventStream } from "../../lib/event-streams.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type CreateChatCompletionResponse =
  | models.ChatCompletion
  | EventStream<models.ChatCompletionChunkWrapper>;

/** @internal */
export const CreateChatCompletionResponse$inboundSchema: z.ZodType<
  CreateChatCompletionResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.ChatCompletion$inboundSchema,
  z.instanceof(ReadableStream<Uint8Array>).transform(stream => {
    return new EventStream(stream, rawEvent => {
      if (rawEvent.data === "[DONE]") return { done: true };
      return {
        value: models.ChatCompletionChunkWrapper$inboundSchema.parse(rawEvent),
      };
    });
  }),
]);

/** @internal */
export type CreateChatCompletionResponse$Outbound =
  | models.ChatCompletion$Outbound
  | never;

/** @internal */
export const CreateChatCompletionResponse$outboundSchema: z.ZodType<
  CreateChatCompletionResponse$Outbound,
  z.ZodTypeDef,
  CreateChatCompletionResponse
> = z.union([models.ChatCompletion$outboundSchema, z.never()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChatCompletionResponse$ {
  /** @deprecated use `CreateChatCompletionResponse$inboundSchema` instead. */
  export const inboundSchema = CreateChatCompletionResponse$inboundSchema;
  /** @deprecated use `CreateChatCompletionResponse$outboundSchema` instead. */
  export const outboundSchema = CreateChatCompletionResponse$outboundSchema;
  /** @deprecated use `CreateChatCompletionResponse$Outbound` instead. */
  export type Outbound = CreateChatCompletionResponse$Outbound;
}

export function createChatCompletionResponseToJSON(
  createChatCompletionResponse: CreateChatCompletionResponse,
): string {
  return JSON.stringify(
    CreateChatCompletionResponse$outboundSchema.parse(
      createChatCompletionResponse,
    ),
  );
}

export function createChatCompletionResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateChatCompletionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateChatCompletionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateChatCompletionResponse' from JSON`,
  );
}
