/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteRequest = {
  hash: string;
};

/**
 * API key deleted successfully
 */
export type DeleteResponse = {
  /**
   * Confirmation that the API key was deleted
   */
  deleted: boolean;
};

/** @internal */
export const DeleteRequest$inboundSchema: z.ZodType<
  DeleteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  hash: z.string(),
});

/** @internal */
export type DeleteRequest$Outbound = {
  hash: string;
};

/** @internal */
export const DeleteRequest$outboundSchema: z.ZodType<
  DeleteRequest$Outbound,
  z.ZodTypeDef,
  DeleteRequest
> = z.object({
  hash: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteRequest$ {
  /** @deprecated use `DeleteRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteRequest$inboundSchema;
  /** @deprecated use `DeleteRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteRequest$outboundSchema;
  /** @deprecated use `DeleteRequest$Outbound` instead. */
  export type Outbound = DeleteRequest$Outbound;
}

export function deleteRequestToJSON(deleteRequest: DeleteRequest): string {
  return JSON.stringify(DeleteRequest$outboundSchema.parse(deleteRequest));
}

export function deleteRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteRequest' from JSON`,
  );
}

/** @internal */
export const DeleteResponse$inboundSchema: z.ZodType<
  DeleteResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  deleted: z.boolean(),
});

/** @internal */
export type DeleteResponse$Outbound = {
  deleted: boolean;
};

/** @internal */
export const DeleteResponse$outboundSchema: z.ZodType<
  DeleteResponse$Outbound,
  z.ZodTypeDef,
  DeleteResponse
> = z.object({
  deleted: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteResponse$ {
  /** @deprecated use `DeleteResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteResponse$inboundSchema;
  /** @deprecated use `DeleteResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteResponse$outboundSchema;
  /** @deprecated use `DeleteResponse$Outbound` instead. */
  export type Outbound = DeleteResponse$Outbound;
}

export function deleteResponseToJSON(deleteResponse: DeleteResponse): string {
  return JSON.stringify(DeleteResponse$outboundSchema.parse(deleteResponse));
}

export function deleteResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteResponse' from JSON`,
  );
}
