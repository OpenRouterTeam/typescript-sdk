/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The method used to generate the code challenge
 */
export const CreateAuthorizationCodeCodeChallengeMethod = {
  S256: "S256",
  Plain: "plain",
} as const;
/**
 * The method used to generate the code challenge
 */
export type CreateAuthorizationCodeCodeChallengeMethod = OpenEnum<
  typeof CreateAuthorizationCodeCodeChallengeMethod
>;

export type CreateAuthorizationCodeRequest = {
  /**
   * The callback URL to redirect to after authorization. Note, only https URLs on ports 443 and 3000 are allowed.
   */
  callbackUrl: string;
  /**
   * PKCE code challenge for enhanced security
   */
  codeChallenge?: string | undefined;
  /**
   * The method used to generate the code challenge
   */
  codeChallengeMethod?: CreateAuthorizationCodeCodeChallengeMethod | undefined;
  /**
   * Credit limit for the API key to be created
   */
  limit?: number | undefined;
};

/**
 * Auth code data
 */
export type CreateAuthorizationCodeData = {
  /**
   * The authorization code ID to use in the exchange request
   */
  id: string;
  /**
   * The application ID associated with this auth code
   */
  appId: number;
  /**
   * ISO 8601 timestamp of when the auth code was created
   */
  createdAt: string;
};

/**
 * Successfully created authorization code
 */
export type CreateAuthorizationCodeResponse = {
  /**
   * Auth code data
   */
  data: CreateAuthorizationCodeData;
};

/** @internal */
export const CreateAuthorizationCodeCodeChallengeMethod$inboundSchema:
  z.ZodType<CreateAuthorizationCodeCodeChallengeMethod, z.ZodTypeDef, unknown> =
    z
      .union([
        z.nativeEnum(CreateAuthorizationCodeCodeChallengeMethod),
        z.string().transform(catchUnrecognizedEnum),
      ]);

/** @internal */
export const CreateAuthorizationCodeCodeChallengeMethod$outboundSchema:
  z.ZodType<
    CreateAuthorizationCodeCodeChallengeMethod,
    z.ZodTypeDef,
    CreateAuthorizationCodeCodeChallengeMethod
  > = z.union([
    z.nativeEnum(CreateAuthorizationCodeCodeChallengeMethod),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAuthorizationCodeCodeChallengeMethod$ {
  /** @deprecated use `CreateAuthorizationCodeCodeChallengeMethod$inboundSchema` instead. */
  export const inboundSchema =
    CreateAuthorizationCodeCodeChallengeMethod$inboundSchema;
  /** @deprecated use `CreateAuthorizationCodeCodeChallengeMethod$outboundSchema` instead. */
  export const outboundSchema =
    CreateAuthorizationCodeCodeChallengeMethod$outboundSchema;
}

/** @internal */
export const CreateAuthorizationCodeRequest$inboundSchema: z.ZodType<
  CreateAuthorizationCodeRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  callback_url: z.string(),
  code_challenge: z.string().optional(),
  code_challenge_method:
    CreateAuthorizationCodeCodeChallengeMethod$inboundSchema.optional(),
  limit: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "callback_url": "callbackUrl",
    "code_challenge": "codeChallenge",
    "code_challenge_method": "codeChallengeMethod",
  });
});

/** @internal */
export type CreateAuthorizationCodeRequest$Outbound = {
  callback_url: string;
  code_challenge?: string | undefined;
  code_challenge_method?: string | undefined;
  limit?: number | undefined;
};

/** @internal */
export const CreateAuthorizationCodeRequest$outboundSchema: z.ZodType<
  CreateAuthorizationCodeRequest$Outbound,
  z.ZodTypeDef,
  CreateAuthorizationCodeRequest
> = z.object({
  callbackUrl: z.string(),
  codeChallenge: z.string().optional(),
  codeChallengeMethod: CreateAuthorizationCodeCodeChallengeMethod$outboundSchema
    .optional(),
  limit: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    callbackUrl: "callback_url",
    codeChallenge: "code_challenge",
    codeChallengeMethod: "code_challenge_method",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAuthorizationCodeRequest$ {
  /** @deprecated use `CreateAuthorizationCodeRequest$inboundSchema` instead. */
  export const inboundSchema = CreateAuthorizationCodeRequest$inboundSchema;
  /** @deprecated use `CreateAuthorizationCodeRequest$outboundSchema` instead. */
  export const outboundSchema = CreateAuthorizationCodeRequest$outboundSchema;
  /** @deprecated use `CreateAuthorizationCodeRequest$Outbound` instead. */
  export type Outbound = CreateAuthorizationCodeRequest$Outbound;
}

export function createAuthorizationCodeRequestToJSON(
  createAuthorizationCodeRequest: CreateAuthorizationCodeRequest,
): string {
  return JSON.stringify(
    CreateAuthorizationCodeRequest$outboundSchema.parse(
      createAuthorizationCodeRequest,
    ),
  );
}

export function createAuthorizationCodeRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateAuthorizationCodeRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateAuthorizationCodeRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAuthorizationCodeRequest' from JSON`,
  );
}

/** @internal */
export const CreateAuthorizationCodeData$inboundSchema: z.ZodType<
  CreateAuthorizationCodeData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  app_id: z.number(),
  created_at: z.string(),
}).transform((v) => {
  return remap$(v, {
    "app_id": "appId",
    "created_at": "createdAt",
  });
});

/** @internal */
export type CreateAuthorizationCodeData$Outbound = {
  id: string;
  app_id: number;
  created_at: string;
};

/** @internal */
export const CreateAuthorizationCodeData$outboundSchema: z.ZodType<
  CreateAuthorizationCodeData$Outbound,
  z.ZodTypeDef,
  CreateAuthorizationCodeData
> = z.object({
  id: z.string(),
  appId: z.number(),
  createdAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    appId: "app_id",
    createdAt: "created_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAuthorizationCodeData$ {
  /** @deprecated use `CreateAuthorizationCodeData$inboundSchema` instead. */
  export const inboundSchema = CreateAuthorizationCodeData$inboundSchema;
  /** @deprecated use `CreateAuthorizationCodeData$outboundSchema` instead. */
  export const outboundSchema = CreateAuthorizationCodeData$outboundSchema;
  /** @deprecated use `CreateAuthorizationCodeData$Outbound` instead. */
  export type Outbound = CreateAuthorizationCodeData$Outbound;
}

export function createAuthorizationCodeDataToJSON(
  createAuthorizationCodeData: CreateAuthorizationCodeData,
): string {
  return JSON.stringify(
    CreateAuthorizationCodeData$outboundSchema.parse(
      createAuthorizationCodeData,
    ),
  );
}

export function createAuthorizationCodeDataFromJSON(
  jsonString: string,
): SafeParseResult<CreateAuthorizationCodeData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateAuthorizationCodeData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAuthorizationCodeData' from JSON`,
  );
}

/** @internal */
export const CreateAuthorizationCodeResponse$inboundSchema: z.ZodType<
  CreateAuthorizationCodeResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => CreateAuthorizationCodeData$inboundSchema),
});

/** @internal */
export type CreateAuthorizationCodeResponse$Outbound = {
  data: CreateAuthorizationCodeData$Outbound;
};

/** @internal */
export const CreateAuthorizationCodeResponse$outboundSchema: z.ZodType<
  CreateAuthorizationCodeResponse$Outbound,
  z.ZodTypeDef,
  CreateAuthorizationCodeResponse
> = z.object({
  data: z.lazy(() => CreateAuthorizationCodeData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAuthorizationCodeResponse$ {
  /** @deprecated use `CreateAuthorizationCodeResponse$inboundSchema` instead. */
  export const inboundSchema = CreateAuthorizationCodeResponse$inboundSchema;
  /** @deprecated use `CreateAuthorizationCodeResponse$outboundSchema` instead. */
  export const outboundSchema = CreateAuthorizationCodeResponse$outboundSchema;
  /** @deprecated use `CreateAuthorizationCodeResponse$Outbound` instead. */
  export type Outbound = CreateAuthorizationCodeResponse$Outbound;
}

export function createAuthorizationCodeResponseToJSON(
  createAuthorizationCodeResponse: CreateAuthorizationCodeResponse,
): string {
  return JSON.stringify(
    CreateAuthorizationCodeResponse$outboundSchema.parse(
      createAuthorizationCodeResponse,
    ),
  );
}

export function createAuthorizationCodeResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateAuthorizationCodeResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateAuthorizationCodeResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAuthorizationCodeResponse' from JSON`,
  );
}
