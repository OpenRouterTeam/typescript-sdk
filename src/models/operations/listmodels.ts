/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListModelsRequestRequest = {
  category?: string | undefined;
  supportedParameters?: string | undefined;
  useRss?: string | undefined;
  useRssChatLinks?: string | undefined;
};

export type ListModelsPrompt = number | string | any;

export type ListModelsCompletion = number | string | any;

export type ModelsListModelsRequest = number | string | any;

export type ListModelsImage = number | string | any;

export type ListModelsImageOutput = number | string | any;

export type ListModelsAudio = number | string | any;

export type ListModelsInputAudioCache = number | string | any;

export type ListModelsWebSearch = number | string | any;

export type ListModelsInternalReasoning = number | string | any;

export type ListModelsInputCacheRead = number | string | any;

export type ListModelsInputCacheWrite = number | string | any;

/**
 * Pricing information for the model
 */
export type ListModelsPricing = {
  prompt?: number | string | any | undefined;
  completion?: number | string | any | undefined;
  request?: number | string | any | undefined;
  image?: number | string | any | undefined;
  imageOutput?: number | string | any | undefined;
  audio?: number | string | any | undefined;
  inputAudioCache?: number | string | any | undefined;
  webSearch?: number | string | any | undefined;
  internalReasoning?: number | string | any | undefined;
  inputCacheRead?: number | string | any | undefined;
  inputCacheWrite?: number | string | any | undefined;
  discount?: number | undefined;
};

/**
 * Tokenizer type used by the model
 */
export const ListModelsTokenizer = {
  Router: "Router",
  Media: "Media",
  Other: "Other",
  Gpt: "GPT",
  Claude: "Claude",
  Gemini: "Gemini",
  Grok: "Grok",
  Cohere: "Cohere",
  Nova: "Nova",
  Qwen: "Qwen",
  Yi: "Yi",
  DeepSeek: "DeepSeek",
  Mistral: "Mistral",
  Llama2: "Llama2",
  Llama3: "Llama3",
  Llama4: "Llama4",
  PaLM: "PaLM",
  Rwkv: "RWKV",
  Qwen3: "Qwen3",
} as const;
/**
 * Tokenizer type used by the model
 */
export type ListModelsTokenizer = ClosedEnum<typeof ListModelsTokenizer>;

/**
 * Instruction format type
 */
export const ListModelsInstructType = {
  None: "none",
  Airoboros: "airoboros",
  Alpaca: "alpaca",
  AlpacaModif: "alpaca-modif",
  Chatml: "chatml",
  Claude: "claude",
  CodeLlama: "code-llama",
  Gemma: "gemma",
  Llama2: "llama2",
  Llama3: "llama3",
  Mistral: "mistral",
  Nemotron: "nemotron",
  Neural: "neural",
  Openchat: "openchat",
  Phi3: "phi3",
  Rwkv: "rwkv",
  Vicuna: "vicuna",
  Zephyr: "zephyr",
  DeepseekR1: "deepseek-r1",
  DeepseekV31: "deepseek-v3.1",
  Qwq: "qwq",
  Qwen3: "qwen3",
} as const;
/**
 * Instruction format type
 */
export type ListModelsInstructType = ClosedEnum<typeof ListModelsInstructType>;

export const ListModelsInputModality = {
  Text: "text",
  Image: "image",
  File: "file",
  Audio: "audio",
} as const;
export type ListModelsInputModality = ClosedEnum<
  typeof ListModelsInputModality
>;

export const ListModelsOutputModality = {
  Text: "text",
  Image: "image",
  Embeddings: "embeddings",
} as const;
export type ListModelsOutputModality = ClosedEnum<
  typeof ListModelsOutputModality
>;

/**
 * Model architecture information
 */
export type ListModelsArchitecture = {
  /**
   * Tokenizer type used by the model
   */
  tokenizer?: ListModelsTokenizer | undefined;
  /**
   * Instruction format type
   */
  instructType?: ListModelsInstructType | null | undefined;
  /**
   * Primary modality of the model
   */
  modality: string | null;
  /**
   * Supported input modalities
   */
  inputModalities: Array<ListModelsInputModality>;
  /**
   * Supported output modalities
   */
  outputModalities: Array<ListModelsOutputModality>;
};

/**
 * Information about the top provider for this model
 */
export type ListModelsTopProvider = {
  /**
   * Context length from the top provider
   */
  contextLength?: number | null | undefined;
  /**
   * Maximum completion tokens from the top provider
   */
  maxCompletionTokens?: number | null | undefined;
  /**
   * Whether the top provider moderates content
   */
  isModerated: boolean;
};

/**
 * Per-request token limits
 */
export type ListModelsPerRequestLimits = {
  /**
   * Maximum prompt tokens per request
   */
  promptTokens?: any | undefined;
  /**
   * Maximum completion tokens per request
   */
  completionTokens?: any | undefined;
};

export const ListModelsSupportedParameter = {
  Temperature: "temperature",
  TopP: "top_p",
  TopK: "top_k",
  MinP: "min_p",
  TopA: "top_a",
  FrequencyPenalty: "frequency_penalty",
  PresencePenalty: "presence_penalty",
  RepetitionPenalty: "repetition_penalty",
  MaxTokens: "max_tokens",
  LogitBias: "logit_bias",
  Logprobs: "logprobs",
  TopLogprobs: "top_logprobs",
  Seed: "seed",
  ResponseFormat: "response_format",
  StructuredOutputs: "structured_outputs",
  Stop: "stop",
  Tools: "tools",
  ToolChoice: "tool_choice",
  ParallelToolCalls: "parallel_tool_calls",
  IncludeReasoning: "include_reasoning",
  Reasoning: "reasoning",
  WebSearchOptions: "web_search_options",
  Verbosity: "verbosity",
} as const;
export type ListModelsSupportedParameter = ClosedEnum<
  typeof ListModelsSupportedParameter
>;

/**
 * Default parameters for this model
 */
export type ListModelsDefaultParameters = {
  temperature?: number | null | undefined;
  topP?: number | null | undefined;
  frequencyPenalty?: number | null | undefined;
};

export type ListModelsData = {
  /**
   * Unique identifier for the model
   */
  id: string;
  /**
   * Canonical slug for the model
   */
  canonicalSlug: string;
  /**
   * Hugging Face model identifier, if applicable
   */
  huggingFaceId?: string | null | undefined;
  /**
   * Display name of the model
   */
  name: string;
  /**
   * Unix timestamp of when the model was created
   */
  created: number;
  /**
   * Description of the model
   */
  description?: string | undefined;
  /**
   * Pricing information for the model
   */
  pricing: ListModelsPricing;
  /**
   * Maximum context length in tokens
   */
  contextLength: number | null;
  /**
   * Model architecture information
   */
  architecture: ListModelsArchitecture;
  /**
   * Information about the top provider for this model
   */
  topProvider: ListModelsTopProvider;
  /**
   * Per-request token limits
   */
  perRequestLimits: ListModelsPerRequestLimits | null;
  /**
   * List of supported parameters for this model
   */
  supportedParameters: Array<ListModelsSupportedParameter>;
  /**
   * Default parameters for this model
   */
  defaultParameters: ListModelsDefaultParameters | null;
};

/**
 * Returns a list of models or RSS feed
 */
export type ListModelsResponseBody = {
  /**
   * List of available models
   */
  data: Array<ListModelsData>;
};

export type ListModelsResponse = ListModelsResponseBody | string;

/** @internal */
export const ListModelsRequestRequest$inboundSchema: z.ZodType<
  ListModelsRequestRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  category: z.string().optional(),
  supported_parameters: z.string().optional(),
  use_rss: z.string().optional(),
  use_rss_chat_links: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "supported_parameters": "supportedParameters",
    "use_rss": "useRss",
    "use_rss_chat_links": "useRssChatLinks",
  });
});

/** @internal */
export type ListModelsRequestRequest$Outbound = {
  category?: string | undefined;
  supported_parameters?: string | undefined;
  use_rss?: string | undefined;
  use_rss_chat_links?: string | undefined;
};

/** @internal */
export const ListModelsRequestRequest$outboundSchema: z.ZodType<
  ListModelsRequestRequest$Outbound,
  z.ZodTypeDef,
  ListModelsRequestRequest
> = z.object({
  category: z.string().optional(),
  supportedParameters: z.string().optional(),
  useRss: z.string().optional(),
  useRssChatLinks: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    supportedParameters: "supported_parameters",
    useRss: "use_rss",
    useRssChatLinks: "use_rss_chat_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListModelsRequestRequest$ {
  /** @deprecated use `ListModelsRequestRequest$inboundSchema` instead. */
  export const inboundSchema = ListModelsRequestRequest$inboundSchema;
  /** @deprecated use `ListModelsRequestRequest$outboundSchema` instead. */
  export const outboundSchema = ListModelsRequestRequest$outboundSchema;
  /** @deprecated use `ListModelsRequestRequest$Outbound` instead. */
  export type Outbound = ListModelsRequestRequest$Outbound;
}

export function listModelsRequestRequestToJSON(
  listModelsRequestRequest: ListModelsRequestRequest,
): string {
  return JSON.stringify(
    ListModelsRequestRequest$outboundSchema.parse(listModelsRequestRequest),
  );
}

export function listModelsRequestRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListModelsRequestRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListModelsRequestRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListModelsRequestRequest' from JSON`,
  );
}

/** @internal */
export const ListModelsPrompt$inboundSchema: z.ZodType<
  ListModelsPrompt,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type ListModelsPrompt$Outbound = number | string | any;

/** @internal */
export const ListModelsPrompt$outboundSchema: z.ZodType<
  ListModelsPrompt$Outbound,
  z.ZodTypeDef,
  ListModelsPrompt
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListModelsPrompt$ {
  /** @deprecated use `ListModelsPrompt$inboundSchema` instead. */
  export const inboundSchema = ListModelsPrompt$inboundSchema;
  /** @deprecated use `ListModelsPrompt$outboundSchema` instead. */
  export const outboundSchema = ListModelsPrompt$outboundSchema;
  /** @deprecated use `ListModelsPrompt$Outbound` instead. */
  export type Outbound = ListModelsPrompt$Outbound;
}

export function listModelsPromptToJSON(
  listModelsPrompt: ListModelsPrompt,
): string {
  return JSON.stringify(
    ListModelsPrompt$outboundSchema.parse(listModelsPrompt),
  );
}

export function listModelsPromptFromJSON(
  jsonString: string,
): SafeParseResult<ListModelsPrompt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListModelsPrompt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListModelsPrompt' from JSON`,
  );
}

/** @internal */
export const ListModelsCompletion$inboundSchema: z.ZodType<
  ListModelsCompletion,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type ListModelsCompletion$Outbound = number | string | any;

/** @internal */
export const ListModelsCompletion$outboundSchema: z.ZodType<
  ListModelsCompletion$Outbound,
  z.ZodTypeDef,
  ListModelsCompletion
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListModelsCompletion$ {
  /** @deprecated use `ListModelsCompletion$inboundSchema` instead. */
  export const inboundSchema = ListModelsCompletion$inboundSchema;
  /** @deprecated use `ListModelsCompletion$outboundSchema` instead. */
  export const outboundSchema = ListModelsCompletion$outboundSchema;
  /** @deprecated use `ListModelsCompletion$Outbound` instead. */
  export type Outbound = ListModelsCompletion$Outbound;
}

export function listModelsCompletionToJSON(
  listModelsCompletion: ListModelsCompletion,
): string {
  return JSON.stringify(
    ListModelsCompletion$outboundSchema.parse(listModelsCompletion),
  );
}

export function listModelsCompletionFromJSON(
  jsonString: string,
): SafeParseResult<ListModelsCompletion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListModelsCompletion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListModelsCompletion' from JSON`,
  );
}

/** @internal */
export const ModelsListModelsRequest$inboundSchema: z.ZodType<
  ModelsListModelsRequest,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type ModelsListModelsRequest$Outbound = number | string | any;

/** @internal */
export const ModelsListModelsRequest$outboundSchema: z.ZodType<
  ModelsListModelsRequest$Outbound,
  z.ZodTypeDef,
  ModelsListModelsRequest
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModelsListModelsRequest$ {
  /** @deprecated use `ModelsListModelsRequest$inboundSchema` instead. */
  export const inboundSchema = ModelsListModelsRequest$inboundSchema;
  /** @deprecated use `ModelsListModelsRequest$outboundSchema` instead. */
  export const outboundSchema = ModelsListModelsRequest$outboundSchema;
  /** @deprecated use `ModelsListModelsRequest$Outbound` instead. */
  export type Outbound = ModelsListModelsRequest$Outbound;
}

export function modelsListModelsRequestToJSON(
  modelsListModelsRequest: ModelsListModelsRequest,
): string {
  return JSON.stringify(
    ModelsListModelsRequest$outboundSchema.parse(modelsListModelsRequest),
  );
}

export function modelsListModelsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ModelsListModelsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ModelsListModelsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ModelsListModelsRequest' from JSON`,
  );
}

/** @internal */
export const ListModelsImage$inboundSchema: z.ZodType<
  ListModelsImage,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type ListModelsImage$Outbound = number | string | any;

/** @internal */
export const ListModelsImage$outboundSchema: z.ZodType<
  ListModelsImage$Outbound,
  z.ZodTypeDef,
  ListModelsImage
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListModelsImage$ {
  /** @deprecated use `ListModelsImage$inboundSchema` instead. */
  export const inboundSchema = ListModelsImage$inboundSchema;
  /** @deprecated use `ListModelsImage$outboundSchema` instead. */
  export const outboundSchema = ListModelsImage$outboundSchema;
  /** @deprecated use `ListModelsImage$Outbound` instead. */
  export type Outbound = ListModelsImage$Outbound;
}

export function listModelsImageToJSON(
  listModelsImage: ListModelsImage,
): string {
  return JSON.stringify(ListModelsImage$outboundSchema.parse(listModelsImage));
}

export function listModelsImageFromJSON(
  jsonString: string,
): SafeParseResult<ListModelsImage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListModelsImage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListModelsImage' from JSON`,
  );
}

/** @internal */
export const ListModelsImageOutput$inboundSchema: z.ZodType<
  ListModelsImageOutput,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type ListModelsImageOutput$Outbound = number | string | any;

/** @internal */
export const ListModelsImageOutput$outboundSchema: z.ZodType<
  ListModelsImageOutput$Outbound,
  z.ZodTypeDef,
  ListModelsImageOutput
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListModelsImageOutput$ {
  /** @deprecated use `ListModelsImageOutput$inboundSchema` instead. */
  export const inboundSchema = ListModelsImageOutput$inboundSchema;
  /** @deprecated use `ListModelsImageOutput$outboundSchema` instead. */
  export const outboundSchema = ListModelsImageOutput$outboundSchema;
  /** @deprecated use `ListModelsImageOutput$Outbound` instead. */
  export type Outbound = ListModelsImageOutput$Outbound;
}

export function listModelsImageOutputToJSON(
  listModelsImageOutput: ListModelsImageOutput,
): string {
  return JSON.stringify(
    ListModelsImageOutput$outboundSchema.parse(listModelsImageOutput),
  );
}

export function listModelsImageOutputFromJSON(
  jsonString: string,
): SafeParseResult<ListModelsImageOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListModelsImageOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListModelsImageOutput' from JSON`,
  );
}

/** @internal */
export const ListModelsAudio$inboundSchema: z.ZodType<
  ListModelsAudio,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type ListModelsAudio$Outbound = number | string | any;

/** @internal */
export const ListModelsAudio$outboundSchema: z.ZodType<
  ListModelsAudio$Outbound,
  z.ZodTypeDef,
  ListModelsAudio
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListModelsAudio$ {
  /** @deprecated use `ListModelsAudio$inboundSchema` instead. */
  export const inboundSchema = ListModelsAudio$inboundSchema;
  /** @deprecated use `ListModelsAudio$outboundSchema` instead. */
  export const outboundSchema = ListModelsAudio$outboundSchema;
  /** @deprecated use `ListModelsAudio$Outbound` instead. */
  export type Outbound = ListModelsAudio$Outbound;
}

export function listModelsAudioToJSON(
  listModelsAudio: ListModelsAudio,
): string {
  return JSON.stringify(ListModelsAudio$outboundSchema.parse(listModelsAudio));
}

export function listModelsAudioFromJSON(
  jsonString: string,
): SafeParseResult<ListModelsAudio, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListModelsAudio$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListModelsAudio' from JSON`,
  );
}

/** @internal */
export const ListModelsInputAudioCache$inboundSchema: z.ZodType<
  ListModelsInputAudioCache,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type ListModelsInputAudioCache$Outbound = number | string | any;

/** @internal */
export const ListModelsInputAudioCache$outboundSchema: z.ZodType<
  ListModelsInputAudioCache$Outbound,
  z.ZodTypeDef,
  ListModelsInputAudioCache
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListModelsInputAudioCache$ {
  /** @deprecated use `ListModelsInputAudioCache$inboundSchema` instead. */
  export const inboundSchema = ListModelsInputAudioCache$inboundSchema;
  /** @deprecated use `ListModelsInputAudioCache$outboundSchema` instead. */
  export const outboundSchema = ListModelsInputAudioCache$outboundSchema;
  /** @deprecated use `ListModelsInputAudioCache$Outbound` instead. */
  export type Outbound = ListModelsInputAudioCache$Outbound;
}

export function listModelsInputAudioCacheToJSON(
  listModelsInputAudioCache: ListModelsInputAudioCache,
): string {
  return JSON.stringify(
    ListModelsInputAudioCache$outboundSchema.parse(listModelsInputAudioCache),
  );
}

export function listModelsInputAudioCacheFromJSON(
  jsonString: string,
): SafeParseResult<ListModelsInputAudioCache, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListModelsInputAudioCache$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListModelsInputAudioCache' from JSON`,
  );
}

/** @internal */
export const ListModelsWebSearch$inboundSchema: z.ZodType<
  ListModelsWebSearch,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type ListModelsWebSearch$Outbound = number | string | any;

/** @internal */
export const ListModelsWebSearch$outboundSchema: z.ZodType<
  ListModelsWebSearch$Outbound,
  z.ZodTypeDef,
  ListModelsWebSearch
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListModelsWebSearch$ {
  /** @deprecated use `ListModelsWebSearch$inboundSchema` instead. */
  export const inboundSchema = ListModelsWebSearch$inboundSchema;
  /** @deprecated use `ListModelsWebSearch$outboundSchema` instead. */
  export const outboundSchema = ListModelsWebSearch$outboundSchema;
  /** @deprecated use `ListModelsWebSearch$Outbound` instead. */
  export type Outbound = ListModelsWebSearch$Outbound;
}

export function listModelsWebSearchToJSON(
  listModelsWebSearch: ListModelsWebSearch,
): string {
  return JSON.stringify(
    ListModelsWebSearch$outboundSchema.parse(listModelsWebSearch),
  );
}

export function listModelsWebSearchFromJSON(
  jsonString: string,
): SafeParseResult<ListModelsWebSearch, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListModelsWebSearch$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListModelsWebSearch' from JSON`,
  );
}

/** @internal */
export const ListModelsInternalReasoning$inboundSchema: z.ZodType<
  ListModelsInternalReasoning,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type ListModelsInternalReasoning$Outbound = number | string | any;

/** @internal */
export const ListModelsInternalReasoning$outboundSchema: z.ZodType<
  ListModelsInternalReasoning$Outbound,
  z.ZodTypeDef,
  ListModelsInternalReasoning
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListModelsInternalReasoning$ {
  /** @deprecated use `ListModelsInternalReasoning$inboundSchema` instead. */
  export const inboundSchema = ListModelsInternalReasoning$inboundSchema;
  /** @deprecated use `ListModelsInternalReasoning$outboundSchema` instead. */
  export const outboundSchema = ListModelsInternalReasoning$outboundSchema;
  /** @deprecated use `ListModelsInternalReasoning$Outbound` instead. */
  export type Outbound = ListModelsInternalReasoning$Outbound;
}

export function listModelsInternalReasoningToJSON(
  listModelsInternalReasoning: ListModelsInternalReasoning,
): string {
  return JSON.stringify(
    ListModelsInternalReasoning$outboundSchema.parse(
      listModelsInternalReasoning,
    ),
  );
}

export function listModelsInternalReasoningFromJSON(
  jsonString: string,
): SafeParseResult<ListModelsInternalReasoning, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListModelsInternalReasoning$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListModelsInternalReasoning' from JSON`,
  );
}

/** @internal */
export const ListModelsInputCacheRead$inboundSchema: z.ZodType<
  ListModelsInputCacheRead,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type ListModelsInputCacheRead$Outbound = number | string | any;

/** @internal */
export const ListModelsInputCacheRead$outboundSchema: z.ZodType<
  ListModelsInputCacheRead$Outbound,
  z.ZodTypeDef,
  ListModelsInputCacheRead
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListModelsInputCacheRead$ {
  /** @deprecated use `ListModelsInputCacheRead$inboundSchema` instead. */
  export const inboundSchema = ListModelsInputCacheRead$inboundSchema;
  /** @deprecated use `ListModelsInputCacheRead$outboundSchema` instead. */
  export const outboundSchema = ListModelsInputCacheRead$outboundSchema;
  /** @deprecated use `ListModelsInputCacheRead$Outbound` instead. */
  export type Outbound = ListModelsInputCacheRead$Outbound;
}

export function listModelsInputCacheReadToJSON(
  listModelsInputCacheRead: ListModelsInputCacheRead,
): string {
  return JSON.stringify(
    ListModelsInputCacheRead$outboundSchema.parse(listModelsInputCacheRead),
  );
}

export function listModelsInputCacheReadFromJSON(
  jsonString: string,
): SafeParseResult<ListModelsInputCacheRead, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListModelsInputCacheRead$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListModelsInputCacheRead' from JSON`,
  );
}

/** @internal */
export const ListModelsInputCacheWrite$inboundSchema: z.ZodType<
  ListModelsInputCacheWrite,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type ListModelsInputCacheWrite$Outbound = number | string | any;

/** @internal */
export const ListModelsInputCacheWrite$outboundSchema: z.ZodType<
  ListModelsInputCacheWrite$Outbound,
  z.ZodTypeDef,
  ListModelsInputCacheWrite
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListModelsInputCacheWrite$ {
  /** @deprecated use `ListModelsInputCacheWrite$inboundSchema` instead. */
  export const inboundSchema = ListModelsInputCacheWrite$inboundSchema;
  /** @deprecated use `ListModelsInputCacheWrite$outboundSchema` instead. */
  export const outboundSchema = ListModelsInputCacheWrite$outboundSchema;
  /** @deprecated use `ListModelsInputCacheWrite$Outbound` instead. */
  export type Outbound = ListModelsInputCacheWrite$Outbound;
}

export function listModelsInputCacheWriteToJSON(
  listModelsInputCacheWrite: ListModelsInputCacheWrite,
): string {
  return JSON.stringify(
    ListModelsInputCacheWrite$outboundSchema.parse(listModelsInputCacheWrite),
  );
}

export function listModelsInputCacheWriteFromJSON(
  jsonString: string,
): SafeParseResult<ListModelsInputCacheWrite, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListModelsInputCacheWrite$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListModelsInputCacheWrite' from JSON`,
  );
}

/** @internal */
export const ListModelsPricing$inboundSchema: z.ZodType<
  ListModelsPricing,
  z.ZodTypeDef,
  unknown
> = z.object({
  prompt: z.union([z.number(), z.string(), z.any()]).optional(),
  completion: z.union([z.number(), z.string(), z.any()]).optional(),
  request: z.union([z.number(), z.string(), z.any()]).optional(),
  image: z.union([z.number(), z.string(), z.any()]).optional(),
  image_output: z.union([z.number(), z.string(), z.any()]).optional(),
  audio: z.union([z.number(), z.string(), z.any()]).optional(),
  input_audio_cache: z.union([z.number(), z.string(), z.any()]).optional(),
  web_search: z.union([z.number(), z.string(), z.any()]).optional(),
  internal_reasoning: z.union([z.number(), z.string(), z.any()]).optional(),
  input_cache_read: z.union([z.number(), z.string(), z.any()]).optional(),
  input_cache_write: z.union([z.number(), z.string(), z.any()]).optional(),
  discount: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "image_output": "imageOutput",
    "input_audio_cache": "inputAudioCache",
    "web_search": "webSearch",
    "internal_reasoning": "internalReasoning",
    "input_cache_read": "inputCacheRead",
    "input_cache_write": "inputCacheWrite",
  });
});

/** @internal */
export type ListModelsPricing$Outbound = {
  prompt?: number | string | any | undefined;
  completion?: number | string | any | undefined;
  request?: number | string | any | undefined;
  image?: number | string | any | undefined;
  image_output?: number | string | any | undefined;
  audio?: number | string | any | undefined;
  input_audio_cache?: number | string | any | undefined;
  web_search?: number | string | any | undefined;
  internal_reasoning?: number | string | any | undefined;
  input_cache_read?: number | string | any | undefined;
  input_cache_write?: number | string | any | undefined;
  discount?: number | undefined;
};

/** @internal */
export const ListModelsPricing$outboundSchema: z.ZodType<
  ListModelsPricing$Outbound,
  z.ZodTypeDef,
  ListModelsPricing
> = z.object({
  prompt: z.union([z.number(), z.string(), z.any()]).optional(),
  completion: z.union([z.number(), z.string(), z.any()]).optional(),
  request: z.union([z.number(), z.string(), z.any()]).optional(),
  image: z.union([z.number(), z.string(), z.any()]).optional(),
  imageOutput: z.union([z.number(), z.string(), z.any()]).optional(),
  audio: z.union([z.number(), z.string(), z.any()]).optional(),
  inputAudioCache: z.union([z.number(), z.string(), z.any()]).optional(),
  webSearch: z.union([z.number(), z.string(), z.any()]).optional(),
  internalReasoning: z.union([z.number(), z.string(), z.any()]).optional(),
  inputCacheRead: z.union([z.number(), z.string(), z.any()]).optional(),
  inputCacheWrite: z.union([z.number(), z.string(), z.any()]).optional(),
  discount: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    imageOutput: "image_output",
    inputAudioCache: "input_audio_cache",
    webSearch: "web_search",
    internalReasoning: "internal_reasoning",
    inputCacheRead: "input_cache_read",
    inputCacheWrite: "input_cache_write",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListModelsPricing$ {
  /** @deprecated use `ListModelsPricing$inboundSchema` instead. */
  export const inboundSchema = ListModelsPricing$inboundSchema;
  /** @deprecated use `ListModelsPricing$outboundSchema` instead. */
  export const outboundSchema = ListModelsPricing$outboundSchema;
  /** @deprecated use `ListModelsPricing$Outbound` instead. */
  export type Outbound = ListModelsPricing$Outbound;
}

export function listModelsPricingToJSON(
  listModelsPricing: ListModelsPricing,
): string {
  return JSON.stringify(
    ListModelsPricing$outboundSchema.parse(listModelsPricing),
  );
}

export function listModelsPricingFromJSON(
  jsonString: string,
): SafeParseResult<ListModelsPricing, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListModelsPricing$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListModelsPricing' from JSON`,
  );
}

/** @internal */
export const ListModelsTokenizer$inboundSchema: z.ZodNativeEnum<
  typeof ListModelsTokenizer
> = z.nativeEnum(ListModelsTokenizer);

/** @internal */
export const ListModelsTokenizer$outboundSchema: z.ZodNativeEnum<
  typeof ListModelsTokenizer
> = ListModelsTokenizer$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListModelsTokenizer$ {
  /** @deprecated use `ListModelsTokenizer$inboundSchema` instead. */
  export const inboundSchema = ListModelsTokenizer$inboundSchema;
  /** @deprecated use `ListModelsTokenizer$outboundSchema` instead. */
  export const outboundSchema = ListModelsTokenizer$outboundSchema;
}

/** @internal */
export const ListModelsInstructType$inboundSchema: z.ZodNativeEnum<
  typeof ListModelsInstructType
> = z.nativeEnum(ListModelsInstructType);

/** @internal */
export const ListModelsInstructType$outboundSchema: z.ZodNativeEnum<
  typeof ListModelsInstructType
> = ListModelsInstructType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListModelsInstructType$ {
  /** @deprecated use `ListModelsInstructType$inboundSchema` instead. */
  export const inboundSchema = ListModelsInstructType$inboundSchema;
  /** @deprecated use `ListModelsInstructType$outboundSchema` instead. */
  export const outboundSchema = ListModelsInstructType$outboundSchema;
}

/** @internal */
export const ListModelsInputModality$inboundSchema: z.ZodNativeEnum<
  typeof ListModelsInputModality
> = z.nativeEnum(ListModelsInputModality);

/** @internal */
export const ListModelsInputModality$outboundSchema: z.ZodNativeEnum<
  typeof ListModelsInputModality
> = ListModelsInputModality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListModelsInputModality$ {
  /** @deprecated use `ListModelsInputModality$inboundSchema` instead. */
  export const inboundSchema = ListModelsInputModality$inboundSchema;
  /** @deprecated use `ListModelsInputModality$outboundSchema` instead. */
  export const outboundSchema = ListModelsInputModality$outboundSchema;
}

/** @internal */
export const ListModelsOutputModality$inboundSchema: z.ZodNativeEnum<
  typeof ListModelsOutputModality
> = z.nativeEnum(ListModelsOutputModality);

/** @internal */
export const ListModelsOutputModality$outboundSchema: z.ZodNativeEnum<
  typeof ListModelsOutputModality
> = ListModelsOutputModality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListModelsOutputModality$ {
  /** @deprecated use `ListModelsOutputModality$inboundSchema` instead. */
  export const inboundSchema = ListModelsOutputModality$inboundSchema;
  /** @deprecated use `ListModelsOutputModality$outboundSchema` instead. */
  export const outboundSchema = ListModelsOutputModality$outboundSchema;
}

/** @internal */
export const ListModelsArchitecture$inboundSchema: z.ZodType<
  ListModelsArchitecture,
  z.ZodTypeDef,
  unknown
> = z.object({
  tokenizer: ListModelsTokenizer$inboundSchema.optional(),
  instruct_type: z.nullable(ListModelsInstructType$inboundSchema).optional(),
  modality: z.nullable(z.string()),
  input_modalities: z.array(ListModelsInputModality$inboundSchema),
  output_modalities: z.array(ListModelsOutputModality$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "instruct_type": "instructType",
    "input_modalities": "inputModalities",
    "output_modalities": "outputModalities",
  });
});

/** @internal */
export type ListModelsArchitecture$Outbound = {
  tokenizer?: string | undefined;
  instruct_type?: string | null | undefined;
  modality: string | null;
  input_modalities: Array<string>;
  output_modalities: Array<string>;
};

/** @internal */
export const ListModelsArchitecture$outboundSchema: z.ZodType<
  ListModelsArchitecture$Outbound,
  z.ZodTypeDef,
  ListModelsArchitecture
> = z.object({
  tokenizer: ListModelsTokenizer$outboundSchema.optional(),
  instructType: z.nullable(ListModelsInstructType$outboundSchema).optional(),
  modality: z.nullable(z.string()),
  inputModalities: z.array(ListModelsInputModality$outboundSchema),
  outputModalities: z.array(ListModelsOutputModality$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    instructType: "instruct_type",
    inputModalities: "input_modalities",
    outputModalities: "output_modalities",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListModelsArchitecture$ {
  /** @deprecated use `ListModelsArchitecture$inboundSchema` instead. */
  export const inboundSchema = ListModelsArchitecture$inboundSchema;
  /** @deprecated use `ListModelsArchitecture$outboundSchema` instead. */
  export const outboundSchema = ListModelsArchitecture$outboundSchema;
  /** @deprecated use `ListModelsArchitecture$Outbound` instead. */
  export type Outbound = ListModelsArchitecture$Outbound;
}

export function listModelsArchitectureToJSON(
  listModelsArchitecture: ListModelsArchitecture,
): string {
  return JSON.stringify(
    ListModelsArchitecture$outboundSchema.parse(listModelsArchitecture),
  );
}

export function listModelsArchitectureFromJSON(
  jsonString: string,
): SafeParseResult<ListModelsArchitecture, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListModelsArchitecture$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListModelsArchitecture' from JSON`,
  );
}

/** @internal */
export const ListModelsTopProvider$inboundSchema: z.ZodType<
  ListModelsTopProvider,
  z.ZodTypeDef,
  unknown
> = z.object({
  context_length: z.nullable(z.number()).optional(),
  max_completion_tokens: z.nullable(z.number()).optional(),
  is_moderated: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "context_length": "contextLength",
    "max_completion_tokens": "maxCompletionTokens",
    "is_moderated": "isModerated",
  });
});

/** @internal */
export type ListModelsTopProvider$Outbound = {
  context_length?: number | null | undefined;
  max_completion_tokens?: number | null | undefined;
  is_moderated: boolean;
};

/** @internal */
export const ListModelsTopProvider$outboundSchema: z.ZodType<
  ListModelsTopProvider$Outbound,
  z.ZodTypeDef,
  ListModelsTopProvider
> = z.object({
  contextLength: z.nullable(z.number()).optional(),
  maxCompletionTokens: z.nullable(z.number()).optional(),
  isModerated: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    contextLength: "context_length",
    maxCompletionTokens: "max_completion_tokens",
    isModerated: "is_moderated",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListModelsTopProvider$ {
  /** @deprecated use `ListModelsTopProvider$inboundSchema` instead. */
  export const inboundSchema = ListModelsTopProvider$inboundSchema;
  /** @deprecated use `ListModelsTopProvider$outboundSchema` instead. */
  export const outboundSchema = ListModelsTopProvider$outboundSchema;
  /** @deprecated use `ListModelsTopProvider$Outbound` instead. */
  export type Outbound = ListModelsTopProvider$Outbound;
}

export function listModelsTopProviderToJSON(
  listModelsTopProvider: ListModelsTopProvider,
): string {
  return JSON.stringify(
    ListModelsTopProvider$outboundSchema.parse(listModelsTopProvider),
  );
}

export function listModelsTopProviderFromJSON(
  jsonString: string,
): SafeParseResult<ListModelsTopProvider, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListModelsTopProvider$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListModelsTopProvider' from JSON`,
  );
}

/** @internal */
export const ListModelsPerRequestLimits$inboundSchema: z.ZodType<
  ListModelsPerRequestLimits,
  z.ZodTypeDef,
  unknown
> = z.object({
  prompt_tokens: z.any().optional(),
  completion_tokens: z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    "prompt_tokens": "promptTokens",
    "completion_tokens": "completionTokens",
  });
});

/** @internal */
export type ListModelsPerRequestLimits$Outbound = {
  prompt_tokens?: any | undefined;
  completion_tokens?: any | undefined;
};

/** @internal */
export const ListModelsPerRequestLimits$outboundSchema: z.ZodType<
  ListModelsPerRequestLimits$Outbound,
  z.ZodTypeDef,
  ListModelsPerRequestLimits
> = z.object({
  promptTokens: z.any().optional(),
  completionTokens: z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    promptTokens: "prompt_tokens",
    completionTokens: "completion_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListModelsPerRequestLimits$ {
  /** @deprecated use `ListModelsPerRequestLimits$inboundSchema` instead. */
  export const inboundSchema = ListModelsPerRequestLimits$inboundSchema;
  /** @deprecated use `ListModelsPerRequestLimits$outboundSchema` instead. */
  export const outboundSchema = ListModelsPerRequestLimits$outboundSchema;
  /** @deprecated use `ListModelsPerRequestLimits$Outbound` instead. */
  export type Outbound = ListModelsPerRequestLimits$Outbound;
}

export function listModelsPerRequestLimitsToJSON(
  listModelsPerRequestLimits: ListModelsPerRequestLimits,
): string {
  return JSON.stringify(
    ListModelsPerRequestLimits$outboundSchema.parse(listModelsPerRequestLimits),
  );
}

export function listModelsPerRequestLimitsFromJSON(
  jsonString: string,
): SafeParseResult<ListModelsPerRequestLimits, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListModelsPerRequestLimits$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListModelsPerRequestLimits' from JSON`,
  );
}

/** @internal */
export const ListModelsSupportedParameter$inboundSchema: z.ZodNativeEnum<
  typeof ListModelsSupportedParameter
> = z.nativeEnum(ListModelsSupportedParameter);

/** @internal */
export const ListModelsSupportedParameter$outboundSchema: z.ZodNativeEnum<
  typeof ListModelsSupportedParameter
> = ListModelsSupportedParameter$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListModelsSupportedParameter$ {
  /** @deprecated use `ListModelsSupportedParameter$inboundSchema` instead. */
  export const inboundSchema = ListModelsSupportedParameter$inboundSchema;
  /** @deprecated use `ListModelsSupportedParameter$outboundSchema` instead. */
  export const outboundSchema = ListModelsSupportedParameter$outboundSchema;
}

/** @internal */
export const ListModelsDefaultParameters$inboundSchema: z.ZodType<
  ListModelsDefaultParameters,
  z.ZodTypeDef,
  unknown
> = z.object({
  temperature: z.nullable(z.number()).optional(),
  top_p: z.nullable(z.number()).optional(),
  frequency_penalty: z.nullable(z.number()).optional(),
}).transform((v) => {
  return remap$(v, {
    "top_p": "topP",
    "frequency_penalty": "frequencyPenalty",
  });
});

/** @internal */
export type ListModelsDefaultParameters$Outbound = {
  temperature?: number | null | undefined;
  top_p?: number | null | undefined;
  frequency_penalty?: number | null | undefined;
};

/** @internal */
export const ListModelsDefaultParameters$outboundSchema: z.ZodType<
  ListModelsDefaultParameters$Outbound,
  z.ZodTypeDef,
  ListModelsDefaultParameters
> = z.object({
  temperature: z.nullable(z.number()).optional(),
  topP: z.nullable(z.number()).optional(),
  frequencyPenalty: z.nullable(z.number()).optional(),
}).transform((v) => {
  return remap$(v, {
    topP: "top_p",
    frequencyPenalty: "frequency_penalty",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListModelsDefaultParameters$ {
  /** @deprecated use `ListModelsDefaultParameters$inboundSchema` instead. */
  export const inboundSchema = ListModelsDefaultParameters$inboundSchema;
  /** @deprecated use `ListModelsDefaultParameters$outboundSchema` instead. */
  export const outboundSchema = ListModelsDefaultParameters$outboundSchema;
  /** @deprecated use `ListModelsDefaultParameters$Outbound` instead. */
  export type Outbound = ListModelsDefaultParameters$Outbound;
}

export function listModelsDefaultParametersToJSON(
  listModelsDefaultParameters: ListModelsDefaultParameters,
): string {
  return JSON.stringify(
    ListModelsDefaultParameters$outboundSchema.parse(
      listModelsDefaultParameters,
    ),
  );
}

export function listModelsDefaultParametersFromJSON(
  jsonString: string,
): SafeParseResult<ListModelsDefaultParameters, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListModelsDefaultParameters$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListModelsDefaultParameters' from JSON`,
  );
}

/** @internal */
export const ListModelsData$inboundSchema: z.ZodType<
  ListModelsData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  canonical_slug: z.string(),
  hugging_face_id: z.nullable(z.string()).optional(),
  name: z.string(),
  created: z.number(),
  description: z.string().optional(),
  pricing: z.lazy(() => ListModelsPricing$inboundSchema),
  context_length: z.nullable(z.number()),
  architecture: z.lazy(() => ListModelsArchitecture$inboundSchema),
  top_provider: z.lazy(() => ListModelsTopProvider$inboundSchema),
  per_request_limits: z.nullable(
    z.lazy(() => ListModelsPerRequestLimits$inboundSchema),
  ),
  supported_parameters: z.array(ListModelsSupportedParameter$inboundSchema),
  default_parameters: z.nullable(
    z.lazy(() => ListModelsDefaultParameters$inboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    "canonical_slug": "canonicalSlug",
    "hugging_face_id": "huggingFaceId",
    "context_length": "contextLength",
    "top_provider": "topProvider",
    "per_request_limits": "perRequestLimits",
    "supported_parameters": "supportedParameters",
    "default_parameters": "defaultParameters",
  });
});

/** @internal */
export type ListModelsData$Outbound = {
  id: string;
  canonical_slug: string;
  hugging_face_id?: string | null | undefined;
  name: string;
  created: number;
  description?: string | undefined;
  pricing: ListModelsPricing$Outbound;
  context_length: number | null;
  architecture: ListModelsArchitecture$Outbound;
  top_provider: ListModelsTopProvider$Outbound;
  per_request_limits: ListModelsPerRequestLimits$Outbound | null;
  supported_parameters: Array<string>;
  default_parameters: ListModelsDefaultParameters$Outbound | null;
};

/** @internal */
export const ListModelsData$outboundSchema: z.ZodType<
  ListModelsData$Outbound,
  z.ZodTypeDef,
  ListModelsData
> = z.object({
  id: z.string(),
  canonicalSlug: z.string(),
  huggingFaceId: z.nullable(z.string()).optional(),
  name: z.string(),
  created: z.number(),
  description: z.string().optional(),
  pricing: z.lazy(() => ListModelsPricing$outboundSchema),
  contextLength: z.nullable(z.number()),
  architecture: z.lazy(() => ListModelsArchitecture$outboundSchema),
  topProvider: z.lazy(() => ListModelsTopProvider$outboundSchema),
  perRequestLimits: z.nullable(
    z.lazy(() => ListModelsPerRequestLimits$outboundSchema),
  ),
  supportedParameters: z.array(ListModelsSupportedParameter$outboundSchema),
  defaultParameters: z.nullable(
    z.lazy(() => ListModelsDefaultParameters$outboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    canonicalSlug: "canonical_slug",
    huggingFaceId: "hugging_face_id",
    contextLength: "context_length",
    topProvider: "top_provider",
    perRequestLimits: "per_request_limits",
    supportedParameters: "supported_parameters",
    defaultParameters: "default_parameters",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListModelsData$ {
  /** @deprecated use `ListModelsData$inboundSchema` instead. */
  export const inboundSchema = ListModelsData$inboundSchema;
  /** @deprecated use `ListModelsData$outboundSchema` instead. */
  export const outboundSchema = ListModelsData$outboundSchema;
  /** @deprecated use `ListModelsData$Outbound` instead. */
  export type Outbound = ListModelsData$Outbound;
}

export function listModelsDataToJSON(listModelsData: ListModelsData): string {
  return JSON.stringify(ListModelsData$outboundSchema.parse(listModelsData));
}

export function listModelsDataFromJSON(
  jsonString: string,
): SafeParseResult<ListModelsData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListModelsData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListModelsData' from JSON`,
  );
}

/** @internal */
export const ListModelsResponseBody$inboundSchema: z.ZodType<
  ListModelsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(z.lazy(() => ListModelsData$inboundSchema)),
});

/** @internal */
export type ListModelsResponseBody$Outbound = {
  data: Array<ListModelsData$Outbound>;
};

/** @internal */
export const ListModelsResponseBody$outboundSchema: z.ZodType<
  ListModelsResponseBody$Outbound,
  z.ZodTypeDef,
  ListModelsResponseBody
> = z.object({
  data: z.array(z.lazy(() => ListModelsData$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListModelsResponseBody$ {
  /** @deprecated use `ListModelsResponseBody$inboundSchema` instead. */
  export const inboundSchema = ListModelsResponseBody$inboundSchema;
  /** @deprecated use `ListModelsResponseBody$outboundSchema` instead. */
  export const outboundSchema = ListModelsResponseBody$outboundSchema;
  /** @deprecated use `ListModelsResponseBody$Outbound` instead. */
  export type Outbound = ListModelsResponseBody$Outbound;
}

export function listModelsResponseBodyToJSON(
  listModelsResponseBody: ListModelsResponseBody,
): string {
  return JSON.stringify(
    ListModelsResponseBody$outboundSchema.parse(listModelsResponseBody),
  );
}

export function listModelsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ListModelsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListModelsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListModelsResponseBody' from JSON`,
  );
}

/** @internal */
export const ListModelsResponse$inboundSchema: z.ZodType<
  ListModelsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([z.lazy(() => ListModelsResponseBody$inboundSchema), z.string()]);

/** @internal */
export type ListModelsResponse$Outbound =
  | ListModelsResponseBody$Outbound
  | string;

/** @internal */
export const ListModelsResponse$outboundSchema: z.ZodType<
  ListModelsResponse$Outbound,
  z.ZodTypeDef,
  ListModelsResponse
> = z.union([z.lazy(() => ListModelsResponseBody$outboundSchema), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListModelsResponse$ {
  /** @deprecated use `ListModelsResponse$inboundSchema` instead. */
  export const inboundSchema = ListModelsResponse$inboundSchema;
  /** @deprecated use `ListModelsResponse$outboundSchema` instead. */
  export const outboundSchema = ListModelsResponse$outboundSchema;
  /** @deprecated use `ListModelsResponse$Outbound` instead. */
  export type Outbound = ListModelsResponse$Outbound;
}

export function listModelsResponseToJSON(
  listModelsResponse: ListModelsResponse,
): string {
  return JSON.stringify(
    ListModelsResponse$outboundSchema.parse(listModelsResponse),
  );
}

export function listModelsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListModelsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListModelsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListModelsResponse' from JSON`,
  );
}
