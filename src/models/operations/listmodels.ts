/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ListModelsRequest = {
  category?: string | undefined;
  supportedParameters?: string | undefined;
  useRss?: string | undefined;
  useRssChatLinks?: string | undefined;
};

/**
 * Returns a list of models or RSS feed
 */
export type ListModelsResponseBody = {
  /**
   * List of available models
   */
  data: Array<models.ModelsList>;
};

export type ListModelsResponse = ListModelsResponseBody | string;

/** @internal */
export const ListModelsRequest$inboundSchema: z.ZodType<
  ListModelsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  category: z.string().optional(),
  supported_parameters: z.string().optional(),
  use_rss: z.string().optional(),
  use_rss_chat_links: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "supported_parameters": "supportedParameters",
    "use_rss": "useRss",
    "use_rss_chat_links": "useRssChatLinks",
  });
});

/** @internal */
export type ListModelsRequest$Outbound = {
  category?: string | undefined;
  supported_parameters?: string | undefined;
  use_rss?: string | undefined;
  use_rss_chat_links?: string | undefined;
};

/** @internal */
export const ListModelsRequest$outboundSchema: z.ZodType<
  ListModelsRequest$Outbound,
  z.ZodTypeDef,
  ListModelsRequest
> = z.object({
  category: z.string().optional(),
  supportedParameters: z.string().optional(),
  useRss: z.string().optional(),
  useRssChatLinks: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    supportedParameters: "supported_parameters",
    useRss: "use_rss",
    useRssChatLinks: "use_rss_chat_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListModelsRequest$ {
  /** @deprecated use `ListModelsRequest$inboundSchema` instead. */
  export const inboundSchema = ListModelsRequest$inboundSchema;
  /** @deprecated use `ListModelsRequest$outboundSchema` instead. */
  export const outboundSchema = ListModelsRequest$outboundSchema;
  /** @deprecated use `ListModelsRequest$Outbound` instead. */
  export type Outbound = ListModelsRequest$Outbound;
}

export function listModelsRequestToJSON(
  listModelsRequest: ListModelsRequest,
): string {
  return JSON.stringify(
    ListModelsRequest$outboundSchema.parse(listModelsRequest),
  );
}

export function listModelsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListModelsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListModelsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListModelsRequest' from JSON`,
  );
}

/** @internal */
export const ListModelsResponseBody$inboundSchema: z.ZodType<
  ListModelsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(models.ModelsList$inboundSchema),
});

/** @internal */
export type ListModelsResponseBody$Outbound = {
  data: Array<models.ModelsList$Outbound>;
};

/** @internal */
export const ListModelsResponseBody$outboundSchema: z.ZodType<
  ListModelsResponseBody$Outbound,
  z.ZodTypeDef,
  ListModelsResponseBody
> = z.object({
  data: z.array(models.ModelsList$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListModelsResponseBody$ {
  /** @deprecated use `ListModelsResponseBody$inboundSchema` instead. */
  export const inboundSchema = ListModelsResponseBody$inboundSchema;
  /** @deprecated use `ListModelsResponseBody$outboundSchema` instead. */
  export const outboundSchema = ListModelsResponseBody$outboundSchema;
  /** @deprecated use `ListModelsResponseBody$Outbound` instead. */
  export type Outbound = ListModelsResponseBody$Outbound;
}

export function listModelsResponseBodyToJSON(
  listModelsResponseBody: ListModelsResponseBody,
): string {
  return JSON.stringify(
    ListModelsResponseBody$outboundSchema.parse(listModelsResponseBody),
  );
}

export function listModelsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ListModelsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListModelsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListModelsResponseBody' from JSON`,
  );
}

/** @internal */
export const ListModelsResponse$inboundSchema: z.ZodType<
  ListModelsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([z.lazy(() => ListModelsResponseBody$inboundSchema), z.string()]);

/** @internal */
export type ListModelsResponse$Outbound =
  | ListModelsResponseBody$Outbound
  | string;

/** @internal */
export const ListModelsResponse$outboundSchema: z.ZodType<
  ListModelsResponse$Outbound,
  z.ZodTypeDef,
  ListModelsResponse
> = z.union([z.lazy(() => ListModelsResponseBody$outboundSchema), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListModelsResponse$ {
  /** @deprecated use `ListModelsResponse$inboundSchema` instead. */
  export const inboundSchema = ListModelsResponse$inboundSchema;
  /** @deprecated use `ListModelsResponse$outboundSchema` instead. */
  export const outboundSchema = ListModelsResponse$outboundSchema;
  /** @deprecated use `ListModelsResponse$Outbound` instead. */
  export type Outbound = ListModelsResponse$Outbound;
}

export function listModelsResponseToJSON(
  listModelsResponse: ListModelsResponse,
): string {
  return JSON.stringify(
    ListModelsResponse$outboundSchema.parse(listModelsResponse),
  );
}

export function listModelsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListModelsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListModelsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListModelsResponse' from JSON`,
  );
}
