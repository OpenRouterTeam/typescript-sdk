/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v4";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteKeysRequest = {
  /**
   * The hash identifier of the API key to delete
   */
  hash: string;
};

/**
 * API key deleted successfully
 */
export type DeleteKeysResponse = {
  /**
   * Confirmation that the API key was deleted
   */
  deleted: true;
};

/** @internal */
export const DeleteKeysRequest$inboundSchema: z.ZodType<
  DeleteKeysRequest,
  unknown
> = z.object({
  hash: z.string(),
});

/** @internal */
export type DeleteKeysRequest$Outbound = {
  hash: string;
};

/** @internal */
export const DeleteKeysRequest$outboundSchema: z.ZodType<
  DeleteKeysRequest$Outbound,
  DeleteKeysRequest
> = z.object({
  hash: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteKeysRequest$ {
  /** @deprecated use `DeleteKeysRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteKeysRequest$inboundSchema;
  /** @deprecated use `DeleteKeysRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteKeysRequest$outboundSchema;
  /** @deprecated use `DeleteKeysRequest$Outbound` instead. */
  export type Outbound = DeleteKeysRequest$Outbound;
}

export function deleteKeysRequestToJSON(
  deleteKeysRequest: DeleteKeysRequest,
): string {
  return JSON.stringify(
    DeleteKeysRequest$outboundSchema.parse(deleteKeysRequest),
  );
}

export function deleteKeysRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteKeysRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteKeysRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteKeysRequest' from JSON`,
  );
}

/** @internal */
export const DeleteKeysResponse$inboundSchema: z.ZodType<
  DeleteKeysResponse,
  unknown
> = z.object({
  deleted: z.literal(true),
});

/** @internal */
export type DeleteKeysResponse$Outbound = {
  deleted: true;
};

/** @internal */
export const DeleteKeysResponse$outboundSchema: z.ZodType<
  DeleteKeysResponse$Outbound,
  DeleteKeysResponse
> = z.object({
  deleted: z.literal(true),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteKeysResponse$ {
  /** @deprecated use `DeleteKeysResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteKeysResponse$inboundSchema;
  /** @deprecated use `DeleteKeysResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteKeysResponse$outboundSchema;
  /** @deprecated use `DeleteKeysResponse$Outbound` instead. */
  export type Outbound = DeleteKeysResponse$Outbound;
}

export function deleteKeysResponseToJSON(
  deleteKeysResponse: DeleteKeysResponse,
): string {
  return JSON.stringify(
    DeleteKeysResponse$outboundSchema.parse(deleteKeysResponse),
  );
}

export function deleteKeysResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteKeysResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteKeysResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteKeysResponse' from JSON`,
  );
}
