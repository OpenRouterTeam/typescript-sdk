/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AddCoinbaseChargeSecurity = {
  bearer: string;
};

export const ChainId = {
  One: 1,
  OneHundredAndThirtySeven: 137,
  EightThousandFourHundredAndFiftyThree: 8453,
} as const;
export type ChainId = OpenEnum<typeof ChainId>;

export type AddCoinbaseChargeRequest = {
  amount: number;
  sender?: any | undefined;
  chainId: ChainId;
};

export type CallData = {
  deadline: string;
  feeAmount: string;
  id: string;
  operator: string;
  prefix: string;
  recipient: string;
  recipientAmount: string;
  recipientCurrency: string;
  refundDestination: string;
  signature: string;
};

export type Metadata = {
  chainId: number;
  contractAddress: string;
  sender: string;
};

export type TransferIntent = {
  callData: CallData;
  metadata: Metadata;
};

export type Web3Data = {
  transferIntent: TransferIntent;
};

export type AddCoinbaseChargeData = {
  id: string;
  createdAt: string;
  expiresAt: string;
  web3Data: Web3Data;
};

/**
 * Returns the calldata to fulfill the transaction
 */
export type AddCoinbaseChargeResponse = {
  data: AddCoinbaseChargeData;
};

/** @internal */
export const AddCoinbaseChargeSecurity$inboundSchema: z.ZodType<
  AddCoinbaseChargeSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  bearer: z.string(),
});

/** @internal */
export type AddCoinbaseChargeSecurity$Outbound = {
  bearer: string;
};

/** @internal */
export const AddCoinbaseChargeSecurity$outboundSchema: z.ZodType<
  AddCoinbaseChargeSecurity$Outbound,
  z.ZodTypeDef,
  AddCoinbaseChargeSecurity
> = z.object({
  bearer: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddCoinbaseChargeSecurity$ {
  /** @deprecated use `AddCoinbaseChargeSecurity$inboundSchema` instead. */
  export const inboundSchema = AddCoinbaseChargeSecurity$inboundSchema;
  /** @deprecated use `AddCoinbaseChargeSecurity$outboundSchema` instead. */
  export const outboundSchema = AddCoinbaseChargeSecurity$outboundSchema;
  /** @deprecated use `AddCoinbaseChargeSecurity$Outbound` instead. */
  export type Outbound = AddCoinbaseChargeSecurity$Outbound;
}

export function addCoinbaseChargeSecurityToJSON(
  addCoinbaseChargeSecurity: AddCoinbaseChargeSecurity,
): string {
  return JSON.stringify(
    AddCoinbaseChargeSecurity$outboundSchema.parse(addCoinbaseChargeSecurity),
  );
}

export function addCoinbaseChargeSecurityFromJSON(
  jsonString: string,
): SafeParseResult<AddCoinbaseChargeSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddCoinbaseChargeSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddCoinbaseChargeSecurity' from JSON`,
  );
}

/** @internal */
export const ChainId$inboundSchema: z.ZodType<ChainId, z.ZodTypeDef, unknown> =
  z
    .union([
      z.nativeEnum(ChainId),
      z.number().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const ChainId$outboundSchema: z.ZodType<ChainId, z.ZodTypeDef, ChainId> =
  z.union([
    z.nativeEnum(ChainId),
    z.number().and(z.custom<Unrecognized<number>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChainId$ {
  /** @deprecated use `ChainId$inboundSchema` instead. */
  export const inboundSchema = ChainId$inboundSchema;
  /** @deprecated use `ChainId$outboundSchema` instead. */
  export const outboundSchema = ChainId$outboundSchema;
}

/** @internal */
export const AddCoinbaseChargeRequest$inboundSchema: z.ZodType<
  AddCoinbaseChargeRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.number(),
  sender: z.any().optional(),
  chain_id: ChainId$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "chain_id": "chainId",
  });
});

/** @internal */
export type AddCoinbaseChargeRequest$Outbound = {
  amount: number;
  sender?: any | undefined;
  chain_id: number;
};

/** @internal */
export const AddCoinbaseChargeRequest$outboundSchema: z.ZodType<
  AddCoinbaseChargeRequest$Outbound,
  z.ZodTypeDef,
  AddCoinbaseChargeRequest
> = z.object({
  amount: z.number(),
  sender: z.any().optional(),
  chainId: ChainId$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    chainId: "chain_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddCoinbaseChargeRequest$ {
  /** @deprecated use `AddCoinbaseChargeRequest$inboundSchema` instead. */
  export const inboundSchema = AddCoinbaseChargeRequest$inboundSchema;
  /** @deprecated use `AddCoinbaseChargeRequest$outboundSchema` instead. */
  export const outboundSchema = AddCoinbaseChargeRequest$outboundSchema;
  /** @deprecated use `AddCoinbaseChargeRequest$Outbound` instead. */
  export type Outbound = AddCoinbaseChargeRequest$Outbound;
}

export function addCoinbaseChargeRequestToJSON(
  addCoinbaseChargeRequest: AddCoinbaseChargeRequest,
): string {
  return JSON.stringify(
    AddCoinbaseChargeRequest$outboundSchema.parse(addCoinbaseChargeRequest),
  );
}

export function addCoinbaseChargeRequestFromJSON(
  jsonString: string,
): SafeParseResult<AddCoinbaseChargeRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddCoinbaseChargeRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddCoinbaseChargeRequest' from JSON`,
  );
}

/** @internal */
export const CallData$inboundSchema: z.ZodType<
  CallData,
  z.ZodTypeDef,
  unknown
> = z.object({
  deadline: z.string(),
  fee_amount: z.string(),
  id: z.string(),
  operator: z.string(),
  prefix: z.string(),
  recipient: z.string(),
  recipient_amount: z.string(),
  recipient_currency: z.string(),
  refund_destination: z.string(),
  signature: z.string(),
}).transform((v) => {
  return remap$(v, {
    "fee_amount": "feeAmount",
    "recipient_amount": "recipientAmount",
    "recipient_currency": "recipientCurrency",
    "refund_destination": "refundDestination",
  });
});

/** @internal */
export type CallData$Outbound = {
  deadline: string;
  fee_amount: string;
  id: string;
  operator: string;
  prefix: string;
  recipient: string;
  recipient_amount: string;
  recipient_currency: string;
  refund_destination: string;
  signature: string;
};

/** @internal */
export const CallData$outboundSchema: z.ZodType<
  CallData$Outbound,
  z.ZodTypeDef,
  CallData
> = z.object({
  deadline: z.string(),
  feeAmount: z.string(),
  id: z.string(),
  operator: z.string(),
  prefix: z.string(),
  recipient: z.string(),
  recipientAmount: z.string(),
  recipientCurrency: z.string(),
  refundDestination: z.string(),
  signature: z.string(),
}).transform((v) => {
  return remap$(v, {
    feeAmount: "fee_amount",
    recipientAmount: "recipient_amount",
    recipientCurrency: "recipient_currency",
    refundDestination: "refund_destination",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CallData$ {
  /** @deprecated use `CallData$inboundSchema` instead. */
  export const inboundSchema = CallData$inboundSchema;
  /** @deprecated use `CallData$outboundSchema` instead. */
  export const outboundSchema = CallData$outboundSchema;
  /** @deprecated use `CallData$Outbound` instead. */
  export type Outbound = CallData$Outbound;
}

export function callDataToJSON(callData: CallData): string {
  return JSON.stringify(CallData$outboundSchema.parse(callData));
}

export function callDataFromJSON(
  jsonString: string,
): SafeParseResult<CallData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CallData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CallData' from JSON`,
  );
}

/** @internal */
export const Metadata$inboundSchema: z.ZodType<
  Metadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  chain_id: z.number(),
  contract_address: z.string(),
  sender: z.string(),
}).transform((v) => {
  return remap$(v, {
    "chain_id": "chainId",
    "contract_address": "contractAddress",
  });
});

/** @internal */
export type Metadata$Outbound = {
  chain_id: number;
  contract_address: string;
  sender: string;
};

/** @internal */
export const Metadata$outboundSchema: z.ZodType<
  Metadata$Outbound,
  z.ZodTypeDef,
  Metadata
> = z.object({
  chainId: z.number(),
  contractAddress: z.string(),
  sender: z.string(),
}).transform((v) => {
  return remap$(v, {
    chainId: "chain_id",
    contractAddress: "contract_address",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Metadata$ {
  /** @deprecated use `Metadata$inboundSchema` instead. */
  export const inboundSchema = Metadata$inboundSchema;
  /** @deprecated use `Metadata$outboundSchema` instead. */
  export const outboundSchema = Metadata$outboundSchema;
  /** @deprecated use `Metadata$Outbound` instead. */
  export type Outbound = Metadata$Outbound;
}

export function metadataToJSON(metadata: Metadata): string {
  return JSON.stringify(Metadata$outboundSchema.parse(metadata));
}

export function metadataFromJSON(
  jsonString: string,
): SafeParseResult<Metadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Metadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Metadata' from JSON`,
  );
}

/** @internal */
export const TransferIntent$inboundSchema: z.ZodType<
  TransferIntent,
  z.ZodTypeDef,
  unknown
> = z.object({
  call_data: z.lazy(() => CallData$inboundSchema),
  metadata: z.lazy(() => Metadata$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "call_data": "callData",
  });
});

/** @internal */
export type TransferIntent$Outbound = {
  call_data: CallData$Outbound;
  metadata: Metadata$Outbound;
};

/** @internal */
export const TransferIntent$outboundSchema: z.ZodType<
  TransferIntent$Outbound,
  z.ZodTypeDef,
  TransferIntent
> = z.object({
  callData: z.lazy(() => CallData$outboundSchema),
  metadata: z.lazy(() => Metadata$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    callData: "call_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransferIntent$ {
  /** @deprecated use `TransferIntent$inboundSchema` instead. */
  export const inboundSchema = TransferIntent$inboundSchema;
  /** @deprecated use `TransferIntent$outboundSchema` instead. */
  export const outboundSchema = TransferIntent$outboundSchema;
  /** @deprecated use `TransferIntent$Outbound` instead. */
  export type Outbound = TransferIntent$Outbound;
}

export function transferIntentToJSON(transferIntent: TransferIntent): string {
  return JSON.stringify(TransferIntent$outboundSchema.parse(transferIntent));
}

export function transferIntentFromJSON(
  jsonString: string,
): SafeParseResult<TransferIntent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransferIntent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransferIntent' from JSON`,
  );
}

/** @internal */
export const Web3Data$inboundSchema: z.ZodType<
  Web3Data,
  z.ZodTypeDef,
  unknown
> = z.object({
  transfer_intent: z.lazy(() => TransferIntent$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "transfer_intent": "transferIntent",
  });
});

/** @internal */
export type Web3Data$Outbound = {
  transfer_intent: TransferIntent$Outbound;
};

/** @internal */
export const Web3Data$outboundSchema: z.ZodType<
  Web3Data$Outbound,
  z.ZodTypeDef,
  Web3Data
> = z.object({
  transferIntent: z.lazy(() => TransferIntent$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    transferIntent: "transfer_intent",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Web3Data$ {
  /** @deprecated use `Web3Data$inboundSchema` instead. */
  export const inboundSchema = Web3Data$inboundSchema;
  /** @deprecated use `Web3Data$outboundSchema` instead. */
  export const outboundSchema = Web3Data$outboundSchema;
  /** @deprecated use `Web3Data$Outbound` instead. */
  export type Outbound = Web3Data$Outbound;
}

export function web3DataToJSON(web3Data: Web3Data): string {
  return JSON.stringify(Web3Data$outboundSchema.parse(web3Data));
}

export function web3DataFromJSON(
  jsonString: string,
): SafeParseResult<Web3Data, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Web3Data$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Web3Data' from JSON`,
  );
}

/** @internal */
export const AddCoinbaseChargeData$inboundSchema: z.ZodType<
  AddCoinbaseChargeData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  created_at: z.string(),
  expires_at: z.string(),
  web3_data: z.lazy(() => Web3Data$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "expires_at": "expiresAt",
    "web3_data": "web3Data",
  });
});

/** @internal */
export type AddCoinbaseChargeData$Outbound = {
  id: string;
  created_at: string;
  expires_at: string;
  web3_data: Web3Data$Outbound;
};

/** @internal */
export const AddCoinbaseChargeData$outboundSchema: z.ZodType<
  AddCoinbaseChargeData$Outbound,
  z.ZodTypeDef,
  AddCoinbaseChargeData
> = z.object({
  id: z.string(),
  createdAt: z.string(),
  expiresAt: z.string(),
  web3Data: z.lazy(() => Web3Data$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    expiresAt: "expires_at",
    web3Data: "web3_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddCoinbaseChargeData$ {
  /** @deprecated use `AddCoinbaseChargeData$inboundSchema` instead. */
  export const inboundSchema = AddCoinbaseChargeData$inboundSchema;
  /** @deprecated use `AddCoinbaseChargeData$outboundSchema` instead. */
  export const outboundSchema = AddCoinbaseChargeData$outboundSchema;
  /** @deprecated use `AddCoinbaseChargeData$Outbound` instead. */
  export type Outbound = AddCoinbaseChargeData$Outbound;
}

export function addCoinbaseChargeDataToJSON(
  addCoinbaseChargeData: AddCoinbaseChargeData,
): string {
  return JSON.stringify(
    AddCoinbaseChargeData$outboundSchema.parse(addCoinbaseChargeData),
  );
}

export function addCoinbaseChargeDataFromJSON(
  jsonString: string,
): SafeParseResult<AddCoinbaseChargeData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddCoinbaseChargeData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddCoinbaseChargeData' from JSON`,
  );
}

/** @internal */
export const AddCoinbaseChargeResponse$inboundSchema: z.ZodType<
  AddCoinbaseChargeResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => AddCoinbaseChargeData$inboundSchema),
});

/** @internal */
export type AddCoinbaseChargeResponse$Outbound = {
  data: AddCoinbaseChargeData$Outbound;
};

/** @internal */
export const AddCoinbaseChargeResponse$outboundSchema: z.ZodType<
  AddCoinbaseChargeResponse$Outbound,
  z.ZodTypeDef,
  AddCoinbaseChargeResponse
> = z.object({
  data: z.lazy(() => AddCoinbaseChargeData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddCoinbaseChargeResponse$ {
  /** @deprecated use `AddCoinbaseChargeResponse$inboundSchema` instead. */
  export const inboundSchema = AddCoinbaseChargeResponse$inboundSchema;
  /** @deprecated use `AddCoinbaseChargeResponse$outboundSchema` instead. */
  export const outboundSchema = AddCoinbaseChargeResponse$outboundSchema;
  /** @deprecated use `AddCoinbaseChargeResponse$Outbound` instead. */
  export type Outbound = AddCoinbaseChargeResponse$Outbound;
}

export function addCoinbaseChargeResponseToJSON(
  addCoinbaseChargeResponse: AddCoinbaseChargeResponse,
): string {
  return JSON.stringify(
    AddCoinbaseChargeResponse$outboundSchema.parse(addCoinbaseChargeResponse),
  );
}

export function addCoinbaseChargeResponseFromJSON(
  jsonString: string,
): SafeParseResult<AddCoinbaseChargeResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddCoinbaseChargeResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddCoinbaseChargeResponse' from JSON`,
  );
}
