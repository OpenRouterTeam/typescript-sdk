/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

/**
 * Successful chat completion response
 */
export type StreamChatCompletionResponseBody = {
  /**
   * Streaming chat completion chunk
   */
  data: models.ChatCompletionChunk;
};

/** @internal */
export const StreamChatCompletionResponseBody$inboundSchema: z.ZodType<
  StreamChatCompletionResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.string().transform((v, ctx) => {
    try {
      return JSON.parse(v);
    } catch (err) {
      ctx.addIssue({
        code: z.ZodIssueCode.custom,
        message: `malformed json: ${err}`,
      });
      return z.NEVER;
    }
  }).pipe(models.ChatCompletionChunk$inboundSchema),
});

/** @internal */
export type StreamChatCompletionResponseBody$Outbound = {
  data: models.ChatCompletionChunk$Outbound;
};

/** @internal */
export const StreamChatCompletionResponseBody$outboundSchema: z.ZodType<
  StreamChatCompletionResponseBody$Outbound,
  z.ZodTypeDef,
  StreamChatCompletionResponseBody
> = z.object({
  data: models.ChatCompletionChunk$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamChatCompletionResponseBody$ {
  /** @deprecated use `StreamChatCompletionResponseBody$inboundSchema` instead. */
  export const inboundSchema = StreamChatCompletionResponseBody$inboundSchema;
  /** @deprecated use `StreamChatCompletionResponseBody$outboundSchema` instead. */
  export const outboundSchema = StreamChatCompletionResponseBody$outboundSchema;
  /** @deprecated use `StreamChatCompletionResponseBody$Outbound` instead. */
  export type Outbound = StreamChatCompletionResponseBody$Outbound;
}

export function streamChatCompletionResponseBodyToJSON(
  streamChatCompletionResponseBody: StreamChatCompletionResponseBody,
): string {
  return JSON.stringify(
    StreamChatCompletionResponseBody$outboundSchema.parse(
      streamChatCompletionResponseBody,
    ),
  );
}

export function streamChatCompletionResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<StreamChatCompletionResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamChatCompletionResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamChatCompletionResponseBody' from JSON`,
  );
}
