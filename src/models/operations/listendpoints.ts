/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ListEndpointsRequest = {
  author: string;
  slug: string;
};

/**
 * Tokenizer type used by the model
 */
export const Tokenizer = {
  Router: "Router",
  Media: "Media",
  Other: "Other",
  Gpt: "GPT",
  Claude: "Claude",
  Gemini: "Gemini",
  Grok: "Grok",
  Cohere: "Cohere",
  Nova: "Nova",
  Qwen: "Qwen",
  Yi: "Yi",
  DeepSeek: "DeepSeek",
  Mistral: "Mistral",
  Llama2: "Llama2",
  Llama3: "Llama3",
  Llama4: "Llama4",
  PaLM: "PaLM",
  Rwkv: "RWKV",
  Qwen3: "Qwen3",
} as const;
/**
 * Tokenizer type used by the model
 */
export type Tokenizer = OpenEnum<typeof Tokenizer>;

/**
 * Model architecture information
 */
export type Architecture = {
  tokenizer: Tokenizer | null;
  /**
   * Instruction format type
   */
  instructType: models.InstructType | null;
  /**
   * Primary modality of the model
   */
  modality: string | null;
  /**
   * Supported input modalities
   */
  inputModalities: Array<models.InputModality>;
  /**
   * Supported output modalities
   */
  outputModalities: Array<models.OutputModality>;
};

export type ListEndpointsData = {
  /**
   * Unique identifier for the model
   */
  id: string;
  /**
   * Display name of the model
   */
  name: string;
  /**
   * Unix timestamp of when the model was created
   */
  created: number;
  /**
   * Description of the model
   */
  description: string;
  /**
   * Model architecture information
   */
  architecture: Architecture;
  /**
   * List of available endpoints for this model
   */
  endpoints: Array<models.PublicEndpoint>;
};

/**
 * Returns a list of endpoints
 */
export type ListEndpointsResponse = {
  data: ListEndpointsData;
};

/** @internal */
export const ListEndpointsRequest$inboundSchema: z.ZodType<
  ListEndpointsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  author: z.string(),
  slug: z.string(),
});

/** @internal */
export type ListEndpointsRequest$Outbound = {
  author: string;
  slug: string;
};

/** @internal */
export const ListEndpointsRequest$outboundSchema: z.ZodType<
  ListEndpointsRequest$Outbound,
  z.ZodTypeDef,
  ListEndpointsRequest
> = z.object({
  author: z.string(),
  slug: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListEndpointsRequest$ {
  /** @deprecated use `ListEndpointsRequest$inboundSchema` instead. */
  export const inboundSchema = ListEndpointsRequest$inboundSchema;
  /** @deprecated use `ListEndpointsRequest$outboundSchema` instead. */
  export const outboundSchema = ListEndpointsRequest$outboundSchema;
  /** @deprecated use `ListEndpointsRequest$Outbound` instead. */
  export type Outbound = ListEndpointsRequest$Outbound;
}

export function listEndpointsRequestToJSON(
  listEndpointsRequest: ListEndpointsRequest,
): string {
  return JSON.stringify(
    ListEndpointsRequest$outboundSchema.parse(listEndpointsRequest),
  );
}

export function listEndpointsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListEndpointsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListEndpointsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListEndpointsRequest' from JSON`,
  );
}

/** @internal */
export const Tokenizer$inboundSchema: z.ZodType<
  Tokenizer,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(Tokenizer),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const Tokenizer$outboundSchema: z.ZodType<
  Tokenizer,
  z.ZodTypeDef,
  Tokenizer
> = z.union([
  z.nativeEnum(Tokenizer),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Tokenizer$ {
  /** @deprecated use `Tokenizer$inboundSchema` instead. */
  export const inboundSchema = Tokenizer$inboundSchema;
  /** @deprecated use `Tokenizer$outboundSchema` instead. */
  export const outboundSchema = Tokenizer$outboundSchema;
}

/** @internal */
export const Architecture$inboundSchema: z.ZodType<
  Architecture,
  z.ZodTypeDef,
  unknown
> = z.object({
  tokenizer: z.nullable(Tokenizer$inboundSchema),
  instruct_type: z.nullable(models.InstructType$inboundSchema),
  modality: z.nullable(z.string()),
  input_modalities: z.array(models.InputModality$inboundSchema),
  output_modalities: z.array(models.OutputModality$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "instruct_type": "instructType",
    "input_modalities": "inputModalities",
    "output_modalities": "outputModalities",
  });
});

/** @internal */
export type Architecture$Outbound = {
  tokenizer: string | null;
  instruct_type: string | null;
  modality: string | null;
  input_modalities: Array<string>;
  output_modalities: Array<string>;
};

/** @internal */
export const Architecture$outboundSchema: z.ZodType<
  Architecture$Outbound,
  z.ZodTypeDef,
  Architecture
> = z.object({
  tokenizer: z.nullable(Tokenizer$outboundSchema),
  instructType: z.nullable(models.InstructType$outboundSchema),
  modality: z.nullable(z.string()),
  inputModalities: z.array(models.InputModality$outboundSchema),
  outputModalities: z.array(models.OutputModality$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    instructType: "instruct_type",
    inputModalities: "input_modalities",
    outputModalities: "output_modalities",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Architecture$ {
  /** @deprecated use `Architecture$inboundSchema` instead. */
  export const inboundSchema = Architecture$inboundSchema;
  /** @deprecated use `Architecture$outboundSchema` instead. */
  export const outboundSchema = Architecture$outboundSchema;
  /** @deprecated use `Architecture$Outbound` instead. */
  export type Outbound = Architecture$Outbound;
}

export function architectureToJSON(architecture: Architecture): string {
  return JSON.stringify(Architecture$outboundSchema.parse(architecture));
}

export function architectureFromJSON(
  jsonString: string,
): SafeParseResult<Architecture, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Architecture$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Architecture' from JSON`,
  );
}

/** @internal */
export const ListEndpointsData$inboundSchema: z.ZodType<
  ListEndpointsData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  created: z.number(),
  description: z.string(),
  architecture: z.lazy(() => Architecture$inboundSchema),
  endpoints: z.array(models.PublicEndpoint$inboundSchema),
});

/** @internal */
export type ListEndpointsData$Outbound = {
  id: string;
  name: string;
  created: number;
  description: string;
  architecture: Architecture$Outbound;
  endpoints: Array<models.PublicEndpoint$Outbound>;
};

/** @internal */
export const ListEndpointsData$outboundSchema: z.ZodType<
  ListEndpointsData$Outbound,
  z.ZodTypeDef,
  ListEndpointsData
> = z.object({
  id: z.string(),
  name: z.string(),
  created: z.number(),
  description: z.string(),
  architecture: z.lazy(() => Architecture$outboundSchema),
  endpoints: z.array(models.PublicEndpoint$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListEndpointsData$ {
  /** @deprecated use `ListEndpointsData$inboundSchema` instead. */
  export const inboundSchema = ListEndpointsData$inboundSchema;
  /** @deprecated use `ListEndpointsData$outboundSchema` instead. */
  export const outboundSchema = ListEndpointsData$outboundSchema;
  /** @deprecated use `ListEndpointsData$Outbound` instead. */
  export type Outbound = ListEndpointsData$Outbound;
}

export function listEndpointsDataToJSON(
  listEndpointsData: ListEndpointsData,
): string {
  return JSON.stringify(
    ListEndpointsData$outboundSchema.parse(listEndpointsData),
  );
}

export function listEndpointsDataFromJSON(
  jsonString: string,
): SafeParseResult<ListEndpointsData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListEndpointsData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListEndpointsData' from JSON`,
  );
}

/** @internal */
export const ListEndpointsResponse$inboundSchema: z.ZodType<
  ListEndpointsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => ListEndpointsData$inboundSchema),
});

/** @internal */
export type ListEndpointsResponse$Outbound = {
  data: ListEndpointsData$Outbound;
};

/** @internal */
export const ListEndpointsResponse$outboundSchema: z.ZodType<
  ListEndpointsResponse$Outbound,
  z.ZodTypeDef,
  ListEndpointsResponse
> = z.object({
  data: z.lazy(() => ListEndpointsData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListEndpointsResponse$ {
  /** @deprecated use `ListEndpointsResponse$inboundSchema` instead. */
  export const inboundSchema = ListEndpointsResponse$inboundSchema;
  /** @deprecated use `ListEndpointsResponse$outboundSchema` instead. */
  export const outboundSchema = ListEndpointsResponse$outboundSchema;
  /** @deprecated use `ListEndpointsResponse$Outbound` instead. */
  export type Outbound = ListEndpointsResponse$Outbound;
}

export function listEndpointsResponseToJSON(
  listEndpointsResponse: ListEndpointsResponse,
): string {
  return JSON.stringify(
    ListEndpointsResponse$outboundSchema.parse(listEndpointsResponse),
  );
}

export function listEndpointsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListEndpointsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListEndpointsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListEndpointsResponse' from JSON`,
  );
}
