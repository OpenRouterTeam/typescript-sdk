/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

/**
 * Legacy rate limit information about a key. Will always return -1.
 *
 * @deprecated class: This will be removed in a future release, please migrate away from it as soon as possible.
 */
export type GetKeyRateLimit = {
  /**
   * Number of requests allowed per interval
   */
  requests: number;
  /**
   * Rate limit interval
   */
  interval: string;
  /**
   * Note about the rate limit
   */
  note: string;
};

/**
 * Current API key information
 */
export type GetKeyData = {
  /**
   * Human-readable label for the API key
   */
  label: string;
  /**
   * Spending limit for the API key in USD
   */
  limit: number | null;
  /**
   * Current usage of the API key in USD
   */
  usage: number;
  /**
   * Whether this is a free tier API key
   */
  isFreeTier: boolean;
  /**
   * Whether this is a provisioning key
   */
  isProvisioningKey: boolean;
  /**
   * Remaining spending limit in USD
   */
  limitRemaining: number | null;
  /**
   * Legacy rate limit information about a key. Will always return -1.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  rateLimit: GetKeyRateLimit;
};

/**
 * API key details
 */
export type GetKeyResponseBody = {
  /**
   * Current API key information
   */
  data: GetKeyData;
};

export type GetKeyResponse = GetKeyResponseBody | models.ErrorResponse;

/** @internal */
export const GetKeyRateLimit$inboundSchema: z.ZodType<
  GetKeyRateLimit,
  z.ZodTypeDef,
  unknown
> = z.object({
  requests: z.number(),
  interval: z.string(),
  note: z.string(),
});

/** @internal */
export type GetKeyRateLimit$Outbound = {
  requests: number;
  interval: string;
  note: string;
};

/** @internal */
export const GetKeyRateLimit$outboundSchema: z.ZodType<
  GetKeyRateLimit$Outbound,
  z.ZodTypeDef,
  GetKeyRateLimit
> = z.object({
  requests: z.number(),
  interval: z.string(),
  note: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetKeyRateLimit$ {
  /** @deprecated use `GetKeyRateLimit$inboundSchema` instead. */
  export const inboundSchema = GetKeyRateLimit$inboundSchema;
  /** @deprecated use `GetKeyRateLimit$outboundSchema` instead. */
  export const outboundSchema = GetKeyRateLimit$outboundSchema;
  /** @deprecated use `GetKeyRateLimit$Outbound` instead. */
  export type Outbound = GetKeyRateLimit$Outbound;
}

export function getKeyRateLimitToJSON(
  getKeyRateLimit: GetKeyRateLimit,
): string {
  return JSON.stringify(GetKeyRateLimit$outboundSchema.parse(getKeyRateLimit));
}

export function getKeyRateLimitFromJSON(
  jsonString: string,
): SafeParseResult<GetKeyRateLimit, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetKeyRateLimit$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetKeyRateLimit' from JSON`,
  );
}

/** @internal */
export const GetKeyData$inboundSchema: z.ZodType<
  GetKeyData,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string(),
  limit: z.nullable(z.number()),
  usage: z.number(),
  is_free_tier: z.boolean(),
  is_provisioning_key: z.boolean(),
  limit_remaining: z.nullable(z.number()),
  rate_limit: z.lazy(() => GetKeyRateLimit$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "is_free_tier": "isFreeTier",
    "is_provisioning_key": "isProvisioningKey",
    "limit_remaining": "limitRemaining",
    "rate_limit": "rateLimit",
  });
});

/** @internal */
export type GetKeyData$Outbound = {
  label: string;
  limit: number | null;
  usage: number;
  is_free_tier: boolean;
  is_provisioning_key: boolean;
  limit_remaining: number | null;
  rate_limit: GetKeyRateLimit$Outbound;
};

/** @internal */
export const GetKeyData$outboundSchema: z.ZodType<
  GetKeyData$Outbound,
  z.ZodTypeDef,
  GetKeyData
> = z.object({
  label: z.string(),
  limit: z.nullable(z.number()),
  usage: z.number(),
  isFreeTier: z.boolean(),
  isProvisioningKey: z.boolean(),
  limitRemaining: z.nullable(z.number()),
  rateLimit: z.lazy(() => GetKeyRateLimit$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    isFreeTier: "is_free_tier",
    isProvisioningKey: "is_provisioning_key",
    limitRemaining: "limit_remaining",
    rateLimit: "rate_limit",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetKeyData$ {
  /** @deprecated use `GetKeyData$inboundSchema` instead. */
  export const inboundSchema = GetKeyData$inboundSchema;
  /** @deprecated use `GetKeyData$outboundSchema` instead. */
  export const outboundSchema = GetKeyData$outboundSchema;
  /** @deprecated use `GetKeyData$Outbound` instead. */
  export type Outbound = GetKeyData$Outbound;
}

export function getKeyDataToJSON(getKeyData: GetKeyData): string {
  return JSON.stringify(GetKeyData$outboundSchema.parse(getKeyData));
}

export function getKeyDataFromJSON(
  jsonString: string,
): SafeParseResult<GetKeyData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetKeyData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetKeyData' from JSON`,
  );
}

/** @internal */
export const GetKeyResponseBody$inboundSchema: z.ZodType<
  GetKeyResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => GetKeyData$inboundSchema),
});

/** @internal */
export type GetKeyResponseBody$Outbound = {
  data: GetKeyData$Outbound;
};

/** @internal */
export const GetKeyResponseBody$outboundSchema: z.ZodType<
  GetKeyResponseBody$Outbound,
  z.ZodTypeDef,
  GetKeyResponseBody
> = z.object({
  data: z.lazy(() => GetKeyData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetKeyResponseBody$ {
  /** @deprecated use `GetKeyResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetKeyResponseBody$inboundSchema;
  /** @deprecated use `GetKeyResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetKeyResponseBody$outboundSchema;
  /** @deprecated use `GetKeyResponseBody$Outbound` instead. */
  export type Outbound = GetKeyResponseBody$Outbound;
}

export function getKeyResponseBodyToJSON(
  getKeyResponseBody: GetKeyResponseBody,
): string {
  return JSON.stringify(
    GetKeyResponseBody$outboundSchema.parse(getKeyResponseBody),
  );
}

export function getKeyResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetKeyResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetKeyResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetKeyResponseBody' from JSON`,
  );
}

/** @internal */
export const GetKeyResponse$inboundSchema: z.ZodType<
  GetKeyResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetKeyResponseBody$inboundSchema),
  models.ErrorResponse$inboundSchema,
]);

/** @internal */
export type GetKeyResponse$Outbound =
  | GetKeyResponseBody$Outbound
  | models.ErrorResponse$Outbound;

/** @internal */
export const GetKeyResponse$outboundSchema: z.ZodType<
  GetKeyResponse$Outbound,
  z.ZodTypeDef,
  GetKeyResponse
> = z.union([
  z.lazy(() => GetKeyResponseBody$outboundSchema),
  models.ErrorResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetKeyResponse$ {
  /** @deprecated use `GetKeyResponse$inboundSchema` instead. */
  export const inboundSchema = GetKeyResponse$inboundSchema;
  /** @deprecated use `GetKeyResponse$outboundSchema` instead. */
  export const outboundSchema = GetKeyResponse$outboundSchema;
  /** @deprecated use `GetKeyResponse$Outbound` instead. */
  export type Outbound = GetKeyResponse$Outbound;
}

export function getKeyResponseToJSON(getKeyResponse: GetKeyResponse): string {
  return JSON.stringify(GetKeyResponse$outboundSchema.parse(getKeyResponse));
}

export function getKeyResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetKeyResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetKeyResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetKeyResponse' from JSON`,
  );
}
