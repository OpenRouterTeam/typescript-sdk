/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ListRequest = {
  author: string;
  slug: string;
};

/**
 * Tokenizer type used by the model
 */
export const Tokenizer = {
  Router: "Router",
  Media: "Media",
  Other: "Other",
  Gpt: "GPT",
  Claude: "Claude",
  Gemini: "Gemini",
  Grok: "Grok",
  Cohere: "Cohere",
  Nova: "Nova",
  Qwen: "Qwen",
  Yi: "Yi",
  DeepSeek: "DeepSeek",
  Mistral: "Mistral",
  Llama2: "Llama2",
  Llama3: "Llama3",
  Llama4: "Llama4",
  PaLM: "PaLM",
  Rwkv: "RWKV",
  Qwen3: "Qwen3",
} as const;
/**
 * Tokenizer type used by the model
 */
export type Tokenizer = ClosedEnum<typeof Tokenizer>;

/**
 * Instruction format type
 */
export const InstructType = {
  None: "none",
  Airoboros: "airoboros",
  Alpaca: "alpaca",
  AlpacaModif: "alpaca-modif",
  Chatml: "chatml",
  Claude: "claude",
  CodeLlama: "code-llama",
  Gemma: "gemma",
  Llama2: "llama2",
  Llama3: "llama3",
  Mistral: "mistral",
  Nemotron: "nemotron",
  Neural: "neural",
  Openchat: "openchat",
  Phi3: "phi3",
  Rwkv: "rwkv",
  Vicuna: "vicuna",
  Zephyr: "zephyr",
  DeepseekR1: "deepseek-r1",
  DeepseekV31: "deepseek-v3.1",
  Qwq: "qwq",
  Qwen3: "qwen3",
} as const;
/**
 * Instruction format type
 */
export type InstructType = ClosedEnum<typeof InstructType>;

export const InputModality = {
  Text: "text",
  Image: "image",
  File: "file",
  Audio: "audio",
} as const;
export type InputModality = ClosedEnum<typeof InputModality>;

export const OutputModality = {
  Text: "text",
  Image: "image",
  Embeddings: "embeddings",
} as const;
export type OutputModality = ClosedEnum<typeof OutputModality>;

/**
 * Model architecture information
 */
export type Architecture = {
  /**
   * Tokenizer type used by the model
   */
  tokenizer: Tokenizer | null;
  /**
   * Instruction format type
   */
  instructType: InstructType | null;
  /**
   * Primary modality of the model
   */
  modality: string | null;
  /**
   * Supported input modalities
   */
  inputModalities: Array<InputModality>;
  /**
   * Supported output modalities
   */
  outputModalities: Array<OutputModality>;
};

export type ListData = {
  /**
   * Unique identifier for the model
   */
  id: string;
  /**
   * Display name of the model
   */
  name: string;
  /**
   * Unix timestamp of when the model was created
   */
  created: number;
  /**
   * Description of the model
   */
  description: string;
  /**
   * Model architecture information
   */
  architecture: Architecture;
  /**
   * List of available endpoints for this model
   */
  endpoints: Array<models.EndpointsList>;
};

/**
 * Returns a list of endpoints
 */
export type ListResponse = {
  data: ListData;
};

/** @internal */
export const ListRequest$inboundSchema: z.ZodType<
  ListRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  author: z.string(),
  slug: z.string(),
});

/** @internal */
export type ListRequest$Outbound = {
  author: string;
  slug: string;
};

/** @internal */
export const ListRequest$outboundSchema: z.ZodType<
  ListRequest$Outbound,
  z.ZodTypeDef,
  ListRequest
> = z.object({
  author: z.string(),
  slug: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListRequest$ {
  /** @deprecated use `ListRequest$inboundSchema` instead. */
  export const inboundSchema = ListRequest$inboundSchema;
  /** @deprecated use `ListRequest$outboundSchema` instead. */
  export const outboundSchema = ListRequest$outboundSchema;
  /** @deprecated use `ListRequest$Outbound` instead. */
  export type Outbound = ListRequest$Outbound;
}

export function listRequestToJSON(listRequest: ListRequest): string {
  return JSON.stringify(ListRequest$outboundSchema.parse(listRequest));
}

export function listRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListRequest' from JSON`,
  );
}

/** @internal */
export const Tokenizer$inboundSchema: z.ZodNativeEnum<typeof Tokenizer> = z
  .nativeEnum(Tokenizer);

/** @internal */
export const Tokenizer$outboundSchema: z.ZodNativeEnum<typeof Tokenizer> =
  Tokenizer$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Tokenizer$ {
  /** @deprecated use `Tokenizer$inboundSchema` instead. */
  export const inboundSchema = Tokenizer$inboundSchema;
  /** @deprecated use `Tokenizer$outboundSchema` instead. */
  export const outboundSchema = Tokenizer$outboundSchema;
}

/** @internal */
export const InstructType$inboundSchema: z.ZodNativeEnum<typeof InstructType> =
  z.nativeEnum(InstructType);

/** @internal */
export const InstructType$outboundSchema: z.ZodNativeEnum<typeof InstructType> =
  InstructType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructType$ {
  /** @deprecated use `InstructType$inboundSchema` instead. */
  export const inboundSchema = InstructType$inboundSchema;
  /** @deprecated use `InstructType$outboundSchema` instead. */
  export const outboundSchema = InstructType$outboundSchema;
}

/** @internal */
export const InputModality$inboundSchema: z.ZodNativeEnum<
  typeof InputModality
> = z.nativeEnum(InputModality);

/** @internal */
export const InputModality$outboundSchema: z.ZodNativeEnum<
  typeof InputModality
> = InputModality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputModality$ {
  /** @deprecated use `InputModality$inboundSchema` instead. */
  export const inboundSchema = InputModality$inboundSchema;
  /** @deprecated use `InputModality$outboundSchema` instead. */
  export const outboundSchema = InputModality$outboundSchema;
}

/** @internal */
export const OutputModality$inboundSchema: z.ZodNativeEnum<
  typeof OutputModality
> = z.nativeEnum(OutputModality);

/** @internal */
export const OutputModality$outboundSchema: z.ZodNativeEnum<
  typeof OutputModality
> = OutputModality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputModality$ {
  /** @deprecated use `OutputModality$inboundSchema` instead. */
  export const inboundSchema = OutputModality$inboundSchema;
  /** @deprecated use `OutputModality$outboundSchema` instead. */
  export const outboundSchema = OutputModality$outboundSchema;
}

/** @internal */
export const Architecture$inboundSchema: z.ZodType<
  Architecture,
  z.ZodTypeDef,
  unknown
> = z.object({
  tokenizer: z.nullable(Tokenizer$inboundSchema),
  instruct_type: z.nullable(InstructType$inboundSchema),
  modality: z.nullable(z.string()),
  input_modalities: z.array(InputModality$inboundSchema),
  output_modalities: z.array(OutputModality$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "instruct_type": "instructType",
    "input_modalities": "inputModalities",
    "output_modalities": "outputModalities",
  });
});

/** @internal */
export type Architecture$Outbound = {
  tokenizer: string | null;
  instruct_type: string | null;
  modality: string | null;
  input_modalities: Array<string>;
  output_modalities: Array<string>;
};

/** @internal */
export const Architecture$outboundSchema: z.ZodType<
  Architecture$Outbound,
  z.ZodTypeDef,
  Architecture
> = z.object({
  tokenizer: z.nullable(Tokenizer$outboundSchema),
  instructType: z.nullable(InstructType$outboundSchema),
  modality: z.nullable(z.string()),
  inputModalities: z.array(InputModality$outboundSchema),
  outputModalities: z.array(OutputModality$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    instructType: "instruct_type",
    inputModalities: "input_modalities",
    outputModalities: "output_modalities",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Architecture$ {
  /** @deprecated use `Architecture$inboundSchema` instead. */
  export const inboundSchema = Architecture$inboundSchema;
  /** @deprecated use `Architecture$outboundSchema` instead. */
  export const outboundSchema = Architecture$outboundSchema;
  /** @deprecated use `Architecture$Outbound` instead. */
  export type Outbound = Architecture$Outbound;
}

export function architectureToJSON(architecture: Architecture): string {
  return JSON.stringify(Architecture$outboundSchema.parse(architecture));
}

export function architectureFromJSON(
  jsonString: string,
): SafeParseResult<Architecture, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Architecture$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Architecture' from JSON`,
  );
}

/** @internal */
export const ListData$inboundSchema: z.ZodType<
  ListData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  created: z.number(),
  description: z.string(),
  architecture: z.lazy(() => Architecture$inboundSchema),
  endpoints: z.array(models.EndpointsList$inboundSchema),
});

/** @internal */
export type ListData$Outbound = {
  id: string;
  name: string;
  created: number;
  description: string;
  architecture: Architecture$Outbound;
  endpoints: Array<models.EndpointsList$Outbound>;
};

/** @internal */
export const ListData$outboundSchema: z.ZodType<
  ListData$Outbound,
  z.ZodTypeDef,
  ListData
> = z.object({
  id: z.string(),
  name: z.string(),
  created: z.number(),
  description: z.string(),
  architecture: z.lazy(() => Architecture$outboundSchema),
  endpoints: z.array(models.EndpointsList$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListData$ {
  /** @deprecated use `ListData$inboundSchema` instead. */
  export const inboundSchema = ListData$inboundSchema;
  /** @deprecated use `ListData$outboundSchema` instead. */
  export const outboundSchema = ListData$outboundSchema;
  /** @deprecated use `ListData$Outbound` instead. */
  export type Outbound = ListData$Outbound;
}

export function listDataToJSON(listData: ListData): string {
  return JSON.stringify(ListData$outboundSchema.parse(listData));
}

export function listDataFromJSON(
  jsonString: string,
): SafeParseResult<ListData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListData' from JSON`,
  );
}

/** @internal */
export const ListResponse$inboundSchema: z.ZodType<
  ListResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => ListData$inboundSchema),
});

/** @internal */
export type ListResponse$Outbound = {
  data: ListData$Outbound;
};

/** @internal */
export const ListResponse$outboundSchema: z.ZodType<
  ListResponse$Outbound,
  z.ZodTypeDef,
  ListResponse
> = z.object({
  data: z.lazy(() => ListData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListResponse$ {
  /** @deprecated use `ListResponse$inboundSchema` instead. */
  export const inboundSchema = ListResponse$inboundSchema;
  /** @deprecated use `ListResponse$outboundSchema` instead. */
  export const outboundSchema = ListResponse$outboundSchema;
  /** @deprecated use `ListResponse$Outbound` instead. */
  export type Outbound = ListResponse$Outbound;
}

export function listResponseToJSON(listResponse: ListResponse): string {
  return JSON.stringify(ListResponse$outboundSchema.parse(listResponse));
}

export function listResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListResponse' from JSON`,
  );
}
