/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Error details
 */
export type ErrorT = {
  /**
   * Error code
   */
  code: number;
  /**
   * Error message
   */
  message: string;
};

export type ListProvidersData = {
  /**
   * Display name of the provider
   */
  name: string;
  /**
   * URL-friendly identifier for the provider
   */
  slug: string;
  /**
   * URL to the provider's privacy policy
   */
  privacyPolicyUrl: string | null;
  /**
   * URL to the provider's terms of service
   */
  termsOfServiceUrl?: string | null | undefined;
  /**
   * URL to the provider's status page
   */
  statusPageUrl?: string | null | undefined;
};

/**
 * Returns a list of providers
 */
export type ListProvidersResponse = {
  data: Array<ListProvidersData>;
};

/** @internal */
export const ErrorT$inboundSchema: z.ZodType<ErrorT, z.ZodTypeDef, unknown> = z
  .object({
    code: z.number(),
    message: z.string(),
  });

/** @internal */
export type ErrorT$Outbound = {
  code: number;
  message: string;
};

/** @internal */
export const ErrorT$outboundSchema: z.ZodType<
  ErrorT$Outbound,
  z.ZodTypeDef,
  ErrorT
> = z.object({
  code: z.number(),
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorT$ {
  /** @deprecated use `ErrorT$inboundSchema` instead. */
  export const inboundSchema = ErrorT$inboundSchema;
  /** @deprecated use `ErrorT$outboundSchema` instead. */
  export const outboundSchema = ErrorT$outboundSchema;
  /** @deprecated use `ErrorT$Outbound` instead. */
  export type Outbound = ErrorT$Outbound;
}

export function errorToJSON(errorT: ErrorT): string {
  return JSON.stringify(ErrorT$outboundSchema.parse(errorT));
}

export function errorFromJSON(
  jsonString: string,
): SafeParseResult<ErrorT, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ErrorT$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ErrorT' from JSON`,
  );
}

/** @internal */
export const ListProvidersData$inboundSchema: z.ZodType<
  ListProvidersData,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  slug: z.string(),
  privacy_policy_url: z.nullable(z.string()),
  terms_of_service_url: z.nullable(z.string()).optional(),
  status_page_url: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "privacy_policy_url": "privacyPolicyUrl",
    "terms_of_service_url": "termsOfServiceUrl",
    "status_page_url": "statusPageUrl",
  });
});

/** @internal */
export type ListProvidersData$Outbound = {
  name: string;
  slug: string;
  privacy_policy_url: string | null;
  terms_of_service_url?: string | null | undefined;
  status_page_url?: string | null | undefined;
};

/** @internal */
export const ListProvidersData$outboundSchema: z.ZodType<
  ListProvidersData$Outbound,
  z.ZodTypeDef,
  ListProvidersData
> = z.object({
  name: z.string(),
  slug: z.string(),
  privacyPolicyUrl: z.nullable(z.string()),
  termsOfServiceUrl: z.nullable(z.string()).optional(),
  statusPageUrl: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    privacyPolicyUrl: "privacy_policy_url",
    termsOfServiceUrl: "terms_of_service_url",
    statusPageUrl: "status_page_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListProvidersData$ {
  /** @deprecated use `ListProvidersData$inboundSchema` instead. */
  export const inboundSchema = ListProvidersData$inboundSchema;
  /** @deprecated use `ListProvidersData$outboundSchema` instead. */
  export const outboundSchema = ListProvidersData$outboundSchema;
  /** @deprecated use `ListProvidersData$Outbound` instead. */
  export type Outbound = ListProvidersData$Outbound;
}

export function listProvidersDataToJSON(
  listProvidersData: ListProvidersData,
): string {
  return JSON.stringify(
    ListProvidersData$outboundSchema.parse(listProvidersData),
  );
}

export function listProvidersDataFromJSON(
  jsonString: string,
): SafeParseResult<ListProvidersData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListProvidersData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListProvidersData' from JSON`,
  );
}

/** @internal */
export const ListProvidersResponse$inboundSchema: z.ZodType<
  ListProvidersResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(z.lazy(() => ListProvidersData$inboundSchema)),
});

/** @internal */
export type ListProvidersResponse$Outbound = {
  data: Array<ListProvidersData$Outbound>;
};

/** @internal */
export const ListProvidersResponse$outboundSchema: z.ZodType<
  ListProvidersResponse$Outbound,
  z.ZodTypeDef,
  ListProvidersResponse
> = z.object({
  data: z.array(z.lazy(() => ListProvidersData$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListProvidersResponse$ {
  /** @deprecated use `ListProvidersResponse$inboundSchema` instead. */
  export const inboundSchema = ListProvidersResponse$inboundSchema;
  /** @deprecated use `ListProvidersResponse$outboundSchema` instead. */
  export const outboundSchema = ListProvidersResponse$outboundSchema;
  /** @deprecated use `ListProvidersResponse$Outbound` instead. */
  export type Outbound = ListProvidersResponse$Outbound;
}

export function listProvidersResponseToJSON(
  listProvidersResponse: ListProvidersResponse,
): string {
  return JSON.stringify(
    ListProvidersResponse$outboundSchema.parse(listProvidersResponse),
  );
}

export function listProvidersResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListProvidersResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListProvidersResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListProvidersResponse' from JSON`,
  );
}
