/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteKeysHashRequest = {
  hash: string;
};

/**
 * API key deleted successfully
 */
export type DeleteKeysHashResponse = {
  /**
   * Confirmation that the API key was deleted
   */
  deleted: boolean;
};

/** @internal */
export const DeleteKeysHashRequest$inboundSchema: z.ZodType<
  DeleteKeysHashRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  hash: z.string(),
});

/** @internal */
export type DeleteKeysHashRequest$Outbound = {
  hash: string;
};

/** @internal */
export const DeleteKeysHashRequest$outboundSchema: z.ZodType<
  DeleteKeysHashRequest$Outbound,
  z.ZodTypeDef,
  DeleteKeysHashRequest
> = z.object({
  hash: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteKeysHashRequest$ {
  /** @deprecated use `DeleteKeysHashRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteKeysHashRequest$inboundSchema;
  /** @deprecated use `DeleteKeysHashRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteKeysHashRequest$outboundSchema;
  /** @deprecated use `DeleteKeysHashRequest$Outbound` instead. */
  export type Outbound = DeleteKeysHashRequest$Outbound;
}

export function deleteKeysHashRequestToJSON(
  deleteKeysHashRequest: DeleteKeysHashRequest,
): string {
  return JSON.stringify(
    DeleteKeysHashRequest$outboundSchema.parse(deleteKeysHashRequest),
  );
}

export function deleteKeysHashRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteKeysHashRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteKeysHashRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteKeysHashRequest' from JSON`,
  );
}

/** @internal */
export const DeleteKeysHashResponse$inboundSchema: z.ZodType<
  DeleteKeysHashResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  deleted: z.boolean(),
});

/** @internal */
export type DeleteKeysHashResponse$Outbound = {
  deleted: boolean;
};

/** @internal */
export const DeleteKeysHashResponse$outboundSchema: z.ZodType<
  DeleteKeysHashResponse$Outbound,
  z.ZodTypeDef,
  DeleteKeysHashResponse
> = z.object({
  deleted: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteKeysHashResponse$ {
  /** @deprecated use `DeleteKeysHashResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteKeysHashResponse$inboundSchema;
  /** @deprecated use `DeleteKeysHashResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteKeysHashResponse$outboundSchema;
  /** @deprecated use `DeleteKeysHashResponse$Outbound` instead. */
  export type Outbound = DeleteKeysHashResponse$Outbound;
}

export function deleteKeysHashResponseToJSON(
  deleteKeysHashResponse: DeleteKeysHashResponse,
): string {
  return JSON.stringify(
    DeleteKeysHashResponse$outboundSchema.parse(deleteKeysHashResponse),
  );
}

export function deleteKeysHashResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteKeysHashResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteKeysHashResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteKeysHashResponse' from JSON`,
  );
}
