/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Legacy rate limit information about a key. Will always return -1.
 *
 * @deprecated class: This will be removed in a future release, please migrate away from it as soon as possible.
 */
export type GetAuthKeyRateLimit = {
  /**
   * Number of requests allowed per interval
   */
  requests: number;
  /**
   * Rate limit interval
   */
  interval: string;
  /**
   * Note about the rate limit
   */
  note: string;
};

/**
 * Current API key information
 */
export type GetAuthKeyData = {
  /**
   * Human-readable label for the API key
   */
  label: string;
  /**
   * Spending limit for the API key in USD
   */
  limit: number | null;
  /**
   * Current usage of the API key in USD
   */
  usage: number;
  /**
   * Whether this is a free tier API key
   */
  isFreeTier: boolean;
  /**
   * Whether this is a provisioning key
   */
  isProvisioningKey: boolean;
  /**
   * Remaining spending limit in USD
   */
  limitRemaining: number | null;
  /**
   * Legacy rate limit information about a key. Will always return -1.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  rateLimit: GetAuthKeyRateLimit;
};

/**
 * API key details
 */
export type GetAuthKeyResponse = {
  /**
   * Current API key information
   */
  data: GetAuthKeyData;
};

/** @internal */
export const GetAuthKeyRateLimit$inboundSchema: z.ZodType<
  GetAuthKeyRateLimit,
  z.ZodTypeDef,
  unknown
> = z.object({
  requests: z.number(),
  interval: z.string(),
  note: z.string(),
});

/** @internal */
export type GetAuthKeyRateLimit$Outbound = {
  requests: number;
  interval: string;
  note: string;
};

/** @internal */
export const GetAuthKeyRateLimit$outboundSchema: z.ZodType<
  GetAuthKeyRateLimit$Outbound,
  z.ZodTypeDef,
  GetAuthKeyRateLimit
> = z.object({
  requests: z.number(),
  interval: z.string(),
  note: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAuthKeyRateLimit$ {
  /** @deprecated use `GetAuthKeyRateLimit$inboundSchema` instead. */
  export const inboundSchema = GetAuthKeyRateLimit$inboundSchema;
  /** @deprecated use `GetAuthKeyRateLimit$outboundSchema` instead. */
  export const outboundSchema = GetAuthKeyRateLimit$outboundSchema;
  /** @deprecated use `GetAuthKeyRateLimit$Outbound` instead. */
  export type Outbound = GetAuthKeyRateLimit$Outbound;
}

export function getAuthKeyRateLimitToJSON(
  getAuthKeyRateLimit: GetAuthKeyRateLimit,
): string {
  return JSON.stringify(
    GetAuthKeyRateLimit$outboundSchema.parse(getAuthKeyRateLimit),
  );
}

export function getAuthKeyRateLimitFromJSON(
  jsonString: string,
): SafeParseResult<GetAuthKeyRateLimit, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAuthKeyRateLimit$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAuthKeyRateLimit' from JSON`,
  );
}

/** @internal */
export const GetAuthKeyData$inboundSchema: z.ZodType<
  GetAuthKeyData,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string(),
  limit: z.nullable(z.number()),
  usage: z.number(),
  is_free_tier: z.boolean(),
  is_provisioning_key: z.boolean(),
  limit_remaining: z.nullable(z.number()),
  rate_limit: z.lazy(() => GetAuthKeyRateLimit$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "is_free_tier": "isFreeTier",
    "is_provisioning_key": "isProvisioningKey",
    "limit_remaining": "limitRemaining",
    "rate_limit": "rateLimit",
  });
});

/** @internal */
export type GetAuthKeyData$Outbound = {
  label: string;
  limit: number | null;
  usage: number;
  is_free_tier: boolean;
  is_provisioning_key: boolean;
  limit_remaining: number | null;
  rate_limit: GetAuthKeyRateLimit$Outbound;
};

/** @internal */
export const GetAuthKeyData$outboundSchema: z.ZodType<
  GetAuthKeyData$Outbound,
  z.ZodTypeDef,
  GetAuthKeyData
> = z.object({
  label: z.string(),
  limit: z.nullable(z.number()),
  usage: z.number(),
  isFreeTier: z.boolean(),
  isProvisioningKey: z.boolean(),
  limitRemaining: z.nullable(z.number()),
  rateLimit: z.lazy(() => GetAuthKeyRateLimit$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    isFreeTier: "is_free_tier",
    isProvisioningKey: "is_provisioning_key",
    limitRemaining: "limit_remaining",
    rateLimit: "rate_limit",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAuthKeyData$ {
  /** @deprecated use `GetAuthKeyData$inboundSchema` instead. */
  export const inboundSchema = GetAuthKeyData$inboundSchema;
  /** @deprecated use `GetAuthKeyData$outboundSchema` instead. */
  export const outboundSchema = GetAuthKeyData$outboundSchema;
  /** @deprecated use `GetAuthKeyData$Outbound` instead. */
  export type Outbound = GetAuthKeyData$Outbound;
}

export function getAuthKeyDataToJSON(getAuthKeyData: GetAuthKeyData): string {
  return JSON.stringify(GetAuthKeyData$outboundSchema.parse(getAuthKeyData));
}

export function getAuthKeyDataFromJSON(
  jsonString: string,
): SafeParseResult<GetAuthKeyData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAuthKeyData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAuthKeyData' from JSON`,
  );
}

/** @internal */
export const GetAuthKeyResponse$inboundSchema: z.ZodType<
  GetAuthKeyResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => GetAuthKeyData$inboundSchema),
});

/** @internal */
export type GetAuthKeyResponse$Outbound = {
  data: GetAuthKeyData$Outbound;
};

/** @internal */
export const GetAuthKeyResponse$outboundSchema: z.ZodType<
  GetAuthKeyResponse$Outbound,
  z.ZodTypeDef,
  GetAuthKeyResponse
> = z.object({
  data: z.lazy(() => GetAuthKeyData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAuthKeyResponse$ {
  /** @deprecated use `GetAuthKeyResponse$inboundSchema` instead. */
  export const inboundSchema = GetAuthKeyResponse$inboundSchema;
  /** @deprecated use `GetAuthKeyResponse$outboundSchema` instead. */
  export const outboundSchema = GetAuthKeyResponse$outboundSchema;
  /** @deprecated use `GetAuthKeyResponse$Outbound` instead. */
  export type Outbound = GetAuthKeyResponse$Outbound;
}

export function getAuthKeyResponseToJSON(
  getAuthKeyResponse: GetAuthKeyResponse,
): string {
  return JSON.stringify(
    GetAuthKeyResponse$outboundSchema.parse(getAuthKeyResponse),
  );
}

export function getAuthKeyResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetAuthKeyResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAuthKeyResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAuthKeyResponse' from JSON`,
  );
}
