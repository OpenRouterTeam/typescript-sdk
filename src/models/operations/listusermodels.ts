/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ListUserModelsSecurity = {
  bearer: string;
};

/**
 * Returns a list of models filtered by user provider preferences
 */
export type ListUserModelsResponse = {
  /**
   * List of available models
   */
  data: Array<models.ModelsList>;
};

/** @internal */
export const ListUserModelsSecurity$inboundSchema: z.ZodType<
  ListUserModelsSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  bearer: z.string(),
});

/** @internal */
export type ListUserModelsSecurity$Outbound = {
  bearer: string;
};

/** @internal */
export const ListUserModelsSecurity$outboundSchema: z.ZodType<
  ListUserModelsSecurity$Outbound,
  z.ZodTypeDef,
  ListUserModelsSecurity
> = z.object({
  bearer: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUserModelsSecurity$ {
  /** @deprecated use `ListUserModelsSecurity$inboundSchema` instead. */
  export const inboundSchema = ListUserModelsSecurity$inboundSchema;
  /** @deprecated use `ListUserModelsSecurity$outboundSchema` instead. */
  export const outboundSchema = ListUserModelsSecurity$outboundSchema;
  /** @deprecated use `ListUserModelsSecurity$Outbound` instead. */
  export type Outbound = ListUserModelsSecurity$Outbound;
}

export function listUserModelsSecurityToJSON(
  listUserModelsSecurity: ListUserModelsSecurity,
): string {
  return JSON.stringify(
    ListUserModelsSecurity$outboundSchema.parse(listUserModelsSecurity),
  );
}

export function listUserModelsSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ListUserModelsSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListUserModelsSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListUserModelsSecurity' from JSON`,
  );
}

/** @internal */
export const ListUserModelsResponse$inboundSchema: z.ZodType<
  ListUserModelsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(models.ModelsList$inboundSchema),
});

/** @internal */
export type ListUserModelsResponse$Outbound = {
  data: Array<models.ModelsList$Outbound>;
};

/** @internal */
export const ListUserModelsResponse$outboundSchema: z.ZodType<
  ListUserModelsResponse$Outbound,
  z.ZodTypeDef,
  ListUserModelsResponse
> = z.object({
  data: z.array(models.ModelsList$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUserModelsResponse$ {
  /** @deprecated use `ListUserModelsResponse$inboundSchema` instead. */
  export const inboundSchema = ListUserModelsResponse$inboundSchema;
  /** @deprecated use `ListUserModelsResponse$outboundSchema` instead. */
  export const outboundSchema = ListUserModelsResponse$outboundSchema;
  /** @deprecated use `ListUserModelsResponse$Outbound` instead. */
  export type Outbound = ListUserModelsResponse$Outbound;
}

export function listUserModelsResponseToJSON(
  listUserModelsResponse: ListUserModelsResponse,
): string {
  return JSON.stringify(
    ListUserModelsResponse$outboundSchema.parse(listUserModelsResponse),
  );
}

export function listUserModelsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListUserModelsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListUserModelsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListUserModelsResponse' from JSON`,
  );
}
