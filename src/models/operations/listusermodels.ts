/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListUserModelsSecurity = {
  bearer: string;
};

export type ListUserModelsPrompt = number | string | any;

export type ListUserModelsCompletion = number | string | any;

export type ModelsListUserModelsRequest = number | string | any;

export type ListUserModelsImage = number | string | any;

export type ListUserModelsImageOutput = number | string | any;

export type ListUserModelsAudio = number | string | any;

export type ListUserModelsInputAudioCache = number | string | any;

export type ListUserModelsWebSearch = number | string | any;

export type ListUserModelsInternalReasoning = number | string | any;

export type ListUserModelsInputCacheRead = number | string | any;

export type ListUserModelsInputCacheWrite = number | string | any;

/**
 * Pricing information for the model
 */
export type ListUserModelsPricing = {
  prompt?: number | string | any | undefined;
  completion?: number | string | any | undefined;
  request?: number | string | any | undefined;
  image?: number | string | any | undefined;
  imageOutput?: number | string | any | undefined;
  audio?: number | string | any | undefined;
  inputAudioCache?: number | string | any | undefined;
  webSearch?: number | string | any | undefined;
  internalReasoning?: number | string | any | undefined;
  inputCacheRead?: number | string | any | undefined;
  inputCacheWrite?: number | string | any | undefined;
  discount?: number | undefined;
};

/**
 * Tokenizer type used by the model
 */
export const ListUserModelsTokenizer = {
  Router: "Router",
  Media: "Media",
  Other: "Other",
  Gpt: "GPT",
  Claude: "Claude",
  Gemini: "Gemini",
  Grok: "Grok",
  Cohere: "Cohere",
  Nova: "Nova",
  Qwen: "Qwen",
  Yi: "Yi",
  DeepSeek: "DeepSeek",
  Mistral: "Mistral",
  Llama2: "Llama2",
  Llama3: "Llama3",
  Llama4: "Llama4",
  PaLM: "PaLM",
  Rwkv: "RWKV",
  Qwen3: "Qwen3",
} as const;
/**
 * Tokenizer type used by the model
 */
export type ListUserModelsTokenizer = ClosedEnum<
  typeof ListUserModelsTokenizer
>;

/**
 * Instruction format type
 */
export const ListUserModelsInstructType = {
  None: "none",
  Airoboros: "airoboros",
  Alpaca: "alpaca",
  AlpacaModif: "alpaca-modif",
  Chatml: "chatml",
  Claude: "claude",
  CodeLlama: "code-llama",
  Gemma: "gemma",
  Llama2: "llama2",
  Llama3: "llama3",
  Mistral: "mistral",
  Nemotron: "nemotron",
  Neural: "neural",
  Openchat: "openchat",
  Phi3: "phi3",
  Rwkv: "rwkv",
  Vicuna: "vicuna",
  Zephyr: "zephyr",
  DeepseekR1: "deepseek-r1",
  DeepseekV31: "deepseek-v3.1",
  Qwq: "qwq",
  Qwen3: "qwen3",
} as const;
/**
 * Instruction format type
 */
export type ListUserModelsInstructType = ClosedEnum<
  typeof ListUserModelsInstructType
>;

export const ListUserModelsInputModality = {
  Text: "text",
  Image: "image",
  File: "file",
  Audio: "audio",
} as const;
export type ListUserModelsInputModality = ClosedEnum<
  typeof ListUserModelsInputModality
>;

export const ListUserModelsOutputModality = {
  Text: "text",
  Image: "image",
  Embeddings: "embeddings",
} as const;
export type ListUserModelsOutputModality = ClosedEnum<
  typeof ListUserModelsOutputModality
>;

/**
 * Model architecture information
 */
export type ListUserModelsArchitecture = {
  /**
   * Tokenizer type used by the model
   */
  tokenizer?: ListUserModelsTokenizer | undefined;
  /**
   * Instruction format type
   */
  instructType?: ListUserModelsInstructType | null | undefined;
  /**
   * Primary modality of the model
   */
  modality: string | null;
  /**
   * Supported input modalities
   */
  inputModalities: Array<ListUserModelsInputModality>;
  /**
   * Supported output modalities
   */
  outputModalities: Array<ListUserModelsOutputModality>;
};

/**
 * Information about the top provider for this model
 */
export type ListUserModelsTopProvider = {
  /**
   * Context length from the top provider
   */
  contextLength?: number | null | undefined;
  /**
   * Maximum completion tokens from the top provider
   */
  maxCompletionTokens?: number | null | undefined;
  /**
   * Whether the top provider moderates content
   */
  isModerated: boolean;
};

/**
 * Per-request token limits
 */
export type ListUserModelsPerRequestLimits = {
  /**
   * Maximum prompt tokens per request
   */
  promptTokens?: any | undefined;
  /**
   * Maximum completion tokens per request
   */
  completionTokens?: any | undefined;
};

export const ListUserModelsSupportedParameter = {
  Temperature: "temperature",
  TopP: "top_p",
  TopK: "top_k",
  MinP: "min_p",
  TopA: "top_a",
  FrequencyPenalty: "frequency_penalty",
  PresencePenalty: "presence_penalty",
  RepetitionPenalty: "repetition_penalty",
  MaxTokens: "max_tokens",
  LogitBias: "logit_bias",
  Logprobs: "logprobs",
  TopLogprobs: "top_logprobs",
  Seed: "seed",
  ResponseFormat: "response_format",
  StructuredOutputs: "structured_outputs",
  Stop: "stop",
  Tools: "tools",
  ToolChoice: "tool_choice",
  ParallelToolCalls: "parallel_tool_calls",
  IncludeReasoning: "include_reasoning",
  Reasoning: "reasoning",
  WebSearchOptions: "web_search_options",
  Verbosity: "verbosity",
} as const;
export type ListUserModelsSupportedParameter = ClosedEnum<
  typeof ListUserModelsSupportedParameter
>;

/**
 * Default parameters for this model
 */
export type ListUserModelsDefaultParameters = {
  temperature?: number | null | undefined;
  topP?: number | null | undefined;
  frequencyPenalty?: number | null | undefined;
};

export type ListUserModelsData = {
  /**
   * Unique identifier for the model
   */
  id: string;
  /**
   * Canonical slug for the model
   */
  canonicalSlug: string;
  /**
   * Hugging Face model identifier, if applicable
   */
  huggingFaceId?: string | null | undefined;
  /**
   * Display name of the model
   */
  name: string;
  /**
   * Unix timestamp of when the model was created
   */
  created: number;
  /**
   * Description of the model
   */
  description?: string | undefined;
  /**
   * Pricing information for the model
   */
  pricing: ListUserModelsPricing;
  /**
   * Maximum context length in tokens
   */
  contextLength: number | null;
  /**
   * Model architecture information
   */
  architecture: ListUserModelsArchitecture;
  /**
   * Information about the top provider for this model
   */
  topProvider: ListUserModelsTopProvider;
  /**
   * Per-request token limits
   */
  perRequestLimits: ListUserModelsPerRequestLimits | null;
  /**
   * List of supported parameters for this model
   */
  supportedParameters: Array<ListUserModelsSupportedParameter>;
  /**
   * Default parameters for this model
   */
  defaultParameters: ListUserModelsDefaultParameters | null;
};

/**
 * Returns a list of models filtered by user provider preferences
 */
export type ListUserModelsResponse = {
  /**
   * List of available models
   */
  data: Array<ListUserModelsData>;
};

/** @internal */
export const ListUserModelsSecurity$inboundSchema: z.ZodType<
  ListUserModelsSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  bearer: z.string(),
});

/** @internal */
export type ListUserModelsSecurity$Outbound = {
  bearer: string;
};

/** @internal */
export const ListUserModelsSecurity$outboundSchema: z.ZodType<
  ListUserModelsSecurity$Outbound,
  z.ZodTypeDef,
  ListUserModelsSecurity
> = z.object({
  bearer: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUserModelsSecurity$ {
  /** @deprecated use `ListUserModelsSecurity$inboundSchema` instead. */
  export const inboundSchema = ListUserModelsSecurity$inboundSchema;
  /** @deprecated use `ListUserModelsSecurity$outboundSchema` instead. */
  export const outboundSchema = ListUserModelsSecurity$outboundSchema;
  /** @deprecated use `ListUserModelsSecurity$Outbound` instead. */
  export type Outbound = ListUserModelsSecurity$Outbound;
}

export function listUserModelsSecurityToJSON(
  listUserModelsSecurity: ListUserModelsSecurity,
): string {
  return JSON.stringify(
    ListUserModelsSecurity$outboundSchema.parse(listUserModelsSecurity),
  );
}

export function listUserModelsSecurityFromJSON(
  jsonString: string,
): SafeParseResult<ListUserModelsSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListUserModelsSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListUserModelsSecurity' from JSON`,
  );
}

/** @internal */
export const ListUserModelsPrompt$inboundSchema: z.ZodType<
  ListUserModelsPrompt,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type ListUserModelsPrompt$Outbound = number | string | any;

/** @internal */
export const ListUserModelsPrompt$outboundSchema: z.ZodType<
  ListUserModelsPrompt$Outbound,
  z.ZodTypeDef,
  ListUserModelsPrompt
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUserModelsPrompt$ {
  /** @deprecated use `ListUserModelsPrompt$inboundSchema` instead. */
  export const inboundSchema = ListUserModelsPrompt$inboundSchema;
  /** @deprecated use `ListUserModelsPrompt$outboundSchema` instead. */
  export const outboundSchema = ListUserModelsPrompt$outboundSchema;
  /** @deprecated use `ListUserModelsPrompt$Outbound` instead. */
  export type Outbound = ListUserModelsPrompt$Outbound;
}

export function listUserModelsPromptToJSON(
  listUserModelsPrompt: ListUserModelsPrompt,
): string {
  return JSON.stringify(
    ListUserModelsPrompt$outboundSchema.parse(listUserModelsPrompt),
  );
}

export function listUserModelsPromptFromJSON(
  jsonString: string,
): SafeParseResult<ListUserModelsPrompt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListUserModelsPrompt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListUserModelsPrompt' from JSON`,
  );
}

/** @internal */
export const ListUserModelsCompletion$inboundSchema: z.ZodType<
  ListUserModelsCompletion,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type ListUserModelsCompletion$Outbound = number | string | any;

/** @internal */
export const ListUserModelsCompletion$outboundSchema: z.ZodType<
  ListUserModelsCompletion$Outbound,
  z.ZodTypeDef,
  ListUserModelsCompletion
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUserModelsCompletion$ {
  /** @deprecated use `ListUserModelsCompletion$inboundSchema` instead. */
  export const inboundSchema = ListUserModelsCompletion$inboundSchema;
  /** @deprecated use `ListUserModelsCompletion$outboundSchema` instead. */
  export const outboundSchema = ListUserModelsCompletion$outboundSchema;
  /** @deprecated use `ListUserModelsCompletion$Outbound` instead. */
  export type Outbound = ListUserModelsCompletion$Outbound;
}

export function listUserModelsCompletionToJSON(
  listUserModelsCompletion: ListUserModelsCompletion,
): string {
  return JSON.stringify(
    ListUserModelsCompletion$outboundSchema.parse(listUserModelsCompletion),
  );
}

export function listUserModelsCompletionFromJSON(
  jsonString: string,
): SafeParseResult<ListUserModelsCompletion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListUserModelsCompletion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListUserModelsCompletion' from JSON`,
  );
}

/** @internal */
export const ModelsListUserModelsRequest$inboundSchema: z.ZodType<
  ModelsListUserModelsRequest,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type ModelsListUserModelsRequest$Outbound = number | string | any;

/** @internal */
export const ModelsListUserModelsRequest$outboundSchema: z.ZodType<
  ModelsListUserModelsRequest$Outbound,
  z.ZodTypeDef,
  ModelsListUserModelsRequest
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModelsListUserModelsRequest$ {
  /** @deprecated use `ModelsListUserModelsRequest$inboundSchema` instead. */
  export const inboundSchema = ModelsListUserModelsRequest$inboundSchema;
  /** @deprecated use `ModelsListUserModelsRequest$outboundSchema` instead. */
  export const outboundSchema = ModelsListUserModelsRequest$outboundSchema;
  /** @deprecated use `ModelsListUserModelsRequest$Outbound` instead. */
  export type Outbound = ModelsListUserModelsRequest$Outbound;
}

export function modelsListUserModelsRequestToJSON(
  modelsListUserModelsRequest: ModelsListUserModelsRequest,
): string {
  return JSON.stringify(
    ModelsListUserModelsRequest$outboundSchema.parse(
      modelsListUserModelsRequest,
    ),
  );
}

export function modelsListUserModelsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ModelsListUserModelsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ModelsListUserModelsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ModelsListUserModelsRequest' from JSON`,
  );
}

/** @internal */
export const ListUserModelsImage$inboundSchema: z.ZodType<
  ListUserModelsImage,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type ListUserModelsImage$Outbound = number | string | any;

/** @internal */
export const ListUserModelsImage$outboundSchema: z.ZodType<
  ListUserModelsImage$Outbound,
  z.ZodTypeDef,
  ListUserModelsImage
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUserModelsImage$ {
  /** @deprecated use `ListUserModelsImage$inboundSchema` instead. */
  export const inboundSchema = ListUserModelsImage$inboundSchema;
  /** @deprecated use `ListUserModelsImage$outboundSchema` instead. */
  export const outboundSchema = ListUserModelsImage$outboundSchema;
  /** @deprecated use `ListUserModelsImage$Outbound` instead. */
  export type Outbound = ListUserModelsImage$Outbound;
}

export function listUserModelsImageToJSON(
  listUserModelsImage: ListUserModelsImage,
): string {
  return JSON.stringify(
    ListUserModelsImage$outboundSchema.parse(listUserModelsImage),
  );
}

export function listUserModelsImageFromJSON(
  jsonString: string,
): SafeParseResult<ListUserModelsImage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListUserModelsImage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListUserModelsImage' from JSON`,
  );
}

/** @internal */
export const ListUserModelsImageOutput$inboundSchema: z.ZodType<
  ListUserModelsImageOutput,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type ListUserModelsImageOutput$Outbound = number | string | any;

/** @internal */
export const ListUserModelsImageOutput$outboundSchema: z.ZodType<
  ListUserModelsImageOutput$Outbound,
  z.ZodTypeDef,
  ListUserModelsImageOutput
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUserModelsImageOutput$ {
  /** @deprecated use `ListUserModelsImageOutput$inboundSchema` instead. */
  export const inboundSchema = ListUserModelsImageOutput$inboundSchema;
  /** @deprecated use `ListUserModelsImageOutput$outboundSchema` instead. */
  export const outboundSchema = ListUserModelsImageOutput$outboundSchema;
  /** @deprecated use `ListUserModelsImageOutput$Outbound` instead. */
  export type Outbound = ListUserModelsImageOutput$Outbound;
}

export function listUserModelsImageOutputToJSON(
  listUserModelsImageOutput: ListUserModelsImageOutput,
): string {
  return JSON.stringify(
    ListUserModelsImageOutput$outboundSchema.parse(listUserModelsImageOutput),
  );
}

export function listUserModelsImageOutputFromJSON(
  jsonString: string,
): SafeParseResult<ListUserModelsImageOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListUserModelsImageOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListUserModelsImageOutput' from JSON`,
  );
}

/** @internal */
export const ListUserModelsAudio$inboundSchema: z.ZodType<
  ListUserModelsAudio,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type ListUserModelsAudio$Outbound = number | string | any;

/** @internal */
export const ListUserModelsAudio$outboundSchema: z.ZodType<
  ListUserModelsAudio$Outbound,
  z.ZodTypeDef,
  ListUserModelsAudio
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUserModelsAudio$ {
  /** @deprecated use `ListUserModelsAudio$inboundSchema` instead. */
  export const inboundSchema = ListUserModelsAudio$inboundSchema;
  /** @deprecated use `ListUserModelsAudio$outboundSchema` instead. */
  export const outboundSchema = ListUserModelsAudio$outboundSchema;
  /** @deprecated use `ListUserModelsAudio$Outbound` instead. */
  export type Outbound = ListUserModelsAudio$Outbound;
}

export function listUserModelsAudioToJSON(
  listUserModelsAudio: ListUserModelsAudio,
): string {
  return JSON.stringify(
    ListUserModelsAudio$outboundSchema.parse(listUserModelsAudio),
  );
}

export function listUserModelsAudioFromJSON(
  jsonString: string,
): SafeParseResult<ListUserModelsAudio, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListUserModelsAudio$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListUserModelsAudio' from JSON`,
  );
}

/** @internal */
export const ListUserModelsInputAudioCache$inboundSchema: z.ZodType<
  ListUserModelsInputAudioCache,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type ListUserModelsInputAudioCache$Outbound = number | string | any;

/** @internal */
export const ListUserModelsInputAudioCache$outboundSchema: z.ZodType<
  ListUserModelsInputAudioCache$Outbound,
  z.ZodTypeDef,
  ListUserModelsInputAudioCache
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUserModelsInputAudioCache$ {
  /** @deprecated use `ListUserModelsInputAudioCache$inboundSchema` instead. */
  export const inboundSchema = ListUserModelsInputAudioCache$inboundSchema;
  /** @deprecated use `ListUserModelsInputAudioCache$outboundSchema` instead. */
  export const outboundSchema = ListUserModelsInputAudioCache$outboundSchema;
  /** @deprecated use `ListUserModelsInputAudioCache$Outbound` instead. */
  export type Outbound = ListUserModelsInputAudioCache$Outbound;
}

export function listUserModelsInputAudioCacheToJSON(
  listUserModelsInputAudioCache: ListUserModelsInputAudioCache,
): string {
  return JSON.stringify(
    ListUserModelsInputAudioCache$outboundSchema.parse(
      listUserModelsInputAudioCache,
    ),
  );
}

export function listUserModelsInputAudioCacheFromJSON(
  jsonString: string,
): SafeParseResult<ListUserModelsInputAudioCache, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListUserModelsInputAudioCache$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListUserModelsInputAudioCache' from JSON`,
  );
}

/** @internal */
export const ListUserModelsWebSearch$inboundSchema: z.ZodType<
  ListUserModelsWebSearch,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type ListUserModelsWebSearch$Outbound = number | string | any;

/** @internal */
export const ListUserModelsWebSearch$outboundSchema: z.ZodType<
  ListUserModelsWebSearch$Outbound,
  z.ZodTypeDef,
  ListUserModelsWebSearch
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUserModelsWebSearch$ {
  /** @deprecated use `ListUserModelsWebSearch$inboundSchema` instead. */
  export const inboundSchema = ListUserModelsWebSearch$inboundSchema;
  /** @deprecated use `ListUserModelsWebSearch$outboundSchema` instead. */
  export const outboundSchema = ListUserModelsWebSearch$outboundSchema;
  /** @deprecated use `ListUserModelsWebSearch$Outbound` instead. */
  export type Outbound = ListUserModelsWebSearch$Outbound;
}

export function listUserModelsWebSearchToJSON(
  listUserModelsWebSearch: ListUserModelsWebSearch,
): string {
  return JSON.stringify(
    ListUserModelsWebSearch$outboundSchema.parse(listUserModelsWebSearch),
  );
}

export function listUserModelsWebSearchFromJSON(
  jsonString: string,
): SafeParseResult<ListUserModelsWebSearch, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListUserModelsWebSearch$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListUserModelsWebSearch' from JSON`,
  );
}

/** @internal */
export const ListUserModelsInternalReasoning$inboundSchema: z.ZodType<
  ListUserModelsInternalReasoning,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type ListUserModelsInternalReasoning$Outbound = number | string | any;

/** @internal */
export const ListUserModelsInternalReasoning$outboundSchema: z.ZodType<
  ListUserModelsInternalReasoning$Outbound,
  z.ZodTypeDef,
  ListUserModelsInternalReasoning
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUserModelsInternalReasoning$ {
  /** @deprecated use `ListUserModelsInternalReasoning$inboundSchema` instead. */
  export const inboundSchema = ListUserModelsInternalReasoning$inboundSchema;
  /** @deprecated use `ListUserModelsInternalReasoning$outboundSchema` instead. */
  export const outboundSchema = ListUserModelsInternalReasoning$outboundSchema;
  /** @deprecated use `ListUserModelsInternalReasoning$Outbound` instead. */
  export type Outbound = ListUserModelsInternalReasoning$Outbound;
}

export function listUserModelsInternalReasoningToJSON(
  listUserModelsInternalReasoning: ListUserModelsInternalReasoning,
): string {
  return JSON.stringify(
    ListUserModelsInternalReasoning$outboundSchema.parse(
      listUserModelsInternalReasoning,
    ),
  );
}

export function listUserModelsInternalReasoningFromJSON(
  jsonString: string,
): SafeParseResult<ListUserModelsInternalReasoning, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListUserModelsInternalReasoning$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListUserModelsInternalReasoning' from JSON`,
  );
}

/** @internal */
export const ListUserModelsInputCacheRead$inboundSchema: z.ZodType<
  ListUserModelsInputCacheRead,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type ListUserModelsInputCacheRead$Outbound = number | string | any;

/** @internal */
export const ListUserModelsInputCacheRead$outboundSchema: z.ZodType<
  ListUserModelsInputCacheRead$Outbound,
  z.ZodTypeDef,
  ListUserModelsInputCacheRead
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUserModelsInputCacheRead$ {
  /** @deprecated use `ListUserModelsInputCacheRead$inboundSchema` instead. */
  export const inboundSchema = ListUserModelsInputCacheRead$inboundSchema;
  /** @deprecated use `ListUserModelsInputCacheRead$outboundSchema` instead. */
  export const outboundSchema = ListUserModelsInputCacheRead$outboundSchema;
  /** @deprecated use `ListUserModelsInputCacheRead$Outbound` instead. */
  export type Outbound = ListUserModelsInputCacheRead$Outbound;
}

export function listUserModelsInputCacheReadToJSON(
  listUserModelsInputCacheRead: ListUserModelsInputCacheRead,
): string {
  return JSON.stringify(
    ListUserModelsInputCacheRead$outboundSchema.parse(
      listUserModelsInputCacheRead,
    ),
  );
}

export function listUserModelsInputCacheReadFromJSON(
  jsonString: string,
): SafeParseResult<ListUserModelsInputCacheRead, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListUserModelsInputCacheRead$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListUserModelsInputCacheRead' from JSON`,
  );
}

/** @internal */
export const ListUserModelsInputCacheWrite$inboundSchema: z.ZodType<
  ListUserModelsInputCacheWrite,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type ListUserModelsInputCacheWrite$Outbound = number | string | any;

/** @internal */
export const ListUserModelsInputCacheWrite$outboundSchema: z.ZodType<
  ListUserModelsInputCacheWrite$Outbound,
  z.ZodTypeDef,
  ListUserModelsInputCacheWrite
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUserModelsInputCacheWrite$ {
  /** @deprecated use `ListUserModelsInputCacheWrite$inboundSchema` instead. */
  export const inboundSchema = ListUserModelsInputCacheWrite$inboundSchema;
  /** @deprecated use `ListUserModelsInputCacheWrite$outboundSchema` instead. */
  export const outboundSchema = ListUserModelsInputCacheWrite$outboundSchema;
  /** @deprecated use `ListUserModelsInputCacheWrite$Outbound` instead. */
  export type Outbound = ListUserModelsInputCacheWrite$Outbound;
}

export function listUserModelsInputCacheWriteToJSON(
  listUserModelsInputCacheWrite: ListUserModelsInputCacheWrite,
): string {
  return JSON.stringify(
    ListUserModelsInputCacheWrite$outboundSchema.parse(
      listUserModelsInputCacheWrite,
    ),
  );
}

export function listUserModelsInputCacheWriteFromJSON(
  jsonString: string,
): SafeParseResult<ListUserModelsInputCacheWrite, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListUserModelsInputCacheWrite$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListUserModelsInputCacheWrite' from JSON`,
  );
}

/** @internal */
export const ListUserModelsPricing$inboundSchema: z.ZodType<
  ListUserModelsPricing,
  z.ZodTypeDef,
  unknown
> = z.object({
  prompt: z.union([z.number(), z.string(), z.any()]).optional(),
  completion: z.union([z.number(), z.string(), z.any()]).optional(),
  request: z.union([z.number(), z.string(), z.any()]).optional(),
  image: z.union([z.number(), z.string(), z.any()]).optional(),
  image_output: z.union([z.number(), z.string(), z.any()]).optional(),
  audio: z.union([z.number(), z.string(), z.any()]).optional(),
  input_audio_cache: z.union([z.number(), z.string(), z.any()]).optional(),
  web_search: z.union([z.number(), z.string(), z.any()]).optional(),
  internal_reasoning: z.union([z.number(), z.string(), z.any()]).optional(),
  input_cache_read: z.union([z.number(), z.string(), z.any()]).optional(),
  input_cache_write: z.union([z.number(), z.string(), z.any()]).optional(),
  discount: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "image_output": "imageOutput",
    "input_audio_cache": "inputAudioCache",
    "web_search": "webSearch",
    "internal_reasoning": "internalReasoning",
    "input_cache_read": "inputCacheRead",
    "input_cache_write": "inputCacheWrite",
  });
});

/** @internal */
export type ListUserModelsPricing$Outbound = {
  prompt?: number | string | any | undefined;
  completion?: number | string | any | undefined;
  request?: number | string | any | undefined;
  image?: number | string | any | undefined;
  image_output?: number | string | any | undefined;
  audio?: number | string | any | undefined;
  input_audio_cache?: number | string | any | undefined;
  web_search?: number | string | any | undefined;
  internal_reasoning?: number | string | any | undefined;
  input_cache_read?: number | string | any | undefined;
  input_cache_write?: number | string | any | undefined;
  discount?: number | undefined;
};

/** @internal */
export const ListUserModelsPricing$outboundSchema: z.ZodType<
  ListUserModelsPricing$Outbound,
  z.ZodTypeDef,
  ListUserModelsPricing
> = z.object({
  prompt: z.union([z.number(), z.string(), z.any()]).optional(),
  completion: z.union([z.number(), z.string(), z.any()]).optional(),
  request: z.union([z.number(), z.string(), z.any()]).optional(),
  image: z.union([z.number(), z.string(), z.any()]).optional(),
  imageOutput: z.union([z.number(), z.string(), z.any()]).optional(),
  audio: z.union([z.number(), z.string(), z.any()]).optional(),
  inputAudioCache: z.union([z.number(), z.string(), z.any()]).optional(),
  webSearch: z.union([z.number(), z.string(), z.any()]).optional(),
  internalReasoning: z.union([z.number(), z.string(), z.any()]).optional(),
  inputCacheRead: z.union([z.number(), z.string(), z.any()]).optional(),
  inputCacheWrite: z.union([z.number(), z.string(), z.any()]).optional(),
  discount: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    imageOutput: "image_output",
    inputAudioCache: "input_audio_cache",
    webSearch: "web_search",
    internalReasoning: "internal_reasoning",
    inputCacheRead: "input_cache_read",
    inputCacheWrite: "input_cache_write",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUserModelsPricing$ {
  /** @deprecated use `ListUserModelsPricing$inboundSchema` instead. */
  export const inboundSchema = ListUserModelsPricing$inboundSchema;
  /** @deprecated use `ListUserModelsPricing$outboundSchema` instead. */
  export const outboundSchema = ListUserModelsPricing$outboundSchema;
  /** @deprecated use `ListUserModelsPricing$Outbound` instead. */
  export type Outbound = ListUserModelsPricing$Outbound;
}

export function listUserModelsPricingToJSON(
  listUserModelsPricing: ListUserModelsPricing,
): string {
  return JSON.stringify(
    ListUserModelsPricing$outboundSchema.parse(listUserModelsPricing),
  );
}

export function listUserModelsPricingFromJSON(
  jsonString: string,
): SafeParseResult<ListUserModelsPricing, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListUserModelsPricing$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListUserModelsPricing' from JSON`,
  );
}

/** @internal */
export const ListUserModelsTokenizer$inboundSchema: z.ZodNativeEnum<
  typeof ListUserModelsTokenizer
> = z.nativeEnum(ListUserModelsTokenizer);

/** @internal */
export const ListUserModelsTokenizer$outboundSchema: z.ZodNativeEnum<
  typeof ListUserModelsTokenizer
> = ListUserModelsTokenizer$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUserModelsTokenizer$ {
  /** @deprecated use `ListUserModelsTokenizer$inboundSchema` instead. */
  export const inboundSchema = ListUserModelsTokenizer$inboundSchema;
  /** @deprecated use `ListUserModelsTokenizer$outboundSchema` instead. */
  export const outboundSchema = ListUserModelsTokenizer$outboundSchema;
}

/** @internal */
export const ListUserModelsInstructType$inboundSchema: z.ZodNativeEnum<
  typeof ListUserModelsInstructType
> = z.nativeEnum(ListUserModelsInstructType);

/** @internal */
export const ListUserModelsInstructType$outboundSchema: z.ZodNativeEnum<
  typeof ListUserModelsInstructType
> = ListUserModelsInstructType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUserModelsInstructType$ {
  /** @deprecated use `ListUserModelsInstructType$inboundSchema` instead. */
  export const inboundSchema = ListUserModelsInstructType$inboundSchema;
  /** @deprecated use `ListUserModelsInstructType$outboundSchema` instead. */
  export const outboundSchema = ListUserModelsInstructType$outboundSchema;
}

/** @internal */
export const ListUserModelsInputModality$inboundSchema: z.ZodNativeEnum<
  typeof ListUserModelsInputModality
> = z.nativeEnum(ListUserModelsInputModality);

/** @internal */
export const ListUserModelsInputModality$outboundSchema: z.ZodNativeEnum<
  typeof ListUserModelsInputModality
> = ListUserModelsInputModality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUserModelsInputModality$ {
  /** @deprecated use `ListUserModelsInputModality$inboundSchema` instead. */
  export const inboundSchema = ListUserModelsInputModality$inboundSchema;
  /** @deprecated use `ListUserModelsInputModality$outboundSchema` instead. */
  export const outboundSchema = ListUserModelsInputModality$outboundSchema;
}

/** @internal */
export const ListUserModelsOutputModality$inboundSchema: z.ZodNativeEnum<
  typeof ListUserModelsOutputModality
> = z.nativeEnum(ListUserModelsOutputModality);

/** @internal */
export const ListUserModelsOutputModality$outboundSchema: z.ZodNativeEnum<
  typeof ListUserModelsOutputModality
> = ListUserModelsOutputModality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUserModelsOutputModality$ {
  /** @deprecated use `ListUserModelsOutputModality$inboundSchema` instead. */
  export const inboundSchema = ListUserModelsOutputModality$inboundSchema;
  /** @deprecated use `ListUserModelsOutputModality$outboundSchema` instead. */
  export const outboundSchema = ListUserModelsOutputModality$outboundSchema;
}

/** @internal */
export const ListUserModelsArchitecture$inboundSchema: z.ZodType<
  ListUserModelsArchitecture,
  z.ZodTypeDef,
  unknown
> = z.object({
  tokenizer: ListUserModelsTokenizer$inboundSchema.optional(),
  instruct_type: z.nullable(ListUserModelsInstructType$inboundSchema)
    .optional(),
  modality: z.nullable(z.string()),
  input_modalities: z.array(ListUserModelsInputModality$inboundSchema),
  output_modalities: z.array(ListUserModelsOutputModality$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "instruct_type": "instructType",
    "input_modalities": "inputModalities",
    "output_modalities": "outputModalities",
  });
});

/** @internal */
export type ListUserModelsArchitecture$Outbound = {
  tokenizer?: string | undefined;
  instruct_type?: string | null | undefined;
  modality: string | null;
  input_modalities: Array<string>;
  output_modalities: Array<string>;
};

/** @internal */
export const ListUserModelsArchitecture$outboundSchema: z.ZodType<
  ListUserModelsArchitecture$Outbound,
  z.ZodTypeDef,
  ListUserModelsArchitecture
> = z.object({
  tokenizer: ListUserModelsTokenizer$outboundSchema.optional(),
  instructType: z.nullable(ListUserModelsInstructType$outboundSchema)
    .optional(),
  modality: z.nullable(z.string()),
  inputModalities: z.array(ListUserModelsInputModality$outboundSchema),
  outputModalities: z.array(ListUserModelsOutputModality$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    instructType: "instruct_type",
    inputModalities: "input_modalities",
    outputModalities: "output_modalities",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUserModelsArchitecture$ {
  /** @deprecated use `ListUserModelsArchitecture$inboundSchema` instead. */
  export const inboundSchema = ListUserModelsArchitecture$inboundSchema;
  /** @deprecated use `ListUserModelsArchitecture$outboundSchema` instead. */
  export const outboundSchema = ListUserModelsArchitecture$outboundSchema;
  /** @deprecated use `ListUserModelsArchitecture$Outbound` instead. */
  export type Outbound = ListUserModelsArchitecture$Outbound;
}

export function listUserModelsArchitectureToJSON(
  listUserModelsArchitecture: ListUserModelsArchitecture,
): string {
  return JSON.stringify(
    ListUserModelsArchitecture$outboundSchema.parse(listUserModelsArchitecture),
  );
}

export function listUserModelsArchitectureFromJSON(
  jsonString: string,
): SafeParseResult<ListUserModelsArchitecture, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListUserModelsArchitecture$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListUserModelsArchitecture' from JSON`,
  );
}

/** @internal */
export const ListUserModelsTopProvider$inboundSchema: z.ZodType<
  ListUserModelsTopProvider,
  z.ZodTypeDef,
  unknown
> = z.object({
  context_length: z.nullable(z.number()).optional(),
  max_completion_tokens: z.nullable(z.number()).optional(),
  is_moderated: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "context_length": "contextLength",
    "max_completion_tokens": "maxCompletionTokens",
    "is_moderated": "isModerated",
  });
});

/** @internal */
export type ListUserModelsTopProvider$Outbound = {
  context_length?: number | null | undefined;
  max_completion_tokens?: number | null | undefined;
  is_moderated: boolean;
};

/** @internal */
export const ListUserModelsTopProvider$outboundSchema: z.ZodType<
  ListUserModelsTopProvider$Outbound,
  z.ZodTypeDef,
  ListUserModelsTopProvider
> = z.object({
  contextLength: z.nullable(z.number()).optional(),
  maxCompletionTokens: z.nullable(z.number()).optional(),
  isModerated: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    contextLength: "context_length",
    maxCompletionTokens: "max_completion_tokens",
    isModerated: "is_moderated",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUserModelsTopProvider$ {
  /** @deprecated use `ListUserModelsTopProvider$inboundSchema` instead. */
  export const inboundSchema = ListUserModelsTopProvider$inboundSchema;
  /** @deprecated use `ListUserModelsTopProvider$outboundSchema` instead. */
  export const outboundSchema = ListUserModelsTopProvider$outboundSchema;
  /** @deprecated use `ListUserModelsTopProvider$Outbound` instead. */
  export type Outbound = ListUserModelsTopProvider$Outbound;
}

export function listUserModelsTopProviderToJSON(
  listUserModelsTopProvider: ListUserModelsTopProvider,
): string {
  return JSON.stringify(
    ListUserModelsTopProvider$outboundSchema.parse(listUserModelsTopProvider),
  );
}

export function listUserModelsTopProviderFromJSON(
  jsonString: string,
): SafeParseResult<ListUserModelsTopProvider, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListUserModelsTopProvider$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListUserModelsTopProvider' from JSON`,
  );
}

/** @internal */
export const ListUserModelsPerRequestLimits$inboundSchema: z.ZodType<
  ListUserModelsPerRequestLimits,
  z.ZodTypeDef,
  unknown
> = z.object({
  prompt_tokens: z.any().optional(),
  completion_tokens: z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    "prompt_tokens": "promptTokens",
    "completion_tokens": "completionTokens",
  });
});

/** @internal */
export type ListUserModelsPerRequestLimits$Outbound = {
  prompt_tokens?: any | undefined;
  completion_tokens?: any | undefined;
};

/** @internal */
export const ListUserModelsPerRequestLimits$outboundSchema: z.ZodType<
  ListUserModelsPerRequestLimits$Outbound,
  z.ZodTypeDef,
  ListUserModelsPerRequestLimits
> = z.object({
  promptTokens: z.any().optional(),
  completionTokens: z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    promptTokens: "prompt_tokens",
    completionTokens: "completion_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUserModelsPerRequestLimits$ {
  /** @deprecated use `ListUserModelsPerRequestLimits$inboundSchema` instead. */
  export const inboundSchema = ListUserModelsPerRequestLimits$inboundSchema;
  /** @deprecated use `ListUserModelsPerRequestLimits$outboundSchema` instead. */
  export const outboundSchema = ListUserModelsPerRequestLimits$outboundSchema;
  /** @deprecated use `ListUserModelsPerRequestLimits$Outbound` instead. */
  export type Outbound = ListUserModelsPerRequestLimits$Outbound;
}

export function listUserModelsPerRequestLimitsToJSON(
  listUserModelsPerRequestLimits: ListUserModelsPerRequestLimits,
): string {
  return JSON.stringify(
    ListUserModelsPerRequestLimits$outboundSchema.parse(
      listUserModelsPerRequestLimits,
    ),
  );
}

export function listUserModelsPerRequestLimitsFromJSON(
  jsonString: string,
): SafeParseResult<ListUserModelsPerRequestLimits, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListUserModelsPerRequestLimits$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListUserModelsPerRequestLimits' from JSON`,
  );
}

/** @internal */
export const ListUserModelsSupportedParameter$inboundSchema: z.ZodNativeEnum<
  typeof ListUserModelsSupportedParameter
> = z.nativeEnum(ListUserModelsSupportedParameter);

/** @internal */
export const ListUserModelsSupportedParameter$outboundSchema: z.ZodNativeEnum<
  typeof ListUserModelsSupportedParameter
> = ListUserModelsSupportedParameter$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUserModelsSupportedParameter$ {
  /** @deprecated use `ListUserModelsSupportedParameter$inboundSchema` instead. */
  export const inboundSchema = ListUserModelsSupportedParameter$inboundSchema;
  /** @deprecated use `ListUserModelsSupportedParameter$outboundSchema` instead. */
  export const outboundSchema = ListUserModelsSupportedParameter$outboundSchema;
}

/** @internal */
export const ListUserModelsDefaultParameters$inboundSchema: z.ZodType<
  ListUserModelsDefaultParameters,
  z.ZodTypeDef,
  unknown
> = z.object({
  temperature: z.nullable(z.number()).optional(),
  top_p: z.nullable(z.number()).optional(),
  frequency_penalty: z.nullable(z.number()).optional(),
}).transform((v) => {
  return remap$(v, {
    "top_p": "topP",
    "frequency_penalty": "frequencyPenalty",
  });
});

/** @internal */
export type ListUserModelsDefaultParameters$Outbound = {
  temperature?: number | null | undefined;
  top_p?: number | null | undefined;
  frequency_penalty?: number | null | undefined;
};

/** @internal */
export const ListUserModelsDefaultParameters$outboundSchema: z.ZodType<
  ListUserModelsDefaultParameters$Outbound,
  z.ZodTypeDef,
  ListUserModelsDefaultParameters
> = z.object({
  temperature: z.nullable(z.number()).optional(),
  topP: z.nullable(z.number()).optional(),
  frequencyPenalty: z.nullable(z.number()).optional(),
}).transform((v) => {
  return remap$(v, {
    topP: "top_p",
    frequencyPenalty: "frequency_penalty",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUserModelsDefaultParameters$ {
  /** @deprecated use `ListUserModelsDefaultParameters$inboundSchema` instead. */
  export const inboundSchema = ListUserModelsDefaultParameters$inboundSchema;
  /** @deprecated use `ListUserModelsDefaultParameters$outboundSchema` instead. */
  export const outboundSchema = ListUserModelsDefaultParameters$outboundSchema;
  /** @deprecated use `ListUserModelsDefaultParameters$Outbound` instead. */
  export type Outbound = ListUserModelsDefaultParameters$Outbound;
}

export function listUserModelsDefaultParametersToJSON(
  listUserModelsDefaultParameters: ListUserModelsDefaultParameters,
): string {
  return JSON.stringify(
    ListUserModelsDefaultParameters$outboundSchema.parse(
      listUserModelsDefaultParameters,
    ),
  );
}

export function listUserModelsDefaultParametersFromJSON(
  jsonString: string,
): SafeParseResult<ListUserModelsDefaultParameters, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListUserModelsDefaultParameters$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListUserModelsDefaultParameters' from JSON`,
  );
}

/** @internal */
export const ListUserModelsData$inboundSchema: z.ZodType<
  ListUserModelsData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  canonical_slug: z.string(),
  hugging_face_id: z.nullable(z.string()).optional(),
  name: z.string(),
  created: z.number(),
  description: z.string().optional(),
  pricing: z.lazy(() => ListUserModelsPricing$inboundSchema),
  context_length: z.nullable(z.number()),
  architecture: z.lazy(() => ListUserModelsArchitecture$inboundSchema),
  top_provider: z.lazy(() => ListUserModelsTopProvider$inboundSchema),
  per_request_limits: z.nullable(
    z.lazy(() => ListUserModelsPerRequestLimits$inboundSchema),
  ),
  supported_parameters: z.array(ListUserModelsSupportedParameter$inboundSchema),
  default_parameters: z.nullable(
    z.lazy(() => ListUserModelsDefaultParameters$inboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    "canonical_slug": "canonicalSlug",
    "hugging_face_id": "huggingFaceId",
    "context_length": "contextLength",
    "top_provider": "topProvider",
    "per_request_limits": "perRequestLimits",
    "supported_parameters": "supportedParameters",
    "default_parameters": "defaultParameters",
  });
});

/** @internal */
export type ListUserModelsData$Outbound = {
  id: string;
  canonical_slug: string;
  hugging_face_id?: string | null | undefined;
  name: string;
  created: number;
  description?: string | undefined;
  pricing: ListUserModelsPricing$Outbound;
  context_length: number | null;
  architecture: ListUserModelsArchitecture$Outbound;
  top_provider: ListUserModelsTopProvider$Outbound;
  per_request_limits: ListUserModelsPerRequestLimits$Outbound | null;
  supported_parameters: Array<string>;
  default_parameters: ListUserModelsDefaultParameters$Outbound | null;
};

/** @internal */
export const ListUserModelsData$outboundSchema: z.ZodType<
  ListUserModelsData$Outbound,
  z.ZodTypeDef,
  ListUserModelsData
> = z.object({
  id: z.string(),
  canonicalSlug: z.string(),
  huggingFaceId: z.nullable(z.string()).optional(),
  name: z.string(),
  created: z.number(),
  description: z.string().optional(),
  pricing: z.lazy(() => ListUserModelsPricing$outboundSchema),
  contextLength: z.nullable(z.number()),
  architecture: z.lazy(() => ListUserModelsArchitecture$outboundSchema),
  topProvider: z.lazy(() => ListUserModelsTopProvider$outboundSchema),
  perRequestLimits: z.nullable(
    z.lazy(() => ListUserModelsPerRequestLimits$outboundSchema),
  ),
  supportedParameters: z.array(ListUserModelsSupportedParameter$outboundSchema),
  defaultParameters: z.nullable(
    z.lazy(() => ListUserModelsDefaultParameters$outboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    canonicalSlug: "canonical_slug",
    huggingFaceId: "hugging_face_id",
    contextLength: "context_length",
    topProvider: "top_provider",
    perRequestLimits: "per_request_limits",
    supportedParameters: "supported_parameters",
    defaultParameters: "default_parameters",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUserModelsData$ {
  /** @deprecated use `ListUserModelsData$inboundSchema` instead. */
  export const inboundSchema = ListUserModelsData$inboundSchema;
  /** @deprecated use `ListUserModelsData$outboundSchema` instead. */
  export const outboundSchema = ListUserModelsData$outboundSchema;
  /** @deprecated use `ListUserModelsData$Outbound` instead. */
  export type Outbound = ListUserModelsData$Outbound;
}

export function listUserModelsDataToJSON(
  listUserModelsData: ListUserModelsData,
): string {
  return JSON.stringify(
    ListUserModelsData$outboundSchema.parse(listUserModelsData),
  );
}

export function listUserModelsDataFromJSON(
  jsonString: string,
): SafeParseResult<ListUserModelsData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListUserModelsData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListUserModelsData' from JSON`,
  );
}

/** @internal */
export const ListUserModelsResponse$inboundSchema: z.ZodType<
  ListUserModelsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(z.lazy(() => ListUserModelsData$inboundSchema)),
});

/** @internal */
export type ListUserModelsResponse$Outbound = {
  data: Array<ListUserModelsData$Outbound>;
};

/** @internal */
export const ListUserModelsResponse$outboundSchema: z.ZodType<
  ListUserModelsResponse$Outbound,
  z.ZodTypeDef,
  ListUserModelsResponse
> = z.object({
  data: z.array(z.lazy(() => ListUserModelsData$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUserModelsResponse$ {
  /** @deprecated use `ListUserModelsResponse$inboundSchema` instead. */
  export const inboundSchema = ListUserModelsResponse$inboundSchema;
  /** @deprecated use `ListUserModelsResponse$outboundSchema` instead. */
  export const outboundSchema = ListUserModelsResponse$outboundSchema;
  /** @deprecated use `ListUserModelsResponse$Outbound` instead. */
  export type Outbound = ListUserModelsResponse$Outbound;
}

export function listUserModelsResponseToJSON(
  listUserModelsResponse: ListUserModelsResponse,
): string {
  return JSON.stringify(
    ListUserModelsResponse$outboundSchema.parse(listUserModelsResponse),
  );
}

export function listUserModelsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListUserModelsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListUserModelsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListUserModelsResponse' from JSON`,
  );
}
