/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type Input =
  | string
  | Array<string>
  | Array<number>
  | Array<Array<number>>;

/**
 * Data collection setting. If no available model provider meets the requirement, your request will return an error.
 *
 * @remarks
 * - allow: (default) allow providers which store user data non-transiently and may train on it
 * - deny: use only providers which do not collect user data.
 */
export const DataCollection = {
  Deny: "deny",
  Allow: "allow",
} as const;
/**
 * Data collection setting. If no available model provider meets the requirement, your request will return an error.
 *
 * @remarks
 * - allow: (default) allow providers which store user data non-transiently and may train on it
 * - deny: use only providers which do not collect user data.
 */
export type DataCollection = ClosedEnum<typeof DataCollection>;

export const OrderEnum = {
  AnyScale: "AnyScale",
  CentML: "Cent-ML",
  HuggingFace: "HuggingFace",
  Hyperbolic2: "Hyperbolic 2",
  Lepton: "Lepton",
  Lynn2: "Lynn 2",
  Lynn: "Lynn",
  Mancer: "Mancer",
  Modal: "Modal",
  OctoAI: "OctoAI",
  Recursal: "Recursal",
  Reflection: "Reflection",
  Replicate: "Replicate",
  SambaNova2: "SambaNova 2",
  SFCompute: "SF Compute",
  Together2: "Together 2",
  OneDotAI: "01.AI",
  Ai21: "AI21",
  AionLabs: "AionLabs",
  Alibaba: "Alibaba",
  AmazonBedrock: "Amazon Bedrock",
  Anthropic: "Anthropic",
  AtlasCloud: "AtlasCloud",
  Atoma: "Atoma",
  Avian: "Avian",
  Azure: "Azure",
  BaseTen: "BaseTen",
  Cerebras: "Cerebras",
  Chutes: "Chutes",
  Cloudflare: "Cloudflare",
  Cohere: "Cohere",
  CrofAI: "CrofAI",
  Crusoe: "Crusoe",
  DeepInfra: "DeepInfra",
  DeepSeek: "DeepSeek",
  Enfer: "Enfer",
  Featherless: "Featherless",
  Fireworks: "Fireworks",
  Friendli: "Friendli",
  GMICloud: "GMICloud",
  Google: "Google",
  GoogleAIStudio: "Google AI Studio",
  Groq: "Groq",
  Hyperbolic: "Hyperbolic",
  Inception: "Inception",
  InferenceNet: "InferenceNet",
  Infermatic: "Infermatic",
  Inflection: "Inflection",
  InoCloud: "InoCloud",
  Kluster: "Kluster",
  Lambda: "Lambda",
  Liquid: "Liquid",
  Mancer2: "Mancer 2",
  Meta: "Meta",
  Minimax: "Minimax",
  Mistral: "Mistral",
  MoonshotAI: "Moonshot AI",
  Morph: "Morph",
  NCompass: "NCompass",
  Nebius: "Nebius",
  NextBit: "NextBit",
  Nineteen: "Nineteen",
  Novita: "Novita",
  Nvidia: "Nvidia",
  OpenAI: "OpenAI",
  OpenInference: "OpenInference",
  Parasail: "Parasail",
  Perplexity: "Perplexity",
  Phala: "Phala",
  SambaNova: "SambaNova",
  SiliconFlow: "SiliconFlow",
  Stealth: "Stealth",
  Switchpoint: "Switchpoint",
  Targon: "Targon",
  Together: "Together",
  Ubicloud: "Ubicloud",
  Venice: "Venice",
  WandB: "WandB",
  XAI: "xAI",
  ZAi: "Z.AI",
  FakeProvider: "FakeProvider",
} as const;
export type OrderEnum = ClosedEnum<typeof OrderEnum>;

export type Order = OrderEnum | string;

export const OnlyEnum = {
  AnyScale: "AnyScale",
  CentML: "Cent-ML",
  HuggingFace: "HuggingFace",
  Hyperbolic2: "Hyperbolic 2",
  Lepton: "Lepton",
  Lynn2: "Lynn 2",
  Lynn: "Lynn",
  Mancer: "Mancer",
  Modal: "Modal",
  OctoAI: "OctoAI",
  Recursal: "Recursal",
  Reflection: "Reflection",
  Replicate: "Replicate",
  SambaNova2: "SambaNova 2",
  SFCompute: "SF Compute",
  Together2: "Together 2",
  OneDotAI: "01.AI",
  Ai21: "AI21",
  AionLabs: "AionLabs",
  Alibaba: "Alibaba",
  AmazonBedrock: "Amazon Bedrock",
  Anthropic: "Anthropic",
  AtlasCloud: "AtlasCloud",
  Atoma: "Atoma",
  Avian: "Avian",
  Azure: "Azure",
  BaseTen: "BaseTen",
  Cerebras: "Cerebras",
  Chutes: "Chutes",
  Cloudflare: "Cloudflare",
  Cohere: "Cohere",
  CrofAI: "CrofAI",
  Crusoe: "Crusoe",
  DeepInfra: "DeepInfra",
  DeepSeek: "DeepSeek",
  Enfer: "Enfer",
  Featherless: "Featherless",
  Fireworks: "Fireworks",
  Friendli: "Friendli",
  GMICloud: "GMICloud",
  Google: "Google",
  GoogleAIStudio: "Google AI Studio",
  Groq: "Groq",
  Hyperbolic: "Hyperbolic",
  Inception: "Inception",
  InferenceNet: "InferenceNet",
  Infermatic: "Infermatic",
  Inflection: "Inflection",
  InoCloud: "InoCloud",
  Kluster: "Kluster",
  Lambda: "Lambda",
  Liquid: "Liquid",
  Mancer2: "Mancer 2",
  Meta: "Meta",
  Minimax: "Minimax",
  Mistral: "Mistral",
  MoonshotAI: "Moonshot AI",
  Morph: "Morph",
  NCompass: "NCompass",
  Nebius: "Nebius",
  NextBit: "NextBit",
  Nineteen: "Nineteen",
  Novita: "Novita",
  Nvidia: "Nvidia",
  OpenAI: "OpenAI",
  OpenInference: "OpenInference",
  Parasail: "Parasail",
  Perplexity: "Perplexity",
  Phala: "Phala",
  SambaNova: "SambaNova",
  SiliconFlow: "SiliconFlow",
  Stealth: "Stealth",
  Switchpoint: "Switchpoint",
  Targon: "Targon",
  Together: "Together",
  Ubicloud: "Ubicloud",
  Venice: "Venice",
  WandB: "WandB",
  XAI: "xAI",
  ZAi: "Z.AI",
  FakeProvider: "FakeProvider",
} as const;
export type OnlyEnum = ClosedEnum<typeof OnlyEnum>;

export type Only = OnlyEnum | string;

export const IgnoreEnum = {
  AnyScale: "AnyScale",
  CentML: "Cent-ML",
  HuggingFace: "HuggingFace",
  Hyperbolic2: "Hyperbolic 2",
  Lepton: "Lepton",
  Lynn2: "Lynn 2",
  Lynn: "Lynn",
  Mancer: "Mancer",
  Modal: "Modal",
  OctoAI: "OctoAI",
  Recursal: "Recursal",
  Reflection: "Reflection",
  Replicate: "Replicate",
  SambaNova2: "SambaNova 2",
  SFCompute: "SF Compute",
  Together2: "Together 2",
  OneDotAI: "01.AI",
  Ai21: "AI21",
  AionLabs: "AionLabs",
  Alibaba: "Alibaba",
  AmazonBedrock: "Amazon Bedrock",
  Anthropic: "Anthropic",
  AtlasCloud: "AtlasCloud",
  Atoma: "Atoma",
  Avian: "Avian",
  Azure: "Azure",
  BaseTen: "BaseTen",
  Cerebras: "Cerebras",
  Chutes: "Chutes",
  Cloudflare: "Cloudflare",
  Cohere: "Cohere",
  CrofAI: "CrofAI",
  Crusoe: "Crusoe",
  DeepInfra: "DeepInfra",
  DeepSeek: "DeepSeek",
  Enfer: "Enfer",
  Featherless: "Featherless",
  Fireworks: "Fireworks",
  Friendli: "Friendli",
  GMICloud: "GMICloud",
  Google: "Google",
  GoogleAIStudio: "Google AI Studio",
  Groq: "Groq",
  Hyperbolic: "Hyperbolic",
  Inception: "Inception",
  InferenceNet: "InferenceNet",
  Infermatic: "Infermatic",
  Inflection: "Inflection",
  InoCloud: "InoCloud",
  Kluster: "Kluster",
  Lambda: "Lambda",
  Liquid: "Liquid",
  Mancer2: "Mancer 2",
  Meta: "Meta",
  Minimax: "Minimax",
  Mistral: "Mistral",
  MoonshotAI: "Moonshot AI",
  Morph: "Morph",
  NCompass: "NCompass",
  Nebius: "Nebius",
  NextBit: "NextBit",
  Nineteen: "Nineteen",
  Novita: "Novita",
  Nvidia: "Nvidia",
  OpenAI: "OpenAI",
  OpenInference: "OpenInference",
  Parasail: "Parasail",
  Perplexity: "Perplexity",
  Phala: "Phala",
  SambaNova: "SambaNova",
  SiliconFlow: "SiliconFlow",
  Stealth: "Stealth",
  Switchpoint: "Switchpoint",
  Targon: "Targon",
  Together: "Together",
  Ubicloud: "Ubicloud",
  Venice: "Venice",
  WandB: "WandB",
  XAI: "xAI",
  ZAi: "Z.AI",
  FakeProvider: "FakeProvider",
} as const;
export type IgnoreEnum = ClosedEnum<typeof IgnoreEnum>;

export type Ignore = IgnoreEnum | string;

export const PostEmbeddingsQuantization = {
  Int4: "int4",
  Int8: "int8",
  Fp4: "fp4",
  Fp6: "fp6",
  Fp8: "fp8",
  Fp16: "fp16",
  Bf16: "bf16",
  Fp32: "fp32",
  Unknown: "unknown",
} as const;
export type PostEmbeddingsQuantization = ClosedEnum<
  typeof PostEmbeddingsQuantization
>;

/**
 * The sorting strategy to use for this request, if "order" is not specified. When set, no load balancing is performed.
 */
export const Sort = {
  Price: "price",
  Throughput: "throughput",
  Latency: "latency",
} as const;
/**
 * The sorting strategy to use for this request, if "order" is not specified. When set, no load balancing is performed.
 */
export type Sort = ClosedEnum<typeof Sort>;

export type PostEmbeddingsPrompt = number | string | any;

export type PostEmbeddingsCompletion = number | string | any;

export type PostEmbeddingsImage = number | string | any;

export type PostEmbeddingsAudio = number | string | any;

export type PostEmbeddingsRequestUnion = number | string | any;

/**
 * The object specifying the maximum price you want to pay for this request. USD price per million tokens, for prompt and completion.
 */
export type MaxPrice = {
  prompt?: number | string | any | undefined;
  completion?: number | string | any | undefined;
  image?: number | string | any | undefined;
  audio?: number | string | any | undefined;
  request?: number | string | any | undefined;
};

export type Experimental = {};

export type PostEmbeddingsProvider = {
  /**
   * Whether to allow backup providers to serve requests
   *
   * @remarks
   * - true: (default) when the primary provider (or your custom providers in "order") is unavailable, use the next best provider.
   * - false: use only the primary/custom provider, and return the upstream error if it's unavailable.
   */
  allowFallbacks?: boolean | null | undefined;
  /**
   * Whether to filter providers to only those that support the parameters you've provided. If this setting is omitted or set to false, then providers will receive only the parameters they support, and ignore the rest.
   */
  requireParameters?: boolean | null | undefined;
  /**
   * Data collection setting. If no available model provider meets the requirement, your request will return an error.
   *
   * @remarks
   * - allow: (default) allow providers which store user data non-transiently and may train on it
   * - deny: use only providers which do not collect user data.
   */
  dataCollection?: DataCollection | null | undefined;
  /**
   * Whether to restrict routing to only ZDR (Zero Data Retention) endpoints. When true, only endpoints that do not retain prompts will be used.
   */
  zdr?: boolean | null | undefined;
  /**
   * An ordered list of provider slugs. The router will attempt to use the first provider in the subset of this list that supports your requested model, and fall back to the next if it is unavailable. If no providers are available, the request will fail with an error message.
   */
  order?: Array<OrderEnum | string> | null | undefined;
  /**
   * List of provider slugs to allow. If provided, this list is merged with your account-wide allowed provider settings for this request.
   */
  only?: Array<OnlyEnum | string> | null | undefined;
  /**
   * List of provider slugs to ignore. If provided, this list is merged with your account-wide ignored provider settings for this request.
   */
  ignore?: Array<IgnoreEnum | string> | null | undefined;
  /**
   * A list of quantization levels to filter the provider by.
   */
  quantizations?: Array<PostEmbeddingsQuantization> | null | undefined;
  /**
   * The sorting strategy to use for this request, if "order" is not specified. When set, no load balancing is performed.
   */
  sort?: Sort | null | undefined;
  /**
   * The object specifying the maximum price you want to pay for this request. USD price per million tokens, for prompt and completion.
   */
  maxPrice?: MaxPrice | undefined;
  experimental?: Experimental | null | undefined;
};

export const EncodingFormatBase64 = {
  Base64: "base64",
} as const;
export type EncodingFormatBase64 = ClosedEnum<typeof EncodingFormatBase64>;

export const EncodingFormatFloat = {
  Float: "float",
} as const;
export type EncodingFormatFloat = ClosedEnum<typeof EncodingFormatFloat>;

export type EncodingFormat = EncodingFormatFloat | EncodingFormatBase64;

export type PostEmbeddingsRequest = {
  input: string | Array<string> | Array<number> | Array<Array<number>>;
  model?: string | undefined;
  models?: Array<string> | undefined;
  provider?: PostEmbeddingsProvider | undefined;
  encodingFormat?: EncodingFormatFloat | EncodingFormatBase64 | undefined;
  user?: string | undefined;
};

export const ObjectT = {
  List: "list",
} as const;
export type ObjectT = ClosedEnum<typeof ObjectT>;

export const ObjectEmbedding = {
  Embedding: "embedding",
} as const;
export type ObjectEmbedding = ClosedEnum<typeof ObjectEmbedding>;

export type PostEmbeddingsData = {
  object: ObjectEmbedding;
  embedding: Array<number>;
  index: number;
};

export type Usage = {
  promptTokens: number;
  totalTokens: number;
  cost?: number | undefined;
};

/**
 * Embedding response
 */
export type PostEmbeddingsResponseBody = {
  object: ObjectT;
  data: Array<PostEmbeddingsData>;
  model: string;
  usage?: Usage | undefined;
};

export type PostEmbeddingsResponse =
  | PostEmbeddingsResponseBody
  | models.ErrorResponse;

/** @internal */
export const Input$inboundSchema: z.ZodType<Input, z.ZodTypeDef, unknown> = z
  .union([
    z.string(),
    z.array(z.string()),
    z.array(z.number()),
    z.array(z.array(z.number())),
  ]);

/** @internal */
export type Input$Outbound =
  | string
  | Array<string>
  | Array<number>
  | Array<Array<number>>;

/** @internal */
export const Input$outboundSchema: z.ZodType<
  Input$Outbound,
  z.ZodTypeDef,
  Input
> = z.union([
  z.string(),
  z.array(z.string()),
  z.array(z.number()),
  z.array(z.array(z.number())),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Input$ {
  /** @deprecated use `Input$inboundSchema` instead. */
  export const inboundSchema = Input$inboundSchema;
  /** @deprecated use `Input$outboundSchema` instead. */
  export const outboundSchema = Input$outboundSchema;
  /** @deprecated use `Input$Outbound` instead. */
  export type Outbound = Input$Outbound;
}

export function inputToJSON(input: Input): string {
  return JSON.stringify(Input$outboundSchema.parse(input));
}

export function inputFromJSON(
  jsonString: string,
): SafeParseResult<Input, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Input$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Input' from JSON`,
  );
}

/** @internal */
export const DataCollection$inboundSchema: z.ZodNativeEnum<
  typeof DataCollection
> = z.nativeEnum(DataCollection);

/** @internal */
export const DataCollection$outboundSchema: z.ZodNativeEnum<
  typeof DataCollection
> = DataCollection$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DataCollection$ {
  /** @deprecated use `DataCollection$inboundSchema` instead. */
  export const inboundSchema = DataCollection$inboundSchema;
  /** @deprecated use `DataCollection$outboundSchema` instead. */
  export const outboundSchema = DataCollection$outboundSchema;
}

/** @internal */
export const OrderEnum$inboundSchema: z.ZodNativeEnum<typeof OrderEnum> = z
  .nativeEnum(OrderEnum);

/** @internal */
export const OrderEnum$outboundSchema: z.ZodNativeEnum<typeof OrderEnum> =
  OrderEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderEnum$ {
  /** @deprecated use `OrderEnum$inboundSchema` instead. */
  export const inboundSchema = OrderEnum$inboundSchema;
  /** @deprecated use `OrderEnum$outboundSchema` instead. */
  export const outboundSchema = OrderEnum$outboundSchema;
}

/** @internal */
export const Order$inboundSchema: z.ZodType<Order, z.ZodTypeDef, unknown> = z
  .union([OrderEnum$inboundSchema, z.string()]);

/** @internal */
export type Order$Outbound = string | string;

/** @internal */
export const Order$outboundSchema: z.ZodType<
  Order$Outbound,
  z.ZodTypeDef,
  Order
> = z.union([OrderEnum$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Order$ {
  /** @deprecated use `Order$inboundSchema` instead. */
  export const inboundSchema = Order$inboundSchema;
  /** @deprecated use `Order$outboundSchema` instead. */
  export const outboundSchema = Order$outboundSchema;
  /** @deprecated use `Order$Outbound` instead. */
  export type Outbound = Order$Outbound;
}

export function orderToJSON(order: Order): string {
  return JSON.stringify(Order$outboundSchema.parse(order));
}

export function orderFromJSON(
  jsonString: string,
): SafeParseResult<Order, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Order$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Order' from JSON`,
  );
}

/** @internal */
export const OnlyEnum$inboundSchema: z.ZodNativeEnum<typeof OnlyEnum> = z
  .nativeEnum(OnlyEnum);

/** @internal */
export const OnlyEnum$outboundSchema: z.ZodNativeEnum<typeof OnlyEnum> =
  OnlyEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OnlyEnum$ {
  /** @deprecated use `OnlyEnum$inboundSchema` instead. */
  export const inboundSchema = OnlyEnum$inboundSchema;
  /** @deprecated use `OnlyEnum$outboundSchema` instead. */
  export const outboundSchema = OnlyEnum$outboundSchema;
}

/** @internal */
export const Only$inboundSchema: z.ZodType<Only, z.ZodTypeDef, unknown> = z
  .union([OnlyEnum$inboundSchema, z.string()]);

/** @internal */
export type Only$Outbound = string | string;

/** @internal */
export const Only$outboundSchema: z.ZodType<Only$Outbound, z.ZodTypeDef, Only> =
  z.union([OnlyEnum$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Only$ {
  /** @deprecated use `Only$inboundSchema` instead. */
  export const inboundSchema = Only$inboundSchema;
  /** @deprecated use `Only$outboundSchema` instead. */
  export const outboundSchema = Only$outboundSchema;
  /** @deprecated use `Only$Outbound` instead. */
  export type Outbound = Only$Outbound;
}

export function onlyToJSON(only: Only): string {
  return JSON.stringify(Only$outboundSchema.parse(only));
}

export function onlyFromJSON(
  jsonString: string,
): SafeParseResult<Only, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Only$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Only' from JSON`,
  );
}

/** @internal */
export const IgnoreEnum$inboundSchema: z.ZodNativeEnum<typeof IgnoreEnum> = z
  .nativeEnum(IgnoreEnum);

/** @internal */
export const IgnoreEnum$outboundSchema: z.ZodNativeEnum<typeof IgnoreEnum> =
  IgnoreEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IgnoreEnum$ {
  /** @deprecated use `IgnoreEnum$inboundSchema` instead. */
  export const inboundSchema = IgnoreEnum$inboundSchema;
  /** @deprecated use `IgnoreEnum$outboundSchema` instead. */
  export const outboundSchema = IgnoreEnum$outboundSchema;
}

/** @internal */
export const Ignore$inboundSchema: z.ZodType<Ignore, z.ZodTypeDef, unknown> = z
  .union([IgnoreEnum$inboundSchema, z.string()]);

/** @internal */
export type Ignore$Outbound = string | string;

/** @internal */
export const Ignore$outboundSchema: z.ZodType<
  Ignore$Outbound,
  z.ZodTypeDef,
  Ignore
> = z.union([IgnoreEnum$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Ignore$ {
  /** @deprecated use `Ignore$inboundSchema` instead. */
  export const inboundSchema = Ignore$inboundSchema;
  /** @deprecated use `Ignore$outboundSchema` instead. */
  export const outboundSchema = Ignore$outboundSchema;
  /** @deprecated use `Ignore$Outbound` instead. */
  export type Outbound = Ignore$Outbound;
}

export function ignoreToJSON(ignore: Ignore): string {
  return JSON.stringify(Ignore$outboundSchema.parse(ignore));
}

export function ignoreFromJSON(
  jsonString: string,
): SafeParseResult<Ignore, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Ignore$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Ignore' from JSON`,
  );
}

/** @internal */
export const PostEmbeddingsQuantization$inboundSchema: z.ZodNativeEnum<
  typeof PostEmbeddingsQuantization
> = z.nativeEnum(PostEmbeddingsQuantization);

/** @internal */
export const PostEmbeddingsQuantization$outboundSchema: z.ZodNativeEnum<
  typeof PostEmbeddingsQuantization
> = PostEmbeddingsQuantization$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostEmbeddingsQuantization$ {
  /** @deprecated use `PostEmbeddingsQuantization$inboundSchema` instead. */
  export const inboundSchema = PostEmbeddingsQuantization$inboundSchema;
  /** @deprecated use `PostEmbeddingsQuantization$outboundSchema` instead. */
  export const outboundSchema = PostEmbeddingsQuantization$outboundSchema;
}

/** @internal */
export const Sort$inboundSchema: z.ZodNativeEnum<typeof Sort> = z.nativeEnum(
  Sort,
);

/** @internal */
export const Sort$outboundSchema: z.ZodNativeEnum<typeof Sort> =
  Sort$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Sort$ {
  /** @deprecated use `Sort$inboundSchema` instead. */
  export const inboundSchema = Sort$inboundSchema;
  /** @deprecated use `Sort$outboundSchema` instead. */
  export const outboundSchema = Sort$outboundSchema;
}

/** @internal */
export const PostEmbeddingsPrompt$inboundSchema: z.ZodType<
  PostEmbeddingsPrompt,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type PostEmbeddingsPrompt$Outbound = number | string | any;

/** @internal */
export const PostEmbeddingsPrompt$outboundSchema: z.ZodType<
  PostEmbeddingsPrompt$Outbound,
  z.ZodTypeDef,
  PostEmbeddingsPrompt
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostEmbeddingsPrompt$ {
  /** @deprecated use `PostEmbeddingsPrompt$inboundSchema` instead. */
  export const inboundSchema = PostEmbeddingsPrompt$inboundSchema;
  /** @deprecated use `PostEmbeddingsPrompt$outboundSchema` instead. */
  export const outboundSchema = PostEmbeddingsPrompt$outboundSchema;
  /** @deprecated use `PostEmbeddingsPrompt$Outbound` instead. */
  export type Outbound = PostEmbeddingsPrompt$Outbound;
}

export function postEmbeddingsPromptToJSON(
  postEmbeddingsPrompt: PostEmbeddingsPrompt,
): string {
  return JSON.stringify(
    PostEmbeddingsPrompt$outboundSchema.parse(postEmbeddingsPrompt),
  );
}

export function postEmbeddingsPromptFromJSON(
  jsonString: string,
): SafeParseResult<PostEmbeddingsPrompt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostEmbeddingsPrompt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostEmbeddingsPrompt' from JSON`,
  );
}

/** @internal */
export const PostEmbeddingsCompletion$inboundSchema: z.ZodType<
  PostEmbeddingsCompletion,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type PostEmbeddingsCompletion$Outbound = number | string | any;

/** @internal */
export const PostEmbeddingsCompletion$outboundSchema: z.ZodType<
  PostEmbeddingsCompletion$Outbound,
  z.ZodTypeDef,
  PostEmbeddingsCompletion
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostEmbeddingsCompletion$ {
  /** @deprecated use `PostEmbeddingsCompletion$inboundSchema` instead. */
  export const inboundSchema = PostEmbeddingsCompletion$inboundSchema;
  /** @deprecated use `PostEmbeddingsCompletion$outboundSchema` instead. */
  export const outboundSchema = PostEmbeddingsCompletion$outboundSchema;
  /** @deprecated use `PostEmbeddingsCompletion$Outbound` instead. */
  export type Outbound = PostEmbeddingsCompletion$Outbound;
}

export function postEmbeddingsCompletionToJSON(
  postEmbeddingsCompletion: PostEmbeddingsCompletion,
): string {
  return JSON.stringify(
    PostEmbeddingsCompletion$outboundSchema.parse(postEmbeddingsCompletion),
  );
}

export function postEmbeddingsCompletionFromJSON(
  jsonString: string,
): SafeParseResult<PostEmbeddingsCompletion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostEmbeddingsCompletion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostEmbeddingsCompletion' from JSON`,
  );
}

/** @internal */
export const PostEmbeddingsImage$inboundSchema: z.ZodType<
  PostEmbeddingsImage,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type PostEmbeddingsImage$Outbound = number | string | any;

/** @internal */
export const PostEmbeddingsImage$outboundSchema: z.ZodType<
  PostEmbeddingsImage$Outbound,
  z.ZodTypeDef,
  PostEmbeddingsImage
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostEmbeddingsImage$ {
  /** @deprecated use `PostEmbeddingsImage$inboundSchema` instead. */
  export const inboundSchema = PostEmbeddingsImage$inboundSchema;
  /** @deprecated use `PostEmbeddingsImage$outboundSchema` instead. */
  export const outboundSchema = PostEmbeddingsImage$outboundSchema;
  /** @deprecated use `PostEmbeddingsImage$Outbound` instead. */
  export type Outbound = PostEmbeddingsImage$Outbound;
}

export function postEmbeddingsImageToJSON(
  postEmbeddingsImage: PostEmbeddingsImage,
): string {
  return JSON.stringify(
    PostEmbeddingsImage$outboundSchema.parse(postEmbeddingsImage),
  );
}

export function postEmbeddingsImageFromJSON(
  jsonString: string,
): SafeParseResult<PostEmbeddingsImage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostEmbeddingsImage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostEmbeddingsImage' from JSON`,
  );
}

/** @internal */
export const PostEmbeddingsAudio$inboundSchema: z.ZodType<
  PostEmbeddingsAudio,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type PostEmbeddingsAudio$Outbound = number | string | any;

/** @internal */
export const PostEmbeddingsAudio$outboundSchema: z.ZodType<
  PostEmbeddingsAudio$Outbound,
  z.ZodTypeDef,
  PostEmbeddingsAudio
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostEmbeddingsAudio$ {
  /** @deprecated use `PostEmbeddingsAudio$inboundSchema` instead. */
  export const inboundSchema = PostEmbeddingsAudio$inboundSchema;
  /** @deprecated use `PostEmbeddingsAudio$outboundSchema` instead. */
  export const outboundSchema = PostEmbeddingsAudio$outboundSchema;
  /** @deprecated use `PostEmbeddingsAudio$Outbound` instead. */
  export type Outbound = PostEmbeddingsAudio$Outbound;
}

export function postEmbeddingsAudioToJSON(
  postEmbeddingsAudio: PostEmbeddingsAudio,
): string {
  return JSON.stringify(
    PostEmbeddingsAudio$outboundSchema.parse(postEmbeddingsAudio),
  );
}

export function postEmbeddingsAudioFromJSON(
  jsonString: string,
): SafeParseResult<PostEmbeddingsAudio, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostEmbeddingsAudio$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostEmbeddingsAudio' from JSON`,
  );
}

/** @internal */
export const PostEmbeddingsRequestUnion$inboundSchema: z.ZodType<
  PostEmbeddingsRequestUnion,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type PostEmbeddingsRequestUnion$Outbound = number | string | any;

/** @internal */
export const PostEmbeddingsRequestUnion$outboundSchema: z.ZodType<
  PostEmbeddingsRequestUnion$Outbound,
  z.ZodTypeDef,
  PostEmbeddingsRequestUnion
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostEmbeddingsRequestUnion$ {
  /** @deprecated use `PostEmbeddingsRequestUnion$inboundSchema` instead. */
  export const inboundSchema = PostEmbeddingsRequestUnion$inboundSchema;
  /** @deprecated use `PostEmbeddingsRequestUnion$outboundSchema` instead. */
  export const outboundSchema = PostEmbeddingsRequestUnion$outboundSchema;
  /** @deprecated use `PostEmbeddingsRequestUnion$Outbound` instead. */
  export type Outbound = PostEmbeddingsRequestUnion$Outbound;
}

export function postEmbeddingsRequestUnionToJSON(
  postEmbeddingsRequestUnion: PostEmbeddingsRequestUnion,
): string {
  return JSON.stringify(
    PostEmbeddingsRequestUnion$outboundSchema.parse(postEmbeddingsRequestUnion),
  );
}

export function postEmbeddingsRequestUnionFromJSON(
  jsonString: string,
): SafeParseResult<PostEmbeddingsRequestUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostEmbeddingsRequestUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostEmbeddingsRequestUnion' from JSON`,
  );
}

/** @internal */
export const MaxPrice$inboundSchema: z.ZodType<
  MaxPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  prompt: z.union([z.number(), z.string(), z.any()]).optional(),
  completion: z.union([z.number(), z.string(), z.any()]).optional(),
  image: z.union([z.number(), z.string(), z.any()]).optional(),
  audio: z.union([z.number(), z.string(), z.any()]).optional(),
  request: z.union([z.number(), z.string(), z.any()]).optional(),
});

/** @internal */
export type MaxPrice$Outbound = {
  prompt?: number | string | any | undefined;
  completion?: number | string | any | undefined;
  image?: number | string | any | undefined;
  audio?: number | string | any | undefined;
  request?: number | string | any | undefined;
};

/** @internal */
export const MaxPrice$outboundSchema: z.ZodType<
  MaxPrice$Outbound,
  z.ZodTypeDef,
  MaxPrice
> = z.object({
  prompt: z.union([z.number(), z.string(), z.any()]).optional(),
  completion: z.union([z.number(), z.string(), z.any()]).optional(),
  image: z.union([z.number(), z.string(), z.any()]).optional(),
  audio: z.union([z.number(), z.string(), z.any()]).optional(),
  request: z.union([z.number(), z.string(), z.any()]).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MaxPrice$ {
  /** @deprecated use `MaxPrice$inboundSchema` instead. */
  export const inboundSchema = MaxPrice$inboundSchema;
  /** @deprecated use `MaxPrice$outboundSchema` instead. */
  export const outboundSchema = MaxPrice$outboundSchema;
  /** @deprecated use `MaxPrice$Outbound` instead. */
  export type Outbound = MaxPrice$Outbound;
}

export function maxPriceToJSON(maxPrice: MaxPrice): string {
  return JSON.stringify(MaxPrice$outboundSchema.parse(maxPrice));
}

export function maxPriceFromJSON(
  jsonString: string,
): SafeParseResult<MaxPrice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MaxPrice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MaxPrice' from JSON`,
  );
}

/** @internal */
export const Experimental$inboundSchema: z.ZodType<
  Experimental,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Experimental$Outbound = {};

/** @internal */
export const Experimental$outboundSchema: z.ZodType<
  Experimental$Outbound,
  z.ZodTypeDef,
  Experimental
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Experimental$ {
  /** @deprecated use `Experimental$inboundSchema` instead. */
  export const inboundSchema = Experimental$inboundSchema;
  /** @deprecated use `Experimental$outboundSchema` instead. */
  export const outboundSchema = Experimental$outboundSchema;
  /** @deprecated use `Experimental$Outbound` instead. */
  export type Outbound = Experimental$Outbound;
}

export function experimentalToJSON(experimental: Experimental): string {
  return JSON.stringify(Experimental$outboundSchema.parse(experimental));
}

export function experimentalFromJSON(
  jsonString: string,
): SafeParseResult<Experimental, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Experimental$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Experimental' from JSON`,
  );
}

/** @internal */
export const PostEmbeddingsProvider$inboundSchema: z.ZodType<
  PostEmbeddingsProvider,
  z.ZodTypeDef,
  unknown
> = z.object({
  allow_fallbacks: z.nullable(z.boolean()).optional(),
  require_parameters: z.nullable(z.boolean()).optional(),
  data_collection: z.nullable(DataCollection$inboundSchema).optional(),
  zdr: z.nullable(z.boolean()).optional(),
  order: z.nullable(z.array(z.union([OrderEnum$inboundSchema, z.string()])))
    .optional(),
  only: z.nullable(z.array(z.union([OnlyEnum$inboundSchema, z.string()])))
    .optional(),
  ignore: z.nullable(z.array(z.union([IgnoreEnum$inboundSchema, z.string()])))
    .optional(),
  quantizations: z.nullable(z.array(PostEmbeddingsQuantization$inboundSchema))
    .optional(),
  sort: z.nullable(Sort$inboundSchema).optional(),
  max_price: z.lazy(() => MaxPrice$inboundSchema).optional(),
  experimental: z.nullable(z.lazy(() => Experimental$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "allow_fallbacks": "allowFallbacks",
    "require_parameters": "requireParameters",
    "data_collection": "dataCollection",
    "max_price": "maxPrice",
  });
});

/** @internal */
export type PostEmbeddingsProvider$Outbound = {
  allow_fallbacks?: boolean | null | undefined;
  require_parameters?: boolean | null | undefined;
  data_collection?: string | null | undefined;
  zdr?: boolean | null | undefined;
  order?: Array<string | string> | null | undefined;
  only?: Array<string | string> | null | undefined;
  ignore?: Array<string | string> | null | undefined;
  quantizations?: Array<string> | null | undefined;
  sort?: string | null | undefined;
  max_price?: MaxPrice$Outbound | undefined;
  experimental?: Experimental$Outbound | null | undefined;
};

/** @internal */
export const PostEmbeddingsProvider$outboundSchema: z.ZodType<
  PostEmbeddingsProvider$Outbound,
  z.ZodTypeDef,
  PostEmbeddingsProvider
> = z.object({
  allowFallbacks: z.nullable(z.boolean()).optional(),
  requireParameters: z.nullable(z.boolean()).optional(),
  dataCollection: z.nullable(DataCollection$outboundSchema).optional(),
  zdr: z.nullable(z.boolean()).optional(),
  order: z.nullable(z.array(z.union([OrderEnum$outboundSchema, z.string()])))
    .optional(),
  only: z.nullable(z.array(z.union([OnlyEnum$outboundSchema, z.string()])))
    .optional(),
  ignore: z.nullable(z.array(z.union([IgnoreEnum$outboundSchema, z.string()])))
    .optional(),
  quantizations: z.nullable(z.array(PostEmbeddingsQuantization$outboundSchema))
    .optional(),
  sort: z.nullable(Sort$outboundSchema).optional(),
  maxPrice: z.lazy(() => MaxPrice$outboundSchema).optional(),
  experimental: z.nullable(z.lazy(() => Experimental$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    allowFallbacks: "allow_fallbacks",
    requireParameters: "require_parameters",
    dataCollection: "data_collection",
    maxPrice: "max_price",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostEmbeddingsProvider$ {
  /** @deprecated use `PostEmbeddingsProvider$inboundSchema` instead. */
  export const inboundSchema = PostEmbeddingsProvider$inboundSchema;
  /** @deprecated use `PostEmbeddingsProvider$outboundSchema` instead. */
  export const outboundSchema = PostEmbeddingsProvider$outboundSchema;
  /** @deprecated use `PostEmbeddingsProvider$Outbound` instead. */
  export type Outbound = PostEmbeddingsProvider$Outbound;
}

export function postEmbeddingsProviderToJSON(
  postEmbeddingsProvider: PostEmbeddingsProvider,
): string {
  return JSON.stringify(
    PostEmbeddingsProvider$outboundSchema.parse(postEmbeddingsProvider),
  );
}

export function postEmbeddingsProviderFromJSON(
  jsonString: string,
): SafeParseResult<PostEmbeddingsProvider, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostEmbeddingsProvider$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostEmbeddingsProvider' from JSON`,
  );
}

/** @internal */
export const EncodingFormatBase64$inboundSchema: z.ZodNativeEnum<
  typeof EncodingFormatBase64
> = z.nativeEnum(EncodingFormatBase64);

/** @internal */
export const EncodingFormatBase64$outboundSchema: z.ZodNativeEnum<
  typeof EncodingFormatBase64
> = EncodingFormatBase64$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EncodingFormatBase64$ {
  /** @deprecated use `EncodingFormatBase64$inboundSchema` instead. */
  export const inboundSchema = EncodingFormatBase64$inboundSchema;
  /** @deprecated use `EncodingFormatBase64$outboundSchema` instead. */
  export const outboundSchema = EncodingFormatBase64$outboundSchema;
}

/** @internal */
export const EncodingFormatFloat$inboundSchema: z.ZodNativeEnum<
  typeof EncodingFormatFloat
> = z.nativeEnum(EncodingFormatFloat);

/** @internal */
export const EncodingFormatFloat$outboundSchema: z.ZodNativeEnum<
  typeof EncodingFormatFloat
> = EncodingFormatFloat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EncodingFormatFloat$ {
  /** @deprecated use `EncodingFormatFloat$inboundSchema` instead. */
  export const inboundSchema = EncodingFormatFloat$inboundSchema;
  /** @deprecated use `EncodingFormatFloat$outboundSchema` instead. */
  export const outboundSchema = EncodingFormatFloat$outboundSchema;
}

/** @internal */
export const EncodingFormat$inboundSchema: z.ZodType<
  EncodingFormat,
  z.ZodTypeDef,
  unknown
> = z.union([
  EncodingFormatFloat$inboundSchema,
  EncodingFormatBase64$inboundSchema,
]);

/** @internal */
export type EncodingFormat$Outbound = string | string;

/** @internal */
export const EncodingFormat$outboundSchema: z.ZodType<
  EncodingFormat$Outbound,
  z.ZodTypeDef,
  EncodingFormat
> = z.union([
  EncodingFormatFloat$outboundSchema,
  EncodingFormatBase64$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EncodingFormat$ {
  /** @deprecated use `EncodingFormat$inboundSchema` instead. */
  export const inboundSchema = EncodingFormat$inboundSchema;
  /** @deprecated use `EncodingFormat$outboundSchema` instead. */
  export const outboundSchema = EncodingFormat$outboundSchema;
  /** @deprecated use `EncodingFormat$Outbound` instead. */
  export type Outbound = EncodingFormat$Outbound;
}

export function encodingFormatToJSON(encodingFormat: EncodingFormat): string {
  return JSON.stringify(EncodingFormat$outboundSchema.parse(encodingFormat));
}

export function encodingFormatFromJSON(
  jsonString: string,
): SafeParseResult<EncodingFormat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EncodingFormat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EncodingFormat' from JSON`,
  );
}

/** @internal */
export const PostEmbeddingsRequest$inboundSchema: z.ZodType<
  PostEmbeddingsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  input: z.union([
    z.string(),
    z.array(z.string()),
    z.array(z.number()),
    z.array(z.array(z.number())),
  ]),
  model: z.string().optional(),
  models: z.array(z.string()).optional(),
  provider: z.lazy(() => PostEmbeddingsProvider$inboundSchema).optional(),
  encoding_format: z.union([
    EncodingFormatFloat$inboundSchema,
    EncodingFormatBase64$inboundSchema,
  ]).optional(),
  user: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "encoding_format": "encodingFormat",
  });
});

/** @internal */
export type PostEmbeddingsRequest$Outbound = {
  input: string | Array<string> | Array<number> | Array<Array<number>>;
  model?: string | undefined;
  models?: Array<string> | undefined;
  provider?: PostEmbeddingsProvider$Outbound | undefined;
  encoding_format?: string | string | undefined;
  user?: string | undefined;
};

/** @internal */
export const PostEmbeddingsRequest$outboundSchema: z.ZodType<
  PostEmbeddingsRequest$Outbound,
  z.ZodTypeDef,
  PostEmbeddingsRequest
> = z.object({
  input: z.union([
    z.string(),
    z.array(z.string()),
    z.array(z.number()),
    z.array(z.array(z.number())),
  ]),
  model: z.string().optional(),
  models: z.array(z.string()).optional(),
  provider: z.lazy(() => PostEmbeddingsProvider$outboundSchema).optional(),
  encodingFormat: z.union([
    EncodingFormatFloat$outboundSchema,
    EncodingFormatBase64$outboundSchema,
  ]).optional(),
  user: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    encodingFormat: "encoding_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostEmbeddingsRequest$ {
  /** @deprecated use `PostEmbeddingsRequest$inboundSchema` instead. */
  export const inboundSchema = PostEmbeddingsRequest$inboundSchema;
  /** @deprecated use `PostEmbeddingsRequest$outboundSchema` instead. */
  export const outboundSchema = PostEmbeddingsRequest$outboundSchema;
  /** @deprecated use `PostEmbeddingsRequest$Outbound` instead. */
  export type Outbound = PostEmbeddingsRequest$Outbound;
}

export function postEmbeddingsRequestToJSON(
  postEmbeddingsRequest: PostEmbeddingsRequest,
): string {
  return JSON.stringify(
    PostEmbeddingsRequest$outboundSchema.parse(postEmbeddingsRequest),
  );
}

export function postEmbeddingsRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostEmbeddingsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostEmbeddingsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostEmbeddingsRequest' from JSON`,
  );
}

/** @internal */
export const ObjectT$inboundSchema: z.ZodNativeEnum<typeof ObjectT> = z
  .nativeEnum(ObjectT);

/** @internal */
export const ObjectT$outboundSchema: z.ZodNativeEnum<typeof ObjectT> =
  ObjectT$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ObjectT$ {
  /** @deprecated use `ObjectT$inboundSchema` instead. */
  export const inboundSchema = ObjectT$inboundSchema;
  /** @deprecated use `ObjectT$outboundSchema` instead. */
  export const outboundSchema = ObjectT$outboundSchema;
}

/** @internal */
export const ObjectEmbedding$inboundSchema: z.ZodNativeEnum<
  typeof ObjectEmbedding
> = z.nativeEnum(ObjectEmbedding);

/** @internal */
export const ObjectEmbedding$outboundSchema: z.ZodNativeEnum<
  typeof ObjectEmbedding
> = ObjectEmbedding$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ObjectEmbedding$ {
  /** @deprecated use `ObjectEmbedding$inboundSchema` instead. */
  export const inboundSchema = ObjectEmbedding$inboundSchema;
  /** @deprecated use `ObjectEmbedding$outboundSchema` instead. */
  export const outboundSchema = ObjectEmbedding$outboundSchema;
}

/** @internal */
export const PostEmbeddingsData$inboundSchema: z.ZodType<
  PostEmbeddingsData,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: ObjectEmbedding$inboundSchema,
  embedding: z.array(z.number()),
  index: z.number(),
});

/** @internal */
export type PostEmbeddingsData$Outbound = {
  object: string;
  embedding: Array<number>;
  index: number;
};

/** @internal */
export const PostEmbeddingsData$outboundSchema: z.ZodType<
  PostEmbeddingsData$Outbound,
  z.ZodTypeDef,
  PostEmbeddingsData
> = z.object({
  object: ObjectEmbedding$outboundSchema,
  embedding: z.array(z.number()),
  index: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostEmbeddingsData$ {
  /** @deprecated use `PostEmbeddingsData$inboundSchema` instead. */
  export const inboundSchema = PostEmbeddingsData$inboundSchema;
  /** @deprecated use `PostEmbeddingsData$outboundSchema` instead. */
  export const outboundSchema = PostEmbeddingsData$outboundSchema;
  /** @deprecated use `PostEmbeddingsData$Outbound` instead. */
  export type Outbound = PostEmbeddingsData$Outbound;
}

export function postEmbeddingsDataToJSON(
  postEmbeddingsData: PostEmbeddingsData,
): string {
  return JSON.stringify(
    PostEmbeddingsData$outboundSchema.parse(postEmbeddingsData),
  );
}

export function postEmbeddingsDataFromJSON(
  jsonString: string,
): SafeParseResult<PostEmbeddingsData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostEmbeddingsData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostEmbeddingsData' from JSON`,
  );
}

/** @internal */
export const Usage$inboundSchema: z.ZodType<Usage, z.ZodTypeDef, unknown> = z
  .object({
    prompt_tokens: z.number(),
    total_tokens: z.number(),
    cost: z.number().optional(),
  }).transform((v) => {
    return remap$(v, {
      "prompt_tokens": "promptTokens",
      "total_tokens": "totalTokens",
    });
  });

/** @internal */
export type Usage$Outbound = {
  prompt_tokens: number;
  total_tokens: number;
  cost?: number | undefined;
};

/** @internal */
export const Usage$outboundSchema: z.ZodType<
  Usage$Outbound,
  z.ZodTypeDef,
  Usage
> = z.object({
  promptTokens: z.number(),
  totalTokens: z.number(),
  cost: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    promptTokens: "prompt_tokens",
    totalTokens: "total_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Usage$ {
  /** @deprecated use `Usage$inboundSchema` instead. */
  export const inboundSchema = Usage$inboundSchema;
  /** @deprecated use `Usage$outboundSchema` instead. */
  export const outboundSchema = Usage$outboundSchema;
  /** @deprecated use `Usage$Outbound` instead. */
  export type Outbound = Usage$Outbound;
}

export function usageToJSON(usage: Usage): string {
  return JSON.stringify(Usage$outboundSchema.parse(usage));
}

export function usageFromJSON(
  jsonString: string,
): SafeParseResult<Usage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Usage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Usage' from JSON`,
  );
}

/** @internal */
export const PostEmbeddingsResponseBody$inboundSchema: z.ZodType<
  PostEmbeddingsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: ObjectT$inboundSchema,
  data: z.array(z.lazy(() => PostEmbeddingsData$inboundSchema)),
  model: z.string(),
  usage: z.lazy(() => Usage$inboundSchema).optional(),
});

/** @internal */
export type PostEmbeddingsResponseBody$Outbound = {
  object: string;
  data: Array<PostEmbeddingsData$Outbound>;
  model: string;
  usage?: Usage$Outbound | undefined;
};

/** @internal */
export const PostEmbeddingsResponseBody$outboundSchema: z.ZodType<
  PostEmbeddingsResponseBody$Outbound,
  z.ZodTypeDef,
  PostEmbeddingsResponseBody
> = z.object({
  object: ObjectT$outboundSchema,
  data: z.array(z.lazy(() => PostEmbeddingsData$outboundSchema)),
  model: z.string(),
  usage: z.lazy(() => Usage$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostEmbeddingsResponseBody$ {
  /** @deprecated use `PostEmbeddingsResponseBody$inboundSchema` instead. */
  export const inboundSchema = PostEmbeddingsResponseBody$inboundSchema;
  /** @deprecated use `PostEmbeddingsResponseBody$outboundSchema` instead. */
  export const outboundSchema = PostEmbeddingsResponseBody$outboundSchema;
  /** @deprecated use `PostEmbeddingsResponseBody$Outbound` instead. */
  export type Outbound = PostEmbeddingsResponseBody$Outbound;
}

export function postEmbeddingsResponseBodyToJSON(
  postEmbeddingsResponseBody: PostEmbeddingsResponseBody,
): string {
  return JSON.stringify(
    PostEmbeddingsResponseBody$outboundSchema.parse(postEmbeddingsResponseBody),
  );
}

export function postEmbeddingsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostEmbeddingsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostEmbeddingsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostEmbeddingsResponseBody' from JSON`,
  );
}

/** @internal */
export const PostEmbeddingsResponse$inboundSchema: z.ZodType<
  PostEmbeddingsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => PostEmbeddingsResponseBody$inboundSchema),
  models.ErrorResponse$inboundSchema,
]);

/** @internal */
export type PostEmbeddingsResponse$Outbound =
  | PostEmbeddingsResponseBody$Outbound
  | models.ErrorResponse$Outbound;

/** @internal */
export const PostEmbeddingsResponse$outboundSchema: z.ZodType<
  PostEmbeddingsResponse$Outbound,
  z.ZodTypeDef,
  PostEmbeddingsResponse
> = z.union([
  z.lazy(() => PostEmbeddingsResponseBody$outboundSchema),
  models.ErrorResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostEmbeddingsResponse$ {
  /** @deprecated use `PostEmbeddingsResponse$inboundSchema` instead. */
  export const inboundSchema = PostEmbeddingsResponse$inboundSchema;
  /** @deprecated use `PostEmbeddingsResponse$outboundSchema` instead. */
  export const outboundSchema = PostEmbeddingsResponse$outboundSchema;
  /** @deprecated use `PostEmbeddingsResponse$Outbound` instead. */
  export type Outbound = PostEmbeddingsResponse$Outbound;
}

export function postEmbeddingsResponseToJSON(
  postEmbeddingsResponse: PostEmbeddingsResponse,
): string {
  return JSON.stringify(
    PostEmbeddingsResponse$outboundSchema.parse(postEmbeddingsResponse),
  );
}

export function postEmbeddingsResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostEmbeddingsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostEmbeddingsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostEmbeddingsResponse' from JSON`,
  );
}
