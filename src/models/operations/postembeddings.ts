/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PostEmbeddingsInput =
  | string
  | Array<string>
  | Array<number>
  | Array<Array<number>>;

/**
 * Data collection setting. If no available model provider meets the requirement, your request will return an error.
 *
 * @remarks
 * - allow: (default) allow providers which store user data non-transiently and may train on it
 * - deny: use only providers which do not collect user data.
 */
export const PostEmbeddingsDataCollection = {
  Deny: "deny",
  Allow: "allow",
} as const;
/**
 * Data collection setting. If no available model provider meets the requirement, your request will return an error.
 *
 * @remarks
 * - allow: (default) allow providers which store user data non-transiently and may train on it
 * - deny: use only providers which do not collect user data.
 */
export type PostEmbeddingsDataCollection = ClosedEnum<
  typeof PostEmbeddingsDataCollection
>;

export const PostEmbeddingsOrderEnum = {
  AnyScale: "AnyScale",
  CentML: "Cent-ML",
  HuggingFace: "HuggingFace",
  Hyperbolic2: "Hyperbolic 2",
  Lepton: "Lepton",
  Lynn2: "Lynn 2",
  Lynn: "Lynn",
  Mancer: "Mancer",
  Modal: "Modal",
  OctoAI: "OctoAI",
  Recursal: "Recursal",
  Reflection: "Reflection",
  Replicate: "Replicate",
  SambaNova2: "SambaNova 2",
  SFCompute: "SF Compute",
  Together2: "Together 2",
  OneDotAI: "01.AI",
  Ai21: "AI21",
  AionLabs: "AionLabs",
  Alibaba: "Alibaba",
  AmazonBedrock: "Amazon Bedrock",
  Anthropic: "Anthropic",
  AtlasCloud: "AtlasCloud",
  Atoma: "Atoma",
  Avian: "Avian",
  Azure: "Azure",
  BaseTen: "BaseTen",
  Cerebras: "Cerebras",
  Chutes: "Chutes",
  Cloudflare: "Cloudflare",
  Cohere: "Cohere",
  CrofAI: "CrofAI",
  Crusoe: "Crusoe",
  DeepInfra: "DeepInfra",
  DeepSeek: "DeepSeek",
  Enfer: "Enfer",
  Featherless: "Featherless",
  Fireworks: "Fireworks",
  Friendli: "Friendli",
  GMICloud: "GMICloud",
  Google: "Google",
  GoogleAIStudio: "Google AI Studio",
  Groq: "Groq",
  Hyperbolic: "Hyperbolic",
  Inception: "Inception",
  InferenceNet: "InferenceNet",
  Infermatic: "Infermatic",
  Inflection: "Inflection",
  InoCloud: "InoCloud",
  Kluster: "Kluster",
  Lambda: "Lambda",
  Liquid: "Liquid",
  Mancer2: "Mancer 2",
  Meta: "Meta",
  Minimax: "Minimax",
  Mistral: "Mistral",
  MoonshotAI: "Moonshot AI",
  Morph: "Morph",
  NCompass: "NCompass",
  Nebius: "Nebius",
  NextBit: "NextBit",
  Nineteen: "Nineteen",
  Novita: "Novita",
  Nvidia: "Nvidia",
  OpenAI: "OpenAI",
  OpenInference: "OpenInference",
  Parasail: "Parasail",
  Perplexity: "Perplexity",
  Phala: "Phala",
  SambaNova: "SambaNova",
  SiliconFlow: "SiliconFlow",
  Stealth: "Stealth",
  Switchpoint: "Switchpoint",
  Targon: "Targon",
  Together: "Together",
  Ubicloud: "Ubicloud",
  Venice: "Venice",
  WandB: "WandB",
  XAI: "xAI",
  ZAi: "Z.AI",
  FakeProvider: "FakeProvider",
} as const;
export type PostEmbeddingsOrderEnum = ClosedEnum<
  typeof PostEmbeddingsOrderEnum
>;

export type PostEmbeddingsOrderUnion = PostEmbeddingsOrderEnum | string;

export const PostEmbeddingsOnlyEnum = {
  AnyScale: "AnyScale",
  CentML: "Cent-ML",
  HuggingFace: "HuggingFace",
  Hyperbolic2: "Hyperbolic 2",
  Lepton: "Lepton",
  Lynn2: "Lynn 2",
  Lynn: "Lynn",
  Mancer: "Mancer",
  Modal: "Modal",
  OctoAI: "OctoAI",
  Recursal: "Recursal",
  Reflection: "Reflection",
  Replicate: "Replicate",
  SambaNova2: "SambaNova 2",
  SFCompute: "SF Compute",
  Together2: "Together 2",
  OneDotAI: "01.AI",
  Ai21: "AI21",
  AionLabs: "AionLabs",
  Alibaba: "Alibaba",
  AmazonBedrock: "Amazon Bedrock",
  Anthropic: "Anthropic",
  AtlasCloud: "AtlasCloud",
  Atoma: "Atoma",
  Avian: "Avian",
  Azure: "Azure",
  BaseTen: "BaseTen",
  Cerebras: "Cerebras",
  Chutes: "Chutes",
  Cloudflare: "Cloudflare",
  Cohere: "Cohere",
  CrofAI: "CrofAI",
  Crusoe: "Crusoe",
  DeepInfra: "DeepInfra",
  DeepSeek: "DeepSeek",
  Enfer: "Enfer",
  Featherless: "Featherless",
  Fireworks: "Fireworks",
  Friendli: "Friendli",
  GMICloud: "GMICloud",
  Google: "Google",
  GoogleAIStudio: "Google AI Studio",
  Groq: "Groq",
  Hyperbolic: "Hyperbolic",
  Inception: "Inception",
  InferenceNet: "InferenceNet",
  Infermatic: "Infermatic",
  Inflection: "Inflection",
  InoCloud: "InoCloud",
  Kluster: "Kluster",
  Lambda: "Lambda",
  Liquid: "Liquid",
  Mancer2: "Mancer 2",
  Meta: "Meta",
  Minimax: "Minimax",
  Mistral: "Mistral",
  MoonshotAI: "Moonshot AI",
  Morph: "Morph",
  NCompass: "NCompass",
  Nebius: "Nebius",
  NextBit: "NextBit",
  Nineteen: "Nineteen",
  Novita: "Novita",
  Nvidia: "Nvidia",
  OpenAI: "OpenAI",
  OpenInference: "OpenInference",
  Parasail: "Parasail",
  Perplexity: "Perplexity",
  Phala: "Phala",
  SambaNova: "SambaNova",
  SiliconFlow: "SiliconFlow",
  Stealth: "Stealth",
  Switchpoint: "Switchpoint",
  Targon: "Targon",
  Together: "Together",
  Ubicloud: "Ubicloud",
  Venice: "Venice",
  WandB: "WandB",
  XAI: "xAI",
  ZAi: "Z.AI",
  FakeProvider: "FakeProvider",
} as const;
export type PostEmbeddingsOnlyEnum = ClosedEnum<typeof PostEmbeddingsOnlyEnum>;

export type PostEmbeddingsOnlyUnion = PostEmbeddingsOnlyEnum | string;

export const PostEmbeddingsIgnoreEnum = {
  AnyScale: "AnyScale",
  CentML: "Cent-ML",
  HuggingFace: "HuggingFace",
  Hyperbolic2: "Hyperbolic 2",
  Lepton: "Lepton",
  Lynn2: "Lynn 2",
  Lynn: "Lynn",
  Mancer: "Mancer",
  Modal: "Modal",
  OctoAI: "OctoAI",
  Recursal: "Recursal",
  Reflection: "Reflection",
  Replicate: "Replicate",
  SambaNova2: "SambaNova 2",
  SFCompute: "SF Compute",
  Together2: "Together 2",
  OneDotAI: "01.AI",
  Ai21: "AI21",
  AionLabs: "AionLabs",
  Alibaba: "Alibaba",
  AmazonBedrock: "Amazon Bedrock",
  Anthropic: "Anthropic",
  AtlasCloud: "AtlasCloud",
  Atoma: "Atoma",
  Avian: "Avian",
  Azure: "Azure",
  BaseTen: "BaseTen",
  Cerebras: "Cerebras",
  Chutes: "Chutes",
  Cloudflare: "Cloudflare",
  Cohere: "Cohere",
  CrofAI: "CrofAI",
  Crusoe: "Crusoe",
  DeepInfra: "DeepInfra",
  DeepSeek: "DeepSeek",
  Enfer: "Enfer",
  Featherless: "Featherless",
  Fireworks: "Fireworks",
  Friendli: "Friendli",
  GMICloud: "GMICloud",
  Google: "Google",
  GoogleAIStudio: "Google AI Studio",
  Groq: "Groq",
  Hyperbolic: "Hyperbolic",
  Inception: "Inception",
  InferenceNet: "InferenceNet",
  Infermatic: "Infermatic",
  Inflection: "Inflection",
  InoCloud: "InoCloud",
  Kluster: "Kluster",
  Lambda: "Lambda",
  Liquid: "Liquid",
  Mancer2: "Mancer 2",
  Meta: "Meta",
  Minimax: "Minimax",
  Mistral: "Mistral",
  MoonshotAI: "Moonshot AI",
  Morph: "Morph",
  NCompass: "NCompass",
  Nebius: "Nebius",
  NextBit: "NextBit",
  Nineteen: "Nineteen",
  Novita: "Novita",
  Nvidia: "Nvidia",
  OpenAI: "OpenAI",
  OpenInference: "OpenInference",
  Parasail: "Parasail",
  Perplexity: "Perplexity",
  Phala: "Phala",
  SambaNova: "SambaNova",
  SiliconFlow: "SiliconFlow",
  Stealth: "Stealth",
  Switchpoint: "Switchpoint",
  Targon: "Targon",
  Together: "Together",
  Ubicloud: "Ubicloud",
  Venice: "Venice",
  WandB: "WandB",
  XAI: "xAI",
  ZAi: "Z.AI",
  FakeProvider: "FakeProvider",
} as const;
export type PostEmbeddingsIgnoreEnum = ClosedEnum<
  typeof PostEmbeddingsIgnoreEnum
>;

export type PostEmbeddingsIgnoreUnion = PostEmbeddingsIgnoreEnum | string;

export const PostEmbeddingsQuantization = {
  Int4: "int4",
  Int8: "int8",
  Fp4: "fp4",
  Fp6: "fp6",
  Fp8: "fp8",
  Fp16: "fp16",
  Bf16: "bf16",
  Fp32: "fp32",
  Unknown: "unknown",
} as const;
export type PostEmbeddingsQuantization = ClosedEnum<
  typeof PostEmbeddingsQuantization
>;

/**
 * The sorting strategy to use for this request, if "order" is not specified. When set, no load balancing is performed.
 */
export const PostEmbeddingsSort = {
  Price: "price",
  Throughput: "throughput",
  Latency: "latency",
} as const;
/**
 * The sorting strategy to use for this request, if "order" is not specified. When set, no load balancing is performed.
 */
export type PostEmbeddingsSort = ClosedEnum<typeof PostEmbeddingsSort>;

export type PostEmbeddingsPrompt = number | string | any;

export type PostEmbeddingsCompletion = number | string | any;

export type PostEmbeddingsImage = number | string | any;

export type PostEmbeddingsAudio = number | string | any;

export type PostEmbeddingsRequestUnion = number | string | any;

/**
 * The object specifying the maximum price you want to pay for this request. USD price per million tokens, for prompt and completion.
 */
export type PostEmbeddingsMaxPrice = {
  prompt?: number | string | any | undefined;
  completion?: number | string | any | undefined;
  image?: number | string | any | undefined;
  audio?: number | string | any | undefined;
  request?: number | string | any | undefined;
};

export type PostEmbeddingsExperimental = {};

export type PostEmbeddingsProvider = {
  /**
   * Whether to allow backup providers to serve requests
   *
   * @remarks
   * - true: (default) when the primary provider (or your custom providers in "order") is unavailable, use the next best provider.
   * - false: use only the primary/custom provider, and return the upstream error if it's unavailable.
   */
  allowFallbacks?: boolean | null | undefined;
  /**
   * Whether to filter providers to only those that support the parameters you've provided. If this setting is omitted or set to false, then providers will receive only the parameters they support, and ignore the rest.
   */
  requireParameters?: boolean | null | undefined;
  /**
   * Data collection setting. If no available model provider meets the requirement, your request will return an error.
   *
   * @remarks
   * - allow: (default) allow providers which store user data non-transiently and may train on it
   * - deny: use only providers which do not collect user data.
   */
  dataCollection?: PostEmbeddingsDataCollection | null | undefined;
  /**
   * Whether to restrict routing to only ZDR (Zero Data Retention) endpoints. When true, only endpoints that do not retain prompts will be used.
   */
  zdr?: boolean | null | undefined;
  /**
   * An ordered list of provider slugs. The router will attempt to use the first provider in the subset of this list that supports your requested model, and fall back to the next if it is unavailable. If no providers are available, the request will fail with an error message.
   */
  order?: Array<PostEmbeddingsOrderEnum | string> | null | undefined;
  /**
   * List of provider slugs to allow. If provided, this list is merged with your account-wide allowed provider settings for this request.
   */
  only?: Array<PostEmbeddingsOnlyEnum | string> | null | undefined;
  /**
   * List of provider slugs to ignore. If provided, this list is merged with your account-wide ignored provider settings for this request.
   */
  ignore?: Array<PostEmbeddingsIgnoreEnum | string> | null | undefined;
  /**
   * A list of quantization levels to filter the provider by.
   */
  quantizations?: Array<PostEmbeddingsQuantization> | null | undefined;
  /**
   * The sorting strategy to use for this request, if "order" is not specified. When set, no load balancing is performed.
   */
  sort?: PostEmbeddingsSort | null | undefined;
  /**
   * The object specifying the maximum price you want to pay for this request. USD price per million tokens, for prompt and completion.
   */
  maxPrice?: PostEmbeddingsMaxPrice | undefined;
  experimental?: PostEmbeddingsExperimental | null | undefined;
};

export const EncodingFormatBase64 = {
  Base64: "base64",
} as const;
export type EncodingFormatBase64 = ClosedEnum<typeof EncodingFormatBase64>;

export const EncodingFormatFloat = {
  Float: "float",
} as const;
export type EncodingFormatFloat = ClosedEnum<typeof EncodingFormatFloat>;

export type EncodingFormat = EncodingFormatFloat | EncodingFormatBase64;

export type PostEmbeddingsRequest = {
  input: string | Array<string> | Array<number> | Array<Array<number>>;
  model?: string | undefined;
  models?: Array<string> | undefined;
  provider?: PostEmbeddingsProvider | undefined;
  encodingFormat?: EncodingFormatFloat | EncodingFormatBase64 | undefined;
  user?: string | undefined;
};

export const PostEmbeddingsObject = {
  List: "list",
} as const;
export type PostEmbeddingsObject = ClosedEnum<typeof PostEmbeddingsObject>;

export const ObjectEmbedding = {
  Embedding: "embedding",
} as const;
export type ObjectEmbedding = ClosedEnum<typeof ObjectEmbedding>;

export type PostEmbeddingsData = {
  object: ObjectEmbedding;
  embedding: Array<number>;
  index: number;
};

export type PostEmbeddingsUsage = {
  promptTokens: number;
  totalTokens: number;
  cost?: number | undefined;
};

/**
 * Embedding response
 */
export type PostEmbeddingsResponse = {
  object: PostEmbeddingsObject;
  data: Array<PostEmbeddingsData>;
  model: string;
  usage?: PostEmbeddingsUsage | undefined;
};

/** @internal */
export const PostEmbeddingsInput$inboundSchema: z.ZodType<
  PostEmbeddingsInput,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.string()),
  z.array(z.number()),
  z.array(z.array(z.number())),
]);

/** @internal */
export type PostEmbeddingsInput$Outbound =
  | string
  | Array<string>
  | Array<number>
  | Array<Array<number>>;

/** @internal */
export const PostEmbeddingsInput$outboundSchema: z.ZodType<
  PostEmbeddingsInput$Outbound,
  z.ZodTypeDef,
  PostEmbeddingsInput
> = z.union([
  z.string(),
  z.array(z.string()),
  z.array(z.number()),
  z.array(z.array(z.number())),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostEmbeddingsInput$ {
  /** @deprecated use `PostEmbeddingsInput$inboundSchema` instead. */
  export const inboundSchema = PostEmbeddingsInput$inboundSchema;
  /** @deprecated use `PostEmbeddingsInput$outboundSchema` instead. */
  export const outboundSchema = PostEmbeddingsInput$outboundSchema;
  /** @deprecated use `PostEmbeddingsInput$Outbound` instead. */
  export type Outbound = PostEmbeddingsInput$Outbound;
}

export function postEmbeddingsInputToJSON(
  postEmbeddingsInput: PostEmbeddingsInput,
): string {
  return JSON.stringify(
    PostEmbeddingsInput$outboundSchema.parse(postEmbeddingsInput),
  );
}

export function postEmbeddingsInputFromJSON(
  jsonString: string,
): SafeParseResult<PostEmbeddingsInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostEmbeddingsInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostEmbeddingsInput' from JSON`,
  );
}

/** @internal */
export const PostEmbeddingsDataCollection$inboundSchema: z.ZodNativeEnum<
  typeof PostEmbeddingsDataCollection
> = z.nativeEnum(PostEmbeddingsDataCollection);

/** @internal */
export const PostEmbeddingsDataCollection$outboundSchema: z.ZodNativeEnum<
  typeof PostEmbeddingsDataCollection
> = PostEmbeddingsDataCollection$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostEmbeddingsDataCollection$ {
  /** @deprecated use `PostEmbeddingsDataCollection$inboundSchema` instead. */
  export const inboundSchema = PostEmbeddingsDataCollection$inboundSchema;
  /** @deprecated use `PostEmbeddingsDataCollection$outboundSchema` instead. */
  export const outboundSchema = PostEmbeddingsDataCollection$outboundSchema;
}

/** @internal */
export const PostEmbeddingsOrderEnum$inboundSchema: z.ZodNativeEnum<
  typeof PostEmbeddingsOrderEnum
> = z.nativeEnum(PostEmbeddingsOrderEnum);

/** @internal */
export const PostEmbeddingsOrderEnum$outboundSchema: z.ZodNativeEnum<
  typeof PostEmbeddingsOrderEnum
> = PostEmbeddingsOrderEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostEmbeddingsOrderEnum$ {
  /** @deprecated use `PostEmbeddingsOrderEnum$inboundSchema` instead. */
  export const inboundSchema = PostEmbeddingsOrderEnum$inboundSchema;
  /** @deprecated use `PostEmbeddingsOrderEnum$outboundSchema` instead. */
  export const outboundSchema = PostEmbeddingsOrderEnum$outboundSchema;
}

/** @internal */
export const PostEmbeddingsOrderUnion$inboundSchema: z.ZodType<
  PostEmbeddingsOrderUnion,
  z.ZodTypeDef,
  unknown
> = z.union([PostEmbeddingsOrderEnum$inboundSchema, z.string()]);

/** @internal */
export type PostEmbeddingsOrderUnion$Outbound = string | string;

/** @internal */
export const PostEmbeddingsOrderUnion$outboundSchema: z.ZodType<
  PostEmbeddingsOrderUnion$Outbound,
  z.ZodTypeDef,
  PostEmbeddingsOrderUnion
> = z.union([PostEmbeddingsOrderEnum$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostEmbeddingsOrderUnion$ {
  /** @deprecated use `PostEmbeddingsOrderUnion$inboundSchema` instead. */
  export const inboundSchema = PostEmbeddingsOrderUnion$inboundSchema;
  /** @deprecated use `PostEmbeddingsOrderUnion$outboundSchema` instead. */
  export const outboundSchema = PostEmbeddingsOrderUnion$outboundSchema;
  /** @deprecated use `PostEmbeddingsOrderUnion$Outbound` instead. */
  export type Outbound = PostEmbeddingsOrderUnion$Outbound;
}

export function postEmbeddingsOrderUnionToJSON(
  postEmbeddingsOrderUnion: PostEmbeddingsOrderUnion,
): string {
  return JSON.stringify(
    PostEmbeddingsOrderUnion$outboundSchema.parse(postEmbeddingsOrderUnion),
  );
}

export function postEmbeddingsOrderUnionFromJSON(
  jsonString: string,
): SafeParseResult<PostEmbeddingsOrderUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostEmbeddingsOrderUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostEmbeddingsOrderUnion' from JSON`,
  );
}

/** @internal */
export const PostEmbeddingsOnlyEnum$inboundSchema: z.ZodNativeEnum<
  typeof PostEmbeddingsOnlyEnum
> = z.nativeEnum(PostEmbeddingsOnlyEnum);

/** @internal */
export const PostEmbeddingsOnlyEnum$outboundSchema: z.ZodNativeEnum<
  typeof PostEmbeddingsOnlyEnum
> = PostEmbeddingsOnlyEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostEmbeddingsOnlyEnum$ {
  /** @deprecated use `PostEmbeddingsOnlyEnum$inboundSchema` instead. */
  export const inboundSchema = PostEmbeddingsOnlyEnum$inboundSchema;
  /** @deprecated use `PostEmbeddingsOnlyEnum$outboundSchema` instead. */
  export const outboundSchema = PostEmbeddingsOnlyEnum$outboundSchema;
}

/** @internal */
export const PostEmbeddingsOnlyUnion$inboundSchema: z.ZodType<
  PostEmbeddingsOnlyUnion,
  z.ZodTypeDef,
  unknown
> = z.union([PostEmbeddingsOnlyEnum$inboundSchema, z.string()]);

/** @internal */
export type PostEmbeddingsOnlyUnion$Outbound = string | string;

/** @internal */
export const PostEmbeddingsOnlyUnion$outboundSchema: z.ZodType<
  PostEmbeddingsOnlyUnion$Outbound,
  z.ZodTypeDef,
  PostEmbeddingsOnlyUnion
> = z.union([PostEmbeddingsOnlyEnum$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostEmbeddingsOnlyUnion$ {
  /** @deprecated use `PostEmbeddingsOnlyUnion$inboundSchema` instead. */
  export const inboundSchema = PostEmbeddingsOnlyUnion$inboundSchema;
  /** @deprecated use `PostEmbeddingsOnlyUnion$outboundSchema` instead. */
  export const outboundSchema = PostEmbeddingsOnlyUnion$outboundSchema;
  /** @deprecated use `PostEmbeddingsOnlyUnion$Outbound` instead. */
  export type Outbound = PostEmbeddingsOnlyUnion$Outbound;
}

export function postEmbeddingsOnlyUnionToJSON(
  postEmbeddingsOnlyUnion: PostEmbeddingsOnlyUnion,
): string {
  return JSON.stringify(
    PostEmbeddingsOnlyUnion$outboundSchema.parse(postEmbeddingsOnlyUnion),
  );
}

export function postEmbeddingsOnlyUnionFromJSON(
  jsonString: string,
): SafeParseResult<PostEmbeddingsOnlyUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostEmbeddingsOnlyUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostEmbeddingsOnlyUnion' from JSON`,
  );
}

/** @internal */
export const PostEmbeddingsIgnoreEnum$inboundSchema: z.ZodNativeEnum<
  typeof PostEmbeddingsIgnoreEnum
> = z.nativeEnum(PostEmbeddingsIgnoreEnum);

/** @internal */
export const PostEmbeddingsIgnoreEnum$outboundSchema: z.ZodNativeEnum<
  typeof PostEmbeddingsIgnoreEnum
> = PostEmbeddingsIgnoreEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostEmbeddingsIgnoreEnum$ {
  /** @deprecated use `PostEmbeddingsIgnoreEnum$inboundSchema` instead. */
  export const inboundSchema = PostEmbeddingsIgnoreEnum$inboundSchema;
  /** @deprecated use `PostEmbeddingsIgnoreEnum$outboundSchema` instead. */
  export const outboundSchema = PostEmbeddingsIgnoreEnum$outboundSchema;
}

/** @internal */
export const PostEmbeddingsIgnoreUnion$inboundSchema: z.ZodType<
  PostEmbeddingsIgnoreUnion,
  z.ZodTypeDef,
  unknown
> = z.union([PostEmbeddingsIgnoreEnum$inboundSchema, z.string()]);

/** @internal */
export type PostEmbeddingsIgnoreUnion$Outbound = string | string;

/** @internal */
export const PostEmbeddingsIgnoreUnion$outboundSchema: z.ZodType<
  PostEmbeddingsIgnoreUnion$Outbound,
  z.ZodTypeDef,
  PostEmbeddingsIgnoreUnion
> = z.union([PostEmbeddingsIgnoreEnum$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostEmbeddingsIgnoreUnion$ {
  /** @deprecated use `PostEmbeddingsIgnoreUnion$inboundSchema` instead. */
  export const inboundSchema = PostEmbeddingsIgnoreUnion$inboundSchema;
  /** @deprecated use `PostEmbeddingsIgnoreUnion$outboundSchema` instead. */
  export const outboundSchema = PostEmbeddingsIgnoreUnion$outboundSchema;
  /** @deprecated use `PostEmbeddingsIgnoreUnion$Outbound` instead. */
  export type Outbound = PostEmbeddingsIgnoreUnion$Outbound;
}

export function postEmbeddingsIgnoreUnionToJSON(
  postEmbeddingsIgnoreUnion: PostEmbeddingsIgnoreUnion,
): string {
  return JSON.stringify(
    PostEmbeddingsIgnoreUnion$outboundSchema.parse(postEmbeddingsIgnoreUnion),
  );
}

export function postEmbeddingsIgnoreUnionFromJSON(
  jsonString: string,
): SafeParseResult<PostEmbeddingsIgnoreUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostEmbeddingsIgnoreUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostEmbeddingsIgnoreUnion' from JSON`,
  );
}

/** @internal */
export const PostEmbeddingsQuantization$inboundSchema: z.ZodNativeEnum<
  typeof PostEmbeddingsQuantization
> = z.nativeEnum(PostEmbeddingsQuantization);

/** @internal */
export const PostEmbeddingsQuantization$outboundSchema: z.ZodNativeEnum<
  typeof PostEmbeddingsQuantization
> = PostEmbeddingsQuantization$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostEmbeddingsQuantization$ {
  /** @deprecated use `PostEmbeddingsQuantization$inboundSchema` instead. */
  export const inboundSchema = PostEmbeddingsQuantization$inboundSchema;
  /** @deprecated use `PostEmbeddingsQuantization$outboundSchema` instead. */
  export const outboundSchema = PostEmbeddingsQuantization$outboundSchema;
}

/** @internal */
export const PostEmbeddingsSort$inboundSchema: z.ZodNativeEnum<
  typeof PostEmbeddingsSort
> = z.nativeEnum(PostEmbeddingsSort);

/** @internal */
export const PostEmbeddingsSort$outboundSchema: z.ZodNativeEnum<
  typeof PostEmbeddingsSort
> = PostEmbeddingsSort$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostEmbeddingsSort$ {
  /** @deprecated use `PostEmbeddingsSort$inboundSchema` instead. */
  export const inboundSchema = PostEmbeddingsSort$inboundSchema;
  /** @deprecated use `PostEmbeddingsSort$outboundSchema` instead. */
  export const outboundSchema = PostEmbeddingsSort$outboundSchema;
}

/** @internal */
export const PostEmbeddingsPrompt$inboundSchema: z.ZodType<
  PostEmbeddingsPrompt,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type PostEmbeddingsPrompt$Outbound = number | string | any;

/** @internal */
export const PostEmbeddingsPrompt$outboundSchema: z.ZodType<
  PostEmbeddingsPrompt$Outbound,
  z.ZodTypeDef,
  PostEmbeddingsPrompt
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostEmbeddingsPrompt$ {
  /** @deprecated use `PostEmbeddingsPrompt$inboundSchema` instead. */
  export const inboundSchema = PostEmbeddingsPrompt$inboundSchema;
  /** @deprecated use `PostEmbeddingsPrompt$outboundSchema` instead. */
  export const outboundSchema = PostEmbeddingsPrompt$outboundSchema;
  /** @deprecated use `PostEmbeddingsPrompt$Outbound` instead. */
  export type Outbound = PostEmbeddingsPrompt$Outbound;
}

export function postEmbeddingsPromptToJSON(
  postEmbeddingsPrompt: PostEmbeddingsPrompt,
): string {
  return JSON.stringify(
    PostEmbeddingsPrompt$outboundSchema.parse(postEmbeddingsPrompt),
  );
}

export function postEmbeddingsPromptFromJSON(
  jsonString: string,
): SafeParseResult<PostEmbeddingsPrompt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostEmbeddingsPrompt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostEmbeddingsPrompt' from JSON`,
  );
}

/** @internal */
export const PostEmbeddingsCompletion$inboundSchema: z.ZodType<
  PostEmbeddingsCompletion,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type PostEmbeddingsCompletion$Outbound = number | string | any;

/** @internal */
export const PostEmbeddingsCompletion$outboundSchema: z.ZodType<
  PostEmbeddingsCompletion$Outbound,
  z.ZodTypeDef,
  PostEmbeddingsCompletion
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostEmbeddingsCompletion$ {
  /** @deprecated use `PostEmbeddingsCompletion$inboundSchema` instead. */
  export const inboundSchema = PostEmbeddingsCompletion$inboundSchema;
  /** @deprecated use `PostEmbeddingsCompletion$outboundSchema` instead. */
  export const outboundSchema = PostEmbeddingsCompletion$outboundSchema;
  /** @deprecated use `PostEmbeddingsCompletion$Outbound` instead. */
  export type Outbound = PostEmbeddingsCompletion$Outbound;
}

export function postEmbeddingsCompletionToJSON(
  postEmbeddingsCompletion: PostEmbeddingsCompletion,
): string {
  return JSON.stringify(
    PostEmbeddingsCompletion$outboundSchema.parse(postEmbeddingsCompletion),
  );
}

export function postEmbeddingsCompletionFromJSON(
  jsonString: string,
): SafeParseResult<PostEmbeddingsCompletion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostEmbeddingsCompletion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostEmbeddingsCompletion' from JSON`,
  );
}

/** @internal */
export const PostEmbeddingsImage$inboundSchema: z.ZodType<
  PostEmbeddingsImage,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type PostEmbeddingsImage$Outbound = number | string | any;

/** @internal */
export const PostEmbeddingsImage$outboundSchema: z.ZodType<
  PostEmbeddingsImage$Outbound,
  z.ZodTypeDef,
  PostEmbeddingsImage
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostEmbeddingsImage$ {
  /** @deprecated use `PostEmbeddingsImage$inboundSchema` instead. */
  export const inboundSchema = PostEmbeddingsImage$inboundSchema;
  /** @deprecated use `PostEmbeddingsImage$outboundSchema` instead. */
  export const outboundSchema = PostEmbeddingsImage$outboundSchema;
  /** @deprecated use `PostEmbeddingsImage$Outbound` instead. */
  export type Outbound = PostEmbeddingsImage$Outbound;
}

export function postEmbeddingsImageToJSON(
  postEmbeddingsImage: PostEmbeddingsImage,
): string {
  return JSON.stringify(
    PostEmbeddingsImage$outboundSchema.parse(postEmbeddingsImage),
  );
}

export function postEmbeddingsImageFromJSON(
  jsonString: string,
): SafeParseResult<PostEmbeddingsImage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostEmbeddingsImage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostEmbeddingsImage' from JSON`,
  );
}

/** @internal */
export const PostEmbeddingsAudio$inboundSchema: z.ZodType<
  PostEmbeddingsAudio,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type PostEmbeddingsAudio$Outbound = number | string | any;

/** @internal */
export const PostEmbeddingsAudio$outboundSchema: z.ZodType<
  PostEmbeddingsAudio$Outbound,
  z.ZodTypeDef,
  PostEmbeddingsAudio
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostEmbeddingsAudio$ {
  /** @deprecated use `PostEmbeddingsAudio$inboundSchema` instead. */
  export const inboundSchema = PostEmbeddingsAudio$inboundSchema;
  /** @deprecated use `PostEmbeddingsAudio$outboundSchema` instead. */
  export const outboundSchema = PostEmbeddingsAudio$outboundSchema;
  /** @deprecated use `PostEmbeddingsAudio$Outbound` instead. */
  export type Outbound = PostEmbeddingsAudio$Outbound;
}

export function postEmbeddingsAudioToJSON(
  postEmbeddingsAudio: PostEmbeddingsAudio,
): string {
  return JSON.stringify(
    PostEmbeddingsAudio$outboundSchema.parse(postEmbeddingsAudio),
  );
}

export function postEmbeddingsAudioFromJSON(
  jsonString: string,
): SafeParseResult<PostEmbeddingsAudio, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostEmbeddingsAudio$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostEmbeddingsAudio' from JSON`,
  );
}

/** @internal */
export const PostEmbeddingsRequestUnion$inboundSchema: z.ZodType<
  PostEmbeddingsRequestUnion,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type PostEmbeddingsRequestUnion$Outbound = number | string | any;

/** @internal */
export const PostEmbeddingsRequestUnion$outboundSchema: z.ZodType<
  PostEmbeddingsRequestUnion$Outbound,
  z.ZodTypeDef,
  PostEmbeddingsRequestUnion
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostEmbeddingsRequestUnion$ {
  /** @deprecated use `PostEmbeddingsRequestUnion$inboundSchema` instead. */
  export const inboundSchema = PostEmbeddingsRequestUnion$inboundSchema;
  /** @deprecated use `PostEmbeddingsRequestUnion$outboundSchema` instead. */
  export const outboundSchema = PostEmbeddingsRequestUnion$outboundSchema;
  /** @deprecated use `PostEmbeddingsRequestUnion$Outbound` instead. */
  export type Outbound = PostEmbeddingsRequestUnion$Outbound;
}

export function postEmbeddingsRequestUnionToJSON(
  postEmbeddingsRequestUnion: PostEmbeddingsRequestUnion,
): string {
  return JSON.stringify(
    PostEmbeddingsRequestUnion$outboundSchema.parse(postEmbeddingsRequestUnion),
  );
}

export function postEmbeddingsRequestUnionFromJSON(
  jsonString: string,
): SafeParseResult<PostEmbeddingsRequestUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostEmbeddingsRequestUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostEmbeddingsRequestUnion' from JSON`,
  );
}

/** @internal */
export const PostEmbeddingsMaxPrice$inboundSchema: z.ZodType<
  PostEmbeddingsMaxPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  prompt: z.union([z.number(), z.string(), z.any()]).optional(),
  completion: z.union([z.number(), z.string(), z.any()]).optional(),
  image: z.union([z.number(), z.string(), z.any()]).optional(),
  audio: z.union([z.number(), z.string(), z.any()]).optional(),
  request: z.union([z.number(), z.string(), z.any()]).optional(),
});

/** @internal */
export type PostEmbeddingsMaxPrice$Outbound = {
  prompt?: number | string | any | undefined;
  completion?: number | string | any | undefined;
  image?: number | string | any | undefined;
  audio?: number | string | any | undefined;
  request?: number | string | any | undefined;
};

/** @internal */
export const PostEmbeddingsMaxPrice$outboundSchema: z.ZodType<
  PostEmbeddingsMaxPrice$Outbound,
  z.ZodTypeDef,
  PostEmbeddingsMaxPrice
> = z.object({
  prompt: z.union([z.number(), z.string(), z.any()]).optional(),
  completion: z.union([z.number(), z.string(), z.any()]).optional(),
  image: z.union([z.number(), z.string(), z.any()]).optional(),
  audio: z.union([z.number(), z.string(), z.any()]).optional(),
  request: z.union([z.number(), z.string(), z.any()]).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostEmbeddingsMaxPrice$ {
  /** @deprecated use `PostEmbeddingsMaxPrice$inboundSchema` instead. */
  export const inboundSchema = PostEmbeddingsMaxPrice$inboundSchema;
  /** @deprecated use `PostEmbeddingsMaxPrice$outboundSchema` instead. */
  export const outboundSchema = PostEmbeddingsMaxPrice$outboundSchema;
  /** @deprecated use `PostEmbeddingsMaxPrice$Outbound` instead. */
  export type Outbound = PostEmbeddingsMaxPrice$Outbound;
}

export function postEmbeddingsMaxPriceToJSON(
  postEmbeddingsMaxPrice: PostEmbeddingsMaxPrice,
): string {
  return JSON.stringify(
    PostEmbeddingsMaxPrice$outboundSchema.parse(postEmbeddingsMaxPrice),
  );
}

export function postEmbeddingsMaxPriceFromJSON(
  jsonString: string,
): SafeParseResult<PostEmbeddingsMaxPrice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostEmbeddingsMaxPrice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostEmbeddingsMaxPrice' from JSON`,
  );
}

/** @internal */
export const PostEmbeddingsExperimental$inboundSchema: z.ZodType<
  PostEmbeddingsExperimental,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type PostEmbeddingsExperimental$Outbound = {};

/** @internal */
export const PostEmbeddingsExperimental$outboundSchema: z.ZodType<
  PostEmbeddingsExperimental$Outbound,
  z.ZodTypeDef,
  PostEmbeddingsExperimental
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostEmbeddingsExperimental$ {
  /** @deprecated use `PostEmbeddingsExperimental$inboundSchema` instead. */
  export const inboundSchema = PostEmbeddingsExperimental$inboundSchema;
  /** @deprecated use `PostEmbeddingsExperimental$outboundSchema` instead. */
  export const outboundSchema = PostEmbeddingsExperimental$outboundSchema;
  /** @deprecated use `PostEmbeddingsExperimental$Outbound` instead. */
  export type Outbound = PostEmbeddingsExperimental$Outbound;
}

export function postEmbeddingsExperimentalToJSON(
  postEmbeddingsExperimental: PostEmbeddingsExperimental,
): string {
  return JSON.stringify(
    PostEmbeddingsExperimental$outboundSchema.parse(postEmbeddingsExperimental),
  );
}

export function postEmbeddingsExperimentalFromJSON(
  jsonString: string,
): SafeParseResult<PostEmbeddingsExperimental, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostEmbeddingsExperimental$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostEmbeddingsExperimental' from JSON`,
  );
}

/** @internal */
export const PostEmbeddingsProvider$inboundSchema: z.ZodType<
  PostEmbeddingsProvider,
  z.ZodTypeDef,
  unknown
> = z.object({
  allow_fallbacks: z.nullable(z.boolean()).optional(),
  require_parameters: z.nullable(z.boolean()).optional(),
  data_collection: z.nullable(PostEmbeddingsDataCollection$inboundSchema)
    .optional(),
  zdr: z.nullable(z.boolean()).optional(),
  order: z.nullable(
    z.array(z.union([PostEmbeddingsOrderEnum$inboundSchema, z.string()])),
  ).optional(),
  only: z.nullable(
    z.array(z.union([PostEmbeddingsOnlyEnum$inboundSchema, z.string()])),
  ).optional(),
  ignore: z.nullable(
    z.array(z.union([PostEmbeddingsIgnoreEnum$inboundSchema, z.string()])),
  ).optional(),
  quantizations: z.nullable(z.array(PostEmbeddingsQuantization$inboundSchema))
    .optional(),
  sort: z.nullable(PostEmbeddingsSort$inboundSchema).optional(),
  max_price: z.lazy(() => PostEmbeddingsMaxPrice$inboundSchema).optional(),
  experimental: z.nullable(
    z.lazy(() => PostEmbeddingsExperimental$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "allow_fallbacks": "allowFallbacks",
    "require_parameters": "requireParameters",
    "data_collection": "dataCollection",
    "max_price": "maxPrice",
  });
});

/** @internal */
export type PostEmbeddingsProvider$Outbound = {
  allow_fallbacks?: boolean | null | undefined;
  require_parameters?: boolean | null | undefined;
  data_collection?: string | null | undefined;
  zdr?: boolean | null | undefined;
  order?: Array<string | string> | null | undefined;
  only?: Array<string | string> | null | undefined;
  ignore?: Array<string | string> | null | undefined;
  quantizations?: Array<string> | null | undefined;
  sort?: string | null | undefined;
  max_price?: PostEmbeddingsMaxPrice$Outbound | undefined;
  experimental?: PostEmbeddingsExperimental$Outbound | null | undefined;
};

/** @internal */
export const PostEmbeddingsProvider$outboundSchema: z.ZodType<
  PostEmbeddingsProvider$Outbound,
  z.ZodTypeDef,
  PostEmbeddingsProvider
> = z.object({
  allowFallbacks: z.nullable(z.boolean()).optional(),
  requireParameters: z.nullable(z.boolean()).optional(),
  dataCollection: z.nullable(PostEmbeddingsDataCollection$outboundSchema)
    .optional(),
  zdr: z.nullable(z.boolean()).optional(),
  order: z.nullable(
    z.array(z.union([PostEmbeddingsOrderEnum$outboundSchema, z.string()])),
  ).optional(),
  only: z.nullable(
    z.array(z.union([PostEmbeddingsOnlyEnum$outboundSchema, z.string()])),
  ).optional(),
  ignore: z.nullable(
    z.array(z.union([PostEmbeddingsIgnoreEnum$outboundSchema, z.string()])),
  ).optional(),
  quantizations: z.nullable(z.array(PostEmbeddingsQuantization$outboundSchema))
    .optional(),
  sort: z.nullable(PostEmbeddingsSort$outboundSchema).optional(),
  maxPrice: z.lazy(() => PostEmbeddingsMaxPrice$outboundSchema).optional(),
  experimental: z.nullable(
    z.lazy(() => PostEmbeddingsExperimental$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    allowFallbacks: "allow_fallbacks",
    requireParameters: "require_parameters",
    dataCollection: "data_collection",
    maxPrice: "max_price",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostEmbeddingsProvider$ {
  /** @deprecated use `PostEmbeddingsProvider$inboundSchema` instead. */
  export const inboundSchema = PostEmbeddingsProvider$inboundSchema;
  /** @deprecated use `PostEmbeddingsProvider$outboundSchema` instead. */
  export const outboundSchema = PostEmbeddingsProvider$outboundSchema;
  /** @deprecated use `PostEmbeddingsProvider$Outbound` instead. */
  export type Outbound = PostEmbeddingsProvider$Outbound;
}

export function postEmbeddingsProviderToJSON(
  postEmbeddingsProvider: PostEmbeddingsProvider,
): string {
  return JSON.stringify(
    PostEmbeddingsProvider$outboundSchema.parse(postEmbeddingsProvider),
  );
}

export function postEmbeddingsProviderFromJSON(
  jsonString: string,
): SafeParseResult<PostEmbeddingsProvider, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostEmbeddingsProvider$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostEmbeddingsProvider' from JSON`,
  );
}

/** @internal */
export const EncodingFormatBase64$inboundSchema: z.ZodNativeEnum<
  typeof EncodingFormatBase64
> = z.nativeEnum(EncodingFormatBase64);

/** @internal */
export const EncodingFormatBase64$outboundSchema: z.ZodNativeEnum<
  typeof EncodingFormatBase64
> = EncodingFormatBase64$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EncodingFormatBase64$ {
  /** @deprecated use `EncodingFormatBase64$inboundSchema` instead. */
  export const inboundSchema = EncodingFormatBase64$inboundSchema;
  /** @deprecated use `EncodingFormatBase64$outboundSchema` instead. */
  export const outboundSchema = EncodingFormatBase64$outboundSchema;
}

/** @internal */
export const EncodingFormatFloat$inboundSchema: z.ZodNativeEnum<
  typeof EncodingFormatFloat
> = z.nativeEnum(EncodingFormatFloat);

/** @internal */
export const EncodingFormatFloat$outboundSchema: z.ZodNativeEnum<
  typeof EncodingFormatFloat
> = EncodingFormatFloat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EncodingFormatFloat$ {
  /** @deprecated use `EncodingFormatFloat$inboundSchema` instead. */
  export const inboundSchema = EncodingFormatFloat$inboundSchema;
  /** @deprecated use `EncodingFormatFloat$outboundSchema` instead. */
  export const outboundSchema = EncodingFormatFloat$outboundSchema;
}

/** @internal */
export const EncodingFormat$inboundSchema: z.ZodType<
  EncodingFormat,
  z.ZodTypeDef,
  unknown
> = z.union([
  EncodingFormatFloat$inboundSchema,
  EncodingFormatBase64$inboundSchema,
]);

/** @internal */
export type EncodingFormat$Outbound = string | string;

/** @internal */
export const EncodingFormat$outboundSchema: z.ZodType<
  EncodingFormat$Outbound,
  z.ZodTypeDef,
  EncodingFormat
> = z.union([
  EncodingFormatFloat$outboundSchema,
  EncodingFormatBase64$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EncodingFormat$ {
  /** @deprecated use `EncodingFormat$inboundSchema` instead. */
  export const inboundSchema = EncodingFormat$inboundSchema;
  /** @deprecated use `EncodingFormat$outboundSchema` instead. */
  export const outboundSchema = EncodingFormat$outboundSchema;
  /** @deprecated use `EncodingFormat$Outbound` instead. */
  export type Outbound = EncodingFormat$Outbound;
}

export function encodingFormatToJSON(encodingFormat: EncodingFormat): string {
  return JSON.stringify(EncodingFormat$outboundSchema.parse(encodingFormat));
}

export function encodingFormatFromJSON(
  jsonString: string,
): SafeParseResult<EncodingFormat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EncodingFormat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EncodingFormat' from JSON`,
  );
}

/** @internal */
export const PostEmbeddingsRequest$inboundSchema: z.ZodType<
  PostEmbeddingsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  input: z.union([
    z.string(),
    z.array(z.string()),
    z.array(z.number()),
    z.array(z.array(z.number())),
  ]),
  model: z.string().optional(),
  models: z.array(z.string()).optional(),
  provider: z.lazy(() => PostEmbeddingsProvider$inboundSchema).optional(),
  encoding_format: z.union([
    EncodingFormatFloat$inboundSchema,
    EncodingFormatBase64$inboundSchema,
  ]).optional(),
  user: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "encoding_format": "encodingFormat",
  });
});

/** @internal */
export type PostEmbeddingsRequest$Outbound = {
  input: string | Array<string> | Array<number> | Array<Array<number>>;
  model?: string | undefined;
  models?: Array<string> | undefined;
  provider?: PostEmbeddingsProvider$Outbound | undefined;
  encoding_format?: string | string | undefined;
  user?: string | undefined;
};

/** @internal */
export const PostEmbeddingsRequest$outboundSchema: z.ZodType<
  PostEmbeddingsRequest$Outbound,
  z.ZodTypeDef,
  PostEmbeddingsRequest
> = z.object({
  input: z.union([
    z.string(),
    z.array(z.string()),
    z.array(z.number()),
    z.array(z.array(z.number())),
  ]),
  model: z.string().optional(),
  models: z.array(z.string()).optional(),
  provider: z.lazy(() => PostEmbeddingsProvider$outboundSchema).optional(),
  encodingFormat: z.union([
    EncodingFormatFloat$outboundSchema,
    EncodingFormatBase64$outboundSchema,
  ]).optional(),
  user: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    encodingFormat: "encoding_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostEmbeddingsRequest$ {
  /** @deprecated use `PostEmbeddingsRequest$inboundSchema` instead. */
  export const inboundSchema = PostEmbeddingsRequest$inboundSchema;
  /** @deprecated use `PostEmbeddingsRequest$outboundSchema` instead. */
  export const outboundSchema = PostEmbeddingsRequest$outboundSchema;
  /** @deprecated use `PostEmbeddingsRequest$Outbound` instead. */
  export type Outbound = PostEmbeddingsRequest$Outbound;
}

export function postEmbeddingsRequestToJSON(
  postEmbeddingsRequest: PostEmbeddingsRequest,
): string {
  return JSON.stringify(
    PostEmbeddingsRequest$outboundSchema.parse(postEmbeddingsRequest),
  );
}

export function postEmbeddingsRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostEmbeddingsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostEmbeddingsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostEmbeddingsRequest' from JSON`,
  );
}

/** @internal */
export const PostEmbeddingsObject$inboundSchema: z.ZodNativeEnum<
  typeof PostEmbeddingsObject
> = z.nativeEnum(PostEmbeddingsObject);

/** @internal */
export const PostEmbeddingsObject$outboundSchema: z.ZodNativeEnum<
  typeof PostEmbeddingsObject
> = PostEmbeddingsObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostEmbeddingsObject$ {
  /** @deprecated use `PostEmbeddingsObject$inboundSchema` instead. */
  export const inboundSchema = PostEmbeddingsObject$inboundSchema;
  /** @deprecated use `PostEmbeddingsObject$outboundSchema` instead. */
  export const outboundSchema = PostEmbeddingsObject$outboundSchema;
}

/** @internal */
export const ObjectEmbedding$inboundSchema: z.ZodNativeEnum<
  typeof ObjectEmbedding
> = z.nativeEnum(ObjectEmbedding);

/** @internal */
export const ObjectEmbedding$outboundSchema: z.ZodNativeEnum<
  typeof ObjectEmbedding
> = ObjectEmbedding$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ObjectEmbedding$ {
  /** @deprecated use `ObjectEmbedding$inboundSchema` instead. */
  export const inboundSchema = ObjectEmbedding$inboundSchema;
  /** @deprecated use `ObjectEmbedding$outboundSchema` instead. */
  export const outboundSchema = ObjectEmbedding$outboundSchema;
}

/** @internal */
export const PostEmbeddingsData$inboundSchema: z.ZodType<
  PostEmbeddingsData,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: ObjectEmbedding$inboundSchema,
  embedding: z.array(z.number()),
  index: z.number(),
});

/** @internal */
export type PostEmbeddingsData$Outbound = {
  object: string;
  embedding: Array<number>;
  index: number;
};

/** @internal */
export const PostEmbeddingsData$outboundSchema: z.ZodType<
  PostEmbeddingsData$Outbound,
  z.ZodTypeDef,
  PostEmbeddingsData
> = z.object({
  object: ObjectEmbedding$outboundSchema,
  embedding: z.array(z.number()),
  index: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostEmbeddingsData$ {
  /** @deprecated use `PostEmbeddingsData$inboundSchema` instead. */
  export const inboundSchema = PostEmbeddingsData$inboundSchema;
  /** @deprecated use `PostEmbeddingsData$outboundSchema` instead. */
  export const outboundSchema = PostEmbeddingsData$outboundSchema;
  /** @deprecated use `PostEmbeddingsData$Outbound` instead. */
  export type Outbound = PostEmbeddingsData$Outbound;
}

export function postEmbeddingsDataToJSON(
  postEmbeddingsData: PostEmbeddingsData,
): string {
  return JSON.stringify(
    PostEmbeddingsData$outboundSchema.parse(postEmbeddingsData),
  );
}

export function postEmbeddingsDataFromJSON(
  jsonString: string,
): SafeParseResult<PostEmbeddingsData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostEmbeddingsData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostEmbeddingsData' from JSON`,
  );
}

/** @internal */
export const PostEmbeddingsUsage$inboundSchema: z.ZodType<
  PostEmbeddingsUsage,
  z.ZodTypeDef,
  unknown
> = z.object({
  prompt_tokens: z.number(),
  total_tokens: z.number(),
  cost: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "prompt_tokens": "promptTokens",
    "total_tokens": "totalTokens",
  });
});

/** @internal */
export type PostEmbeddingsUsage$Outbound = {
  prompt_tokens: number;
  total_tokens: number;
  cost?: number | undefined;
};

/** @internal */
export const PostEmbeddingsUsage$outboundSchema: z.ZodType<
  PostEmbeddingsUsage$Outbound,
  z.ZodTypeDef,
  PostEmbeddingsUsage
> = z.object({
  promptTokens: z.number(),
  totalTokens: z.number(),
  cost: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    promptTokens: "prompt_tokens",
    totalTokens: "total_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostEmbeddingsUsage$ {
  /** @deprecated use `PostEmbeddingsUsage$inboundSchema` instead. */
  export const inboundSchema = PostEmbeddingsUsage$inboundSchema;
  /** @deprecated use `PostEmbeddingsUsage$outboundSchema` instead. */
  export const outboundSchema = PostEmbeddingsUsage$outboundSchema;
  /** @deprecated use `PostEmbeddingsUsage$Outbound` instead. */
  export type Outbound = PostEmbeddingsUsage$Outbound;
}

export function postEmbeddingsUsageToJSON(
  postEmbeddingsUsage: PostEmbeddingsUsage,
): string {
  return JSON.stringify(
    PostEmbeddingsUsage$outboundSchema.parse(postEmbeddingsUsage),
  );
}

export function postEmbeddingsUsageFromJSON(
  jsonString: string,
): SafeParseResult<PostEmbeddingsUsage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostEmbeddingsUsage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostEmbeddingsUsage' from JSON`,
  );
}

/** @internal */
export const PostEmbeddingsResponse$inboundSchema: z.ZodType<
  PostEmbeddingsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: PostEmbeddingsObject$inboundSchema,
  data: z.array(z.lazy(() => PostEmbeddingsData$inboundSchema)),
  model: z.string(),
  usage: z.lazy(() => PostEmbeddingsUsage$inboundSchema).optional(),
});

/** @internal */
export type PostEmbeddingsResponse$Outbound = {
  object: string;
  data: Array<PostEmbeddingsData$Outbound>;
  model: string;
  usage?: PostEmbeddingsUsage$Outbound | undefined;
};

/** @internal */
export const PostEmbeddingsResponse$outboundSchema: z.ZodType<
  PostEmbeddingsResponse$Outbound,
  z.ZodTypeDef,
  PostEmbeddingsResponse
> = z.object({
  object: PostEmbeddingsObject$outboundSchema,
  data: z.array(z.lazy(() => PostEmbeddingsData$outboundSchema)),
  model: z.string(),
  usage: z.lazy(() => PostEmbeddingsUsage$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostEmbeddingsResponse$ {
  /** @deprecated use `PostEmbeddingsResponse$inboundSchema` instead. */
  export const inboundSchema = PostEmbeddingsResponse$inboundSchema;
  /** @deprecated use `PostEmbeddingsResponse$outboundSchema` instead. */
  export const outboundSchema = PostEmbeddingsResponse$outboundSchema;
  /** @deprecated use `PostEmbeddingsResponse$Outbound` instead. */
  export type Outbound = PostEmbeddingsResponse$Outbound;
}

export function postEmbeddingsResponseToJSON(
  postEmbeddingsResponse: PostEmbeddingsResponse,
): string {
  return JSON.stringify(
    PostEmbeddingsResponse$outboundSchema.parse(postEmbeddingsResponse),
  );
}

export function postEmbeddingsResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostEmbeddingsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostEmbeddingsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostEmbeddingsResponse' from JSON`,
  );
}
