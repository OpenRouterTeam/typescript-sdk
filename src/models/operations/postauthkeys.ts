/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The method used to generate the code challenge
 */
export const PostAuthKeysCodeChallengeMethod = {
  S256: "S256",
  Plain: "plain",
} as const;
/**
 * The method used to generate the code challenge
 */
export type PostAuthKeysCodeChallengeMethod = ClosedEnum<
  typeof PostAuthKeysCodeChallengeMethod
>;

export type PostAuthKeysRequest = {
  /**
   * The authorization code received from the OAuth redirect
   */
  code: string;
  /**
   * The code verifier if code_challenge was used in the authorization request
   */
  codeVerifier?: string | undefined;
  /**
   * The method used to generate the code challenge
   */
  codeChallengeMethod?: PostAuthKeysCodeChallengeMethod | undefined;
};

/**
 * Successfully exchanged code for an API key
 */
export type PostAuthKeysResponse = {
  /**
   * The API key to use for OpenRouter requests
   */
  key: string;
  /**
   * User ID associated with the API key
   */
  userId: string | null;
};

/** @internal */
export const PostAuthKeysCodeChallengeMethod$inboundSchema: z.ZodNativeEnum<
  typeof PostAuthKeysCodeChallengeMethod
> = z.nativeEnum(PostAuthKeysCodeChallengeMethod);

/** @internal */
export const PostAuthKeysCodeChallengeMethod$outboundSchema: z.ZodNativeEnum<
  typeof PostAuthKeysCodeChallengeMethod
> = PostAuthKeysCodeChallengeMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostAuthKeysCodeChallengeMethod$ {
  /** @deprecated use `PostAuthKeysCodeChallengeMethod$inboundSchema` instead. */
  export const inboundSchema = PostAuthKeysCodeChallengeMethod$inboundSchema;
  /** @deprecated use `PostAuthKeysCodeChallengeMethod$outboundSchema` instead. */
  export const outboundSchema = PostAuthKeysCodeChallengeMethod$outboundSchema;
}

/** @internal */
export const PostAuthKeysRequest$inboundSchema: z.ZodType<
  PostAuthKeysRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  code_verifier: z.string().optional(),
  code_challenge_method: PostAuthKeysCodeChallengeMethod$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "code_verifier": "codeVerifier",
    "code_challenge_method": "codeChallengeMethod",
  });
});

/** @internal */
export type PostAuthKeysRequest$Outbound = {
  code: string;
  code_verifier?: string | undefined;
  code_challenge_method?: string | undefined;
};

/** @internal */
export const PostAuthKeysRequest$outboundSchema: z.ZodType<
  PostAuthKeysRequest$Outbound,
  z.ZodTypeDef,
  PostAuthKeysRequest
> = z.object({
  code: z.string(),
  codeVerifier: z.string().optional(),
  codeChallengeMethod: PostAuthKeysCodeChallengeMethod$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    codeVerifier: "code_verifier",
    codeChallengeMethod: "code_challenge_method",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostAuthKeysRequest$ {
  /** @deprecated use `PostAuthKeysRequest$inboundSchema` instead. */
  export const inboundSchema = PostAuthKeysRequest$inboundSchema;
  /** @deprecated use `PostAuthKeysRequest$outboundSchema` instead. */
  export const outboundSchema = PostAuthKeysRequest$outboundSchema;
  /** @deprecated use `PostAuthKeysRequest$Outbound` instead. */
  export type Outbound = PostAuthKeysRequest$Outbound;
}

export function postAuthKeysRequestToJSON(
  postAuthKeysRequest: PostAuthKeysRequest,
): string {
  return JSON.stringify(
    PostAuthKeysRequest$outboundSchema.parse(postAuthKeysRequest),
  );
}

export function postAuthKeysRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostAuthKeysRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostAuthKeysRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostAuthKeysRequest' from JSON`,
  );
}

/** @internal */
export const PostAuthKeysResponse$inboundSchema: z.ZodType<
  PostAuthKeysResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  user_id: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    "user_id": "userId",
  });
});

/** @internal */
export type PostAuthKeysResponse$Outbound = {
  key: string;
  user_id: string | null;
};

/** @internal */
export const PostAuthKeysResponse$outboundSchema: z.ZodType<
  PostAuthKeysResponse$Outbound,
  z.ZodTypeDef,
  PostAuthKeysResponse
> = z.object({
  key: z.string(),
  userId: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    userId: "user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostAuthKeysResponse$ {
  /** @deprecated use `PostAuthKeysResponse$inboundSchema` instead. */
  export const inboundSchema = PostAuthKeysResponse$inboundSchema;
  /** @deprecated use `PostAuthKeysResponse$outboundSchema` instead. */
  export const outboundSchema = PostAuthKeysResponse$outboundSchema;
  /** @deprecated use `PostAuthKeysResponse$Outbound` instead. */
  export type Outbound = PostAuthKeysResponse$Outbound;
}

export function postAuthKeysResponseToJSON(
  postAuthKeysResponse: PostAuthKeysResponse,
): string {
  return JSON.stringify(
    PostAuthKeysResponse$outboundSchema.parse(postAuthKeysResponse),
  );
}

export function postAuthKeysResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostAuthKeysResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostAuthKeysResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostAuthKeysResponse' from JSON`,
  );
}
