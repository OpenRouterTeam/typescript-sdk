/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GetParametersAuthorSlugSecurity = {
  bearer: string;
};

export const GetParametersAuthorSlugProvider = {
  Ai21: "AI21",
  AionLabs: "AionLabs",
  Alibaba: "Alibaba",
  AmazonBedrock: "Amazon Bedrock",
  Anthropic: "Anthropic",
  AtlasCloud: "AtlasCloud",
  Atoma: "Atoma",
  Avian: "Avian",
  Azure: "Azure",
  BaseTen: "BaseTen",
  Cerebras: "Cerebras",
  Chutes: "Chutes",
  Cloudflare: "Cloudflare",
  Cohere: "Cohere",
  CrofAI: "CrofAI",
  Crusoe: "Crusoe",
  DeepInfra: "DeepInfra",
  DeepSeek: "DeepSeek",
  Enfer: "Enfer",
  Featherless: "Featherless",
  Fireworks: "Fireworks",
  Friendli: "Friendli",
  GMICloud: "GMICloud",
  Google: "Google",
  GoogleAIStudio: "Google AI Studio",
  Groq: "Groq",
  Hyperbolic: "Hyperbolic",
  Inception: "Inception",
  InferenceNet: "InferenceNet",
  Infermatic: "Infermatic",
  Inflection: "Inflection",
  Kluster: "Kluster",
  Lambda: "Lambda",
  Liquid: "Liquid",
  Mancer2: "Mancer 2",
  Meta: "Meta",
  Minimax: "Minimax",
  Mistral: "Mistral",
  MoonshotAI: "Moonshot AI",
  Morph: "Morph",
  NCompass: "NCompass",
  Nebius: "Nebius",
  NextBit: "NextBit",
  Nineteen: "Nineteen",
  Novita: "Novita",
  Nvidia: "Nvidia",
  OpenAI: "OpenAI",
  OpenInference: "OpenInference",
  Parasail: "Parasail",
  Perplexity: "Perplexity",
  Phala: "Phala",
  SambaNova: "SambaNova",
  SiliconFlow: "SiliconFlow",
  Stealth: "Stealth",
  Switchpoint: "Switchpoint",
  Targon: "Targon",
  Together: "Together",
  Ubicloud: "Ubicloud",
  Venice: "Venice",
  WandB: "WandB",
  XAI: "xAI",
  ZAi: "Z.AI",
  FakeProvider: "FakeProvider",
} as const;
export type GetParametersAuthorSlugProvider = ClosedEnum<
  typeof GetParametersAuthorSlugProvider
>;

export type GetParametersAuthorSlugRequest = {
  author: string;
  slug: string;
  provider?: GetParametersAuthorSlugProvider | undefined;
};

export const GetParametersAuthorSlugSupportedParameter = {
  Temperature: "temperature",
  TopP: "top_p",
  TopK: "top_k",
  MinP: "min_p",
  TopA: "top_a",
  FrequencyPenalty: "frequency_penalty",
  PresencePenalty: "presence_penalty",
  RepetitionPenalty: "repetition_penalty",
  MaxTokens: "max_tokens",
  LogitBias: "logit_bias",
  Logprobs: "logprobs",
  TopLogprobs: "top_logprobs",
  Seed: "seed",
  ResponseFormat: "response_format",
  StructuredOutputs: "structured_outputs",
  Stop: "stop",
  Tools: "tools",
  ToolChoice: "tool_choice",
  ParallelToolCalls: "parallel_tool_calls",
  IncludeReasoning: "include_reasoning",
  Reasoning: "reasoning",
  WebSearchOptions: "web_search_options",
  Verbosity: "verbosity",
} as const;
export type GetParametersAuthorSlugSupportedParameter = ClosedEnum<
  typeof GetParametersAuthorSlugSupportedParameter
>;

/**
 * Parameter analytics data
 */
export type GetParametersAuthorSlugData = {
  /**
   * Model identifier
   */
  model: string;
  /**
   * List of parameters supported by this model
   */
  supportedParameters: Array<GetParametersAuthorSlugSupportedParameter>;
};

/**
 * Returns the parameters for the specified model
 */
export type GetParametersAuthorSlugResponseBody = {
  /**
   * Parameter analytics data
   */
  data: GetParametersAuthorSlugData;
};

export type GetParametersAuthorSlugResponse =
  | GetParametersAuthorSlugResponseBody
  | models.ErrorResponse;

/** @internal */
export const GetParametersAuthorSlugSecurity$inboundSchema: z.ZodType<
  GetParametersAuthorSlugSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  bearer: z.string(),
});

/** @internal */
export type GetParametersAuthorSlugSecurity$Outbound = {
  bearer: string;
};

/** @internal */
export const GetParametersAuthorSlugSecurity$outboundSchema: z.ZodType<
  GetParametersAuthorSlugSecurity$Outbound,
  z.ZodTypeDef,
  GetParametersAuthorSlugSecurity
> = z.object({
  bearer: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetParametersAuthorSlugSecurity$ {
  /** @deprecated use `GetParametersAuthorSlugSecurity$inboundSchema` instead. */
  export const inboundSchema = GetParametersAuthorSlugSecurity$inboundSchema;
  /** @deprecated use `GetParametersAuthorSlugSecurity$outboundSchema` instead. */
  export const outboundSchema = GetParametersAuthorSlugSecurity$outboundSchema;
  /** @deprecated use `GetParametersAuthorSlugSecurity$Outbound` instead. */
  export type Outbound = GetParametersAuthorSlugSecurity$Outbound;
}

export function getParametersAuthorSlugSecurityToJSON(
  getParametersAuthorSlugSecurity: GetParametersAuthorSlugSecurity,
): string {
  return JSON.stringify(
    GetParametersAuthorSlugSecurity$outboundSchema.parse(
      getParametersAuthorSlugSecurity,
    ),
  );
}

export function getParametersAuthorSlugSecurityFromJSON(
  jsonString: string,
): SafeParseResult<GetParametersAuthorSlugSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetParametersAuthorSlugSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetParametersAuthorSlugSecurity' from JSON`,
  );
}

/** @internal */
export const GetParametersAuthorSlugProvider$inboundSchema: z.ZodNativeEnum<
  typeof GetParametersAuthorSlugProvider
> = z.nativeEnum(GetParametersAuthorSlugProvider);

/** @internal */
export const GetParametersAuthorSlugProvider$outboundSchema: z.ZodNativeEnum<
  typeof GetParametersAuthorSlugProvider
> = GetParametersAuthorSlugProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetParametersAuthorSlugProvider$ {
  /** @deprecated use `GetParametersAuthorSlugProvider$inboundSchema` instead. */
  export const inboundSchema = GetParametersAuthorSlugProvider$inboundSchema;
  /** @deprecated use `GetParametersAuthorSlugProvider$outboundSchema` instead. */
  export const outboundSchema = GetParametersAuthorSlugProvider$outboundSchema;
}

/** @internal */
export const GetParametersAuthorSlugRequest$inboundSchema: z.ZodType<
  GetParametersAuthorSlugRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  author: z.string(),
  slug: z.string(),
  provider: GetParametersAuthorSlugProvider$inboundSchema.optional(),
});

/** @internal */
export type GetParametersAuthorSlugRequest$Outbound = {
  author: string;
  slug: string;
  provider?: string | undefined;
};

/** @internal */
export const GetParametersAuthorSlugRequest$outboundSchema: z.ZodType<
  GetParametersAuthorSlugRequest$Outbound,
  z.ZodTypeDef,
  GetParametersAuthorSlugRequest
> = z.object({
  author: z.string(),
  slug: z.string(),
  provider: GetParametersAuthorSlugProvider$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetParametersAuthorSlugRequest$ {
  /** @deprecated use `GetParametersAuthorSlugRequest$inboundSchema` instead. */
  export const inboundSchema = GetParametersAuthorSlugRequest$inboundSchema;
  /** @deprecated use `GetParametersAuthorSlugRequest$outboundSchema` instead. */
  export const outboundSchema = GetParametersAuthorSlugRequest$outboundSchema;
  /** @deprecated use `GetParametersAuthorSlugRequest$Outbound` instead. */
  export type Outbound = GetParametersAuthorSlugRequest$Outbound;
}

export function getParametersAuthorSlugRequestToJSON(
  getParametersAuthorSlugRequest: GetParametersAuthorSlugRequest,
): string {
  return JSON.stringify(
    GetParametersAuthorSlugRequest$outboundSchema.parse(
      getParametersAuthorSlugRequest,
    ),
  );
}

export function getParametersAuthorSlugRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetParametersAuthorSlugRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetParametersAuthorSlugRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetParametersAuthorSlugRequest' from JSON`,
  );
}

/** @internal */
export const GetParametersAuthorSlugSupportedParameter$inboundSchema:
  z.ZodNativeEnum<typeof GetParametersAuthorSlugSupportedParameter> = z
    .nativeEnum(GetParametersAuthorSlugSupportedParameter);

/** @internal */
export const GetParametersAuthorSlugSupportedParameter$outboundSchema:
  z.ZodNativeEnum<typeof GetParametersAuthorSlugSupportedParameter> =
    GetParametersAuthorSlugSupportedParameter$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetParametersAuthorSlugSupportedParameter$ {
  /** @deprecated use `GetParametersAuthorSlugSupportedParameter$inboundSchema` instead. */
  export const inboundSchema =
    GetParametersAuthorSlugSupportedParameter$inboundSchema;
  /** @deprecated use `GetParametersAuthorSlugSupportedParameter$outboundSchema` instead. */
  export const outboundSchema =
    GetParametersAuthorSlugSupportedParameter$outboundSchema;
}

/** @internal */
export const GetParametersAuthorSlugData$inboundSchema: z.ZodType<
  GetParametersAuthorSlugData,
  z.ZodTypeDef,
  unknown
> = z.object({
  model: z.string(),
  supported_parameters: z.array(
    GetParametersAuthorSlugSupportedParameter$inboundSchema,
  ),
}).transform((v) => {
  return remap$(v, {
    "supported_parameters": "supportedParameters",
  });
});

/** @internal */
export type GetParametersAuthorSlugData$Outbound = {
  model: string;
  supported_parameters: Array<string>;
};

/** @internal */
export const GetParametersAuthorSlugData$outboundSchema: z.ZodType<
  GetParametersAuthorSlugData$Outbound,
  z.ZodTypeDef,
  GetParametersAuthorSlugData
> = z.object({
  model: z.string(),
  supportedParameters: z.array(
    GetParametersAuthorSlugSupportedParameter$outboundSchema,
  ),
}).transform((v) => {
  return remap$(v, {
    supportedParameters: "supported_parameters",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetParametersAuthorSlugData$ {
  /** @deprecated use `GetParametersAuthorSlugData$inboundSchema` instead. */
  export const inboundSchema = GetParametersAuthorSlugData$inboundSchema;
  /** @deprecated use `GetParametersAuthorSlugData$outboundSchema` instead. */
  export const outboundSchema = GetParametersAuthorSlugData$outboundSchema;
  /** @deprecated use `GetParametersAuthorSlugData$Outbound` instead. */
  export type Outbound = GetParametersAuthorSlugData$Outbound;
}

export function getParametersAuthorSlugDataToJSON(
  getParametersAuthorSlugData: GetParametersAuthorSlugData,
): string {
  return JSON.stringify(
    GetParametersAuthorSlugData$outboundSchema.parse(
      getParametersAuthorSlugData,
    ),
  );
}

export function getParametersAuthorSlugDataFromJSON(
  jsonString: string,
): SafeParseResult<GetParametersAuthorSlugData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetParametersAuthorSlugData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetParametersAuthorSlugData' from JSON`,
  );
}

/** @internal */
export const GetParametersAuthorSlugResponseBody$inboundSchema: z.ZodType<
  GetParametersAuthorSlugResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => GetParametersAuthorSlugData$inboundSchema),
});

/** @internal */
export type GetParametersAuthorSlugResponseBody$Outbound = {
  data: GetParametersAuthorSlugData$Outbound;
};

/** @internal */
export const GetParametersAuthorSlugResponseBody$outboundSchema: z.ZodType<
  GetParametersAuthorSlugResponseBody$Outbound,
  z.ZodTypeDef,
  GetParametersAuthorSlugResponseBody
> = z.object({
  data: z.lazy(() => GetParametersAuthorSlugData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetParametersAuthorSlugResponseBody$ {
  /** @deprecated use `GetParametersAuthorSlugResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GetParametersAuthorSlugResponseBody$inboundSchema;
  /** @deprecated use `GetParametersAuthorSlugResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetParametersAuthorSlugResponseBody$outboundSchema;
  /** @deprecated use `GetParametersAuthorSlugResponseBody$Outbound` instead. */
  export type Outbound = GetParametersAuthorSlugResponseBody$Outbound;
}

export function getParametersAuthorSlugResponseBodyToJSON(
  getParametersAuthorSlugResponseBody: GetParametersAuthorSlugResponseBody,
): string {
  return JSON.stringify(
    GetParametersAuthorSlugResponseBody$outboundSchema.parse(
      getParametersAuthorSlugResponseBody,
    ),
  );
}

export function getParametersAuthorSlugResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetParametersAuthorSlugResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetParametersAuthorSlugResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetParametersAuthorSlugResponseBody' from JSON`,
  );
}

/** @internal */
export const GetParametersAuthorSlugResponse$inboundSchema: z.ZodType<
  GetParametersAuthorSlugResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetParametersAuthorSlugResponseBody$inboundSchema),
  models.ErrorResponse$inboundSchema,
]);

/** @internal */
export type GetParametersAuthorSlugResponse$Outbound =
  | GetParametersAuthorSlugResponseBody$Outbound
  | models.ErrorResponse$Outbound;

/** @internal */
export const GetParametersAuthorSlugResponse$outboundSchema: z.ZodType<
  GetParametersAuthorSlugResponse$Outbound,
  z.ZodTypeDef,
  GetParametersAuthorSlugResponse
> = z.union([
  z.lazy(() => GetParametersAuthorSlugResponseBody$outboundSchema),
  models.ErrorResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetParametersAuthorSlugResponse$ {
  /** @deprecated use `GetParametersAuthorSlugResponse$inboundSchema` instead. */
  export const inboundSchema = GetParametersAuthorSlugResponse$inboundSchema;
  /** @deprecated use `GetParametersAuthorSlugResponse$outboundSchema` instead. */
  export const outboundSchema = GetParametersAuthorSlugResponse$outboundSchema;
  /** @deprecated use `GetParametersAuthorSlugResponse$Outbound` instead. */
  export type Outbound = GetParametersAuthorSlugResponse$Outbound;
}

export function getParametersAuthorSlugResponseToJSON(
  getParametersAuthorSlugResponse: GetParametersAuthorSlugResponse,
): string {
  return JSON.stringify(
    GetParametersAuthorSlugResponse$outboundSchema.parse(
      getParametersAuthorSlugResponse,
    ),
  );
}

export function getParametersAuthorSlugResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetParametersAuthorSlugResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetParametersAuthorSlugResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetParametersAuthorSlugResponse' from JSON`,
  );
}
