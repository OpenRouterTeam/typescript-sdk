/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PatchKeysHashRequestBody = {
  /**
   * New name for the API key
   */
  name?: string | undefined;
  /**
   * Whether to disable the API key
   */
  disabled?: boolean | undefined;
  /**
   * New spending limit for the API key in USD
   */
  limit?: number | null | undefined;
  /**
   * Whether to include BYOK usage in the limit
   */
  includeByokInLimit?: boolean | undefined;
};

export type PatchKeysHashRequest = {
  hash: string;
  requestBody?: PatchKeysHashRequestBody | undefined;
};

/**
 * The updated API key information
 */
export type PatchKeysHashData = {
  /**
   * Unique hash identifier for the API key
   */
  hash: string;
  /**
   * Name of the API key
   */
  name: string;
  /**
   * Human-readable label for the API key
   */
  label: string;
  /**
   * Whether the API key is disabled
   */
  disabled: boolean;
  /**
   * Spending limit for the API key in USD
   */
  limit: number | null;
  /**
   * Current usage of the API key in USD
   */
  usage: number;
  /**
   * ISO 8601 timestamp of when the API key was created
   */
  createdAt: string;
  /**
   * ISO 8601 timestamp of when the API key was last updated
   */
  updatedAt: string | null;
};

/**
 * API key updated successfully
 */
export type PatchKeysHashResponse = {
  /**
   * The updated API key information
   */
  data: PatchKeysHashData;
};

/** @internal */
export const PatchKeysHashRequestBody$inboundSchema: z.ZodType<
  PatchKeysHashRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  disabled: z.boolean().optional(),
  limit: z.nullable(z.number()).optional(),
  include_byok_in_limit: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "include_byok_in_limit": "includeByokInLimit",
  });
});

/** @internal */
export type PatchKeysHashRequestBody$Outbound = {
  name?: string | undefined;
  disabled?: boolean | undefined;
  limit?: number | null | undefined;
  include_byok_in_limit?: boolean | undefined;
};

/** @internal */
export const PatchKeysHashRequestBody$outboundSchema: z.ZodType<
  PatchKeysHashRequestBody$Outbound,
  z.ZodTypeDef,
  PatchKeysHashRequestBody
> = z.object({
  name: z.string().optional(),
  disabled: z.boolean().optional(),
  limit: z.nullable(z.number()).optional(),
  includeByokInLimit: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    includeByokInLimit: "include_byok_in_limit",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchKeysHashRequestBody$ {
  /** @deprecated use `PatchKeysHashRequestBody$inboundSchema` instead. */
  export const inboundSchema = PatchKeysHashRequestBody$inboundSchema;
  /** @deprecated use `PatchKeysHashRequestBody$outboundSchema` instead. */
  export const outboundSchema = PatchKeysHashRequestBody$outboundSchema;
  /** @deprecated use `PatchKeysHashRequestBody$Outbound` instead. */
  export type Outbound = PatchKeysHashRequestBody$Outbound;
}

export function patchKeysHashRequestBodyToJSON(
  patchKeysHashRequestBody: PatchKeysHashRequestBody,
): string {
  return JSON.stringify(
    PatchKeysHashRequestBody$outboundSchema.parse(patchKeysHashRequestBody),
  );
}

export function patchKeysHashRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PatchKeysHashRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchKeysHashRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchKeysHashRequestBody' from JSON`,
  );
}

/** @internal */
export const PatchKeysHashRequest$inboundSchema: z.ZodType<
  PatchKeysHashRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  hash: z.string(),
  RequestBody: z.lazy(() => PatchKeysHashRequestBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PatchKeysHashRequest$Outbound = {
  hash: string;
  RequestBody?: PatchKeysHashRequestBody$Outbound | undefined;
};

/** @internal */
export const PatchKeysHashRequest$outboundSchema: z.ZodType<
  PatchKeysHashRequest$Outbound,
  z.ZodTypeDef,
  PatchKeysHashRequest
> = z.object({
  hash: z.string(),
  requestBody: z.lazy(() => PatchKeysHashRequestBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchKeysHashRequest$ {
  /** @deprecated use `PatchKeysHashRequest$inboundSchema` instead. */
  export const inboundSchema = PatchKeysHashRequest$inboundSchema;
  /** @deprecated use `PatchKeysHashRequest$outboundSchema` instead. */
  export const outboundSchema = PatchKeysHashRequest$outboundSchema;
  /** @deprecated use `PatchKeysHashRequest$Outbound` instead. */
  export type Outbound = PatchKeysHashRequest$Outbound;
}

export function patchKeysHashRequestToJSON(
  patchKeysHashRequest: PatchKeysHashRequest,
): string {
  return JSON.stringify(
    PatchKeysHashRequest$outboundSchema.parse(patchKeysHashRequest),
  );
}

export function patchKeysHashRequestFromJSON(
  jsonString: string,
): SafeParseResult<PatchKeysHashRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchKeysHashRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchKeysHashRequest' from JSON`,
  );
}

/** @internal */
export const PatchKeysHashData$inboundSchema: z.ZodType<
  PatchKeysHashData,
  z.ZodTypeDef,
  unknown
> = z.object({
  hash: z.string(),
  name: z.string(),
  label: z.string(),
  disabled: z.boolean(),
  limit: z.nullable(z.number()),
  usage: z.number(),
  created_at: z.string(),
  updated_at: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type PatchKeysHashData$Outbound = {
  hash: string;
  name: string;
  label: string;
  disabled: boolean;
  limit: number | null;
  usage: number;
  created_at: string;
  updated_at: string | null;
};

/** @internal */
export const PatchKeysHashData$outboundSchema: z.ZodType<
  PatchKeysHashData$Outbound,
  z.ZodTypeDef,
  PatchKeysHashData
> = z.object({
  hash: z.string(),
  name: z.string(),
  label: z.string(),
  disabled: z.boolean(),
  limit: z.nullable(z.number()),
  usage: z.number(),
  createdAt: z.string(),
  updatedAt: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchKeysHashData$ {
  /** @deprecated use `PatchKeysHashData$inboundSchema` instead. */
  export const inboundSchema = PatchKeysHashData$inboundSchema;
  /** @deprecated use `PatchKeysHashData$outboundSchema` instead. */
  export const outboundSchema = PatchKeysHashData$outboundSchema;
  /** @deprecated use `PatchKeysHashData$Outbound` instead. */
  export type Outbound = PatchKeysHashData$Outbound;
}

export function patchKeysHashDataToJSON(
  patchKeysHashData: PatchKeysHashData,
): string {
  return JSON.stringify(
    PatchKeysHashData$outboundSchema.parse(patchKeysHashData),
  );
}

export function patchKeysHashDataFromJSON(
  jsonString: string,
): SafeParseResult<PatchKeysHashData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchKeysHashData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchKeysHashData' from JSON`,
  );
}

/** @internal */
export const PatchKeysHashResponse$inboundSchema: z.ZodType<
  PatchKeysHashResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => PatchKeysHashData$inboundSchema),
});

/** @internal */
export type PatchKeysHashResponse$Outbound = {
  data: PatchKeysHashData$Outbound;
};

/** @internal */
export const PatchKeysHashResponse$outboundSchema: z.ZodType<
  PatchKeysHashResponse$Outbound,
  z.ZodTypeDef,
  PatchKeysHashResponse
> = z.object({
  data: z.lazy(() => PatchKeysHashData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchKeysHashResponse$ {
  /** @deprecated use `PatchKeysHashResponse$inboundSchema` instead. */
  export const inboundSchema = PatchKeysHashResponse$inboundSchema;
  /** @deprecated use `PatchKeysHashResponse$outboundSchema` instead. */
  export const outboundSchema = PatchKeysHashResponse$outboundSchema;
  /** @deprecated use `PatchKeysHashResponse$Outbound` instead. */
  export type Outbound = PatchKeysHashResponse$Outbound;
}

export function patchKeysHashResponseToJSON(
  patchKeysHashResponse: PatchKeysHashResponse,
): string {
  return JSON.stringify(
    PatchKeysHashResponse$outboundSchema.parse(patchKeysHashResponse),
  );
}

export function patchKeysHashResponseFromJSON(
  jsonString: string,
): SafeParseResult<PatchKeysHashResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchKeysHashResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchKeysHashResponse' from JSON`,
  );
}
