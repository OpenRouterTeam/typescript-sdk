/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GetModelsAuthorSlugEndpointsRequestRequest = {
  author: string;
  slug: string;
};

/**
 * Tokenizer type used by the model
 */
export const GetModelsAuthorSlugEndpointsTokenizer = {
  Router: "Router",
  Media: "Media",
  Other: "Other",
  Gpt: "GPT",
  Claude: "Claude",
  Gemini: "Gemini",
  Grok: "Grok",
  Cohere: "Cohere",
  Nova: "Nova",
  Qwen: "Qwen",
  Yi: "Yi",
  DeepSeek: "DeepSeek",
  Mistral: "Mistral",
  Llama2: "Llama2",
  Llama3: "Llama3",
  Llama4: "Llama4",
  PaLM: "PaLM",
  Rwkv: "RWKV",
  Qwen3: "Qwen3",
} as const;
/**
 * Tokenizer type used by the model
 */
export type GetModelsAuthorSlugEndpointsTokenizer = ClosedEnum<
  typeof GetModelsAuthorSlugEndpointsTokenizer
>;

/**
 * Instruction format type
 */
export const GetModelsAuthorSlugEndpointsInstructType = {
  None: "none",
  Airoboros: "airoboros",
  Alpaca: "alpaca",
  AlpacaModif: "alpaca-modif",
  Chatml: "chatml",
  Claude: "claude",
  CodeLlama: "code-llama",
  Gemma: "gemma",
  Llama2: "llama2",
  Llama3: "llama3",
  Mistral: "mistral",
  Nemotron: "nemotron",
  Neural: "neural",
  Openchat: "openchat",
  Phi3: "phi3",
  Rwkv: "rwkv",
  Vicuna: "vicuna",
  Zephyr: "zephyr",
  DeepseekR1: "deepseek-r1",
  DeepseekV31: "deepseek-v3.1",
  Qwq: "qwq",
  Qwen3: "qwen3",
} as const;
/**
 * Instruction format type
 */
export type GetModelsAuthorSlugEndpointsInstructType = ClosedEnum<
  typeof GetModelsAuthorSlugEndpointsInstructType
>;

export const GetModelsAuthorSlugEndpointsInputModality = {
  Text: "text",
  Image: "image",
  File: "file",
  Audio: "audio",
} as const;
export type GetModelsAuthorSlugEndpointsInputModality = ClosedEnum<
  typeof GetModelsAuthorSlugEndpointsInputModality
>;

export const GetModelsAuthorSlugEndpointsOutputModality = {
  Text: "text",
  Image: "image",
  Embeddings: "embeddings",
} as const;
export type GetModelsAuthorSlugEndpointsOutputModality = ClosedEnum<
  typeof GetModelsAuthorSlugEndpointsOutputModality
>;

/**
 * Model architecture information
 */
export type GetModelsAuthorSlugEndpointsArchitecture = {
  /**
   * Tokenizer type used by the model
   */
  tokenizer: GetModelsAuthorSlugEndpointsTokenizer | null;
  /**
   * Instruction format type
   */
  instructType: GetModelsAuthorSlugEndpointsInstructType | null;
  /**
   * Primary modality of the model
   */
  modality: string | null;
  /**
   * Supported input modalities
   */
  inputModalities: Array<GetModelsAuthorSlugEndpointsInputModality>;
  /**
   * Supported output modalities
   */
  outputModalities: Array<GetModelsAuthorSlugEndpointsOutputModality>;
};

export type GetModelsAuthorSlugEndpointsPrompt = number | string | any;

export type GetModelsAuthorSlugEndpointsCompletion = number | string | any;

export type EndpointsGetModelsAuthorSlugEndpointsRequest =
  | number
  | string
  | any;

export type GetModelsAuthorSlugEndpointsImage = number | string | any;

export type GetModelsAuthorSlugEndpointsImageOutput = number | string | any;

export type GetModelsAuthorSlugEndpointsAudio = number | string | any;

export type GetModelsAuthorSlugEndpointsInputAudioCache = number | string | any;

export type GetModelsAuthorSlugEndpointsWebSearch = number | string | any;

export type GetModelsAuthorSlugEndpointsInternalReasoning =
  | number
  | string
  | any;

export type GetModelsAuthorSlugEndpointsInputCacheRead = number | string | any;

export type GetModelsAuthorSlugEndpointsInputCacheWrite = number | string | any;

export type GetModelsAuthorSlugEndpointsPricing = {
  prompt?: number | string | any | undefined;
  completion?: number | string | any | undefined;
  request?: number | string | any | undefined;
  image?: number | string | any | undefined;
  imageOutput?: number | string | any | undefined;
  audio?: number | string | any | undefined;
  inputAudioCache?: number | string | any | undefined;
  webSearch?: number | string | any | undefined;
  internalReasoning?: number | string | any | undefined;
  inputCacheRead?: number | string | any | undefined;
  inputCacheWrite?: number | string | any | undefined;
  discount?: number | undefined;
};

export const GetModelsAuthorSlugEndpointsProviderName = {
  AnyScale: "AnyScale",
  CentML: "Cent-ML",
  HuggingFace: "HuggingFace",
  Hyperbolic2: "Hyperbolic 2",
  Lepton: "Lepton",
  Lynn2: "Lynn 2",
  Lynn: "Lynn",
  Mancer: "Mancer",
  Modal: "Modal",
  OctoAI: "OctoAI",
  Recursal: "Recursal",
  Reflection: "Reflection",
  Replicate: "Replicate",
  SambaNova2: "SambaNova 2",
  SFCompute: "SF Compute",
  Together2: "Together 2",
  OneDotAI: "01.AI",
  Ai21: "AI21",
  AionLabs: "AionLabs",
  Alibaba: "Alibaba",
  AmazonBedrock: "Amazon Bedrock",
  Anthropic: "Anthropic",
  AtlasCloud: "AtlasCloud",
  Atoma: "Atoma",
  Avian: "Avian",
  Azure: "Azure",
  BaseTen: "BaseTen",
  Cerebras: "Cerebras",
  Chutes: "Chutes",
  Cloudflare: "Cloudflare",
  Cohere: "Cohere",
  CrofAI: "CrofAI",
  Crusoe: "Crusoe",
  DeepInfra: "DeepInfra",
  DeepSeek: "DeepSeek",
  Enfer: "Enfer",
  Featherless: "Featherless",
  Fireworks: "Fireworks",
  Friendli: "Friendli",
  GMICloud: "GMICloud",
  Google: "Google",
  GoogleAIStudio: "Google AI Studio",
  Groq: "Groq",
  Hyperbolic: "Hyperbolic",
  Inception: "Inception",
  InferenceNet: "InferenceNet",
  Infermatic: "Infermatic",
  Inflection: "Inflection",
  InoCloud: "InoCloud",
  Kluster: "Kluster",
  Lambda: "Lambda",
  Liquid: "Liquid",
  Mancer2: "Mancer 2",
  Meta: "Meta",
  Minimax: "Minimax",
  Mistral: "Mistral",
  MoonshotAI: "Moonshot AI",
  Morph: "Morph",
  NCompass: "NCompass",
  Nebius: "Nebius",
  NextBit: "NextBit",
  Nineteen: "Nineteen",
  Novita: "Novita",
  Nvidia: "Nvidia",
  OpenAI: "OpenAI",
  OpenInference: "OpenInference",
  Parasail: "Parasail",
  Perplexity: "Perplexity",
  Phala: "Phala",
  SambaNova: "SambaNova",
  SiliconFlow: "SiliconFlow",
  Stealth: "Stealth",
  Switchpoint: "Switchpoint",
  Targon: "Targon",
  Together: "Together",
  Ubicloud: "Ubicloud",
  Venice: "Venice",
  WandB: "WandB",
  XAI: "xAI",
  ZAi: "Z.AI",
  FakeProvider: "FakeProvider",
} as const;
export type GetModelsAuthorSlugEndpointsProviderName = ClosedEnum<
  typeof GetModelsAuthorSlugEndpointsProviderName
>;

export const GetModelsAuthorSlugEndpointsQuantization = {
  Int4: "int4",
  Int8: "int8",
  Fp4: "fp4",
  Fp6: "fp6",
  Fp8: "fp8",
  Fp16: "fp16",
  Bf16: "bf16",
  Fp32: "fp32",
  Unknown: "unknown",
} as const;
export type GetModelsAuthorSlugEndpointsQuantization = ClosedEnum<
  typeof GetModelsAuthorSlugEndpointsQuantization
>;

export const GetModelsAuthorSlugEndpointsSupportedParameter = {
  Temperature: "temperature",
  TopP: "top_p",
  TopK: "top_k",
  MinP: "min_p",
  TopA: "top_a",
  FrequencyPenalty: "frequency_penalty",
  PresencePenalty: "presence_penalty",
  RepetitionPenalty: "repetition_penalty",
  MaxTokens: "max_tokens",
  LogitBias: "logit_bias",
  Logprobs: "logprobs",
  TopLogprobs: "top_logprobs",
  Seed: "seed",
  ResponseFormat: "response_format",
  StructuredOutputs: "structured_outputs",
  Stop: "stop",
  Tools: "tools",
  ToolChoice: "tool_choice",
  ParallelToolCalls: "parallel_tool_calls",
  IncludeReasoning: "include_reasoning",
  Reasoning: "reasoning",
  WebSearchOptions: "web_search_options",
  Verbosity: "verbosity",
} as const;
export type GetModelsAuthorSlugEndpointsSupportedParameter = ClosedEnum<
  typeof GetModelsAuthorSlugEndpointsSupportedParameter
>;

export const GetModelsAuthorSlugEndpointsStatus = {
  Zero: 0,
  Minus1: -1,
  Minus2: -2,
  Minus3: -3,
  Minus5: -5,
  Minus10: -10,
} as const;
export type GetModelsAuthorSlugEndpointsStatus = ClosedEnum<
  typeof GetModelsAuthorSlugEndpointsStatus
>;

export type Endpoint = {
  name: string;
  modelName: string;
  contextLength: number;
  pricing: GetModelsAuthorSlugEndpointsPricing;
  providerName: GetModelsAuthorSlugEndpointsProviderName;
  tag: string;
  quantization: GetModelsAuthorSlugEndpointsQuantization | null;
  maxCompletionTokens: number | null;
  maxPromptTokens: number | null;
  supportedParameters: Array<GetModelsAuthorSlugEndpointsSupportedParameter>;
  status?: GetModelsAuthorSlugEndpointsStatus | undefined;
  uptimeLast30m: number | null;
  supportsImplicitCaching: boolean;
};

export type GetModelsAuthorSlugEndpointsData = {
  /**
   * Unique identifier for the model
   */
  id: string;
  /**
   * Display name of the model
   */
  name: string;
  /**
   * Unix timestamp of when the model was created
   */
  created: number;
  /**
   * Description of the model
   */
  description: string;
  /**
   * Model architecture information
   */
  architecture: GetModelsAuthorSlugEndpointsArchitecture;
  /**
   * List of available endpoints for this model
   */
  endpoints: Array<Endpoint>;
};

/**
 * Returns a list of endpoints
 */
export type GetModelsAuthorSlugEndpointsResponseBody = {
  data: GetModelsAuthorSlugEndpointsData;
};

export type GetModelsAuthorSlugEndpointsResponse =
  | GetModelsAuthorSlugEndpointsResponseBody
  | models.ErrorResponse;

/** @internal */
export const GetModelsAuthorSlugEndpointsRequestRequest$inboundSchema:
  z.ZodType<GetModelsAuthorSlugEndpointsRequestRequest, z.ZodTypeDef, unknown> =
    z.object({
      author: z.string(),
      slug: z.string(),
    });

/** @internal */
export type GetModelsAuthorSlugEndpointsRequestRequest$Outbound = {
  author: string;
  slug: string;
};

/** @internal */
export const GetModelsAuthorSlugEndpointsRequestRequest$outboundSchema:
  z.ZodType<
    GetModelsAuthorSlugEndpointsRequestRequest$Outbound,
    z.ZodTypeDef,
    GetModelsAuthorSlugEndpointsRequestRequest
  > = z.object({
    author: z.string(),
    slug: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsAuthorSlugEndpointsRequestRequest$ {
  /** @deprecated use `GetModelsAuthorSlugEndpointsRequestRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetModelsAuthorSlugEndpointsRequestRequest$inboundSchema;
  /** @deprecated use `GetModelsAuthorSlugEndpointsRequestRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetModelsAuthorSlugEndpointsRequestRequest$outboundSchema;
  /** @deprecated use `GetModelsAuthorSlugEndpointsRequestRequest$Outbound` instead. */
  export type Outbound = GetModelsAuthorSlugEndpointsRequestRequest$Outbound;
}

export function getModelsAuthorSlugEndpointsRequestRequestToJSON(
  getModelsAuthorSlugEndpointsRequestRequest:
    GetModelsAuthorSlugEndpointsRequestRequest,
): string {
  return JSON.stringify(
    GetModelsAuthorSlugEndpointsRequestRequest$outboundSchema.parse(
      getModelsAuthorSlugEndpointsRequestRequest,
    ),
  );
}

export function getModelsAuthorSlugEndpointsRequestRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetModelsAuthorSlugEndpointsRequestRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetModelsAuthorSlugEndpointsRequestRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetModelsAuthorSlugEndpointsRequestRequest' from JSON`,
  );
}

/** @internal */
export const GetModelsAuthorSlugEndpointsTokenizer$inboundSchema:
  z.ZodNativeEnum<typeof GetModelsAuthorSlugEndpointsTokenizer> = z.nativeEnum(
    GetModelsAuthorSlugEndpointsTokenizer,
  );

/** @internal */
export const GetModelsAuthorSlugEndpointsTokenizer$outboundSchema:
  z.ZodNativeEnum<typeof GetModelsAuthorSlugEndpointsTokenizer> =
    GetModelsAuthorSlugEndpointsTokenizer$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsAuthorSlugEndpointsTokenizer$ {
  /** @deprecated use `GetModelsAuthorSlugEndpointsTokenizer$inboundSchema` instead. */
  export const inboundSchema =
    GetModelsAuthorSlugEndpointsTokenizer$inboundSchema;
  /** @deprecated use `GetModelsAuthorSlugEndpointsTokenizer$outboundSchema` instead. */
  export const outboundSchema =
    GetModelsAuthorSlugEndpointsTokenizer$outboundSchema;
}

/** @internal */
export const GetModelsAuthorSlugEndpointsInstructType$inboundSchema:
  z.ZodNativeEnum<typeof GetModelsAuthorSlugEndpointsInstructType> = z
    .nativeEnum(GetModelsAuthorSlugEndpointsInstructType);

/** @internal */
export const GetModelsAuthorSlugEndpointsInstructType$outboundSchema:
  z.ZodNativeEnum<typeof GetModelsAuthorSlugEndpointsInstructType> =
    GetModelsAuthorSlugEndpointsInstructType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsAuthorSlugEndpointsInstructType$ {
  /** @deprecated use `GetModelsAuthorSlugEndpointsInstructType$inboundSchema` instead. */
  export const inboundSchema =
    GetModelsAuthorSlugEndpointsInstructType$inboundSchema;
  /** @deprecated use `GetModelsAuthorSlugEndpointsInstructType$outboundSchema` instead. */
  export const outboundSchema =
    GetModelsAuthorSlugEndpointsInstructType$outboundSchema;
}

/** @internal */
export const GetModelsAuthorSlugEndpointsInputModality$inboundSchema:
  z.ZodNativeEnum<typeof GetModelsAuthorSlugEndpointsInputModality> = z
    .nativeEnum(GetModelsAuthorSlugEndpointsInputModality);

/** @internal */
export const GetModelsAuthorSlugEndpointsInputModality$outboundSchema:
  z.ZodNativeEnum<typeof GetModelsAuthorSlugEndpointsInputModality> =
    GetModelsAuthorSlugEndpointsInputModality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsAuthorSlugEndpointsInputModality$ {
  /** @deprecated use `GetModelsAuthorSlugEndpointsInputModality$inboundSchema` instead. */
  export const inboundSchema =
    GetModelsAuthorSlugEndpointsInputModality$inboundSchema;
  /** @deprecated use `GetModelsAuthorSlugEndpointsInputModality$outboundSchema` instead. */
  export const outboundSchema =
    GetModelsAuthorSlugEndpointsInputModality$outboundSchema;
}

/** @internal */
export const GetModelsAuthorSlugEndpointsOutputModality$inboundSchema:
  z.ZodNativeEnum<typeof GetModelsAuthorSlugEndpointsOutputModality> = z
    .nativeEnum(GetModelsAuthorSlugEndpointsOutputModality);

/** @internal */
export const GetModelsAuthorSlugEndpointsOutputModality$outboundSchema:
  z.ZodNativeEnum<typeof GetModelsAuthorSlugEndpointsOutputModality> =
    GetModelsAuthorSlugEndpointsOutputModality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsAuthorSlugEndpointsOutputModality$ {
  /** @deprecated use `GetModelsAuthorSlugEndpointsOutputModality$inboundSchema` instead. */
  export const inboundSchema =
    GetModelsAuthorSlugEndpointsOutputModality$inboundSchema;
  /** @deprecated use `GetModelsAuthorSlugEndpointsOutputModality$outboundSchema` instead. */
  export const outboundSchema =
    GetModelsAuthorSlugEndpointsOutputModality$outboundSchema;
}

/** @internal */
export const GetModelsAuthorSlugEndpointsArchitecture$inboundSchema: z.ZodType<
  GetModelsAuthorSlugEndpointsArchitecture,
  z.ZodTypeDef,
  unknown
> = z.object({
  tokenizer: z.nullable(GetModelsAuthorSlugEndpointsTokenizer$inboundSchema),
  instruct_type: z.nullable(
    GetModelsAuthorSlugEndpointsInstructType$inboundSchema,
  ),
  modality: z.nullable(z.string()),
  input_modalities: z.array(
    GetModelsAuthorSlugEndpointsInputModality$inboundSchema,
  ),
  output_modalities: z.array(
    GetModelsAuthorSlugEndpointsOutputModality$inboundSchema,
  ),
}).transform((v) => {
  return remap$(v, {
    "instruct_type": "instructType",
    "input_modalities": "inputModalities",
    "output_modalities": "outputModalities",
  });
});

/** @internal */
export type GetModelsAuthorSlugEndpointsArchitecture$Outbound = {
  tokenizer: string | null;
  instruct_type: string | null;
  modality: string | null;
  input_modalities: Array<string>;
  output_modalities: Array<string>;
};

/** @internal */
export const GetModelsAuthorSlugEndpointsArchitecture$outboundSchema: z.ZodType<
  GetModelsAuthorSlugEndpointsArchitecture$Outbound,
  z.ZodTypeDef,
  GetModelsAuthorSlugEndpointsArchitecture
> = z.object({
  tokenizer: z.nullable(GetModelsAuthorSlugEndpointsTokenizer$outboundSchema),
  instructType: z.nullable(
    GetModelsAuthorSlugEndpointsInstructType$outboundSchema,
  ),
  modality: z.nullable(z.string()),
  inputModalities: z.array(
    GetModelsAuthorSlugEndpointsInputModality$outboundSchema,
  ),
  outputModalities: z.array(
    GetModelsAuthorSlugEndpointsOutputModality$outboundSchema,
  ),
}).transform((v) => {
  return remap$(v, {
    instructType: "instruct_type",
    inputModalities: "input_modalities",
    outputModalities: "output_modalities",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsAuthorSlugEndpointsArchitecture$ {
  /** @deprecated use `GetModelsAuthorSlugEndpointsArchitecture$inboundSchema` instead. */
  export const inboundSchema =
    GetModelsAuthorSlugEndpointsArchitecture$inboundSchema;
  /** @deprecated use `GetModelsAuthorSlugEndpointsArchitecture$outboundSchema` instead. */
  export const outboundSchema =
    GetModelsAuthorSlugEndpointsArchitecture$outboundSchema;
  /** @deprecated use `GetModelsAuthorSlugEndpointsArchitecture$Outbound` instead. */
  export type Outbound = GetModelsAuthorSlugEndpointsArchitecture$Outbound;
}

export function getModelsAuthorSlugEndpointsArchitectureToJSON(
  getModelsAuthorSlugEndpointsArchitecture:
    GetModelsAuthorSlugEndpointsArchitecture,
): string {
  return JSON.stringify(
    GetModelsAuthorSlugEndpointsArchitecture$outboundSchema.parse(
      getModelsAuthorSlugEndpointsArchitecture,
    ),
  );
}

export function getModelsAuthorSlugEndpointsArchitectureFromJSON(
  jsonString: string,
): SafeParseResult<
  GetModelsAuthorSlugEndpointsArchitecture,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetModelsAuthorSlugEndpointsArchitecture$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetModelsAuthorSlugEndpointsArchitecture' from JSON`,
  );
}

/** @internal */
export const GetModelsAuthorSlugEndpointsPrompt$inboundSchema: z.ZodType<
  GetModelsAuthorSlugEndpointsPrompt,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type GetModelsAuthorSlugEndpointsPrompt$Outbound = number | string | any;

/** @internal */
export const GetModelsAuthorSlugEndpointsPrompt$outboundSchema: z.ZodType<
  GetModelsAuthorSlugEndpointsPrompt$Outbound,
  z.ZodTypeDef,
  GetModelsAuthorSlugEndpointsPrompt
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsAuthorSlugEndpointsPrompt$ {
  /** @deprecated use `GetModelsAuthorSlugEndpointsPrompt$inboundSchema` instead. */
  export const inboundSchema = GetModelsAuthorSlugEndpointsPrompt$inboundSchema;
  /** @deprecated use `GetModelsAuthorSlugEndpointsPrompt$outboundSchema` instead. */
  export const outboundSchema =
    GetModelsAuthorSlugEndpointsPrompt$outboundSchema;
  /** @deprecated use `GetModelsAuthorSlugEndpointsPrompt$Outbound` instead. */
  export type Outbound = GetModelsAuthorSlugEndpointsPrompt$Outbound;
}

export function getModelsAuthorSlugEndpointsPromptToJSON(
  getModelsAuthorSlugEndpointsPrompt: GetModelsAuthorSlugEndpointsPrompt,
): string {
  return JSON.stringify(
    GetModelsAuthorSlugEndpointsPrompt$outboundSchema.parse(
      getModelsAuthorSlugEndpointsPrompt,
    ),
  );
}

export function getModelsAuthorSlugEndpointsPromptFromJSON(
  jsonString: string,
): SafeParseResult<GetModelsAuthorSlugEndpointsPrompt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetModelsAuthorSlugEndpointsPrompt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetModelsAuthorSlugEndpointsPrompt' from JSON`,
  );
}

/** @internal */
export const GetModelsAuthorSlugEndpointsCompletion$inboundSchema: z.ZodType<
  GetModelsAuthorSlugEndpointsCompletion,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type GetModelsAuthorSlugEndpointsCompletion$Outbound =
  | number
  | string
  | any;

/** @internal */
export const GetModelsAuthorSlugEndpointsCompletion$outboundSchema: z.ZodType<
  GetModelsAuthorSlugEndpointsCompletion$Outbound,
  z.ZodTypeDef,
  GetModelsAuthorSlugEndpointsCompletion
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsAuthorSlugEndpointsCompletion$ {
  /** @deprecated use `GetModelsAuthorSlugEndpointsCompletion$inboundSchema` instead. */
  export const inboundSchema =
    GetModelsAuthorSlugEndpointsCompletion$inboundSchema;
  /** @deprecated use `GetModelsAuthorSlugEndpointsCompletion$outboundSchema` instead. */
  export const outboundSchema =
    GetModelsAuthorSlugEndpointsCompletion$outboundSchema;
  /** @deprecated use `GetModelsAuthorSlugEndpointsCompletion$Outbound` instead. */
  export type Outbound = GetModelsAuthorSlugEndpointsCompletion$Outbound;
}

export function getModelsAuthorSlugEndpointsCompletionToJSON(
  getModelsAuthorSlugEndpointsCompletion:
    GetModelsAuthorSlugEndpointsCompletion,
): string {
  return JSON.stringify(
    GetModelsAuthorSlugEndpointsCompletion$outboundSchema.parse(
      getModelsAuthorSlugEndpointsCompletion,
    ),
  );
}

export function getModelsAuthorSlugEndpointsCompletionFromJSON(
  jsonString: string,
): SafeParseResult<GetModelsAuthorSlugEndpointsCompletion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetModelsAuthorSlugEndpointsCompletion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetModelsAuthorSlugEndpointsCompletion' from JSON`,
  );
}

/** @internal */
export const EndpointsGetModelsAuthorSlugEndpointsRequest$inboundSchema:
  z.ZodType<
    EndpointsGetModelsAuthorSlugEndpointsRequest,
    z.ZodTypeDef,
    unknown
  > = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type EndpointsGetModelsAuthorSlugEndpointsRequest$Outbound =
  | number
  | string
  | any;

/** @internal */
export const EndpointsGetModelsAuthorSlugEndpointsRequest$outboundSchema:
  z.ZodType<
    EndpointsGetModelsAuthorSlugEndpointsRequest$Outbound,
    z.ZodTypeDef,
    EndpointsGetModelsAuthorSlugEndpointsRequest
  > = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EndpointsGetModelsAuthorSlugEndpointsRequest$ {
  /** @deprecated use `EndpointsGetModelsAuthorSlugEndpointsRequest$inboundSchema` instead. */
  export const inboundSchema =
    EndpointsGetModelsAuthorSlugEndpointsRequest$inboundSchema;
  /** @deprecated use `EndpointsGetModelsAuthorSlugEndpointsRequest$outboundSchema` instead. */
  export const outboundSchema =
    EndpointsGetModelsAuthorSlugEndpointsRequest$outboundSchema;
  /** @deprecated use `EndpointsGetModelsAuthorSlugEndpointsRequest$Outbound` instead. */
  export type Outbound = EndpointsGetModelsAuthorSlugEndpointsRequest$Outbound;
}

export function endpointsGetModelsAuthorSlugEndpointsRequestToJSON(
  endpointsGetModelsAuthorSlugEndpointsRequest:
    EndpointsGetModelsAuthorSlugEndpointsRequest,
): string {
  return JSON.stringify(
    EndpointsGetModelsAuthorSlugEndpointsRequest$outboundSchema.parse(
      endpointsGetModelsAuthorSlugEndpointsRequest,
    ),
  );
}

export function endpointsGetModelsAuthorSlugEndpointsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  EndpointsGetModelsAuthorSlugEndpointsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EndpointsGetModelsAuthorSlugEndpointsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EndpointsGetModelsAuthorSlugEndpointsRequest' from JSON`,
  );
}

/** @internal */
export const GetModelsAuthorSlugEndpointsImage$inboundSchema: z.ZodType<
  GetModelsAuthorSlugEndpointsImage,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type GetModelsAuthorSlugEndpointsImage$Outbound = number | string | any;

/** @internal */
export const GetModelsAuthorSlugEndpointsImage$outboundSchema: z.ZodType<
  GetModelsAuthorSlugEndpointsImage$Outbound,
  z.ZodTypeDef,
  GetModelsAuthorSlugEndpointsImage
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsAuthorSlugEndpointsImage$ {
  /** @deprecated use `GetModelsAuthorSlugEndpointsImage$inboundSchema` instead. */
  export const inboundSchema = GetModelsAuthorSlugEndpointsImage$inboundSchema;
  /** @deprecated use `GetModelsAuthorSlugEndpointsImage$outboundSchema` instead. */
  export const outboundSchema =
    GetModelsAuthorSlugEndpointsImage$outboundSchema;
  /** @deprecated use `GetModelsAuthorSlugEndpointsImage$Outbound` instead. */
  export type Outbound = GetModelsAuthorSlugEndpointsImage$Outbound;
}

export function getModelsAuthorSlugEndpointsImageToJSON(
  getModelsAuthorSlugEndpointsImage: GetModelsAuthorSlugEndpointsImage,
): string {
  return JSON.stringify(
    GetModelsAuthorSlugEndpointsImage$outboundSchema.parse(
      getModelsAuthorSlugEndpointsImage,
    ),
  );
}

export function getModelsAuthorSlugEndpointsImageFromJSON(
  jsonString: string,
): SafeParseResult<GetModelsAuthorSlugEndpointsImage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetModelsAuthorSlugEndpointsImage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetModelsAuthorSlugEndpointsImage' from JSON`,
  );
}

/** @internal */
export const GetModelsAuthorSlugEndpointsImageOutput$inboundSchema: z.ZodType<
  GetModelsAuthorSlugEndpointsImageOutput,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type GetModelsAuthorSlugEndpointsImageOutput$Outbound =
  | number
  | string
  | any;

/** @internal */
export const GetModelsAuthorSlugEndpointsImageOutput$outboundSchema: z.ZodType<
  GetModelsAuthorSlugEndpointsImageOutput$Outbound,
  z.ZodTypeDef,
  GetModelsAuthorSlugEndpointsImageOutput
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsAuthorSlugEndpointsImageOutput$ {
  /** @deprecated use `GetModelsAuthorSlugEndpointsImageOutput$inboundSchema` instead. */
  export const inboundSchema =
    GetModelsAuthorSlugEndpointsImageOutput$inboundSchema;
  /** @deprecated use `GetModelsAuthorSlugEndpointsImageOutput$outboundSchema` instead. */
  export const outboundSchema =
    GetModelsAuthorSlugEndpointsImageOutput$outboundSchema;
  /** @deprecated use `GetModelsAuthorSlugEndpointsImageOutput$Outbound` instead. */
  export type Outbound = GetModelsAuthorSlugEndpointsImageOutput$Outbound;
}

export function getModelsAuthorSlugEndpointsImageOutputToJSON(
  getModelsAuthorSlugEndpointsImageOutput:
    GetModelsAuthorSlugEndpointsImageOutput,
): string {
  return JSON.stringify(
    GetModelsAuthorSlugEndpointsImageOutput$outboundSchema.parse(
      getModelsAuthorSlugEndpointsImageOutput,
    ),
  );
}

export function getModelsAuthorSlugEndpointsImageOutputFromJSON(
  jsonString: string,
): SafeParseResult<
  GetModelsAuthorSlugEndpointsImageOutput,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetModelsAuthorSlugEndpointsImageOutput$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetModelsAuthorSlugEndpointsImageOutput' from JSON`,
  );
}

/** @internal */
export const GetModelsAuthorSlugEndpointsAudio$inboundSchema: z.ZodType<
  GetModelsAuthorSlugEndpointsAudio,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type GetModelsAuthorSlugEndpointsAudio$Outbound = number | string | any;

/** @internal */
export const GetModelsAuthorSlugEndpointsAudio$outboundSchema: z.ZodType<
  GetModelsAuthorSlugEndpointsAudio$Outbound,
  z.ZodTypeDef,
  GetModelsAuthorSlugEndpointsAudio
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsAuthorSlugEndpointsAudio$ {
  /** @deprecated use `GetModelsAuthorSlugEndpointsAudio$inboundSchema` instead. */
  export const inboundSchema = GetModelsAuthorSlugEndpointsAudio$inboundSchema;
  /** @deprecated use `GetModelsAuthorSlugEndpointsAudio$outboundSchema` instead. */
  export const outboundSchema =
    GetModelsAuthorSlugEndpointsAudio$outboundSchema;
  /** @deprecated use `GetModelsAuthorSlugEndpointsAudio$Outbound` instead. */
  export type Outbound = GetModelsAuthorSlugEndpointsAudio$Outbound;
}

export function getModelsAuthorSlugEndpointsAudioToJSON(
  getModelsAuthorSlugEndpointsAudio: GetModelsAuthorSlugEndpointsAudio,
): string {
  return JSON.stringify(
    GetModelsAuthorSlugEndpointsAudio$outboundSchema.parse(
      getModelsAuthorSlugEndpointsAudio,
    ),
  );
}

export function getModelsAuthorSlugEndpointsAudioFromJSON(
  jsonString: string,
): SafeParseResult<GetModelsAuthorSlugEndpointsAudio, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetModelsAuthorSlugEndpointsAudio$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetModelsAuthorSlugEndpointsAudio' from JSON`,
  );
}

/** @internal */
export const GetModelsAuthorSlugEndpointsInputAudioCache$inboundSchema:
  z.ZodType<
    GetModelsAuthorSlugEndpointsInputAudioCache,
    z.ZodTypeDef,
    unknown
  > = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type GetModelsAuthorSlugEndpointsInputAudioCache$Outbound =
  | number
  | string
  | any;

/** @internal */
export const GetModelsAuthorSlugEndpointsInputAudioCache$outboundSchema:
  z.ZodType<
    GetModelsAuthorSlugEndpointsInputAudioCache$Outbound,
    z.ZodTypeDef,
    GetModelsAuthorSlugEndpointsInputAudioCache
  > = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsAuthorSlugEndpointsInputAudioCache$ {
  /** @deprecated use `GetModelsAuthorSlugEndpointsInputAudioCache$inboundSchema` instead. */
  export const inboundSchema =
    GetModelsAuthorSlugEndpointsInputAudioCache$inboundSchema;
  /** @deprecated use `GetModelsAuthorSlugEndpointsInputAudioCache$outboundSchema` instead. */
  export const outboundSchema =
    GetModelsAuthorSlugEndpointsInputAudioCache$outboundSchema;
  /** @deprecated use `GetModelsAuthorSlugEndpointsInputAudioCache$Outbound` instead. */
  export type Outbound = GetModelsAuthorSlugEndpointsInputAudioCache$Outbound;
}

export function getModelsAuthorSlugEndpointsInputAudioCacheToJSON(
  getModelsAuthorSlugEndpointsInputAudioCache:
    GetModelsAuthorSlugEndpointsInputAudioCache,
): string {
  return JSON.stringify(
    GetModelsAuthorSlugEndpointsInputAudioCache$outboundSchema.parse(
      getModelsAuthorSlugEndpointsInputAudioCache,
    ),
  );
}

export function getModelsAuthorSlugEndpointsInputAudioCacheFromJSON(
  jsonString: string,
): SafeParseResult<
  GetModelsAuthorSlugEndpointsInputAudioCache,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetModelsAuthorSlugEndpointsInputAudioCache$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetModelsAuthorSlugEndpointsInputAudioCache' from JSON`,
  );
}

/** @internal */
export const GetModelsAuthorSlugEndpointsWebSearch$inboundSchema: z.ZodType<
  GetModelsAuthorSlugEndpointsWebSearch,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type GetModelsAuthorSlugEndpointsWebSearch$Outbound =
  | number
  | string
  | any;

/** @internal */
export const GetModelsAuthorSlugEndpointsWebSearch$outboundSchema: z.ZodType<
  GetModelsAuthorSlugEndpointsWebSearch$Outbound,
  z.ZodTypeDef,
  GetModelsAuthorSlugEndpointsWebSearch
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsAuthorSlugEndpointsWebSearch$ {
  /** @deprecated use `GetModelsAuthorSlugEndpointsWebSearch$inboundSchema` instead. */
  export const inboundSchema =
    GetModelsAuthorSlugEndpointsWebSearch$inboundSchema;
  /** @deprecated use `GetModelsAuthorSlugEndpointsWebSearch$outboundSchema` instead. */
  export const outboundSchema =
    GetModelsAuthorSlugEndpointsWebSearch$outboundSchema;
  /** @deprecated use `GetModelsAuthorSlugEndpointsWebSearch$Outbound` instead. */
  export type Outbound = GetModelsAuthorSlugEndpointsWebSearch$Outbound;
}

export function getModelsAuthorSlugEndpointsWebSearchToJSON(
  getModelsAuthorSlugEndpointsWebSearch: GetModelsAuthorSlugEndpointsWebSearch,
): string {
  return JSON.stringify(
    GetModelsAuthorSlugEndpointsWebSearch$outboundSchema.parse(
      getModelsAuthorSlugEndpointsWebSearch,
    ),
  );
}

export function getModelsAuthorSlugEndpointsWebSearchFromJSON(
  jsonString: string,
): SafeParseResult<GetModelsAuthorSlugEndpointsWebSearch, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetModelsAuthorSlugEndpointsWebSearch$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetModelsAuthorSlugEndpointsWebSearch' from JSON`,
  );
}

/** @internal */
export const GetModelsAuthorSlugEndpointsInternalReasoning$inboundSchema:
  z.ZodType<
    GetModelsAuthorSlugEndpointsInternalReasoning,
    z.ZodTypeDef,
    unknown
  > = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type GetModelsAuthorSlugEndpointsInternalReasoning$Outbound =
  | number
  | string
  | any;

/** @internal */
export const GetModelsAuthorSlugEndpointsInternalReasoning$outboundSchema:
  z.ZodType<
    GetModelsAuthorSlugEndpointsInternalReasoning$Outbound,
    z.ZodTypeDef,
    GetModelsAuthorSlugEndpointsInternalReasoning
  > = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsAuthorSlugEndpointsInternalReasoning$ {
  /** @deprecated use `GetModelsAuthorSlugEndpointsInternalReasoning$inboundSchema` instead. */
  export const inboundSchema =
    GetModelsAuthorSlugEndpointsInternalReasoning$inboundSchema;
  /** @deprecated use `GetModelsAuthorSlugEndpointsInternalReasoning$outboundSchema` instead. */
  export const outboundSchema =
    GetModelsAuthorSlugEndpointsInternalReasoning$outboundSchema;
  /** @deprecated use `GetModelsAuthorSlugEndpointsInternalReasoning$Outbound` instead. */
  export type Outbound = GetModelsAuthorSlugEndpointsInternalReasoning$Outbound;
}

export function getModelsAuthorSlugEndpointsInternalReasoningToJSON(
  getModelsAuthorSlugEndpointsInternalReasoning:
    GetModelsAuthorSlugEndpointsInternalReasoning,
): string {
  return JSON.stringify(
    GetModelsAuthorSlugEndpointsInternalReasoning$outboundSchema.parse(
      getModelsAuthorSlugEndpointsInternalReasoning,
    ),
  );
}

export function getModelsAuthorSlugEndpointsInternalReasoningFromJSON(
  jsonString: string,
): SafeParseResult<
  GetModelsAuthorSlugEndpointsInternalReasoning,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetModelsAuthorSlugEndpointsInternalReasoning$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetModelsAuthorSlugEndpointsInternalReasoning' from JSON`,
  );
}

/** @internal */
export const GetModelsAuthorSlugEndpointsInputCacheRead$inboundSchema:
  z.ZodType<GetModelsAuthorSlugEndpointsInputCacheRead, z.ZodTypeDef, unknown> =
    z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type GetModelsAuthorSlugEndpointsInputCacheRead$Outbound =
  | number
  | string
  | any;

/** @internal */
export const GetModelsAuthorSlugEndpointsInputCacheRead$outboundSchema:
  z.ZodType<
    GetModelsAuthorSlugEndpointsInputCacheRead$Outbound,
    z.ZodTypeDef,
    GetModelsAuthorSlugEndpointsInputCacheRead
  > = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsAuthorSlugEndpointsInputCacheRead$ {
  /** @deprecated use `GetModelsAuthorSlugEndpointsInputCacheRead$inboundSchema` instead. */
  export const inboundSchema =
    GetModelsAuthorSlugEndpointsInputCacheRead$inboundSchema;
  /** @deprecated use `GetModelsAuthorSlugEndpointsInputCacheRead$outboundSchema` instead. */
  export const outboundSchema =
    GetModelsAuthorSlugEndpointsInputCacheRead$outboundSchema;
  /** @deprecated use `GetModelsAuthorSlugEndpointsInputCacheRead$Outbound` instead. */
  export type Outbound = GetModelsAuthorSlugEndpointsInputCacheRead$Outbound;
}

export function getModelsAuthorSlugEndpointsInputCacheReadToJSON(
  getModelsAuthorSlugEndpointsInputCacheRead:
    GetModelsAuthorSlugEndpointsInputCacheRead,
): string {
  return JSON.stringify(
    GetModelsAuthorSlugEndpointsInputCacheRead$outboundSchema.parse(
      getModelsAuthorSlugEndpointsInputCacheRead,
    ),
  );
}

export function getModelsAuthorSlugEndpointsInputCacheReadFromJSON(
  jsonString: string,
): SafeParseResult<
  GetModelsAuthorSlugEndpointsInputCacheRead,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetModelsAuthorSlugEndpointsInputCacheRead$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetModelsAuthorSlugEndpointsInputCacheRead' from JSON`,
  );
}

/** @internal */
export const GetModelsAuthorSlugEndpointsInputCacheWrite$inboundSchema:
  z.ZodType<
    GetModelsAuthorSlugEndpointsInputCacheWrite,
    z.ZodTypeDef,
    unknown
  > = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type GetModelsAuthorSlugEndpointsInputCacheWrite$Outbound =
  | number
  | string
  | any;

/** @internal */
export const GetModelsAuthorSlugEndpointsInputCacheWrite$outboundSchema:
  z.ZodType<
    GetModelsAuthorSlugEndpointsInputCacheWrite$Outbound,
    z.ZodTypeDef,
    GetModelsAuthorSlugEndpointsInputCacheWrite
  > = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsAuthorSlugEndpointsInputCacheWrite$ {
  /** @deprecated use `GetModelsAuthorSlugEndpointsInputCacheWrite$inboundSchema` instead. */
  export const inboundSchema =
    GetModelsAuthorSlugEndpointsInputCacheWrite$inboundSchema;
  /** @deprecated use `GetModelsAuthorSlugEndpointsInputCacheWrite$outboundSchema` instead. */
  export const outboundSchema =
    GetModelsAuthorSlugEndpointsInputCacheWrite$outboundSchema;
  /** @deprecated use `GetModelsAuthorSlugEndpointsInputCacheWrite$Outbound` instead. */
  export type Outbound = GetModelsAuthorSlugEndpointsInputCacheWrite$Outbound;
}

export function getModelsAuthorSlugEndpointsInputCacheWriteToJSON(
  getModelsAuthorSlugEndpointsInputCacheWrite:
    GetModelsAuthorSlugEndpointsInputCacheWrite,
): string {
  return JSON.stringify(
    GetModelsAuthorSlugEndpointsInputCacheWrite$outboundSchema.parse(
      getModelsAuthorSlugEndpointsInputCacheWrite,
    ),
  );
}

export function getModelsAuthorSlugEndpointsInputCacheWriteFromJSON(
  jsonString: string,
): SafeParseResult<
  GetModelsAuthorSlugEndpointsInputCacheWrite,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetModelsAuthorSlugEndpointsInputCacheWrite$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetModelsAuthorSlugEndpointsInputCacheWrite' from JSON`,
  );
}

/** @internal */
export const GetModelsAuthorSlugEndpointsPricing$inboundSchema: z.ZodType<
  GetModelsAuthorSlugEndpointsPricing,
  z.ZodTypeDef,
  unknown
> = z.object({
  prompt: z.union([z.number(), z.string(), z.any()]).optional(),
  completion: z.union([z.number(), z.string(), z.any()]).optional(),
  request: z.union([z.number(), z.string(), z.any()]).optional(),
  image: z.union([z.number(), z.string(), z.any()]).optional(),
  image_output: z.union([z.number(), z.string(), z.any()]).optional(),
  audio: z.union([z.number(), z.string(), z.any()]).optional(),
  input_audio_cache: z.union([z.number(), z.string(), z.any()]).optional(),
  web_search: z.union([z.number(), z.string(), z.any()]).optional(),
  internal_reasoning: z.union([z.number(), z.string(), z.any()]).optional(),
  input_cache_read: z.union([z.number(), z.string(), z.any()]).optional(),
  input_cache_write: z.union([z.number(), z.string(), z.any()]).optional(),
  discount: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "image_output": "imageOutput",
    "input_audio_cache": "inputAudioCache",
    "web_search": "webSearch",
    "internal_reasoning": "internalReasoning",
    "input_cache_read": "inputCacheRead",
    "input_cache_write": "inputCacheWrite",
  });
});

/** @internal */
export type GetModelsAuthorSlugEndpointsPricing$Outbound = {
  prompt?: number | string | any | undefined;
  completion?: number | string | any | undefined;
  request?: number | string | any | undefined;
  image?: number | string | any | undefined;
  image_output?: number | string | any | undefined;
  audio?: number | string | any | undefined;
  input_audio_cache?: number | string | any | undefined;
  web_search?: number | string | any | undefined;
  internal_reasoning?: number | string | any | undefined;
  input_cache_read?: number | string | any | undefined;
  input_cache_write?: number | string | any | undefined;
  discount?: number | undefined;
};

/** @internal */
export const GetModelsAuthorSlugEndpointsPricing$outboundSchema: z.ZodType<
  GetModelsAuthorSlugEndpointsPricing$Outbound,
  z.ZodTypeDef,
  GetModelsAuthorSlugEndpointsPricing
> = z.object({
  prompt: z.union([z.number(), z.string(), z.any()]).optional(),
  completion: z.union([z.number(), z.string(), z.any()]).optional(),
  request: z.union([z.number(), z.string(), z.any()]).optional(),
  image: z.union([z.number(), z.string(), z.any()]).optional(),
  imageOutput: z.union([z.number(), z.string(), z.any()]).optional(),
  audio: z.union([z.number(), z.string(), z.any()]).optional(),
  inputAudioCache: z.union([z.number(), z.string(), z.any()]).optional(),
  webSearch: z.union([z.number(), z.string(), z.any()]).optional(),
  internalReasoning: z.union([z.number(), z.string(), z.any()]).optional(),
  inputCacheRead: z.union([z.number(), z.string(), z.any()]).optional(),
  inputCacheWrite: z.union([z.number(), z.string(), z.any()]).optional(),
  discount: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    imageOutput: "image_output",
    inputAudioCache: "input_audio_cache",
    webSearch: "web_search",
    internalReasoning: "internal_reasoning",
    inputCacheRead: "input_cache_read",
    inputCacheWrite: "input_cache_write",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsAuthorSlugEndpointsPricing$ {
  /** @deprecated use `GetModelsAuthorSlugEndpointsPricing$inboundSchema` instead. */
  export const inboundSchema =
    GetModelsAuthorSlugEndpointsPricing$inboundSchema;
  /** @deprecated use `GetModelsAuthorSlugEndpointsPricing$outboundSchema` instead. */
  export const outboundSchema =
    GetModelsAuthorSlugEndpointsPricing$outboundSchema;
  /** @deprecated use `GetModelsAuthorSlugEndpointsPricing$Outbound` instead. */
  export type Outbound = GetModelsAuthorSlugEndpointsPricing$Outbound;
}

export function getModelsAuthorSlugEndpointsPricingToJSON(
  getModelsAuthorSlugEndpointsPricing: GetModelsAuthorSlugEndpointsPricing,
): string {
  return JSON.stringify(
    GetModelsAuthorSlugEndpointsPricing$outboundSchema.parse(
      getModelsAuthorSlugEndpointsPricing,
    ),
  );
}

export function getModelsAuthorSlugEndpointsPricingFromJSON(
  jsonString: string,
): SafeParseResult<GetModelsAuthorSlugEndpointsPricing, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetModelsAuthorSlugEndpointsPricing$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetModelsAuthorSlugEndpointsPricing' from JSON`,
  );
}

/** @internal */
export const GetModelsAuthorSlugEndpointsProviderName$inboundSchema:
  z.ZodNativeEnum<typeof GetModelsAuthorSlugEndpointsProviderName> = z
    .nativeEnum(GetModelsAuthorSlugEndpointsProviderName);

/** @internal */
export const GetModelsAuthorSlugEndpointsProviderName$outboundSchema:
  z.ZodNativeEnum<typeof GetModelsAuthorSlugEndpointsProviderName> =
    GetModelsAuthorSlugEndpointsProviderName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsAuthorSlugEndpointsProviderName$ {
  /** @deprecated use `GetModelsAuthorSlugEndpointsProviderName$inboundSchema` instead. */
  export const inboundSchema =
    GetModelsAuthorSlugEndpointsProviderName$inboundSchema;
  /** @deprecated use `GetModelsAuthorSlugEndpointsProviderName$outboundSchema` instead. */
  export const outboundSchema =
    GetModelsAuthorSlugEndpointsProviderName$outboundSchema;
}

/** @internal */
export const GetModelsAuthorSlugEndpointsQuantization$inboundSchema:
  z.ZodNativeEnum<typeof GetModelsAuthorSlugEndpointsQuantization> = z
    .nativeEnum(GetModelsAuthorSlugEndpointsQuantization);

/** @internal */
export const GetModelsAuthorSlugEndpointsQuantization$outboundSchema:
  z.ZodNativeEnum<typeof GetModelsAuthorSlugEndpointsQuantization> =
    GetModelsAuthorSlugEndpointsQuantization$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsAuthorSlugEndpointsQuantization$ {
  /** @deprecated use `GetModelsAuthorSlugEndpointsQuantization$inboundSchema` instead. */
  export const inboundSchema =
    GetModelsAuthorSlugEndpointsQuantization$inboundSchema;
  /** @deprecated use `GetModelsAuthorSlugEndpointsQuantization$outboundSchema` instead. */
  export const outboundSchema =
    GetModelsAuthorSlugEndpointsQuantization$outboundSchema;
}

/** @internal */
export const GetModelsAuthorSlugEndpointsSupportedParameter$inboundSchema:
  z.ZodNativeEnum<typeof GetModelsAuthorSlugEndpointsSupportedParameter> = z
    .nativeEnum(GetModelsAuthorSlugEndpointsSupportedParameter);

/** @internal */
export const GetModelsAuthorSlugEndpointsSupportedParameter$outboundSchema:
  z.ZodNativeEnum<typeof GetModelsAuthorSlugEndpointsSupportedParameter> =
    GetModelsAuthorSlugEndpointsSupportedParameter$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsAuthorSlugEndpointsSupportedParameter$ {
  /** @deprecated use `GetModelsAuthorSlugEndpointsSupportedParameter$inboundSchema` instead. */
  export const inboundSchema =
    GetModelsAuthorSlugEndpointsSupportedParameter$inboundSchema;
  /** @deprecated use `GetModelsAuthorSlugEndpointsSupportedParameter$outboundSchema` instead. */
  export const outboundSchema =
    GetModelsAuthorSlugEndpointsSupportedParameter$outboundSchema;
}

/** @internal */
export const GetModelsAuthorSlugEndpointsStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetModelsAuthorSlugEndpointsStatus
> = z.nativeEnum(GetModelsAuthorSlugEndpointsStatus);

/** @internal */
export const GetModelsAuthorSlugEndpointsStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetModelsAuthorSlugEndpointsStatus
> = GetModelsAuthorSlugEndpointsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsAuthorSlugEndpointsStatus$ {
  /** @deprecated use `GetModelsAuthorSlugEndpointsStatus$inboundSchema` instead. */
  export const inboundSchema = GetModelsAuthorSlugEndpointsStatus$inboundSchema;
  /** @deprecated use `GetModelsAuthorSlugEndpointsStatus$outboundSchema` instead. */
  export const outboundSchema =
    GetModelsAuthorSlugEndpointsStatus$outboundSchema;
}

/** @internal */
export const Endpoint$inboundSchema: z.ZodType<
  Endpoint,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  model_name: z.string(),
  context_length: z.number(),
  pricing: z.lazy(() => GetModelsAuthorSlugEndpointsPricing$inboundSchema),
  provider_name: GetModelsAuthorSlugEndpointsProviderName$inboundSchema,
  tag: z.string(),
  quantization: z.nullable(
    GetModelsAuthorSlugEndpointsQuantization$inboundSchema,
  ),
  max_completion_tokens: z.nullable(z.number()),
  max_prompt_tokens: z.nullable(z.number()),
  supported_parameters: z.array(
    GetModelsAuthorSlugEndpointsSupportedParameter$inboundSchema,
  ),
  status: GetModelsAuthorSlugEndpointsStatus$inboundSchema.optional(),
  uptime_last_30m: z.nullable(z.number()),
  supports_implicit_caching: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "model_name": "modelName",
    "context_length": "contextLength",
    "provider_name": "providerName",
    "max_completion_tokens": "maxCompletionTokens",
    "max_prompt_tokens": "maxPromptTokens",
    "supported_parameters": "supportedParameters",
    "uptime_last_30m": "uptimeLast30m",
    "supports_implicit_caching": "supportsImplicitCaching",
  });
});

/** @internal */
export type Endpoint$Outbound = {
  name: string;
  model_name: string;
  context_length: number;
  pricing: GetModelsAuthorSlugEndpointsPricing$Outbound;
  provider_name: string;
  tag: string;
  quantization: string | null;
  max_completion_tokens: number | null;
  max_prompt_tokens: number | null;
  supported_parameters: Array<string>;
  status?: number | undefined;
  uptime_last_30m: number | null;
  supports_implicit_caching: boolean;
};

/** @internal */
export const Endpoint$outboundSchema: z.ZodType<
  Endpoint$Outbound,
  z.ZodTypeDef,
  Endpoint
> = z.object({
  name: z.string(),
  modelName: z.string(),
  contextLength: z.number(),
  pricing: z.lazy(() => GetModelsAuthorSlugEndpointsPricing$outboundSchema),
  providerName: GetModelsAuthorSlugEndpointsProviderName$outboundSchema,
  tag: z.string(),
  quantization: z.nullable(
    GetModelsAuthorSlugEndpointsQuantization$outboundSchema,
  ),
  maxCompletionTokens: z.nullable(z.number()),
  maxPromptTokens: z.nullable(z.number()),
  supportedParameters: z.array(
    GetModelsAuthorSlugEndpointsSupportedParameter$outboundSchema,
  ),
  status: GetModelsAuthorSlugEndpointsStatus$outboundSchema.optional(),
  uptimeLast30m: z.nullable(z.number()),
  supportsImplicitCaching: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    modelName: "model_name",
    contextLength: "context_length",
    providerName: "provider_name",
    maxCompletionTokens: "max_completion_tokens",
    maxPromptTokens: "max_prompt_tokens",
    supportedParameters: "supported_parameters",
    uptimeLast30m: "uptime_last_30m",
    supportsImplicitCaching: "supports_implicit_caching",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Endpoint$ {
  /** @deprecated use `Endpoint$inboundSchema` instead. */
  export const inboundSchema = Endpoint$inboundSchema;
  /** @deprecated use `Endpoint$outboundSchema` instead. */
  export const outboundSchema = Endpoint$outboundSchema;
  /** @deprecated use `Endpoint$Outbound` instead. */
  export type Outbound = Endpoint$Outbound;
}

export function endpointToJSON(endpoint: Endpoint): string {
  return JSON.stringify(Endpoint$outboundSchema.parse(endpoint));
}

export function endpointFromJSON(
  jsonString: string,
): SafeParseResult<Endpoint, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Endpoint$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Endpoint' from JSON`,
  );
}

/** @internal */
export const GetModelsAuthorSlugEndpointsData$inboundSchema: z.ZodType<
  GetModelsAuthorSlugEndpointsData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  created: z.number(),
  description: z.string(),
  architecture: z.lazy(() =>
    GetModelsAuthorSlugEndpointsArchitecture$inboundSchema
  ),
  endpoints: z.array(z.lazy(() => Endpoint$inboundSchema)),
});

/** @internal */
export type GetModelsAuthorSlugEndpointsData$Outbound = {
  id: string;
  name: string;
  created: number;
  description: string;
  architecture: GetModelsAuthorSlugEndpointsArchitecture$Outbound;
  endpoints: Array<Endpoint$Outbound>;
};

/** @internal */
export const GetModelsAuthorSlugEndpointsData$outboundSchema: z.ZodType<
  GetModelsAuthorSlugEndpointsData$Outbound,
  z.ZodTypeDef,
  GetModelsAuthorSlugEndpointsData
> = z.object({
  id: z.string(),
  name: z.string(),
  created: z.number(),
  description: z.string(),
  architecture: z.lazy(() =>
    GetModelsAuthorSlugEndpointsArchitecture$outboundSchema
  ),
  endpoints: z.array(z.lazy(() => Endpoint$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsAuthorSlugEndpointsData$ {
  /** @deprecated use `GetModelsAuthorSlugEndpointsData$inboundSchema` instead. */
  export const inboundSchema = GetModelsAuthorSlugEndpointsData$inboundSchema;
  /** @deprecated use `GetModelsAuthorSlugEndpointsData$outboundSchema` instead. */
  export const outboundSchema = GetModelsAuthorSlugEndpointsData$outboundSchema;
  /** @deprecated use `GetModelsAuthorSlugEndpointsData$Outbound` instead. */
  export type Outbound = GetModelsAuthorSlugEndpointsData$Outbound;
}

export function getModelsAuthorSlugEndpointsDataToJSON(
  getModelsAuthorSlugEndpointsData: GetModelsAuthorSlugEndpointsData,
): string {
  return JSON.stringify(
    GetModelsAuthorSlugEndpointsData$outboundSchema.parse(
      getModelsAuthorSlugEndpointsData,
    ),
  );
}

export function getModelsAuthorSlugEndpointsDataFromJSON(
  jsonString: string,
): SafeParseResult<GetModelsAuthorSlugEndpointsData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetModelsAuthorSlugEndpointsData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetModelsAuthorSlugEndpointsData' from JSON`,
  );
}

/** @internal */
export const GetModelsAuthorSlugEndpointsResponseBody$inboundSchema: z.ZodType<
  GetModelsAuthorSlugEndpointsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => GetModelsAuthorSlugEndpointsData$inboundSchema),
});

/** @internal */
export type GetModelsAuthorSlugEndpointsResponseBody$Outbound = {
  data: GetModelsAuthorSlugEndpointsData$Outbound;
};

/** @internal */
export const GetModelsAuthorSlugEndpointsResponseBody$outboundSchema: z.ZodType<
  GetModelsAuthorSlugEndpointsResponseBody$Outbound,
  z.ZodTypeDef,
  GetModelsAuthorSlugEndpointsResponseBody
> = z.object({
  data: z.lazy(() => GetModelsAuthorSlugEndpointsData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsAuthorSlugEndpointsResponseBody$ {
  /** @deprecated use `GetModelsAuthorSlugEndpointsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GetModelsAuthorSlugEndpointsResponseBody$inboundSchema;
  /** @deprecated use `GetModelsAuthorSlugEndpointsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetModelsAuthorSlugEndpointsResponseBody$outboundSchema;
  /** @deprecated use `GetModelsAuthorSlugEndpointsResponseBody$Outbound` instead. */
  export type Outbound = GetModelsAuthorSlugEndpointsResponseBody$Outbound;
}

export function getModelsAuthorSlugEndpointsResponseBodyToJSON(
  getModelsAuthorSlugEndpointsResponseBody:
    GetModelsAuthorSlugEndpointsResponseBody,
): string {
  return JSON.stringify(
    GetModelsAuthorSlugEndpointsResponseBody$outboundSchema.parse(
      getModelsAuthorSlugEndpointsResponseBody,
    ),
  );
}

export function getModelsAuthorSlugEndpointsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  GetModelsAuthorSlugEndpointsResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetModelsAuthorSlugEndpointsResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetModelsAuthorSlugEndpointsResponseBody' from JSON`,
  );
}

/** @internal */
export const GetModelsAuthorSlugEndpointsResponse$inboundSchema: z.ZodType<
  GetModelsAuthorSlugEndpointsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetModelsAuthorSlugEndpointsResponseBody$inboundSchema),
  models.ErrorResponse$inboundSchema,
]);

/** @internal */
export type GetModelsAuthorSlugEndpointsResponse$Outbound =
  | GetModelsAuthorSlugEndpointsResponseBody$Outbound
  | models.ErrorResponse$Outbound;

/** @internal */
export const GetModelsAuthorSlugEndpointsResponse$outboundSchema: z.ZodType<
  GetModelsAuthorSlugEndpointsResponse$Outbound,
  z.ZodTypeDef,
  GetModelsAuthorSlugEndpointsResponse
> = z.union([
  z.lazy(() => GetModelsAuthorSlugEndpointsResponseBody$outboundSchema),
  models.ErrorResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetModelsAuthorSlugEndpointsResponse$ {
  /** @deprecated use `GetModelsAuthorSlugEndpointsResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetModelsAuthorSlugEndpointsResponse$inboundSchema;
  /** @deprecated use `GetModelsAuthorSlugEndpointsResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetModelsAuthorSlugEndpointsResponse$outboundSchema;
  /** @deprecated use `GetModelsAuthorSlugEndpointsResponse$Outbound` instead. */
  export type Outbound = GetModelsAuthorSlugEndpointsResponse$Outbound;
}

export function getModelsAuthorSlugEndpointsResponseToJSON(
  getModelsAuthorSlugEndpointsResponse: GetModelsAuthorSlugEndpointsResponse,
): string {
  return JSON.stringify(
    GetModelsAuthorSlugEndpointsResponse$outboundSchema.parse(
      getModelsAuthorSlugEndpointsResponse,
    ),
  );
}

export function getModelsAuthorSlugEndpointsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetModelsAuthorSlugEndpointsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetModelsAuthorSlugEndpointsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetModelsAuthorSlugEndpointsResponse' from JSON`,
  );
}
