/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v4";
import { EventStream } from "../../lib/event-streams.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

/**
 * Successful response
 */
export type CreateApiAlphaResponsesResponseBody = {
  /**
   * Union of all possible event types emitted during response streaming
   */
  data: models.OpenResponsesStreamEvent;
};

export type CreateApiAlphaResponsesResponse =
  | models.OpenResponsesNonStreamingResponse
  | models.ErrorResponse
  | EventStream<CreateApiAlphaResponsesResponseBody>;

/** @internal */
export const CreateApiAlphaResponsesResponseBody$inboundSchema: z.ZodType<
  CreateApiAlphaResponsesResponseBody,
  unknown
> = z.object({
  data: z.string().transform((v, ctx) => {
    try {
      return JSON.parse(v);
    } catch (err) {
      ctx.addIssue({
        code: z.ZodIssueCode.custom,
        message: `malformed json: ${err}`,
      });
      return z.NEVER;
    }
  }).pipe(models.OpenResponsesStreamEvent$inboundSchema),
});

/** @internal */
export type CreateApiAlphaResponsesResponseBody$Outbound = {
  data: models.OpenResponsesStreamEvent$Outbound;
};

/** @internal */
export const CreateApiAlphaResponsesResponseBody$outboundSchema: z.ZodType<
  CreateApiAlphaResponsesResponseBody$Outbound,
  CreateApiAlphaResponsesResponseBody
> = z.object({
  data: models.OpenResponsesStreamEvent$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateApiAlphaResponsesResponseBody$ {
  /** @deprecated use `CreateApiAlphaResponsesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    CreateApiAlphaResponsesResponseBody$inboundSchema;
  /** @deprecated use `CreateApiAlphaResponsesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    CreateApiAlphaResponsesResponseBody$outboundSchema;
  /** @deprecated use `CreateApiAlphaResponsesResponseBody$Outbound` instead. */
  export type Outbound = CreateApiAlphaResponsesResponseBody$Outbound;
}

export function createApiAlphaResponsesResponseBodyToJSON(
  createApiAlphaResponsesResponseBody: CreateApiAlphaResponsesResponseBody,
): string {
  return JSON.stringify(
    CreateApiAlphaResponsesResponseBody$outboundSchema.parse(
      createApiAlphaResponsesResponseBody,
    ),
  );
}

export function createApiAlphaResponsesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateApiAlphaResponsesResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateApiAlphaResponsesResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateApiAlphaResponsesResponseBody' from JSON`,
  );
}

/** @internal */
export const CreateApiAlphaResponsesResponse$inboundSchema: z.ZodType<
  CreateApiAlphaResponsesResponse,
  unknown
> = z.union([
  models.OpenResponsesNonStreamingResponse$inboundSchema,
  models.ErrorResponse$inboundSchema,
  z.custom<ReadableStream<Uint8Array>>(x => x instanceof ReadableStream)
    .transform(stream => {
      return new EventStream(stream, rawEvent => {
        if (rawEvent.data === "[DONE]") return { done: true };
        return {
          value: z.lazy(() => CreateApiAlphaResponsesResponseBody$inboundSchema)
            .parse(rawEvent),
        };
      });
    }),
]);

/** @internal */
export type CreateApiAlphaResponsesResponse$Outbound =
  | models.OpenResponsesNonStreamingResponse$Outbound
  | models.ErrorResponse$Outbound
  | never;

/** @internal */
export const CreateApiAlphaResponsesResponse$outboundSchema: z.ZodType<
  CreateApiAlphaResponsesResponse$Outbound,
  CreateApiAlphaResponsesResponse
> = z.union([
  models.OpenResponsesNonStreamingResponse$outboundSchema,
  models.ErrorResponse$outboundSchema,
  z.never(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateApiAlphaResponsesResponse$ {
  /** @deprecated use `CreateApiAlphaResponsesResponse$inboundSchema` instead. */
  export const inboundSchema = CreateApiAlphaResponsesResponse$inboundSchema;
  /** @deprecated use `CreateApiAlphaResponsesResponse$outboundSchema` instead. */
  export const outboundSchema = CreateApiAlphaResponsesResponse$outboundSchema;
  /** @deprecated use `CreateApiAlphaResponsesResponse$Outbound` instead. */
  export type Outbound = CreateApiAlphaResponsesResponse$Outbound;
}

export function createApiAlphaResponsesResponseToJSON(
  createApiAlphaResponsesResponse: CreateApiAlphaResponsesResponse,
): string {
  return JSON.stringify(
    CreateApiAlphaResponsesResponse$outboundSchema.parse(
      createApiAlphaResponsesResponse,
    ),
  );
}

export function createApiAlphaResponsesResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateApiAlphaResponsesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateApiAlphaResponsesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateApiAlphaResponsesResponse' from JSON`,
  );
}
