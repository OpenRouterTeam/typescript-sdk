/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type CreateCoinbaseChargeSecurity = {
  bearer: string;
};

export const ChainId = {
  One: 1,
  OneHundredAndThirtySeven: 137,
  EightThousandFourHundredAndFiftyThree: 8453,
} as const;
export type ChainId = OpenEnum<typeof ChainId>;

export type CreateCoinbaseChargeRequest = {
  amount: number;
  sender?: any | undefined;
  chainId: ChainId;
};

export type CallData = {
  deadline: string;
  feeAmount: string;
  id: string;
  operator: string;
  prefix: string;
  recipient: string;
  recipientAmount: string;
  recipientCurrency: string;
  refundDestination: string;
  signature: string;
};

export type Metadata = {
  chainId: number;
  contractAddress: string;
  sender: string;
};

export type TransferIntent = {
  callData: CallData;
  metadata: Metadata;
};

export type Web3Data = {
  transferIntent: TransferIntent;
};

export type CreateCoinbaseChargeData = {
  id: string;
  createdAt: string;
  expiresAt: string;
  web3Data: Web3Data;
};

/**
 * Returns the calldata to fulfill the transaction
 */
export type CreateCoinbaseChargeResponseBody = {
  data: CreateCoinbaseChargeData;
};

export type CreateCoinbaseChargeResponse =
  | CreateCoinbaseChargeResponseBody
  | models.ErrorResponse;

/** @internal */
export const CreateCoinbaseChargeSecurity$inboundSchema: z.ZodType<
  CreateCoinbaseChargeSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  bearer: z.string(),
});

/** @internal */
export type CreateCoinbaseChargeSecurity$Outbound = {
  bearer: string;
};

/** @internal */
export const CreateCoinbaseChargeSecurity$outboundSchema: z.ZodType<
  CreateCoinbaseChargeSecurity$Outbound,
  z.ZodTypeDef,
  CreateCoinbaseChargeSecurity
> = z.object({
  bearer: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCoinbaseChargeSecurity$ {
  /** @deprecated use `CreateCoinbaseChargeSecurity$inboundSchema` instead. */
  export const inboundSchema = CreateCoinbaseChargeSecurity$inboundSchema;
  /** @deprecated use `CreateCoinbaseChargeSecurity$outboundSchema` instead. */
  export const outboundSchema = CreateCoinbaseChargeSecurity$outboundSchema;
  /** @deprecated use `CreateCoinbaseChargeSecurity$Outbound` instead. */
  export type Outbound = CreateCoinbaseChargeSecurity$Outbound;
}

export function createCoinbaseChargeSecurityToJSON(
  createCoinbaseChargeSecurity: CreateCoinbaseChargeSecurity,
): string {
  return JSON.stringify(
    CreateCoinbaseChargeSecurity$outboundSchema.parse(
      createCoinbaseChargeSecurity,
    ),
  );
}

export function createCoinbaseChargeSecurityFromJSON(
  jsonString: string,
): SafeParseResult<CreateCoinbaseChargeSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCoinbaseChargeSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCoinbaseChargeSecurity' from JSON`,
  );
}

/** @internal */
export const ChainId$inboundSchema: z.ZodType<ChainId, z.ZodTypeDef, unknown> =
  z
    .union([
      z.nativeEnum(ChainId),
      z.number().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const ChainId$outboundSchema: z.ZodType<ChainId, z.ZodTypeDef, ChainId> =
  z.union([
    z.nativeEnum(ChainId),
    z.number().and(z.custom<Unrecognized<number>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChainId$ {
  /** @deprecated use `ChainId$inboundSchema` instead. */
  export const inboundSchema = ChainId$inboundSchema;
  /** @deprecated use `ChainId$outboundSchema` instead. */
  export const outboundSchema = ChainId$outboundSchema;
}

/** @internal */
export const CreateCoinbaseChargeRequest$inboundSchema: z.ZodType<
  CreateCoinbaseChargeRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.number(),
  sender: z.any().optional(),
  chain_id: ChainId$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "chain_id": "chainId",
  });
});

/** @internal */
export type CreateCoinbaseChargeRequest$Outbound = {
  amount: number;
  sender?: any | undefined;
  chain_id: number;
};

/** @internal */
export const CreateCoinbaseChargeRequest$outboundSchema: z.ZodType<
  CreateCoinbaseChargeRequest$Outbound,
  z.ZodTypeDef,
  CreateCoinbaseChargeRequest
> = z.object({
  amount: z.number(),
  sender: z.any().optional(),
  chainId: ChainId$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    chainId: "chain_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCoinbaseChargeRequest$ {
  /** @deprecated use `CreateCoinbaseChargeRequest$inboundSchema` instead. */
  export const inboundSchema = CreateCoinbaseChargeRequest$inboundSchema;
  /** @deprecated use `CreateCoinbaseChargeRequest$outboundSchema` instead. */
  export const outboundSchema = CreateCoinbaseChargeRequest$outboundSchema;
  /** @deprecated use `CreateCoinbaseChargeRequest$Outbound` instead. */
  export type Outbound = CreateCoinbaseChargeRequest$Outbound;
}

export function createCoinbaseChargeRequestToJSON(
  createCoinbaseChargeRequest: CreateCoinbaseChargeRequest,
): string {
  return JSON.stringify(
    CreateCoinbaseChargeRequest$outboundSchema.parse(
      createCoinbaseChargeRequest,
    ),
  );
}

export function createCoinbaseChargeRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateCoinbaseChargeRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCoinbaseChargeRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCoinbaseChargeRequest' from JSON`,
  );
}

/** @internal */
export const CallData$inboundSchema: z.ZodType<
  CallData,
  z.ZodTypeDef,
  unknown
> = z.object({
  deadline: z.string(),
  fee_amount: z.string(),
  id: z.string(),
  operator: z.string(),
  prefix: z.string(),
  recipient: z.string(),
  recipient_amount: z.string(),
  recipient_currency: z.string(),
  refund_destination: z.string(),
  signature: z.string(),
}).transform((v) => {
  return remap$(v, {
    "fee_amount": "feeAmount",
    "recipient_amount": "recipientAmount",
    "recipient_currency": "recipientCurrency",
    "refund_destination": "refundDestination",
  });
});

/** @internal */
export type CallData$Outbound = {
  deadline: string;
  fee_amount: string;
  id: string;
  operator: string;
  prefix: string;
  recipient: string;
  recipient_amount: string;
  recipient_currency: string;
  refund_destination: string;
  signature: string;
};

/** @internal */
export const CallData$outboundSchema: z.ZodType<
  CallData$Outbound,
  z.ZodTypeDef,
  CallData
> = z.object({
  deadline: z.string(),
  feeAmount: z.string(),
  id: z.string(),
  operator: z.string(),
  prefix: z.string(),
  recipient: z.string(),
  recipientAmount: z.string(),
  recipientCurrency: z.string(),
  refundDestination: z.string(),
  signature: z.string(),
}).transform((v) => {
  return remap$(v, {
    feeAmount: "fee_amount",
    recipientAmount: "recipient_amount",
    recipientCurrency: "recipient_currency",
    refundDestination: "refund_destination",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CallData$ {
  /** @deprecated use `CallData$inboundSchema` instead. */
  export const inboundSchema = CallData$inboundSchema;
  /** @deprecated use `CallData$outboundSchema` instead. */
  export const outboundSchema = CallData$outboundSchema;
  /** @deprecated use `CallData$Outbound` instead. */
  export type Outbound = CallData$Outbound;
}

export function callDataToJSON(callData: CallData): string {
  return JSON.stringify(CallData$outboundSchema.parse(callData));
}

export function callDataFromJSON(
  jsonString: string,
): SafeParseResult<CallData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CallData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CallData' from JSON`,
  );
}

/** @internal */
export const Metadata$inboundSchema: z.ZodType<
  Metadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  chain_id: z.number(),
  contract_address: z.string(),
  sender: z.string(),
}).transform((v) => {
  return remap$(v, {
    "chain_id": "chainId",
    "contract_address": "contractAddress",
  });
});

/** @internal */
export type Metadata$Outbound = {
  chain_id: number;
  contract_address: string;
  sender: string;
};

/** @internal */
export const Metadata$outboundSchema: z.ZodType<
  Metadata$Outbound,
  z.ZodTypeDef,
  Metadata
> = z.object({
  chainId: z.number(),
  contractAddress: z.string(),
  sender: z.string(),
}).transform((v) => {
  return remap$(v, {
    chainId: "chain_id",
    contractAddress: "contract_address",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Metadata$ {
  /** @deprecated use `Metadata$inboundSchema` instead. */
  export const inboundSchema = Metadata$inboundSchema;
  /** @deprecated use `Metadata$outboundSchema` instead. */
  export const outboundSchema = Metadata$outboundSchema;
  /** @deprecated use `Metadata$Outbound` instead. */
  export type Outbound = Metadata$Outbound;
}

export function metadataToJSON(metadata: Metadata): string {
  return JSON.stringify(Metadata$outboundSchema.parse(metadata));
}

export function metadataFromJSON(
  jsonString: string,
): SafeParseResult<Metadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Metadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Metadata' from JSON`,
  );
}

/** @internal */
export const TransferIntent$inboundSchema: z.ZodType<
  TransferIntent,
  z.ZodTypeDef,
  unknown
> = z.object({
  call_data: z.lazy(() => CallData$inboundSchema),
  metadata: z.lazy(() => Metadata$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "call_data": "callData",
  });
});

/** @internal */
export type TransferIntent$Outbound = {
  call_data: CallData$Outbound;
  metadata: Metadata$Outbound;
};

/** @internal */
export const TransferIntent$outboundSchema: z.ZodType<
  TransferIntent$Outbound,
  z.ZodTypeDef,
  TransferIntent
> = z.object({
  callData: z.lazy(() => CallData$outboundSchema),
  metadata: z.lazy(() => Metadata$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    callData: "call_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransferIntent$ {
  /** @deprecated use `TransferIntent$inboundSchema` instead. */
  export const inboundSchema = TransferIntent$inboundSchema;
  /** @deprecated use `TransferIntent$outboundSchema` instead. */
  export const outboundSchema = TransferIntent$outboundSchema;
  /** @deprecated use `TransferIntent$Outbound` instead. */
  export type Outbound = TransferIntent$Outbound;
}

export function transferIntentToJSON(transferIntent: TransferIntent): string {
  return JSON.stringify(TransferIntent$outboundSchema.parse(transferIntent));
}

export function transferIntentFromJSON(
  jsonString: string,
): SafeParseResult<TransferIntent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransferIntent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransferIntent' from JSON`,
  );
}

/** @internal */
export const Web3Data$inboundSchema: z.ZodType<
  Web3Data,
  z.ZodTypeDef,
  unknown
> = z.object({
  transfer_intent: z.lazy(() => TransferIntent$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "transfer_intent": "transferIntent",
  });
});

/** @internal */
export type Web3Data$Outbound = {
  transfer_intent: TransferIntent$Outbound;
};

/** @internal */
export const Web3Data$outboundSchema: z.ZodType<
  Web3Data$Outbound,
  z.ZodTypeDef,
  Web3Data
> = z.object({
  transferIntent: z.lazy(() => TransferIntent$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    transferIntent: "transfer_intent",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Web3Data$ {
  /** @deprecated use `Web3Data$inboundSchema` instead. */
  export const inboundSchema = Web3Data$inboundSchema;
  /** @deprecated use `Web3Data$outboundSchema` instead. */
  export const outboundSchema = Web3Data$outboundSchema;
  /** @deprecated use `Web3Data$Outbound` instead. */
  export type Outbound = Web3Data$Outbound;
}

export function web3DataToJSON(web3Data: Web3Data): string {
  return JSON.stringify(Web3Data$outboundSchema.parse(web3Data));
}

export function web3DataFromJSON(
  jsonString: string,
): SafeParseResult<Web3Data, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Web3Data$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Web3Data' from JSON`,
  );
}

/** @internal */
export const CreateCoinbaseChargeData$inboundSchema: z.ZodType<
  CreateCoinbaseChargeData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  created_at: z.string(),
  expires_at: z.string(),
  web3_data: z.lazy(() => Web3Data$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "expires_at": "expiresAt",
    "web3_data": "web3Data",
  });
});

/** @internal */
export type CreateCoinbaseChargeData$Outbound = {
  id: string;
  created_at: string;
  expires_at: string;
  web3_data: Web3Data$Outbound;
};

/** @internal */
export const CreateCoinbaseChargeData$outboundSchema: z.ZodType<
  CreateCoinbaseChargeData$Outbound,
  z.ZodTypeDef,
  CreateCoinbaseChargeData
> = z.object({
  id: z.string(),
  createdAt: z.string(),
  expiresAt: z.string(),
  web3Data: z.lazy(() => Web3Data$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    expiresAt: "expires_at",
    web3Data: "web3_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCoinbaseChargeData$ {
  /** @deprecated use `CreateCoinbaseChargeData$inboundSchema` instead. */
  export const inboundSchema = CreateCoinbaseChargeData$inboundSchema;
  /** @deprecated use `CreateCoinbaseChargeData$outboundSchema` instead. */
  export const outboundSchema = CreateCoinbaseChargeData$outboundSchema;
  /** @deprecated use `CreateCoinbaseChargeData$Outbound` instead. */
  export type Outbound = CreateCoinbaseChargeData$Outbound;
}

export function createCoinbaseChargeDataToJSON(
  createCoinbaseChargeData: CreateCoinbaseChargeData,
): string {
  return JSON.stringify(
    CreateCoinbaseChargeData$outboundSchema.parse(createCoinbaseChargeData),
  );
}

export function createCoinbaseChargeDataFromJSON(
  jsonString: string,
): SafeParseResult<CreateCoinbaseChargeData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCoinbaseChargeData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCoinbaseChargeData' from JSON`,
  );
}

/** @internal */
export const CreateCoinbaseChargeResponseBody$inboundSchema: z.ZodType<
  CreateCoinbaseChargeResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => CreateCoinbaseChargeData$inboundSchema),
});

/** @internal */
export type CreateCoinbaseChargeResponseBody$Outbound = {
  data: CreateCoinbaseChargeData$Outbound;
};

/** @internal */
export const CreateCoinbaseChargeResponseBody$outboundSchema: z.ZodType<
  CreateCoinbaseChargeResponseBody$Outbound,
  z.ZodTypeDef,
  CreateCoinbaseChargeResponseBody
> = z.object({
  data: z.lazy(() => CreateCoinbaseChargeData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCoinbaseChargeResponseBody$ {
  /** @deprecated use `CreateCoinbaseChargeResponseBody$inboundSchema` instead. */
  export const inboundSchema = CreateCoinbaseChargeResponseBody$inboundSchema;
  /** @deprecated use `CreateCoinbaseChargeResponseBody$outboundSchema` instead. */
  export const outboundSchema = CreateCoinbaseChargeResponseBody$outboundSchema;
  /** @deprecated use `CreateCoinbaseChargeResponseBody$Outbound` instead. */
  export type Outbound = CreateCoinbaseChargeResponseBody$Outbound;
}

export function createCoinbaseChargeResponseBodyToJSON(
  createCoinbaseChargeResponseBody: CreateCoinbaseChargeResponseBody,
): string {
  return JSON.stringify(
    CreateCoinbaseChargeResponseBody$outboundSchema.parse(
      createCoinbaseChargeResponseBody,
    ),
  );
}

export function createCoinbaseChargeResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateCoinbaseChargeResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCoinbaseChargeResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCoinbaseChargeResponseBody' from JSON`,
  );
}

/** @internal */
export const CreateCoinbaseChargeResponse$inboundSchema: z.ZodType<
  CreateCoinbaseChargeResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateCoinbaseChargeResponseBody$inboundSchema),
  models.ErrorResponse$inboundSchema,
]);

/** @internal */
export type CreateCoinbaseChargeResponse$Outbound =
  | CreateCoinbaseChargeResponseBody$Outbound
  | models.ErrorResponse$Outbound;

/** @internal */
export const CreateCoinbaseChargeResponse$outboundSchema: z.ZodType<
  CreateCoinbaseChargeResponse$Outbound,
  z.ZodTypeDef,
  CreateCoinbaseChargeResponse
> = z.union([
  z.lazy(() => CreateCoinbaseChargeResponseBody$outboundSchema),
  models.ErrorResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCoinbaseChargeResponse$ {
  /** @deprecated use `CreateCoinbaseChargeResponse$inboundSchema` instead. */
  export const inboundSchema = CreateCoinbaseChargeResponse$inboundSchema;
  /** @deprecated use `CreateCoinbaseChargeResponse$outboundSchema` instead. */
  export const outboundSchema = CreateCoinbaseChargeResponse$outboundSchema;
  /** @deprecated use `CreateCoinbaseChargeResponse$Outbound` instead. */
  export type Outbound = CreateCoinbaseChargeResponse$Outbound;
}

export function createCoinbaseChargeResponseToJSON(
  createCoinbaseChargeResponse: CreateCoinbaseChargeResponse,
): string {
  return JSON.stringify(
    CreateCoinbaseChargeResponse$outboundSchema.parse(
      createCoinbaseChargeResponse,
    ),
  );
}

export function createCoinbaseChargeResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateCoinbaseChargeResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCoinbaseChargeResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCoinbaseChargeResponse' from JSON`,
  );
}
