/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { EventStream } from "../../lib/event-streams.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type SendChatCompletionRequestResponse =
  | models.ChatResponse
  | EventStream<models.ChatStreamingResponseChunk>;

/** @internal */
export const SendChatCompletionRequestResponse$inboundSchema: z.ZodType<
  SendChatCompletionRequestResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.ChatResponse$inboundSchema,
  z
    .instanceof(ReadableStream<Uint8Array>)
    .transform(stream => {
      return new EventStream(stream, rawEvent => {
        if (rawEvent.data === "[DONE]") return { done: true };
        return {
          value: models.ChatStreamingResponseChunk$inboundSchema.parse(
            rawEvent,
          ),
        };
      });
    }),
]);

/** @internal */
export type SendChatCompletionRequestResponse$Outbound =
  | models.ChatResponse$Outbound
  | never;

/** @internal */
export const SendChatCompletionRequestResponse$outboundSchema: z.ZodType<
  SendChatCompletionRequestResponse$Outbound,
  z.ZodTypeDef,
  SendChatCompletionRequestResponse
> = z.union([models.ChatResponse$outboundSchema, z.never()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SendChatCompletionRequestResponse$ {
  /** @deprecated use `SendChatCompletionRequestResponse$inboundSchema` instead. */
  export const inboundSchema = SendChatCompletionRequestResponse$inboundSchema;
  /** @deprecated use `SendChatCompletionRequestResponse$outboundSchema` instead. */
  export const outboundSchema =
    SendChatCompletionRequestResponse$outboundSchema;
  /** @deprecated use `SendChatCompletionRequestResponse$Outbound` instead. */
  export type Outbound = SendChatCompletionRequestResponse$Outbound;
}

export function sendChatCompletionRequestResponseToJSON(
  sendChatCompletionRequestResponse: SendChatCompletionRequestResponse,
): string {
  return JSON.stringify(
    SendChatCompletionRequestResponse$outboundSchema.parse(
      sendChatCompletionRequestResponse,
    ),
  );
}

export function sendChatCompletionRequestResponseFromJSON(
  jsonString: string,
): SafeParseResult<SendChatCompletionRequestResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SendChatCompletionRequestResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SendChatCompletionRequestResponse' from JSON`,
  );
}
