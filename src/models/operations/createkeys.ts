/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

/**
 * Type of limit reset for the API key (daily, weekly, monthly, or null for no reset). Resets happen automatically at midnight UTC, and weeks are Monday through Sunday.
 */
export const CreateKeysLimitReset = {
  Daily: "daily",
  Weekly: "weekly",
  Monthly: "monthly",
} as const;
/**
 * Type of limit reset for the API key (daily, weekly, monthly, or null for no reset). Resets happen automatically at midnight UTC, and weeks are Monday through Sunday.
 */
export type CreateKeysLimitReset = OpenEnum<typeof CreateKeysLimitReset>;

export type CreateKeysRequest = {
  /**
   * Name for the new API key
   */
  name: string;
  /**
   * Optional spending limit for the API key in USD
   */
  limit?: number | null | undefined;
  /**
   * Type of limit reset for the API key (daily, weekly, monthly, or null for no reset). Resets happen automatically at midnight UTC, and weeks are Monday through Sunday.
   */
  limitReset?: CreateKeysLimitReset | null | undefined;
  /**
   * Whether to include BYOK usage in the limit
   */
  includeByokInLimit?: boolean | undefined;
};

/**
 * The created API key information
 */
export type CreateKeysData = {
  /**
   * Unique hash identifier for the API key
   */
  hash: string;
  /**
   * Name of the API key
   */
  name: string;
  /**
   * Human-readable label for the API key
   */
  label: string;
  /**
   * Whether the API key is disabled
   */
  disabled: boolean;
  /**
   * Spending limit for the API key in USD
   */
  limit: number | null;
  /**
   * Remaining spending limit in USD
   */
  limitRemaining: number | null;
  /**
   * Type of limit reset for the API key
   */
  limitReset: string | null;
  /**
   * Whether to include external BYOK usage in the credit limit
   */
  includeByokInLimit: boolean;
  /**
   * Total OpenRouter credit usage (in USD) for the API key
   */
  usage: number;
  /**
   * OpenRouter credit usage (in USD) for the current UTC day
   */
  usageDaily: number;
  /**
   * OpenRouter credit usage (in USD) for the current UTC week (Monday-Sunday)
   */
  usageWeekly: number;
  /**
   * OpenRouter credit usage (in USD) for the current UTC month
   */
  usageMonthly: number;
  /**
   * Total external BYOK usage (in USD) for the API key
   */
  byokUsage: number;
  /**
   * External BYOK usage (in USD) for the current UTC day
   */
  byokUsageDaily: number;
  /**
   * External BYOK usage (in USD) for the current UTC week (Monday-Sunday)
   */
  byokUsageWeekly: number;
  /**
   * External BYOK usage (in USD) for current UTC month
   */
  byokUsageMonthly: number;
  /**
   * ISO 8601 timestamp of when the API key was created
   */
  createdAt: string;
  /**
   * ISO 8601 timestamp of when the API key was last updated
   */
  updatedAt: string | null;
};

/**
 * API key created successfully
 */
export type CreateKeysResponseBody = {
  /**
   * The created API key information
   */
  data: CreateKeysData;
  /**
   * The actual API key string (only shown once)
   */
  key: string;
};

export type CreateKeysResponse = CreateKeysResponseBody | models.ErrorResponse;

/** @internal */
export const CreateKeysLimitReset$inboundSchema: z.ZodType<
  CreateKeysLimitReset,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(CreateKeysLimitReset),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const CreateKeysLimitReset$outboundSchema: z.ZodType<
  CreateKeysLimitReset,
  z.ZodTypeDef,
  CreateKeysLimitReset
> = z.union([
  z.nativeEnum(CreateKeysLimitReset),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateKeysLimitReset$ {
  /** @deprecated use `CreateKeysLimitReset$inboundSchema` instead. */
  export const inboundSchema = CreateKeysLimitReset$inboundSchema;
  /** @deprecated use `CreateKeysLimitReset$outboundSchema` instead. */
  export const outboundSchema = CreateKeysLimitReset$outboundSchema;
}

/** @internal */
export const CreateKeysRequest$inboundSchema: z.ZodType<
  CreateKeysRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  limit: z.nullable(z.number()).optional(),
  limit_reset: z.nullable(CreateKeysLimitReset$inboundSchema).optional(),
  include_byok_in_limit: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "limit_reset": "limitReset",
    "include_byok_in_limit": "includeByokInLimit",
  });
});

/** @internal */
export type CreateKeysRequest$Outbound = {
  name: string;
  limit?: number | null | undefined;
  limit_reset?: string | null | undefined;
  include_byok_in_limit?: boolean | undefined;
};

/** @internal */
export const CreateKeysRequest$outboundSchema: z.ZodType<
  CreateKeysRequest$Outbound,
  z.ZodTypeDef,
  CreateKeysRequest
> = z.object({
  name: z.string(),
  limit: z.nullable(z.number()).optional(),
  limitReset: z.nullable(CreateKeysLimitReset$outboundSchema).optional(),
  includeByokInLimit: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    limitReset: "limit_reset",
    includeByokInLimit: "include_byok_in_limit",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateKeysRequest$ {
  /** @deprecated use `CreateKeysRequest$inboundSchema` instead. */
  export const inboundSchema = CreateKeysRequest$inboundSchema;
  /** @deprecated use `CreateKeysRequest$outboundSchema` instead. */
  export const outboundSchema = CreateKeysRequest$outboundSchema;
  /** @deprecated use `CreateKeysRequest$Outbound` instead. */
  export type Outbound = CreateKeysRequest$Outbound;
}

export function createKeysRequestToJSON(
  createKeysRequest: CreateKeysRequest,
): string {
  return JSON.stringify(
    CreateKeysRequest$outboundSchema.parse(createKeysRequest),
  );
}

export function createKeysRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateKeysRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateKeysRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateKeysRequest' from JSON`,
  );
}

/** @internal */
export const CreateKeysData$inboundSchema: z.ZodType<
  CreateKeysData,
  z.ZodTypeDef,
  unknown
> = z.object({
  hash: z.string(),
  name: z.string(),
  label: z.string(),
  disabled: z.boolean(),
  limit: z.nullable(z.number()),
  limit_remaining: z.nullable(z.number()),
  limit_reset: z.nullable(z.string()),
  include_byok_in_limit: z.boolean(),
  usage: z.number(),
  usage_daily: z.number(),
  usage_weekly: z.number(),
  usage_monthly: z.number(),
  byok_usage: z.number(),
  byok_usage_daily: z.number(),
  byok_usage_weekly: z.number(),
  byok_usage_monthly: z.number(),
  created_at: z.string(),
  updated_at: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    "limit_remaining": "limitRemaining",
    "limit_reset": "limitReset",
    "include_byok_in_limit": "includeByokInLimit",
    "usage_daily": "usageDaily",
    "usage_weekly": "usageWeekly",
    "usage_monthly": "usageMonthly",
    "byok_usage": "byokUsage",
    "byok_usage_daily": "byokUsageDaily",
    "byok_usage_weekly": "byokUsageWeekly",
    "byok_usage_monthly": "byokUsageMonthly",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type CreateKeysData$Outbound = {
  hash: string;
  name: string;
  label: string;
  disabled: boolean;
  limit: number | null;
  limit_remaining: number | null;
  limit_reset: string | null;
  include_byok_in_limit: boolean;
  usage: number;
  usage_daily: number;
  usage_weekly: number;
  usage_monthly: number;
  byok_usage: number;
  byok_usage_daily: number;
  byok_usage_weekly: number;
  byok_usage_monthly: number;
  created_at: string;
  updated_at: string | null;
};

/** @internal */
export const CreateKeysData$outboundSchema: z.ZodType<
  CreateKeysData$Outbound,
  z.ZodTypeDef,
  CreateKeysData
> = z.object({
  hash: z.string(),
  name: z.string(),
  label: z.string(),
  disabled: z.boolean(),
  limit: z.nullable(z.number()),
  limitRemaining: z.nullable(z.number()),
  limitReset: z.nullable(z.string()),
  includeByokInLimit: z.boolean(),
  usage: z.number(),
  usageDaily: z.number(),
  usageWeekly: z.number(),
  usageMonthly: z.number(),
  byokUsage: z.number(),
  byokUsageDaily: z.number(),
  byokUsageWeekly: z.number(),
  byokUsageMonthly: z.number(),
  createdAt: z.string(),
  updatedAt: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    limitRemaining: "limit_remaining",
    limitReset: "limit_reset",
    includeByokInLimit: "include_byok_in_limit",
    usageDaily: "usage_daily",
    usageWeekly: "usage_weekly",
    usageMonthly: "usage_monthly",
    byokUsage: "byok_usage",
    byokUsageDaily: "byok_usage_daily",
    byokUsageWeekly: "byok_usage_weekly",
    byokUsageMonthly: "byok_usage_monthly",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateKeysData$ {
  /** @deprecated use `CreateKeysData$inboundSchema` instead. */
  export const inboundSchema = CreateKeysData$inboundSchema;
  /** @deprecated use `CreateKeysData$outboundSchema` instead. */
  export const outboundSchema = CreateKeysData$outboundSchema;
  /** @deprecated use `CreateKeysData$Outbound` instead. */
  export type Outbound = CreateKeysData$Outbound;
}

export function createKeysDataToJSON(createKeysData: CreateKeysData): string {
  return JSON.stringify(CreateKeysData$outboundSchema.parse(createKeysData));
}

export function createKeysDataFromJSON(
  jsonString: string,
): SafeParseResult<CreateKeysData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateKeysData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateKeysData' from JSON`,
  );
}

/** @internal */
export const CreateKeysResponseBody$inboundSchema: z.ZodType<
  CreateKeysResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => CreateKeysData$inboundSchema),
  key: z.string(),
});

/** @internal */
export type CreateKeysResponseBody$Outbound = {
  data: CreateKeysData$Outbound;
  key: string;
};

/** @internal */
export const CreateKeysResponseBody$outboundSchema: z.ZodType<
  CreateKeysResponseBody$Outbound,
  z.ZodTypeDef,
  CreateKeysResponseBody
> = z.object({
  data: z.lazy(() => CreateKeysData$outboundSchema),
  key: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateKeysResponseBody$ {
  /** @deprecated use `CreateKeysResponseBody$inboundSchema` instead. */
  export const inboundSchema = CreateKeysResponseBody$inboundSchema;
  /** @deprecated use `CreateKeysResponseBody$outboundSchema` instead. */
  export const outboundSchema = CreateKeysResponseBody$outboundSchema;
  /** @deprecated use `CreateKeysResponseBody$Outbound` instead. */
  export type Outbound = CreateKeysResponseBody$Outbound;
}

export function createKeysResponseBodyToJSON(
  createKeysResponseBody: CreateKeysResponseBody,
): string {
  return JSON.stringify(
    CreateKeysResponseBody$outboundSchema.parse(createKeysResponseBody),
  );
}

export function createKeysResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateKeysResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateKeysResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateKeysResponseBody' from JSON`,
  );
}

/** @internal */
export const CreateKeysResponse$inboundSchema: z.ZodType<
  CreateKeysResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateKeysResponseBody$inboundSchema),
  models.ErrorResponse$inboundSchema,
]);

/** @internal */
export type CreateKeysResponse$Outbound =
  | CreateKeysResponseBody$Outbound
  | models.ErrorResponse$Outbound;

/** @internal */
export const CreateKeysResponse$outboundSchema: z.ZodType<
  CreateKeysResponse$Outbound,
  z.ZodTypeDef,
  CreateKeysResponse
> = z.union([
  z.lazy(() => CreateKeysResponseBody$outboundSchema),
  models.ErrorResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateKeysResponse$ {
  /** @deprecated use `CreateKeysResponse$inboundSchema` instead. */
  export const inboundSchema = CreateKeysResponse$inboundSchema;
  /** @deprecated use `CreateKeysResponse$outboundSchema` instead. */
  export const outboundSchema = CreateKeysResponse$outboundSchema;
  /** @deprecated use `CreateKeysResponse$Outbound` instead. */
  export type Outbound = CreateKeysResponse$Outbound;
}

export function createKeysResponseToJSON(
  createKeysResponse: CreateKeysResponse,
): string {
  return JSON.stringify(
    CreateKeysResponse$outboundSchema.parse(createKeysResponse),
  );
}

export function createKeysResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateKeysResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateKeysResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateKeysResponse' from JSON`,
  );
}
