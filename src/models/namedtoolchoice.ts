/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type NamedToolChoiceFunction = {
  name: string;
};

export type NamedToolChoice = {
  type: "function";
  function: NamedToolChoiceFunction;
};

/** @internal */
export const NamedToolChoiceFunction$inboundSchema: z.ZodType<
  NamedToolChoiceFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
});

/** @internal */
export type NamedToolChoiceFunction$Outbound = {
  name: string;
};

/** @internal */
export const NamedToolChoiceFunction$outboundSchema: z.ZodType<
  NamedToolChoiceFunction$Outbound,
  z.ZodTypeDef,
  NamedToolChoiceFunction
> = z.object({
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NamedToolChoiceFunction$ {
  /** @deprecated use `NamedToolChoiceFunction$inboundSchema` instead. */
  export const inboundSchema = NamedToolChoiceFunction$inboundSchema;
  /** @deprecated use `NamedToolChoiceFunction$outboundSchema` instead. */
  export const outboundSchema = NamedToolChoiceFunction$outboundSchema;
  /** @deprecated use `NamedToolChoiceFunction$Outbound` instead. */
  export type Outbound = NamedToolChoiceFunction$Outbound;
}

export function namedToolChoiceFunctionToJSON(
  namedToolChoiceFunction: NamedToolChoiceFunction,
): string {
  return JSON.stringify(
    NamedToolChoiceFunction$outboundSchema.parse(namedToolChoiceFunction),
  );
}

export function namedToolChoiceFunctionFromJSON(
  jsonString: string,
): SafeParseResult<NamedToolChoiceFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NamedToolChoiceFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NamedToolChoiceFunction' from JSON`,
  );
}

/** @internal */
export const NamedToolChoice$inboundSchema: z.ZodType<
  NamedToolChoice,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal("function"),
  function: z.lazy(() => NamedToolChoiceFunction$inboundSchema),
});

/** @internal */
export type NamedToolChoice$Outbound = {
  type: "function";
  function: NamedToolChoiceFunction$Outbound;
};

/** @internal */
export const NamedToolChoice$outboundSchema: z.ZodType<
  NamedToolChoice$Outbound,
  z.ZodTypeDef,
  NamedToolChoice
> = z.object({
  type: z.literal("function"),
  function: z.lazy(() => NamedToolChoiceFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NamedToolChoice$ {
  /** @deprecated use `NamedToolChoice$inboundSchema` instead. */
  export const inboundSchema = NamedToolChoice$inboundSchema;
  /** @deprecated use `NamedToolChoice$outboundSchema` instead. */
  export const outboundSchema = NamedToolChoice$outboundSchema;
  /** @deprecated use `NamedToolChoice$Outbound` instead. */
  export type Outbound = NamedToolChoice$Outbound;
}

export function namedToolChoiceToJSON(
  namedToolChoice: NamedToolChoice,
): string {
  return JSON.stringify(NamedToolChoice$outboundSchema.parse(namedToolChoice));
}

export function namedToolChoiceFromJSON(
  jsonString: string,
): SafeParseResult<NamedToolChoice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NamedToolChoice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NamedToolChoice' from JSON`,
  );
}
