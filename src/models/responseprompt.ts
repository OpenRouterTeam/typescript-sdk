/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ResponseInputContent,
  ResponseInputContent$inboundSchema,
  ResponseInputContent$Outbound,
  ResponseInputContent$outboundSchema,
} from "./responseinputcontent.js";

/**
 * Prompt configuration with variables
 */
export type ResponsePrompt = {
  id: string;
  variables?: { [k: string]: ResponseInputContent } | null | undefined;
};

/** @internal */
export const ResponsePrompt$inboundSchema: z.ZodType<
  ResponsePrompt,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  variables: z.nullable(z.record(ResponseInputContent$inboundSchema))
    .optional(),
});

/** @internal */
export type ResponsePrompt$Outbound = {
  id: string;
  variables?: { [k: string]: ResponseInputContent$Outbound } | null | undefined;
};

/** @internal */
export const ResponsePrompt$outboundSchema: z.ZodType<
  ResponsePrompt$Outbound,
  z.ZodTypeDef,
  ResponsePrompt
> = z.object({
  id: z.string(),
  variables: z.nullable(z.record(ResponseInputContent$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsePrompt$ {
  /** @deprecated use `ResponsePrompt$inboundSchema` instead. */
  export const inboundSchema = ResponsePrompt$inboundSchema;
  /** @deprecated use `ResponsePrompt$outboundSchema` instead. */
  export const outboundSchema = ResponsePrompt$outboundSchema;
  /** @deprecated use `ResponsePrompt$Outbound` instead. */
  export type Outbound = ResponsePrompt$Outbound;
}

export function responsePromptToJSON(responsePrompt: ResponsePrompt): string {
  return JSON.stringify(ResponsePrompt$outboundSchema.parse(responsePrompt));
}

export function responsePromptFromJSON(
  jsonString: string,
): SafeParseResult<ResponsePrompt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponsePrompt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponsePrompt' from JSON`,
  );
}
