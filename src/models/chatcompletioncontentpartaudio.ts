/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const Format = {
  Wav: "wav",
  Mp3: "mp3",
  Flac: "flac",
  M4a: "m4a",
  Ogg: "ogg",
  Pcm16: "pcm16",
  Pcm24: "pcm24",
} as const;
export type Format = ClosedEnum<typeof Format>;

export type InputAudio = {
  data: string;
  format: Format;
};

export type ChatCompletionContentPartAudio = {
  type: "input_audio";
  inputAudio: InputAudio;
};

/** @internal */
export const Format$inboundSchema: z.ZodNativeEnum<typeof Format> = z
  .nativeEnum(Format);

/** @internal */
export const Format$outboundSchema: z.ZodNativeEnum<typeof Format> =
  Format$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Format$ {
  /** @deprecated use `Format$inboundSchema` instead. */
  export const inboundSchema = Format$inboundSchema;
  /** @deprecated use `Format$outboundSchema` instead. */
  export const outboundSchema = Format$outboundSchema;
}

/** @internal */
export const InputAudio$inboundSchema: z.ZodType<
  InputAudio,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.string(),
  format: Format$inboundSchema,
});

/** @internal */
export type InputAudio$Outbound = {
  data: string;
  format: string;
};

/** @internal */
export const InputAudio$outboundSchema: z.ZodType<
  InputAudio$Outbound,
  z.ZodTypeDef,
  InputAudio
> = z.object({
  data: z.string(),
  format: Format$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputAudio$ {
  /** @deprecated use `InputAudio$inboundSchema` instead. */
  export const inboundSchema = InputAudio$inboundSchema;
  /** @deprecated use `InputAudio$outboundSchema` instead. */
  export const outboundSchema = InputAudio$outboundSchema;
  /** @deprecated use `InputAudio$Outbound` instead. */
  export type Outbound = InputAudio$Outbound;
}

export function inputAudioToJSON(inputAudio: InputAudio): string {
  return JSON.stringify(InputAudio$outboundSchema.parse(inputAudio));
}

export function inputAudioFromJSON(
  jsonString: string,
): SafeParseResult<InputAudio, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputAudio$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputAudio' from JSON`,
  );
}

/** @internal */
export const ChatCompletionContentPartAudio$inboundSchema: z.ZodType<
  ChatCompletionContentPartAudio,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal("input_audio"),
  input_audio: z.lazy(() => InputAudio$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "input_audio": "inputAudio",
  });
});

/** @internal */
export type ChatCompletionContentPartAudio$Outbound = {
  type: "input_audio";
  input_audio: InputAudio$Outbound;
};

/** @internal */
export const ChatCompletionContentPartAudio$outboundSchema: z.ZodType<
  ChatCompletionContentPartAudio$Outbound,
  z.ZodTypeDef,
  ChatCompletionContentPartAudio
> = z.object({
  type: z.literal("input_audio"),
  inputAudio: z.lazy(() => InputAudio$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    inputAudio: "input_audio",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionContentPartAudio$ {
  /** @deprecated use `ChatCompletionContentPartAudio$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionContentPartAudio$inboundSchema;
  /** @deprecated use `ChatCompletionContentPartAudio$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionContentPartAudio$outboundSchema;
  /** @deprecated use `ChatCompletionContentPartAudio$Outbound` instead. */
  export type Outbound = ChatCompletionContentPartAudio$Outbound;
}

export function chatCompletionContentPartAudioToJSON(
  chatCompletionContentPartAudio: ChatCompletionContentPartAudio,
): string {
  return JSON.stringify(
    ChatCompletionContentPartAudio$outboundSchema.parse(
      chatCompletionContentPartAudio,
    ),
  );
}

export function chatCompletionContentPartAudioFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionContentPartAudio, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionContentPartAudio$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionContentPartAudio' from JSON`,
  );
}
