/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  CompletionChoice,
  CompletionChoice$inboundSchema,
  CompletionChoice$Outbound,
  CompletionChoice$outboundSchema,
} from "./completionchoice.js";
import {
  CompletionUsage,
  CompletionUsage$inboundSchema,
  CompletionUsage$Outbound,
  CompletionUsage$outboundSchema,
} from "./completionusage.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type CompletionResponse = {
  id: string;
  object: "text_completion";
  created: number;
  model: string;
  systemFingerprint?: string | undefined;
  choices: Array<CompletionChoice>;
  usage?: CompletionUsage | undefined;
};

/** @internal */
export const CompletionResponse$inboundSchema: z.ZodType<
  CompletionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  object: z.literal("text_completion"),
  created: z.number(),
  model: z.string(),
  system_fingerprint: z.string().optional(),
  choices: z.array(CompletionChoice$inboundSchema),
  usage: CompletionUsage$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "system_fingerprint": "systemFingerprint",
  });
});

/** @internal */
export type CompletionResponse$Outbound = {
  id: string;
  object: "text_completion";
  created: number;
  model: string;
  system_fingerprint?: string | undefined;
  choices: Array<CompletionChoice$Outbound>;
  usage?: CompletionUsage$Outbound | undefined;
};

/** @internal */
export const CompletionResponse$outboundSchema: z.ZodType<
  CompletionResponse$Outbound,
  z.ZodTypeDef,
  CompletionResponse
> = z.object({
  id: z.string(),
  object: z.literal("text_completion"),
  created: z.number(),
  model: z.string(),
  systemFingerprint: z.string().optional(),
  choices: z.array(CompletionChoice$outboundSchema),
  usage: CompletionUsage$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    systemFingerprint: "system_fingerprint",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompletionResponse$ {
  /** @deprecated use `CompletionResponse$inboundSchema` instead. */
  export const inboundSchema = CompletionResponse$inboundSchema;
  /** @deprecated use `CompletionResponse$outboundSchema` instead. */
  export const outboundSchema = CompletionResponse$outboundSchema;
  /** @deprecated use `CompletionResponse$Outbound` instead. */
  export type Outbound = CompletionResponse$Outbound;
}

export function completionResponseToJSON(
  completionResponse: CompletionResponse,
): string {
  return JSON.stringify(
    CompletionResponse$outboundSchema.parse(completionResponse),
  );
}

export function completionResponseFromJSON(
  jsonString: string,
): SafeParseResult<CompletionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompletionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompletionResponse' from JSON`,
  );
}
