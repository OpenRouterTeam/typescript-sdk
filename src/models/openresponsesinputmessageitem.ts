/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v4";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ResponseInputFile,
  ResponseInputFile$inboundSchema,
  ResponseInputFile$Outbound,
  ResponseInputFile$outboundSchema,
} from "./responseinputfile.js";
import {
  ResponseInputImage,
  ResponseInputImage$inboundSchema,
  ResponseInputImage$Outbound,
  ResponseInputImage$outboundSchema,
} from "./responseinputimage.js";
import {
  ResponseInputText,
  ResponseInputText$inboundSchema,
  ResponseInputText$Outbound,
  ResponseInputText$outboundSchema,
} from "./responseinputtext.js";

export const OpenResponsesInputMessageItemType = {
  Message: "message",
} as const;
export type OpenResponsesInputMessageItemType = ClosedEnum<
  typeof OpenResponsesInputMessageItemType
>;

export const OpenResponsesInputMessageItemRoleDeveloper = {
  Developer: "developer",
} as const;
export type OpenResponsesInputMessageItemRoleDeveloper = ClosedEnum<
  typeof OpenResponsesInputMessageItemRoleDeveloper
>;

export const OpenResponsesInputMessageItemRoleSystem = {
  System: "system",
} as const;
export type OpenResponsesInputMessageItemRoleSystem = ClosedEnum<
  typeof OpenResponsesInputMessageItemRoleSystem
>;

export const OpenResponsesInputMessageItemRoleUser = {
  User: "user",
} as const;
export type OpenResponsesInputMessageItemRoleUser = ClosedEnum<
  typeof OpenResponsesInputMessageItemRoleUser
>;

export type OpenResponsesInputMessageItemRoleUnion =
  | OpenResponsesInputMessageItemRoleUser
  | OpenResponsesInputMessageItemRoleSystem
  | OpenResponsesInputMessageItemRoleDeveloper;

export type OpenResponsesInputMessageItemContent =
  | (ResponseInputText & { type: "input_text" })
  | (ResponseInputImage & { type: "input_image" })
  | (ResponseInputFile & { type: "input_file" });

export type OpenResponsesInputMessageItem = {
  id?: string | undefined;
  type?: OpenResponsesInputMessageItemType | undefined;
  role:
    | OpenResponsesInputMessageItemRoleUser
    | OpenResponsesInputMessageItemRoleSystem
    | OpenResponsesInputMessageItemRoleDeveloper;
  content: Array<
    | (ResponseInputText & { type: "input_text" })
    | (ResponseInputImage & { type: "input_image" })
    | (ResponseInputFile & { type: "input_file" })
  >;
};

/** @internal */
export const OpenResponsesInputMessageItemType$inboundSchema: z.ZodEnum<
  typeof OpenResponsesInputMessageItemType
> = z.enum(OpenResponsesInputMessageItemType);

/** @internal */
export const OpenResponsesInputMessageItemType$outboundSchema: z.ZodEnum<
  typeof OpenResponsesInputMessageItemType
> = OpenResponsesInputMessageItemType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesInputMessageItemType$ {
  /** @deprecated use `OpenResponsesInputMessageItemType$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesInputMessageItemType$inboundSchema;
  /** @deprecated use `OpenResponsesInputMessageItemType$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesInputMessageItemType$outboundSchema;
}

/** @internal */
export const OpenResponsesInputMessageItemRoleDeveloper$inboundSchema:
  z.ZodEnum<typeof OpenResponsesInputMessageItemRoleDeveloper> = z.enum(
    OpenResponsesInputMessageItemRoleDeveloper,
  );

/** @internal */
export const OpenResponsesInputMessageItemRoleDeveloper$outboundSchema:
  z.ZodEnum<typeof OpenResponsesInputMessageItemRoleDeveloper> =
    OpenResponsesInputMessageItemRoleDeveloper$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesInputMessageItemRoleDeveloper$ {
  /** @deprecated use `OpenResponsesInputMessageItemRoleDeveloper$inboundSchema` instead. */
  export const inboundSchema =
    OpenResponsesInputMessageItemRoleDeveloper$inboundSchema;
  /** @deprecated use `OpenResponsesInputMessageItemRoleDeveloper$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesInputMessageItemRoleDeveloper$outboundSchema;
}

/** @internal */
export const OpenResponsesInputMessageItemRoleSystem$inboundSchema: z.ZodEnum<
  typeof OpenResponsesInputMessageItemRoleSystem
> = z.enum(OpenResponsesInputMessageItemRoleSystem);

/** @internal */
export const OpenResponsesInputMessageItemRoleSystem$outboundSchema: z.ZodEnum<
  typeof OpenResponsesInputMessageItemRoleSystem
> = OpenResponsesInputMessageItemRoleSystem$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesInputMessageItemRoleSystem$ {
  /** @deprecated use `OpenResponsesInputMessageItemRoleSystem$inboundSchema` instead. */
  export const inboundSchema =
    OpenResponsesInputMessageItemRoleSystem$inboundSchema;
  /** @deprecated use `OpenResponsesInputMessageItemRoleSystem$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesInputMessageItemRoleSystem$outboundSchema;
}

/** @internal */
export const OpenResponsesInputMessageItemRoleUser$inboundSchema: z.ZodEnum<
  typeof OpenResponsesInputMessageItemRoleUser
> = z.enum(OpenResponsesInputMessageItemRoleUser);

/** @internal */
export const OpenResponsesInputMessageItemRoleUser$outboundSchema: z.ZodEnum<
  typeof OpenResponsesInputMessageItemRoleUser
> = OpenResponsesInputMessageItemRoleUser$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesInputMessageItemRoleUser$ {
  /** @deprecated use `OpenResponsesInputMessageItemRoleUser$inboundSchema` instead. */
  export const inboundSchema =
    OpenResponsesInputMessageItemRoleUser$inboundSchema;
  /** @deprecated use `OpenResponsesInputMessageItemRoleUser$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesInputMessageItemRoleUser$outboundSchema;
}

/** @internal */
export const OpenResponsesInputMessageItemRoleUnion$inboundSchema: z.ZodType<
  OpenResponsesInputMessageItemRoleUnion,
  unknown
> = z.union([
  OpenResponsesInputMessageItemRoleUser$inboundSchema,
  OpenResponsesInputMessageItemRoleSystem$inboundSchema,
  OpenResponsesInputMessageItemRoleDeveloper$inboundSchema,
]);

/** @internal */
export type OpenResponsesInputMessageItemRoleUnion$Outbound =
  | string
  | string
  | string;

/** @internal */
export const OpenResponsesInputMessageItemRoleUnion$outboundSchema: z.ZodType<
  OpenResponsesInputMessageItemRoleUnion$Outbound,
  OpenResponsesInputMessageItemRoleUnion
> = z.union([
  OpenResponsesInputMessageItemRoleUser$outboundSchema,
  OpenResponsesInputMessageItemRoleSystem$outboundSchema,
  OpenResponsesInputMessageItemRoleDeveloper$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesInputMessageItemRoleUnion$ {
  /** @deprecated use `OpenResponsesInputMessageItemRoleUnion$inboundSchema` instead. */
  export const inboundSchema =
    OpenResponsesInputMessageItemRoleUnion$inboundSchema;
  /** @deprecated use `OpenResponsesInputMessageItemRoleUnion$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesInputMessageItemRoleUnion$outboundSchema;
  /** @deprecated use `OpenResponsesInputMessageItemRoleUnion$Outbound` instead. */
  export type Outbound = OpenResponsesInputMessageItemRoleUnion$Outbound;
}

export function openResponsesInputMessageItemRoleUnionToJSON(
  openResponsesInputMessageItemRoleUnion:
    OpenResponsesInputMessageItemRoleUnion,
): string {
  return JSON.stringify(
    OpenResponsesInputMessageItemRoleUnion$outboundSchema.parse(
      openResponsesInputMessageItemRoleUnion,
    ),
  );
}

export function openResponsesInputMessageItemRoleUnionFromJSON(
  jsonString: string,
): SafeParseResult<OpenResponsesInputMessageItemRoleUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OpenResponsesInputMessageItemRoleUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenResponsesInputMessageItemRoleUnion' from JSON`,
  );
}

/** @internal */
export const OpenResponsesInputMessageItemContent$inboundSchema: z.ZodType<
  OpenResponsesInputMessageItemContent,
  unknown
> = z.union([
  ResponseInputText$inboundSchema.and(
    z.object({ type: z.literal("input_text") }).transform((v) => ({
      type: v.type,
    })),
  ),
  ResponseInputImage$inboundSchema.and(
    z.object({ type: z.literal("input_image") }).transform((v) => ({
      type: v.type,
    })),
  ),
  ResponseInputFile$inboundSchema.and(
    z.object({ type: z.literal("input_file") }).transform((v) => ({
      type: v.type,
    })),
  ),
]);

/** @internal */
export type OpenResponsesInputMessageItemContent$Outbound =
  | (ResponseInputText$Outbound & { type: "input_text" })
  | (ResponseInputImage$Outbound & { type: "input_image" })
  | (ResponseInputFile$Outbound & { type: "input_file" });

/** @internal */
export const OpenResponsesInputMessageItemContent$outboundSchema: z.ZodType<
  OpenResponsesInputMessageItemContent$Outbound,
  OpenResponsesInputMessageItemContent
> = z.union([
  ResponseInputText$outboundSchema.and(
    z.object({ type: z.literal("input_text") }).transform((v) => ({
      type: v.type,
    })),
  ),
  ResponseInputImage$outboundSchema.and(
    z.object({ type: z.literal("input_image") }).transform((v) => ({
      type: v.type,
    })),
  ),
  ResponseInputFile$outboundSchema.and(
    z.object({ type: z.literal("input_file") }).transform((v) => ({
      type: v.type,
    })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesInputMessageItemContent$ {
  /** @deprecated use `OpenResponsesInputMessageItemContent$inboundSchema` instead. */
  export const inboundSchema =
    OpenResponsesInputMessageItemContent$inboundSchema;
  /** @deprecated use `OpenResponsesInputMessageItemContent$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesInputMessageItemContent$outboundSchema;
  /** @deprecated use `OpenResponsesInputMessageItemContent$Outbound` instead. */
  export type Outbound = OpenResponsesInputMessageItemContent$Outbound;
}

export function openResponsesInputMessageItemContentToJSON(
  openResponsesInputMessageItemContent: OpenResponsesInputMessageItemContent,
): string {
  return JSON.stringify(
    OpenResponsesInputMessageItemContent$outboundSchema.parse(
      openResponsesInputMessageItemContent,
    ),
  );
}

export function openResponsesInputMessageItemContentFromJSON(
  jsonString: string,
): SafeParseResult<OpenResponsesInputMessageItemContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OpenResponsesInputMessageItemContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenResponsesInputMessageItemContent' from JSON`,
  );
}

/** @internal */
export const OpenResponsesInputMessageItem$inboundSchema: z.ZodType<
  OpenResponsesInputMessageItem,
  unknown
> = z.object({
  id: z.string().optional(),
  type: OpenResponsesInputMessageItemType$inboundSchema.optional(),
  role: z.union([
    OpenResponsesInputMessageItemRoleUser$inboundSchema,
    OpenResponsesInputMessageItemRoleSystem$inboundSchema,
    OpenResponsesInputMessageItemRoleDeveloper$inboundSchema,
  ]),
  content: z.array(
    z.union([
      ResponseInputText$inboundSchema.and(
        z.object({ type: z.literal("input_text") }).transform((v) => ({
          type: v.type,
        })),
      ),
      ResponseInputImage$inboundSchema.and(
        z.object({ type: z.literal("input_image") }).transform((v) => ({
          type: v.type,
        })),
      ),
      ResponseInputFile$inboundSchema.and(
        z.object({ type: z.literal("input_file") }).transform((v) => ({
          type: v.type,
        })),
      ),
    ]),
  ),
});

/** @internal */
export type OpenResponsesInputMessageItem$Outbound = {
  id?: string | undefined;
  type?: string | undefined;
  role: string | string | string;
  content: Array<
    | (ResponseInputText$Outbound & { type: "input_text" })
    | (ResponseInputImage$Outbound & { type: "input_image" })
    | (ResponseInputFile$Outbound & { type: "input_file" })
  >;
};

/** @internal */
export const OpenResponsesInputMessageItem$outboundSchema: z.ZodType<
  OpenResponsesInputMessageItem$Outbound,
  OpenResponsesInputMessageItem
> = z.object({
  id: z.string().optional(),
  type: OpenResponsesInputMessageItemType$outboundSchema.optional(),
  role: z.union([
    OpenResponsesInputMessageItemRoleUser$outboundSchema,
    OpenResponsesInputMessageItemRoleSystem$outboundSchema,
    OpenResponsesInputMessageItemRoleDeveloper$outboundSchema,
  ]),
  content: z.array(
    z.union([
      ResponseInputText$outboundSchema.and(
        z.object({ type: z.literal("input_text") }).transform((v) => ({
          type: v.type,
        })),
      ),
      ResponseInputImage$outboundSchema.and(
        z.object({ type: z.literal("input_image") }).transform((v) => ({
          type: v.type,
        })),
      ),
      ResponseInputFile$outboundSchema.and(
        z.object({ type: z.literal("input_file") }).transform((v) => ({
          type: v.type,
        })),
      ),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesInputMessageItem$ {
  /** @deprecated use `OpenResponsesInputMessageItem$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesInputMessageItem$inboundSchema;
  /** @deprecated use `OpenResponsesInputMessageItem$outboundSchema` instead. */
  export const outboundSchema = OpenResponsesInputMessageItem$outboundSchema;
  /** @deprecated use `OpenResponsesInputMessageItem$Outbound` instead. */
  export type Outbound = OpenResponsesInputMessageItem$Outbound;
}

export function openResponsesInputMessageItemToJSON(
  openResponsesInputMessageItem: OpenResponsesInputMessageItem,
): string {
  return JSON.stringify(
    OpenResponsesInputMessageItem$outboundSchema.parse(
      openResponsesInputMessageItem,
    ),
  );
}

export function openResponsesInputMessageItemFromJSON(
  jsonString: string,
): SafeParseResult<OpenResponsesInputMessageItem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenResponsesInputMessageItem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenResponsesInputMessageItem' from JSON`,
  );
}
