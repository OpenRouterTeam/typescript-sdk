/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const ResponsesAnnotationUrlCitationType = {
  UrlCitation: "url_citation",
} as const;
export type ResponsesAnnotationUrlCitationType = ClosedEnum<
  typeof ResponsesAnnotationUrlCitationType
>;

export type ResponsesAnnotationUrlCitation = {
  type: ResponsesAnnotationUrlCitationType;
  endIndex: number;
  startIndex: number;
  title: string;
  url: string;
};

/** @internal */
export const ResponsesAnnotationUrlCitationType$inboundSchema: z.ZodNativeEnum<
  typeof ResponsesAnnotationUrlCitationType
> = z.nativeEnum(ResponsesAnnotationUrlCitationType);

/** @internal */
export const ResponsesAnnotationUrlCitationType$outboundSchema: z.ZodNativeEnum<
  typeof ResponsesAnnotationUrlCitationType
> = ResponsesAnnotationUrlCitationType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesAnnotationUrlCitationType$ {
  /** @deprecated use `ResponsesAnnotationUrlCitationType$inboundSchema` instead. */
  export const inboundSchema = ResponsesAnnotationUrlCitationType$inboundSchema;
  /** @deprecated use `ResponsesAnnotationUrlCitationType$outboundSchema` instead. */
  export const outboundSchema =
    ResponsesAnnotationUrlCitationType$outboundSchema;
}

/** @internal */
export const ResponsesAnnotationUrlCitation$inboundSchema: z.ZodType<
  ResponsesAnnotationUrlCitation,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ResponsesAnnotationUrlCitationType$inboundSchema,
  end_index: z.number(),
  start_index: z.number(),
  title: z.string(),
  url: z.string(),
}).transform((v) => {
  return remap$(v, {
    "end_index": "endIndex",
    "start_index": "startIndex",
  });
});

/** @internal */
export type ResponsesAnnotationUrlCitation$Outbound = {
  type: string;
  end_index: number;
  start_index: number;
  title: string;
  url: string;
};

/** @internal */
export const ResponsesAnnotationUrlCitation$outboundSchema: z.ZodType<
  ResponsesAnnotationUrlCitation$Outbound,
  z.ZodTypeDef,
  ResponsesAnnotationUrlCitation
> = z.object({
  type: ResponsesAnnotationUrlCitationType$outboundSchema,
  endIndex: z.number(),
  startIndex: z.number(),
  title: z.string(),
  url: z.string(),
}).transform((v) => {
  return remap$(v, {
    endIndex: "end_index",
    startIndex: "start_index",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesAnnotationUrlCitation$ {
  /** @deprecated use `ResponsesAnnotationUrlCitation$inboundSchema` instead. */
  export const inboundSchema = ResponsesAnnotationUrlCitation$inboundSchema;
  /** @deprecated use `ResponsesAnnotationUrlCitation$outboundSchema` instead. */
  export const outboundSchema = ResponsesAnnotationUrlCitation$outboundSchema;
  /** @deprecated use `ResponsesAnnotationUrlCitation$Outbound` instead. */
  export type Outbound = ResponsesAnnotationUrlCitation$Outbound;
}

export function responsesAnnotationUrlCitationToJSON(
  responsesAnnotationUrlCitation: ResponsesAnnotationUrlCitation,
): string {
  return JSON.stringify(
    ResponsesAnnotationUrlCitation$outboundSchema.parse(
      responsesAnnotationUrlCitation,
    ),
  );
}

export function responsesAnnotationUrlCitationFromJSON(
  jsonString: string,
): SafeParseResult<ResponsesAnnotationUrlCitation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponsesAnnotationUrlCitation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponsesAnnotationUrlCitation' from JSON`,
  );
}
