/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ResponseInputImageDetail,
  ResponseInputImageDetail$inboundSchema,
  ResponseInputImageDetail$outboundSchema,
} from "./responseinputimagedetail.js";

export const ResponseInputImageType = {
  InputImage: "input_image",
} as const;
export type ResponseInputImageType = ClosedEnum<typeof ResponseInputImageType>;

/**
 * Image input content
 */
export type ResponseInputImage = {
  type: ResponseInputImageType;
  detail: ResponseInputImageDetail;
  imageUrl?: string | null | undefined;
};

/** @internal */
export const ResponseInputImageType$inboundSchema: z.ZodNativeEnum<
  typeof ResponseInputImageType
> = z.nativeEnum(ResponseInputImageType);

/** @internal */
export const ResponseInputImageType$outboundSchema: z.ZodNativeEnum<
  typeof ResponseInputImageType
> = ResponseInputImageType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseInputImageType$ {
  /** @deprecated use `ResponseInputImageType$inboundSchema` instead. */
  export const inboundSchema = ResponseInputImageType$inboundSchema;
  /** @deprecated use `ResponseInputImageType$outboundSchema` instead. */
  export const outboundSchema = ResponseInputImageType$outboundSchema;
}

/** @internal */
export const ResponseInputImage$inboundSchema: z.ZodType<
  ResponseInputImage,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ResponseInputImageType$inboundSchema,
  detail: ResponseInputImageDetail$inboundSchema,
  image_url: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type ResponseInputImage$Outbound = {
  type: string;
  detail: string;
  image_url?: string | null | undefined;
};

/** @internal */
export const ResponseInputImage$outboundSchema: z.ZodType<
  ResponseInputImage$Outbound,
  z.ZodTypeDef,
  ResponseInputImage
> = z.object({
  type: ResponseInputImageType$outboundSchema,
  detail: ResponseInputImageDetail$outboundSchema,
  imageUrl: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseInputImage$ {
  /** @deprecated use `ResponseInputImage$inboundSchema` instead. */
  export const inboundSchema = ResponseInputImage$inboundSchema;
  /** @deprecated use `ResponseInputImage$outboundSchema` instead. */
  export const outboundSchema = ResponseInputImage$outboundSchema;
  /** @deprecated use `ResponseInputImage$Outbound` instead. */
  export type Outbound = ResponseInputImage$Outbound;
}

export function responseInputImageToJSON(
  responseInputImage: ResponseInputImage,
): string {
  return JSON.stringify(
    ResponseInputImage$outboundSchema.parse(responseInputImage),
  );
}

export function responseInputImageFromJSON(
  jsonString: string,
): SafeParseResult<ResponseInputImage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseInputImage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseInputImage' from JSON`,
  );
}
