/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const ResponsesMessageStatusInProgress = {
  InProgress: "in_progress",
} as const;
export type ResponsesMessageStatusInProgress = ClosedEnum<
  typeof ResponsesMessageStatusInProgress
>;

export const ResponsesMessageStatusIncomplete = {
  Incomplete: "incomplete",
} as const;
export type ResponsesMessageStatusIncomplete = ClosedEnum<
  typeof ResponsesMessageStatusIncomplete
>;

export const ResponsesMessageStatusCompleted = {
  Completed: "completed",
} as const;
export type ResponsesMessageStatusCompleted = ClosedEnum<
  typeof ResponsesMessageStatusCompleted
>;

export type ResponsesMessageStatus =
  | ResponsesMessageStatusCompleted
  | ResponsesMessageStatusIncomplete
  | ResponsesMessageStatusInProgress;

/** @internal */
export const ResponsesMessageStatusInProgress$inboundSchema: z.ZodNativeEnum<
  typeof ResponsesMessageStatusInProgress
> = z.nativeEnum(ResponsesMessageStatusInProgress);

/** @internal */
export const ResponsesMessageStatusInProgress$outboundSchema: z.ZodNativeEnum<
  typeof ResponsesMessageStatusInProgress
> = ResponsesMessageStatusInProgress$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesMessageStatusInProgress$ {
  /** @deprecated use `ResponsesMessageStatusInProgress$inboundSchema` instead. */
  export const inboundSchema = ResponsesMessageStatusInProgress$inboundSchema;
  /** @deprecated use `ResponsesMessageStatusInProgress$outboundSchema` instead. */
  export const outboundSchema = ResponsesMessageStatusInProgress$outboundSchema;
}

/** @internal */
export const ResponsesMessageStatusIncomplete$inboundSchema: z.ZodNativeEnum<
  typeof ResponsesMessageStatusIncomplete
> = z.nativeEnum(ResponsesMessageStatusIncomplete);

/** @internal */
export const ResponsesMessageStatusIncomplete$outboundSchema: z.ZodNativeEnum<
  typeof ResponsesMessageStatusIncomplete
> = ResponsesMessageStatusIncomplete$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesMessageStatusIncomplete$ {
  /** @deprecated use `ResponsesMessageStatusIncomplete$inboundSchema` instead. */
  export const inboundSchema = ResponsesMessageStatusIncomplete$inboundSchema;
  /** @deprecated use `ResponsesMessageStatusIncomplete$outboundSchema` instead. */
  export const outboundSchema = ResponsesMessageStatusIncomplete$outboundSchema;
}

/** @internal */
export const ResponsesMessageStatusCompleted$inboundSchema: z.ZodNativeEnum<
  typeof ResponsesMessageStatusCompleted
> = z.nativeEnum(ResponsesMessageStatusCompleted);

/** @internal */
export const ResponsesMessageStatusCompleted$outboundSchema: z.ZodNativeEnum<
  typeof ResponsesMessageStatusCompleted
> = ResponsesMessageStatusCompleted$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesMessageStatusCompleted$ {
  /** @deprecated use `ResponsesMessageStatusCompleted$inboundSchema` instead. */
  export const inboundSchema = ResponsesMessageStatusCompleted$inboundSchema;
  /** @deprecated use `ResponsesMessageStatusCompleted$outboundSchema` instead. */
  export const outboundSchema = ResponsesMessageStatusCompleted$outboundSchema;
}

/** @internal */
export const ResponsesMessageStatus$inboundSchema: z.ZodType<
  ResponsesMessageStatus,
  z.ZodTypeDef,
  unknown
> = z.union([
  ResponsesMessageStatusCompleted$inboundSchema,
  ResponsesMessageStatusIncomplete$inboundSchema,
  ResponsesMessageStatusInProgress$inboundSchema,
]);

/** @internal */
export type ResponsesMessageStatus$Outbound = string | string | string;

/** @internal */
export const ResponsesMessageStatus$outboundSchema: z.ZodType<
  ResponsesMessageStatus$Outbound,
  z.ZodTypeDef,
  ResponsesMessageStatus
> = z.union([
  ResponsesMessageStatusCompleted$outboundSchema,
  ResponsesMessageStatusIncomplete$outboundSchema,
  ResponsesMessageStatusInProgress$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesMessageStatus$ {
  /** @deprecated use `ResponsesMessageStatus$inboundSchema` instead. */
  export const inboundSchema = ResponsesMessageStatus$inboundSchema;
  /** @deprecated use `ResponsesMessageStatus$outboundSchema` instead. */
  export const outboundSchema = ResponsesMessageStatus$outboundSchema;
  /** @deprecated use `ResponsesMessageStatus$Outbound` instead. */
  export type Outbound = ResponsesMessageStatus$Outbound;
}

export function responsesMessageStatusToJSON(
  responsesMessageStatus: ResponsesMessageStatus,
): string {
  return JSON.stringify(
    ResponsesMessageStatus$outboundSchema.parse(responsesMessageStatus),
  );
}

export function responsesMessageStatusFromJSON(
  jsonString: string,
): SafeParseResult<ResponsesMessageStatus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponsesMessageStatus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponsesMessageStatus' from JSON`,
  );
}
