/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ChatCompletionToolFunction = {
  name: string;
  description?: string | undefined;
  parameters?: { [k: string]: any } | undefined;
  strict?: boolean | null | undefined;
};

export type ChatCompletionTool = {
  type: "function";
  function: ChatCompletionToolFunction;
};

/** @internal */
export const ChatCompletionToolFunction$inboundSchema: z.ZodType<
  ChatCompletionToolFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  parameters: z.record(z.any()).optional(),
  strict: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type ChatCompletionToolFunction$Outbound = {
  name: string;
  description?: string | undefined;
  parameters?: { [k: string]: any } | undefined;
  strict?: boolean | null | undefined;
};

/** @internal */
export const ChatCompletionToolFunction$outboundSchema: z.ZodType<
  ChatCompletionToolFunction$Outbound,
  z.ZodTypeDef,
  ChatCompletionToolFunction
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  parameters: z.record(z.any()).optional(),
  strict: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionToolFunction$ {
  /** @deprecated use `ChatCompletionToolFunction$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionToolFunction$inboundSchema;
  /** @deprecated use `ChatCompletionToolFunction$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionToolFunction$outboundSchema;
  /** @deprecated use `ChatCompletionToolFunction$Outbound` instead. */
  export type Outbound = ChatCompletionToolFunction$Outbound;
}

export function chatCompletionToolFunctionToJSON(
  chatCompletionToolFunction: ChatCompletionToolFunction,
): string {
  return JSON.stringify(
    ChatCompletionToolFunction$outboundSchema.parse(chatCompletionToolFunction),
  );
}

export function chatCompletionToolFunctionFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionToolFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionToolFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionToolFunction' from JSON`,
  );
}

/** @internal */
export const ChatCompletionTool$inboundSchema: z.ZodType<
  ChatCompletionTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal("function"),
  function: z.lazy(() => ChatCompletionToolFunction$inboundSchema),
});

/** @internal */
export type ChatCompletionTool$Outbound = {
  type: "function";
  function: ChatCompletionToolFunction$Outbound;
};

/** @internal */
export const ChatCompletionTool$outboundSchema: z.ZodType<
  ChatCompletionTool$Outbound,
  z.ZodTypeDef,
  ChatCompletionTool
> = z.object({
  type: z.literal("function"),
  function: z.lazy(() => ChatCompletionToolFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionTool$ {
  /** @deprecated use `ChatCompletionTool$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionTool$inboundSchema;
  /** @deprecated use `ChatCompletionTool$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionTool$outboundSchema;
  /** @deprecated use `ChatCompletionTool$Outbound` instead. */
  export type Outbound = ChatCompletionTool$Outbound;
}

export function chatCompletionToolToJSON(
  chatCompletionTool: ChatCompletionTool,
): string {
  return JSON.stringify(
    ChatCompletionTool$outboundSchema.parse(chatCompletionTool),
  );
}

export function chatCompletionToolFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionTool' from JSON`,
  );
}
