/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const ChatCompletionToolType = {
  Function: "function",
} as const;
export type ChatCompletionToolType = ClosedEnum<typeof ChatCompletionToolType>;

/**
 * Function parameters as JSON Schema object
 */
export type ParametersT = {};

/**
 * Function definition for tool calling
 */
export type ChatCompletionToolFunction = {
  /**
   * Function name (a-z, A-Z, 0-9, underscores, dashes, max 64 chars)
   */
  name: string;
  /**
   * Function description for the model
   */
  description?: string | undefined;
  /**
   * Function parameters as JSON Schema object
   */
  parameters?: ParametersT | undefined;
  /**
   * Enable strict schema adherence
   */
  strict?: boolean | null | undefined;
};

/**
 * Tool definition for function calling
 */
export type ChatCompletionTool = {
  type: ChatCompletionToolType;
  /**
   * Function definition for tool calling
   */
  function: ChatCompletionToolFunction;
};

/** @internal */
export const ChatCompletionToolType$inboundSchema: z.ZodNativeEnum<
  typeof ChatCompletionToolType
> = z.nativeEnum(ChatCompletionToolType);

/** @internal */
export const ChatCompletionToolType$outboundSchema: z.ZodNativeEnum<
  typeof ChatCompletionToolType
> = ChatCompletionToolType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionToolType$ {
  /** @deprecated use `ChatCompletionToolType$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionToolType$inboundSchema;
  /** @deprecated use `ChatCompletionToolType$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionToolType$outboundSchema;
}

/** @internal */
export const ParametersT$inboundSchema: z.ZodType<
  ParametersT,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ParametersT$Outbound = {};

/** @internal */
export const ParametersT$outboundSchema: z.ZodType<
  ParametersT$Outbound,
  z.ZodTypeDef,
  ParametersT
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ParametersT$ {
  /** @deprecated use `ParametersT$inboundSchema` instead. */
  export const inboundSchema = ParametersT$inboundSchema;
  /** @deprecated use `ParametersT$outboundSchema` instead. */
  export const outboundSchema = ParametersT$outboundSchema;
  /** @deprecated use `ParametersT$Outbound` instead. */
  export type Outbound = ParametersT$Outbound;
}

export function parametersToJSON(parametersT: ParametersT): string {
  return JSON.stringify(ParametersT$outboundSchema.parse(parametersT));
}

export function parametersFromJSON(
  jsonString: string,
): SafeParseResult<ParametersT, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ParametersT$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ParametersT' from JSON`,
  );
}

/** @internal */
export const ChatCompletionToolFunction$inboundSchema: z.ZodType<
  ChatCompletionToolFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  parameters: z.lazy(() => ParametersT$inboundSchema).optional(),
  strict: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type ChatCompletionToolFunction$Outbound = {
  name: string;
  description?: string | undefined;
  parameters?: ParametersT$Outbound | undefined;
  strict?: boolean | null | undefined;
};

/** @internal */
export const ChatCompletionToolFunction$outboundSchema: z.ZodType<
  ChatCompletionToolFunction$Outbound,
  z.ZodTypeDef,
  ChatCompletionToolFunction
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  parameters: z.lazy(() => ParametersT$outboundSchema).optional(),
  strict: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionToolFunction$ {
  /** @deprecated use `ChatCompletionToolFunction$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionToolFunction$inboundSchema;
  /** @deprecated use `ChatCompletionToolFunction$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionToolFunction$outboundSchema;
  /** @deprecated use `ChatCompletionToolFunction$Outbound` instead. */
  export type Outbound = ChatCompletionToolFunction$Outbound;
}

export function chatCompletionToolFunctionToJSON(
  chatCompletionToolFunction: ChatCompletionToolFunction,
): string {
  return JSON.stringify(
    ChatCompletionToolFunction$outboundSchema.parse(chatCompletionToolFunction),
  );
}

export function chatCompletionToolFunctionFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionToolFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionToolFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionToolFunction' from JSON`,
  );
}

/** @internal */
export const ChatCompletionTool$inboundSchema: z.ZodType<
  ChatCompletionTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ChatCompletionToolType$inboundSchema,
  function: z.lazy(() => ChatCompletionToolFunction$inboundSchema),
});

/** @internal */
export type ChatCompletionTool$Outbound = {
  type: string;
  function: ChatCompletionToolFunction$Outbound;
};

/** @internal */
export const ChatCompletionTool$outboundSchema: z.ZodType<
  ChatCompletionTool$Outbound,
  z.ZodTypeDef,
  ChatCompletionTool
> = z.object({
  type: ChatCompletionToolType$outboundSchema,
  function: z.lazy(() => ChatCompletionToolFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionTool$ {
  /** @deprecated use `ChatCompletionTool$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionTool$inboundSchema;
  /** @deprecated use `ChatCompletionTool$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionTool$outboundSchema;
  /** @deprecated use `ChatCompletionTool$Outbound` instead. */
  export type Outbound = ChatCompletionTool$Outbound;
}

export function chatCompletionToolToJSON(
  chatCompletionTool: ChatCompletionTool,
): string {
  return JSON.stringify(
    ChatCompletionTool$outboundSchema.parse(chatCompletionTool),
  );
}

export function chatCompletionToolFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionTool' from JSON`,
  );
}
