/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const FileCitationAnnotationType = {
  FileCitation: "file_citation",
} as const;
export type FileCitationAnnotationType = ClosedEnum<
  typeof FileCitationAnnotationType
>;

export type FileCitationAnnotation = {
  type: FileCitationAnnotationType;
  fileId: string;
  filename: string;
  index: number;
};

/** @internal */
export const FileCitationAnnotationType$inboundSchema: z.ZodNativeEnum<
  typeof FileCitationAnnotationType
> = z.nativeEnum(FileCitationAnnotationType);

/** @internal */
export const FileCitationAnnotationType$outboundSchema: z.ZodNativeEnum<
  typeof FileCitationAnnotationType
> = FileCitationAnnotationType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileCitationAnnotationType$ {
  /** @deprecated use `FileCitationAnnotationType$inboundSchema` instead. */
  export const inboundSchema = FileCitationAnnotationType$inboundSchema;
  /** @deprecated use `FileCitationAnnotationType$outboundSchema` instead. */
  export const outboundSchema = FileCitationAnnotationType$outboundSchema;
}

/** @internal */
export const FileCitationAnnotation$inboundSchema: z.ZodType<
  FileCitationAnnotation,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FileCitationAnnotationType$inboundSchema,
  file_id: z.string(),
  filename: z.string(),
  index: z.number(),
}).transform((v) => {
  return remap$(v, {
    "file_id": "fileId",
  });
});

/** @internal */
export type FileCitationAnnotation$Outbound = {
  type: string;
  file_id: string;
  filename: string;
  index: number;
};

/** @internal */
export const FileCitationAnnotation$outboundSchema: z.ZodType<
  FileCitationAnnotation$Outbound,
  z.ZodTypeDef,
  FileCitationAnnotation
> = z.object({
  type: FileCitationAnnotationType$outboundSchema,
  fileId: z.string(),
  filename: z.string(),
  index: z.number(),
}).transform((v) => {
  return remap$(v, {
    fileId: "file_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileCitationAnnotation$ {
  /** @deprecated use `FileCitationAnnotation$inboundSchema` instead. */
  export const inboundSchema = FileCitationAnnotation$inboundSchema;
  /** @deprecated use `FileCitationAnnotation$outboundSchema` instead. */
  export const outboundSchema = FileCitationAnnotation$outboundSchema;
  /** @deprecated use `FileCitationAnnotation$Outbound` instead. */
  export type Outbound = FileCitationAnnotation$Outbound;
}

export function fileCitationAnnotationToJSON(
  fileCitationAnnotation: FileCitationAnnotation,
): string {
  return JSON.stringify(
    FileCitationAnnotation$outboundSchema.parse(fileCitationAnnotation),
  );
}

export function fileCitationAnnotationFromJSON(
  jsonString: string,
): SafeParseResult<FileCitationAnnotation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FileCitationAnnotation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FileCitationAnnotation' from JSON`,
  );
}
