/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ActivityItem = {
  /**
   * Date of the activity (YYYY-MM-DD format)
   */
  date: string;
  /**
   * Model slug (e.g., "openai/gpt-4.1")
   */
  model: string;
  /**
   * Model permaslug (e.g., "openai/gpt-4.1-2025-04-14")
   */
  modelPermaslug: string;
  /**
   * Unique identifier for the endpoint
   */
  endpointId: string;
  /**
   * Name of the provider serving this endpoint
   */
  providerName: string;
  /**
   * Total cost in USD (OpenRouter credits spent)
   */
  usage: number;
  /**
   * BYOK inference cost in USD (external credits spent)
   */
  byokUsageInference: number;
  /**
   * Number of requests made
   */
  requests: number;
  /**
   * Total prompt tokens used
   */
  promptTokens: number;
  /**
   * Total completion tokens generated
   */
  completionTokens: number;
  /**
   * Total reasoning tokens used
   */
  reasoningTokens: number;
};

/** @internal */
export const ActivityItem$inboundSchema: z.ZodType<
  ActivityItem,
  z.ZodTypeDef,
  unknown
> = z.object({
  date: z.string(),
  model: z.string(),
  model_permaslug: z.string(),
  endpoint_id: z.string(),
  provider_name: z.string(),
  usage: z.number(),
  byok_usage_inference: z.number(),
  requests: z.number(),
  prompt_tokens: z.number(),
  completion_tokens: z.number(),
  reasoning_tokens: z.number(),
}).transform((v) => {
  return remap$(v, {
    "model_permaslug": "modelPermaslug",
    "endpoint_id": "endpointId",
    "provider_name": "providerName",
    "byok_usage_inference": "byokUsageInference",
    "prompt_tokens": "promptTokens",
    "completion_tokens": "completionTokens",
    "reasoning_tokens": "reasoningTokens",
  });
});

/** @internal */
export type ActivityItem$Outbound = {
  date: string;
  model: string;
  model_permaslug: string;
  endpoint_id: string;
  provider_name: string;
  usage: number;
  byok_usage_inference: number;
  requests: number;
  prompt_tokens: number;
  completion_tokens: number;
  reasoning_tokens: number;
};

/** @internal */
export const ActivityItem$outboundSchema: z.ZodType<
  ActivityItem$Outbound,
  z.ZodTypeDef,
  ActivityItem
> = z.object({
  date: z.string(),
  model: z.string(),
  modelPermaslug: z.string(),
  endpointId: z.string(),
  providerName: z.string(),
  usage: z.number(),
  byokUsageInference: z.number(),
  requests: z.number(),
  promptTokens: z.number(),
  completionTokens: z.number(),
  reasoningTokens: z.number(),
}).transform((v) => {
  return remap$(v, {
    modelPermaslug: "model_permaslug",
    endpointId: "endpoint_id",
    providerName: "provider_name",
    byokUsageInference: "byok_usage_inference",
    promptTokens: "prompt_tokens",
    completionTokens: "completion_tokens",
    reasoningTokens: "reasoning_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityItem$ {
  /** @deprecated use `ActivityItem$inboundSchema` instead. */
  export const inboundSchema = ActivityItem$inboundSchema;
  /** @deprecated use `ActivityItem$outboundSchema` instead. */
  export const outboundSchema = ActivityItem$outboundSchema;
  /** @deprecated use `ActivityItem$Outbound` instead. */
  export type Outbound = ActivityItem$Outbound;
}

export function activityItemToJSON(activityItem: ActivityItem): string {
  return JSON.stringify(ActivityItem$outboundSchema.parse(activityItem));
}

export function activityItemFromJSON(
  jsonString: string,
): SafeParseResult<ActivityItem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivityItem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivityItem' from JSON`,
  );
}
