/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Information about the top provider for this model
 */
export type TopProviderInfo = {
  /**
   * Context length from the top provider
   */
  contextLength?: number | null | undefined;
  /**
   * Maximum completion tokens from the top provider
   */
  maxCompletionTokens?: number | null | undefined;
  /**
   * Whether the top provider moderates content
   */
  isModerated: boolean;
};

/** @internal */
export const TopProviderInfo$inboundSchema: z.ZodType<
  TopProviderInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  context_length: z.nullable(z.number()).optional(),
  max_completion_tokens: z.nullable(z.number()).optional(),
  is_moderated: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "context_length": "contextLength",
    "max_completion_tokens": "maxCompletionTokens",
    "is_moderated": "isModerated",
  });
});

/** @internal */
export type TopProviderInfo$Outbound = {
  context_length?: number | null | undefined;
  max_completion_tokens?: number | null | undefined;
  is_moderated: boolean;
};

/** @internal */
export const TopProviderInfo$outboundSchema: z.ZodType<
  TopProviderInfo$Outbound,
  z.ZodTypeDef,
  TopProviderInfo
> = z.object({
  contextLength: z.nullable(z.number()).optional(),
  maxCompletionTokens: z.nullable(z.number()).optional(),
  isModerated: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    contextLength: "context_length",
    maxCompletionTokens: "max_completion_tokens",
    isModerated: "is_moderated",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopProviderInfo$ {
  /** @deprecated use `TopProviderInfo$inboundSchema` instead. */
  export const inboundSchema = TopProviderInfo$inboundSchema;
  /** @deprecated use `TopProviderInfo$outboundSchema` instead. */
  export const outboundSchema = TopProviderInfo$outboundSchema;
  /** @deprecated use `TopProviderInfo$Outbound` instead. */
  export type Outbound = TopProviderInfo$Outbound;
}

export function topProviderInfoToJSON(
  topProviderInfo: TopProviderInfo,
): string {
  return JSON.stringify(TopProviderInfo$outboundSchema.parse(topProviderInfo));
}

export function topProviderInfoFromJSON(
  jsonString: string,
): SafeParseResult<TopProviderInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TopProviderInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TopProviderInfo' from JSON`,
  );
}
