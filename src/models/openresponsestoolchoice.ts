/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ToolChoiceTypes,
  ToolChoiceTypes$inboundSchema,
  ToolChoiceTypes$Outbound,
  ToolChoiceTypes$outboundSchema,
} from "./toolchoicetypes.js";

export const OpenResponsesToolChoiceType = {
  Function: "function",
} as const;
export type OpenResponsesToolChoiceType = ClosedEnum<
  typeof OpenResponsesToolChoiceType
>;

/**
 * Force the model to call a specific function
 */
export type OpenResponsesToolChoiceFunction = {
  type: OpenResponsesToolChoiceType;
  name: string;
};

export const OpenResponsesToolChoiceRequired = {
  Required: "required",
} as const;
export type OpenResponsesToolChoiceRequired = ClosedEnum<
  typeof OpenResponsesToolChoiceRequired
>;

export const OpenResponsesToolChoiceNone = {
  None: "none",
} as const;
export type OpenResponsesToolChoiceNone = ClosedEnum<
  typeof OpenResponsesToolChoiceNone
>;

export const OpenResponsesToolChoiceAuto = {
  Auto: "auto",
} as const;
export type OpenResponsesToolChoiceAuto = ClosedEnum<
  typeof OpenResponsesToolChoiceAuto
>;

/**
 * Controls which tool the model should call
 */
export type OpenResponsesToolChoice =
  | OpenResponsesToolChoiceFunction
  | ToolChoiceTypes
  | OpenResponsesToolChoiceAuto
  | OpenResponsesToolChoiceNone
  | OpenResponsesToolChoiceRequired;

/** @internal */
export const OpenResponsesToolChoiceType$inboundSchema: z.ZodNativeEnum<
  typeof OpenResponsesToolChoiceType
> = z.nativeEnum(OpenResponsesToolChoiceType);

/** @internal */
export const OpenResponsesToolChoiceType$outboundSchema: z.ZodNativeEnum<
  typeof OpenResponsesToolChoiceType
> = OpenResponsesToolChoiceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesToolChoiceType$ {
  /** @deprecated use `OpenResponsesToolChoiceType$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesToolChoiceType$inboundSchema;
  /** @deprecated use `OpenResponsesToolChoiceType$outboundSchema` instead. */
  export const outboundSchema = OpenResponsesToolChoiceType$outboundSchema;
}

/** @internal */
export const OpenResponsesToolChoiceFunction$inboundSchema: z.ZodType<
  OpenResponsesToolChoiceFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: OpenResponsesToolChoiceType$inboundSchema,
  name: z.string(),
});

/** @internal */
export type OpenResponsesToolChoiceFunction$Outbound = {
  type: string;
  name: string;
};

/** @internal */
export const OpenResponsesToolChoiceFunction$outboundSchema: z.ZodType<
  OpenResponsesToolChoiceFunction$Outbound,
  z.ZodTypeDef,
  OpenResponsesToolChoiceFunction
> = z.object({
  type: OpenResponsesToolChoiceType$outboundSchema,
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesToolChoiceFunction$ {
  /** @deprecated use `OpenResponsesToolChoiceFunction$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesToolChoiceFunction$inboundSchema;
  /** @deprecated use `OpenResponsesToolChoiceFunction$outboundSchema` instead. */
  export const outboundSchema = OpenResponsesToolChoiceFunction$outboundSchema;
  /** @deprecated use `OpenResponsesToolChoiceFunction$Outbound` instead. */
  export type Outbound = OpenResponsesToolChoiceFunction$Outbound;
}

export function openResponsesToolChoiceFunctionToJSON(
  openResponsesToolChoiceFunction: OpenResponsesToolChoiceFunction,
): string {
  return JSON.stringify(
    OpenResponsesToolChoiceFunction$outboundSchema.parse(
      openResponsesToolChoiceFunction,
    ),
  );
}

export function openResponsesToolChoiceFunctionFromJSON(
  jsonString: string,
): SafeParseResult<OpenResponsesToolChoiceFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenResponsesToolChoiceFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenResponsesToolChoiceFunction' from JSON`,
  );
}

/** @internal */
export const OpenResponsesToolChoiceRequired$inboundSchema: z.ZodNativeEnum<
  typeof OpenResponsesToolChoiceRequired
> = z.nativeEnum(OpenResponsesToolChoiceRequired);

/** @internal */
export const OpenResponsesToolChoiceRequired$outboundSchema: z.ZodNativeEnum<
  typeof OpenResponsesToolChoiceRequired
> = OpenResponsesToolChoiceRequired$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesToolChoiceRequired$ {
  /** @deprecated use `OpenResponsesToolChoiceRequired$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesToolChoiceRequired$inboundSchema;
  /** @deprecated use `OpenResponsesToolChoiceRequired$outboundSchema` instead. */
  export const outboundSchema = OpenResponsesToolChoiceRequired$outboundSchema;
}

/** @internal */
export const OpenResponsesToolChoiceNone$inboundSchema: z.ZodNativeEnum<
  typeof OpenResponsesToolChoiceNone
> = z.nativeEnum(OpenResponsesToolChoiceNone);

/** @internal */
export const OpenResponsesToolChoiceNone$outboundSchema: z.ZodNativeEnum<
  typeof OpenResponsesToolChoiceNone
> = OpenResponsesToolChoiceNone$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesToolChoiceNone$ {
  /** @deprecated use `OpenResponsesToolChoiceNone$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesToolChoiceNone$inboundSchema;
  /** @deprecated use `OpenResponsesToolChoiceNone$outboundSchema` instead. */
  export const outboundSchema = OpenResponsesToolChoiceNone$outboundSchema;
}

/** @internal */
export const OpenResponsesToolChoiceAuto$inboundSchema: z.ZodNativeEnum<
  typeof OpenResponsesToolChoiceAuto
> = z.nativeEnum(OpenResponsesToolChoiceAuto);

/** @internal */
export const OpenResponsesToolChoiceAuto$outboundSchema: z.ZodNativeEnum<
  typeof OpenResponsesToolChoiceAuto
> = OpenResponsesToolChoiceAuto$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesToolChoiceAuto$ {
  /** @deprecated use `OpenResponsesToolChoiceAuto$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesToolChoiceAuto$inboundSchema;
  /** @deprecated use `OpenResponsesToolChoiceAuto$outboundSchema` instead. */
  export const outboundSchema = OpenResponsesToolChoiceAuto$outboundSchema;
}

/** @internal */
export const OpenResponsesToolChoice$inboundSchema: z.ZodType<
  OpenResponsesToolChoice,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => OpenResponsesToolChoiceFunction$inboundSchema),
  ToolChoiceTypes$inboundSchema,
  OpenResponsesToolChoiceAuto$inboundSchema,
  OpenResponsesToolChoiceNone$inboundSchema,
  OpenResponsesToolChoiceRequired$inboundSchema,
]);

/** @internal */
export type OpenResponsesToolChoice$Outbound =
  | OpenResponsesToolChoiceFunction$Outbound
  | ToolChoiceTypes$Outbound
  | string
  | string
  | string;

/** @internal */
export const OpenResponsesToolChoice$outboundSchema: z.ZodType<
  OpenResponsesToolChoice$Outbound,
  z.ZodTypeDef,
  OpenResponsesToolChoice
> = z.union([
  z.lazy(() => OpenResponsesToolChoiceFunction$outboundSchema),
  ToolChoiceTypes$outboundSchema,
  OpenResponsesToolChoiceAuto$outboundSchema,
  OpenResponsesToolChoiceNone$outboundSchema,
  OpenResponsesToolChoiceRequired$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesToolChoice$ {
  /** @deprecated use `OpenResponsesToolChoice$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesToolChoice$inboundSchema;
  /** @deprecated use `OpenResponsesToolChoice$outboundSchema` instead. */
  export const outboundSchema = OpenResponsesToolChoice$outboundSchema;
  /** @deprecated use `OpenResponsesToolChoice$Outbound` instead. */
  export type Outbound = OpenResponsesToolChoice$Outbound;
}

export function openResponsesToolChoiceToJSON(
  openResponsesToolChoice: OpenResponsesToolChoice,
): string {
  return JSON.stringify(
    OpenResponsesToolChoice$outboundSchema.parse(openResponsesToolChoice),
  );
}

export function openResponsesToolChoiceFromJSON(
  jsonString: string,
): SafeParseResult<OpenResponsesToolChoice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenResponsesToolChoice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenResponsesToolChoice' from JSON`,
  );
}
