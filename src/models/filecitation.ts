/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v4";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const FileCitationType = {
  FileCitation: "file_citation",
} as const;
export type FileCitationType = ClosedEnum<typeof FileCitationType>;

export type FileCitation = {
  type: FileCitationType;
  fileId: string;
  filename: string;
  index: number;
};

/** @internal */
export const FileCitationType$inboundSchema: z.ZodEnum<
  typeof FileCitationType
> = z.enum(FileCitationType);

/** @internal */
export const FileCitationType$outboundSchema: z.ZodEnum<
  typeof FileCitationType
> = FileCitationType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileCitationType$ {
  /** @deprecated use `FileCitationType$inboundSchema` instead. */
  export const inboundSchema = FileCitationType$inboundSchema;
  /** @deprecated use `FileCitationType$outboundSchema` instead. */
  export const outboundSchema = FileCitationType$outboundSchema;
}

/** @internal */
export const FileCitation$inboundSchema: z.ZodType<FileCitation, unknown> = z
  .object({
    type: FileCitationType$inboundSchema,
    file_id: z.string(),
    filename: z.string(),
    index: z.number(),
  }).transform((v) => {
    return remap$(v, {
      "file_id": "fileId",
    });
  });

/** @internal */
export type FileCitation$Outbound = {
  type: string;
  file_id: string;
  filename: string;
  index: number;
};

/** @internal */
export const FileCitation$outboundSchema: z.ZodType<
  FileCitation$Outbound,
  FileCitation
> = z.object({
  type: FileCitationType$outboundSchema,
  fileId: z.string(),
  filename: z.string(),
  index: z.number(),
}).transform((v) => {
  return remap$(v, {
    fileId: "file_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileCitation$ {
  /** @deprecated use `FileCitation$inboundSchema` instead. */
  export const inboundSchema = FileCitation$inboundSchema;
  /** @deprecated use `FileCitation$outboundSchema` instead. */
  export const outboundSchema = FileCitation$outboundSchema;
  /** @deprecated use `FileCitation$Outbound` instead. */
  export type Outbound = FileCitation$Outbound;
}

export function fileCitationToJSON(fileCitation: FileCitation): string {
  return JSON.stringify(FileCitation$outboundSchema.parse(fileCitation));
}

export function fileCitationFromJSON(
  jsonString: string,
): SafeParseResult<FileCitation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FileCitation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FileCitation' from JSON`,
  );
}
