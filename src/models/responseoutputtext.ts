/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v4";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  OpenAIResponsesAnnotation,
  OpenAIResponsesAnnotation$inboundSchema,
  OpenAIResponsesAnnotation$Outbound,
  OpenAIResponsesAnnotation$outboundSchema,
} from "./openairesponsesannotation.js";

export const ResponseOutputTextType = {
  OutputText: "output_text",
} as const;
export type ResponseOutputTextType = ClosedEnum<typeof ResponseOutputTextType>;

export type ResponseOutputText = {
  type: ResponseOutputTextType;
  text: string;
  annotations?: Array<OpenAIResponsesAnnotation> | undefined;
};

/** @internal */
export const ResponseOutputTextType$inboundSchema: z.ZodEnum<
  typeof ResponseOutputTextType
> = z.enum(ResponseOutputTextType);

/** @internal */
export const ResponseOutputTextType$outboundSchema: z.ZodEnum<
  typeof ResponseOutputTextType
> = ResponseOutputTextType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseOutputTextType$ {
  /** @deprecated use `ResponseOutputTextType$inboundSchema` instead. */
  export const inboundSchema = ResponseOutputTextType$inboundSchema;
  /** @deprecated use `ResponseOutputTextType$outboundSchema` instead. */
  export const outboundSchema = ResponseOutputTextType$outboundSchema;
}

/** @internal */
export const ResponseOutputText$inboundSchema: z.ZodType<
  ResponseOutputText,
  unknown
> = z.object({
  type: ResponseOutputTextType$inboundSchema,
  text: z.string(),
  annotations: z.array(OpenAIResponsesAnnotation$inboundSchema).optional(),
});

/** @internal */
export type ResponseOutputText$Outbound = {
  type: string;
  text: string;
  annotations?: Array<OpenAIResponsesAnnotation$Outbound> | undefined;
};

/** @internal */
export const ResponseOutputText$outboundSchema: z.ZodType<
  ResponseOutputText$Outbound,
  ResponseOutputText
> = z.object({
  type: ResponseOutputTextType$outboundSchema,
  text: z.string(),
  annotations: z.array(OpenAIResponsesAnnotation$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseOutputText$ {
  /** @deprecated use `ResponseOutputText$inboundSchema` instead. */
  export const inboundSchema = ResponseOutputText$inboundSchema;
  /** @deprecated use `ResponseOutputText$outboundSchema` instead. */
  export const outboundSchema = ResponseOutputText$outboundSchema;
  /** @deprecated use `ResponseOutputText$Outbound` instead. */
  export type Outbound = ResponseOutputText$Outbound;
}

export function responseOutputTextToJSON(
  responseOutputText: ResponseOutputText,
): string {
  return JSON.stringify(
    ResponseOutputText$outboundSchema.parse(responseOutputText),
  );
}

export function responseOutputTextFromJSON(
  jsonString: string,
): SafeParseResult<ResponseOutputText, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseOutputText$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseOutputText' from JSON`,
  );
}
