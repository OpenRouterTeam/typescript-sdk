/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";

/**
 * The sorting strategy to use for this request, if "order" is not specified. When set, no load balancing is performed.
 */
export const ProviderSort = {
  Price: "price",
  Throughput: "throughput",
  Latency: "latency",
} as const;
/**
 * The sorting strategy to use for this request, if "order" is not specified. When set, no load balancing is performed.
 */
export type ProviderSort = OpenEnum<typeof ProviderSort>;

/** @internal */
export const ProviderSort$inboundSchema: z.ZodType<
  ProviderSort,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ProviderSort),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ProviderSort$outboundSchema: z.ZodType<
  ProviderSort,
  z.ZodTypeDef,
  ProviderSort
> = z.union([
  z.nativeEnum(ProviderSort),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProviderSort$ {
  /** @deprecated use `ProviderSort$inboundSchema` instead. */
  export const inboundSchema = ProviderSort$inboundSchema;
  /** @deprecated use `ProviderSort$outboundSchema` instead. */
  export const outboundSchema = ProviderSort$outboundSchema;
}
