/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ResponseInputContent,
  ResponseInputContent$inboundSchema,
  ResponseInputContent$Outbound,
  ResponseInputContent$outboundSchema,
} from "./responseinputcontent.js";

export type ResponseInputMessageContentUnion =
  | Array<ResponseInputContent>
  | string;

/** @internal */
export const ResponseInputMessageContentUnion$inboundSchema: z.ZodType<
  ResponseInputMessageContentUnion,
  z.ZodTypeDef,
  unknown
> = z.union([z.array(ResponseInputContent$inboundSchema), z.string()]);

/** @internal */
export type ResponseInputMessageContentUnion$Outbound =
  | Array<ResponseInputContent$Outbound>
  | string;

/** @internal */
export const ResponseInputMessageContentUnion$outboundSchema: z.ZodType<
  ResponseInputMessageContentUnion$Outbound,
  z.ZodTypeDef,
  ResponseInputMessageContentUnion
> = z.union([z.array(ResponseInputContent$outboundSchema), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseInputMessageContentUnion$ {
  /** @deprecated use `ResponseInputMessageContentUnion$inboundSchema` instead. */
  export const inboundSchema = ResponseInputMessageContentUnion$inboundSchema;
  /** @deprecated use `ResponseInputMessageContentUnion$outboundSchema` instead. */
  export const outboundSchema = ResponseInputMessageContentUnion$outboundSchema;
  /** @deprecated use `ResponseInputMessageContentUnion$Outbound` instead. */
  export type Outbound = ResponseInputMessageContentUnion$Outbound;
}

export function responseInputMessageContentUnionToJSON(
  responseInputMessageContentUnion: ResponseInputMessageContentUnion,
): string {
  return JSON.stringify(
    ResponseInputMessageContentUnion$outboundSchema.parse(
      responseInputMessageContentUnion,
    ),
  );
}

export function responseInputMessageContentUnionFromJSON(
  jsonString: string,
): SafeParseResult<ResponseInputMessageContentUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseInputMessageContentUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseInputMessageContentUnion' from JSON`,
  );
}
