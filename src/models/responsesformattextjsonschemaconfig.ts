/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const ResponsesFormatTextJSONSchemaConfigType = {
  JsonSchema: "json_schema",
} as const;
export type ResponsesFormatTextJSONSchemaConfigType = ClosedEnum<
  typeof ResponsesFormatTextJSONSchemaConfigType
>;

/**
 * JSON schema constrained response format
 */
export type ResponsesFormatTextJSONSchemaConfig = {
  type: ResponsesFormatTextJSONSchemaConfigType;
  name: string;
  description?: string | undefined;
  strict?: boolean | null | undefined;
  schema: { [k: string]: any | null };
};

/** @internal */
export const ResponsesFormatTextJSONSchemaConfigType$inboundSchema:
  z.ZodNativeEnum<typeof ResponsesFormatTextJSONSchemaConfigType> = z
    .nativeEnum(ResponsesFormatTextJSONSchemaConfigType);

/** @internal */
export const ResponsesFormatTextJSONSchemaConfigType$outboundSchema:
  z.ZodNativeEnum<typeof ResponsesFormatTextJSONSchemaConfigType> =
    ResponsesFormatTextJSONSchemaConfigType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesFormatTextJSONSchemaConfigType$ {
  /** @deprecated use `ResponsesFormatTextJSONSchemaConfigType$inboundSchema` instead. */
  export const inboundSchema =
    ResponsesFormatTextJSONSchemaConfigType$inboundSchema;
  /** @deprecated use `ResponsesFormatTextJSONSchemaConfigType$outboundSchema` instead. */
  export const outboundSchema =
    ResponsesFormatTextJSONSchemaConfigType$outboundSchema;
}

/** @internal */
export const ResponsesFormatTextJSONSchemaConfig$inboundSchema: z.ZodType<
  ResponsesFormatTextJSONSchemaConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ResponsesFormatTextJSONSchemaConfigType$inboundSchema,
  name: z.string(),
  description: z.string().optional(),
  strict: z.nullable(z.boolean()).optional(),
  schema: z.record(z.nullable(z.any())),
});

/** @internal */
export type ResponsesFormatTextJSONSchemaConfig$Outbound = {
  type: string;
  name: string;
  description?: string | undefined;
  strict?: boolean | null | undefined;
  schema: { [k: string]: any | null };
};

/** @internal */
export const ResponsesFormatTextJSONSchemaConfig$outboundSchema: z.ZodType<
  ResponsesFormatTextJSONSchemaConfig$Outbound,
  z.ZodTypeDef,
  ResponsesFormatTextJSONSchemaConfig
> = z.object({
  type: ResponsesFormatTextJSONSchemaConfigType$outboundSchema,
  name: z.string(),
  description: z.string().optional(),
  strict: z.nullable(z.boolean()).optional(),
  schema: z.record(z.nullable(z.any())),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesFormatTextJSONSchemaConfig$ {
  /** @deprecated use `ResponsesFormatTextJSONSchemaConfig$inboundSchema` instead. */
  export const inboundSchema =
    ResponsesFormatTextJSONSchemaConfig$inboundSchema;
  /** @deprecated use `ResponsesFormatTextJSONSchemaConfig$outboundSchema` instead. */
  export const outboundSchema =
    ResponsesFormatTextJSONSchemaConfig$outboundSchema;
  /** @deprecated use `ResponsesFormatTextJSONSchemaConfig$Outbound` instead. */
  export type Outbound = ResponsesFormatTextJSONSchemaConfig$Outbound;
}

export function responsesFormatTextJSONSchemaConfigToJSON(
  responsesFormatTextJSONSchemaConfig: ResponsesFormatTextJSONSchemaConfig,
): string {
  return JSON.stringify(
    ResponsesFormatTextJSONSchemaConfig$outboundSchema.parse(
      responsesFormatTextJSONSchemaConfig,
    ),
  );
}

export function responsesFormatTextJSONSchemaConfigFromJSON(
  jsonString: string,
): SafeParseResult<ResponsesFormatTextJSONSchemaConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ResponsesFormatTextJSONSchemaConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponsesFormatTextJSONSchemaConfig' from JSON`,
  );
}
