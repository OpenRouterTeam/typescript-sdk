/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  OutputTextContent,
  OutputTextContent$inboundSchema,
  OutputTextContent$Outbound,
  OutputTextContent$outboundSchema,
} from "./outputtextcontent.js";
import {
  RefusalContent,
  RefusalContent$inboundSchema,
  RefusalContent$Outbound,
  RefusalContent$outboundSchema,
} from "./refusalcontent.js";

export const ResponsesOutputMessageRole = {
  Assistant: "assistant",
} as const;
export type ResponsesOutputMessageRole = ClosedEnum<
  typeof ResponsesOutputMessageRole
>;

export const ResponsesOutputMessageType = {
  Message: "message",
} as const;
export type ResponsesOutputMessageType = ClosedEnum<
  typeof ResponsesOutputMessageType
>;

export const StatusInProgress = {
  InProgress: "in_progress",
} as const;
export type StatusInProgress = ClosedEnum<typeof StatusInProgress>;

export const StatusIncomplete = {
  Incomplete: "incomplete",
} as const;
export type StatusIncomplete = ClosedEnum<typeof StatusIncomplete>;

export const StatusCompleted = {
  Completed: "completed",
} as const;
export type StatusCompleted = ClosedEnum<typeof StatusCompleted>;

export type Status = StatusCompleted | StatusIncomplete | StatusInProgress;

export type ResponsesOutputMessageContent = OutputTextContent | RefusalContent;

export type ResponsesOutputMessage = {
  id: string;
  role: ResponsesOutputMessageRole;
  type: ResponsesOutputMessageType;
  status: StatusCompleted | StatusIncomplete | StatusInProgress;
  content: Array<OutputTextContent | RefusalContent>;
};

/** @internal */
export const ResponsesOutputMessageRole$inboundSchema: z.ZodNativeEnum<
  typeof ResponsesOutputMessageRole
> = z.nativeEnum(ResponsesOutputMessageRole);

/** @internal */
export const ResponsesOutputMessageRole$outboundSchema: z.ZodNativeEnum<
  typeof ResponsesOutputMessageRole
> = ResponsesOutputMessageRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesOutputMessageRole$ {
  /** @deprecated use `ResponsesOutputMessageRole$inboundSchema` instead. */
  export const inboundSchema = ResponsesOutputMessageRole$inboundSchema;
  /** @deprecated use `ResponsesOutputMessageRole$outboundSchema` instead. */
  export const outboundSchema = ResponsesOutputMessageRole$outboundSchema;
}

/** @internal */
export const ResponsesOutputMessageType$inboundSchema: z.ZodNativeEnum<
  typeof ResponsesOutputMessageType
> = z.nativeEnum(ResponsesOutputMessageType);

/** @internal */
export const ResponsesOutputMessageType$outboundSchema: z.ZodNativeEnum<
  typeof ResponsesOutputMessageType
> = ResponsesOutputMessageType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesOutputMessageType$ {
  /** @deprecated use `ResponsesOutputMessageType$inboundSchema` instead. */
  export const inboundSchema = ResponsesOutputMessageType$inboundSchema;
  /** @deprecated use `ResponsesOutputMessageType$outboundSchema` instead. */
  export const outboundSchema = ResponsesOutputMessageType$outboundSchema;
}

/** @internal */
export const StatusInProgress$inboundSchema: z.ZodNativeEnum<
  typeof StatusInProgress
> = z.nativeEnum(StatusInProgress);

/** @internal */
export const StatusInProgress$outboundSchema: z.ZodNativeEnum<
  typeof StatusInProgress
> = StatusInProgress$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StatusInProgress$ {
  /** @deprecated use `StatusInProgress$inboundSchema` instead. */
  export const inboundSchema = StatusInProgress$inboundSchema;
  /** @deprecated use `StatusInProgress$outboundSchema` instead. */
  export const outboundSchema = StatusInProgress$outboundSchema;
}

/** @internal */
export const StatusIncomplete$inboundSchema: z.ZodNativeEnum<
  typeof StatusIncomplete
> = z.nativeEnum(StatusIncomplete);

/** @internal */
export const StatusIncomplete$outboundSchema: z.ZodNativeEnum<
  typeof StatusIncomplete
> = StatusIncomplete$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StatusIncomplete$ {
  /** @deprecated use `StatusIncomplete$inboundSchema` instead. */
  export const inboundSchema = StatusIncomplete$inboundSchema;
  /** @deprecated use `StatusIncomplete$outboundSchema` instead. */
  export const outboundSchema = StatusIncomplete$outboundSchema;
}

/** @internal */
export const StatusCompleted$inboundSchema: z.ZodNativeEnum<
  typeof StatusCompleted
> = z.nativeEnum(StatusCompleted);

/** @internal */
export const StatusCompleted$outboundSchema: z.ZodNativeEnum<
  typeof StatusCompleted
> = StatusCompleted$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StatusCompleted$ {
  /** @deprecated use `StatusCompleted$inboundSchema` instead. */
  export const inboundSchema = StatusCompleted$inboundSchema;
  /** @deprecated use `StatusCompleted$outboundSchema` instead. */
  export const outboundSchema = StatusCompleted$outboundSchema;
}

/** @internal */
export const Status$inboundSchema: z.ZodType<Status, z.ZodTypeDef, unknown> = z
  .union([
    StatusCompleted$inboundSchema,
    StatusIncomplete$inboundSchema,
    StatusInProgress$inboundSchema,
  ]);

/** @internal */
export type Status$Outbound = string | string | string;

/** @internal */
export const Status$outboundSchema: z.ZodType<
  Status$Outbound,
  z.ZodTypeDef,
  Status
> = z.union([
  StatusCompleted$outboundSchema,
  StatusIncomplete$outboundSchema,
  StatusInProgress$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Status$ {
  /** @deprecated use `Status$inboundSchema` instead. */
  export const inboundSchema = Status$inboundSchema;
  /** @deprecated use `Status$outboundSchema` instead. */
  export const outboundSchema = Status$outboundSchema;
  /** @deprecated use `Status$Outbound` instead. */
  export type Outbound = Status$Outbound;
}

export function statusToJSON(status: Status): string {
  return JSON.stringify(Status$outboundSchema.parse(status));
}

export function statusFromJSON(
  jsonString: string,
): SafeParseResult<Status, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Status$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Status' from JSON`,
  );
}

/** @internal */
export const ResponsesOutputMessageContent$inboundSchema: z.ZodType<
  ResponsesOutputMessageContent,
  z.ZodTypeDef,
  unknown
> = z.union([OutputTextContent$inboundSchema, RefusalContent$inboundSchema]);

/** @internal */
export type ResponsesOutputMessageContent$Outbound =
  | OutputTextContent$Outbound
  | RefusalContent$Outbound;

/** @internal */
export const ResponsesOutputMessageContent$outboundSchema: z.ZodType<
  ResponsesOutputMessageContent$Outbound,
  z.ZodTypeDef,
  ResponsesOutputMessageContent
> = z.union([OutputTextContent$outboundSchema, RefusalContent$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesOutputMessageContent$ {
  /** @deprecated use `ResponsesOutputMessageContent$inboundSchema` instead. */
  export const inboundSchema = ResponsesOutputMessageContent$inboundSchema;
  /** @deprecated use `ResponsesOutputMessageContent$outboundSchema` instead. */
  export const outboundSchema = ResponsesOutputMessageContent$outboundSchema;
  /** @deprecated use `ResponsesOutputMessageContent$Outbound` instead. */
  export type Outbound = ResponsesOutputMessageContent$Outbound;
}

export function responsesOutputMessageContentToJSON(
  responsesOutputMessageContent: ResponsesOutputMessageContent,
): string {
  return JSON.stringify(
    ResponsesOutputMessageContent$outboundSchema.parse(
      responsesOutputMessageContent,
    ),
  );
}

export function responsesOutputMessageContentFromJSON(
  jsonString: string,
): SafeParseResult<ResponsesOutputMessageContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponsesOutputMessageContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponsesOutputMessageContent' from JSON`,
  );
}

/** @internal */
export const ResponsesOutputMessage$inboundSchema: z.ZodType<
  ResponsesOutputMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  role: ResponsesOutputMessageRole$inboundSchema,
  type: ResponsesOutputMessageType$inboundSchema,
  status: z.union([
    StatusCompleted$inboundSchema,
    StatusIncomplete$inboundSchema,
    StatusInProgress$inboundSchema,
  ]),
  content: z.array(
    z.union([OutputTextContent$inboundSchema, RefusalContent$inboundSchema]),
  ),
});

/** @internal */
export type ResponsesOutputMessage$Outbound = {
  id: string;
  role: string;
  type: string;
  status: string | string | string;
  content: Array<OutputTextContent$Outbound | RefusalContent$Outbound>;
};

/** @internal */
export const ResponsesOutputMessage$outboundSchema: z.ZodType<
  ResponsesOutputMessage$Outbound,
  z.ZodTypeDef,
  ResponsesOutputMessage
> = z.object({
  id: z.string(),
  role: ResponsesOutputMessageRole$outboundSchema,
  type: ResponsesOutputMessageType$outboundSchema,
  status: z.union([
    StatusCompleted$outboundSchema,
    StatusIncomplete$outboundSchema,
    StatusInProgress$outboundSchema,
  ]),
  content: z.array(
    z.union([OutputTextContent$outboundSchema, RefusalContent$outboundSchema]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesOutputMessage$ {
  /** @deprecated use `ResponsesOutputMessage$inboundSchema` instead. */
  export const inboundSchema = ResponsesOutputMessage$inboundSchema;
  /** @deprecated use `ResponsesOutputMessage$outboundSchema` instead. */
  export const outboundSchema = ResponsesOutputMessage$outboundSchema;
  /** @deprecated use `ResponsesOutputMessage$Outbound` instead. */
  export type Outbound = ResponsesOutputMessage$Outbound;
}

export function responsesOutputMessageToJSON(
  responsesOutputMessage: ResponsesOutputMessage,
): string {
  return JSON.stringify(
    ResponsesOutputMessage$outboundSchema.parse(responsesOutputMessage),
  );
}

export function responsesOutputMessageFromJSON(
  jsonString: string,
): SafeParseResult<ResponsesOutputMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponsesOutputMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponsesOutputMessage' from JSON`,
  );
}
