/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v4";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  OpenAIResponsesRefusalContent,
  OpenAIResponsesRefusalContent$inboundSchema,
  OpenAIResponsesRefusalContent$Outbound,
  OpenAIResponsesRefusalContent$outboundSchema,
} from "./openairesponsesrefusalcontent.js";
import {
  ResponseOutputText,
  ResponseOutputText$inboundSchema,
  ResponseOutputText$Outbound,
  ResponseOutputText$outboundSchema,
} from "./responseoutputtext.js";

export const ResponsesOutputMessageRole = {
  Assistant: "assistant",
} as const;
export type ResponsesOutputMessageRole = ClosedEnum<
  typeof ResponsesOutputMessageRole
>;

export const ResponsesOutputMessageType = {
  Message: "message",
} as const;
export type ResponsesOutputMessageType = ClosedEnum<
  typeof ResponsesOutputMessageType
>;

export const ResponsesOutputMessageStatusInProgress = {
  InProgress: "in_progress",
} as const;
export type ResponsesOutputMessageStatusInProgress = ClosedEnum<
  typeof ResponsesOutputMessageStatusInProgress
>;

export const ResponsesOutputMessageStatusIncomplete = {
  Incomplete: "incomplete",
} as const;
export type ResponsesOutputMessageStatusIncomplete = ClosedEnum<
  typeof ResponsesOutputMessageStatusIncomplete
>;

export const ResponsesOutputMessageStatusCompleted = {
  Completed: "completed",
} as const;
export type ResponsesOutputMessageStatusCompleted = ClosedEnum<
  typeof ResponsesOutputMessageStatusCompleted
>;

export type ResponsesOutputMessageStatusUnion =
  | ResponsesOutputMessageStatusCompleted
  | ResponsesOutputMessageStatusIncomplete
  | ResponsesOutputMessageStatusInProgress;

export type ResponsesOutputMessageContent =
  | ResponseOutputText
  | OpenAIResponsesRefusalContent;

/**
 * An output message item
 */
export type ResponsesOutputMessage = {
  id: string;
  role: ResponsesOutputMessageRole;
  type: ResponsesOutputMessageType;
  status?:
    | ResponsesOutputMessageStatusCompleted
    | ResponsesOutputMessageStatusIncomplete
    | ResponsesOutputMessageStatusInProgress
    | undefined;
  content: Array<ResponseOutputText | OpenAIResponsesRefusalContent>;
};

/** @internal */
export const ResponsesOutputMessageRole$inboundSchema: z.ZodEnum<
  typeof ResponsesOutputMessageRole
> = z.enum(ResponsesOutputMessageRole);

/** @internal */
export const ResponsesOutputMessageRole$outboundSchema: z.ZodEnum<
  typeof ResponsesOutputMessageRole
> = ResponsesOutputMessageRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesOutputMessageRole$ {
  /** @deprecated use `ResponsesOutputMessageRole$inboundSchema` instead. */
  export const inboundSchema = ResponsesOutputMessageRole$inboundSchema;
  /** @deprecated use `ResponsesOutputMessageRole$outboundSchema` instead. */
  export const outboundSchema = ResponsesOutputMessageRole$outboundSchema;
}

/** @internal */
export const ResponsesOutputMessageType$inboundSchema: z.ZodEnum<
  typeof ResponsesOutputMessageType
> = z.enum(ResponsesOutputMessageType);

/** @internal */
export const ResponsesOutputMessageType$outboundSchema: z.ZodEnum<
  typeof ResponsesOutputMessageType
> = ResponsesOutputMessageType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesOutputMessageType$ {
  /** @deprecated use `ResponsesOutputMessageType$inboundSchema` instead. */
  export const inboundSchema = ResponsesOutputMessageType$inboundSchema;
  /** @deprecated use `ResponsesOutputMessageType$outboundSchema` instead. */
  export const outboundSchema = ResponsesOutputMessageType$outboundSchema;
}

/** @internal */
export const ResponsesOutputMessageStatusInProgress$inboundSchema: z.ZodEnum<
  typeof ResponsesOutputMessageStatusInProgress
> = z.enum(ResponsesOutputMessageStatusInProgress);

/** @internal */
export const ResponsesOutputMessageStatusInProgress$outboundSchema: z.ZodEnum<
  typeof ResponsesOutputMessageStatusInProgress
> = ResponsesOutputMessageStatusInProgress$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesOutputMessageStatusInProgress$ {
  /** @deprecated use `ResponsesOutputMessageStatusInProgress$inboundSchema` instead. */
  export const inboundSchema =
    ResponsesOutputMessageStatusInProgress$inboundSchema;
  /** @deprecated use `ResponsesOutputMessageStatusInProgress$outboundSchema` instead. */
  export const outboundSchema =
    ResponsesOutputMessageStatusInProgress$outboundSchema;
}

/** @internal */
export const ResponsesOutputMessageStatusIncomplete$inboundSchema: z.ZodEnum<
  typeof ResponsesOutputMessageStatusIncomplete
> = z.enum(ResponsesOutputMessageStatusIncomplete);

/** @internal */
export const ResponsesOutputMessageStatusIncomplete$outboundSchema: z.ZodEnum<
  typeof ResponsesOutputMessageStatusIncomplete
> = ResponsesOutputMessageStatusIncomplete$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesOutputMessageStatusIncomplete$ {
  /** @deprecated use `ResponsesOutputMessageStatusIncomplete$inboundSchema` instead. */
  export const inboundSchema =
    ResponsesOutputMessageStatusIncomplete$inboundSchema;
  /** @deprecated use `ResponsesOutputMessageStatusIncomplete$outboundSchema` instead. */
  export const outboundSchema =
    ResponsesOutputMessageStatusIncomplete$outboundSchema;
}

/** @internal */
export const ResponsesOutputMessageStatusCompleted$inboundSchema: z.ZodEnum<
  typeof ResponsesOutputMessageStatusCompleted
> = z.enum(ResponsesOutputMessageStatusCompleted);

/** @internal */
export const ResponsesOutputMessageStatusCompleted$outboundSchema: z.ZodEnum<
  typeof ResponsesOutputMessageStatusCompleted
> = ResponsesOutputMessageStatusCompleted$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesOutputMessageStatusCompleted$ {
  /** @deprecated use `ResponsesOutputMessageStatusCompleted$inboundSchema` instead. */
  export const inboundSchema =
    ResponsesOutputMessageStatusCompleted$inboundSchema;
  /** @deprecated use `ResponsesOutputMessageStatusCompleted$outboundSchema` instead. */
  export const outboundSchema =
    ResponsesOutputMessageStatusCompleted$outboundSchema;
}

/** @internal */
export const ResponsesOutputMessageStatusUnion$inboundSchema: z.ZodType<
  ResponsesOutputMessageStatusUnion,
  unknown
> = z.union([
  ResponsesOutputMessageStatusCompleted$inboundSchema,
  ResponsesOutputMessageStatusIncomplete$inboundSchema,
  ResponsesOutputMessageStatusInProgress$inboundSchema,
]);

/** @internal */
export type ResponsesOutputMessageStatusUnion$Outbound =
  | string
  | string
  | string;

/** @internal */
export const ResponsesOutputMessageStatusUnion$outboundSchema: z.ZodType<
  ResponsesOutputMessageStatusUnion$Outbound,
  ResponsesOutputMessageStatusUnion
> = z.union([
  ResponsesOutputMessageStatusCompleted$outboundSchema,
  ResponsesOutputMessageStatusIncomplete$outboundSchema,
  ResponsesOutputMessageStatusInProgress$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesOutputMessageStatusUnion$ {
  /** @deprecated use `ResponsesOutputMessageStatusUnion$inboundSchema` instead. */
  export const inboundSchema = ResponsesOutputMessageStatusUnion$inboundSchema;
  /** @deprecated use `ResponsesOutputMessageStatusUnion$outboundSchema` instead. */
  export const outboundSchema =
    ResponsesOutputMessageStatusUnion$outboundSchema;
  /** @deprecated use `ResponsesOutputMessageStatusUnion$Outbound` instead. */
  export type Outbound = ResponsesOutputMessageStatusUnion$Outbound;
}

export function responsesOutputMessageStatusUnionToJSON(
  responsesOutputMessageStatusUnion: ResponsesOutputMessageStatusUnion,
): string {
  return JSON.stringify(
    ResponsesOutputMessageStatusUnion$outboundSchema.parse(
      responsesOutputMessageStatusUnion,
    ),
  );
}

export function responsesOutputMessageStatusUnionFromJSON(
  jsonString: string,
): SafeParseResult<ResponsesOutputMessageStatusUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponsesOutputMessageStatusUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponsesOutputMessageStatusUnion' from JSON`,
  );
}

/** @internal */
export const ResponsesOutputMessageContent$inboundSchema: z.ZodType<
  ResponsesOutputMessageContent,
  unknown
> = z.union([
  ResponseOutputText$inboundSchema,
  OpenAIResponsesRefusalContent$inboundSchema,
]);

/** @internal */
export type ResponsesOutputMessageContent$Outbound =
  | ResponseOutputText$Outbound
  | OpenAIResponsesRefusalContent$Outbound;

/** @internal */
export const ResponsesOutputMessageContent$outboundSchema: z.ZodType<
  ResponsesOutputMessageContent$Outbound,
  ResponsesOutputMessageContent
> = z.union([
  ResponseOutputText$outboundSchema,
  OpenAIResponsesRefusalContent$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesOutputMessageContent$ {
  /** @deprecated use `ResponsesOutputMessageContent$inboundSchema` instead. */
  export const inboundSchema = ResponsesOutputMessageContent$inboundSchema;
  /** @deprecated use `ResponsesOutputMessageContent$outboundSchema` instead. */
  export const outboundSchema = ResponsesOutputMessageContent$outboundSchema;
  /** @deprecated use `ResponsesOutputMessageContent$Outbound` instead. */
  export type Outbound = ResponsesOutputMessageContent$Outbound;
}

export function responsesOutputMessageContentToJSON(
  responsesOutputMessageContent: ResponsesOutputMessageContent,
): string {
  return JSON.stringify(
    ResponsesOutputMessageContent$outboundSchema.parse(
      responsesOutputMessageContent,
    ),
  );
}

export function responsesOutputMessageContentFromJSON(
  jsonString: string,
): SafeParseResult<ResponsesOutputMessageContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponsesOutputMessageContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponsesOutputMessageContent' from JSON`,
  );
}

/** @internal */
export const ResponsesOutputMessage$inboundSchema: z.ZodType<
  ResponsesOutputMessage,
  unknown
> = z.object({
  id: z.string(),
  role: ResponsesOutputMessageRole$inboundSchema,
  type: ResponsesOutputMessageType$inboundSchema,
  status: z.union([
    ResponsesOutputMessageStatusCompleted$inboundSchema,
    ResponsesOutputMessageStatusIncomplete$inboundSchema,
    ResponsesOutputMessageStatusInProgress$inboundSchema,
  ]).optional(),
  content: z.array(
    z.union([
      ResponseOutputText$inboundSchema,
      OpenAIResponsesRefusalContent$inboundSchema,
    ]),
  ),
});

/** @internal */
export type ResponsesOutputMessage$Outbound = {
  id: string;
  role: string;
  type: string;
  status?: string | string | string | undefined;
  content: Array<
    ResponseOutputText$Outbound | OpenAIResponsesRefusalContent$Outbound
  >;
};

/** @internal */
export const ResponsesOutputMessage$outboundSchema: z.ZodType<
  ResponsesOutputMessage$Outbound,
  ResponsesOutputMessage
> = z.object({
  id: z.string(),
  role: ResponsesOutputMessageRole$outboundSchema,
  type: ResponsesOutputMessageType$outboundSchema,
  status: z.union([
    ResponsesOutputMessageStatusCompleted$outboundSchema,
    ResponsesOutputMessageStatusIncomplete$outboundSchema,
    ResponsesOutputMessageStatusInProgress$outboundSchema,
  ]).optional(),
  content: z.array(
    z.union([
      ResponseOutputText$outboundSchema,
      OpenAIResponsesRefusalContent$outboundSchema,
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesOutputMessage$ {
  /** @deprecated use `ResponsesOutputMessage$inboundSchema` instead. */
  export const inboundSchema = ResponsesOutputMessage$inboundSchema;
  /** @deprecated use `ResponsesOutputMessage$outboundSchema` instead. */
  export const outboundSchema = ResponsesOutputMessage$outboundSchema;
  /** @deprecated use `ResponsesOutputMessage$Outbound` instead. */
  export type Outbound = ResponsesOutputMessage$Outbound;
}

export function responsesOutputMessageToJSON(
  responsesOutputMessage: ResponsesOutputMessage,
): string {
  return JSON.stringify(
    ResponsesOutputMessage$outboundSchema.parse(responsesOutputMessage),
  );
}

export function responsesOutputMessageFromJSON(
  jsonString: string,
): SafeParseResult<ResponsesOutputMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponsesOutputMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponsesOutputMessage' from JSON`,
  );
}
