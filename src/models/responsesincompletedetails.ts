/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const ResponsesIncompleteDetailsReason = {
  MaxOutputTokens: "max_output_tokens",
  ContentFilter: "content_filter",
} as const;
export type ResponsesIncompleteDetailsReason = ClosedEnum<
  typeof ResponsesIncompleteDetailsReason
>;

/**
 * Details about why response was incomplete
 */
export type ResponsesIncompleteDetails = {
  reason?: ResponsesIncompleteDetailsReason | undefined;
};

/** @internal */
export const ResponsesIncompleteDetailsReason$inboundSchema: z.ZodNativeEnum<
  typeof ResponsesIncompleteDetailsReason
> = z.nativeEnum(ResponsesIncompleteDetailsReason);

/** @internal */
export const ResponsesIncompleteDetailsReason$outboundSchema: z.ZodNativeEnum<
  typeof ResponsesIncompleteDetailsReason
> = ResponsesIncompleteDetailsReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesIncompleteDetailsReason$ {
  /** @deprecated use `ResponsesIncompleteDetailsReason$inboundSchema` instead. */
  export const inboundSchema = ResponsesIncompleteDetailsReason$inboundSchema;
  /** @deprecated use `ResponsesIncompleteDetailsReason$outboundSchema` instead. */
  export const outboundSchema = ResponsesIncompleteDetailsReason$outboundSchema;
}

/** @internal */
export const ResponsesIncompleteDetails$inboundSchema: z.ZodType<
  ResponsesIncompleteDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  reason: ResponsesIncompleteDetailsReason$inboundSchema.optional(),
});

/** @internal */
export type ResponsesIncompleteDetails$Outbound = {
  reason?: string | undefined;
};

/** @internal */
export const ResponsesIncompleteDetails$outboundSchema: z.ZodType<
  ResponsesIncompleteDetails$Outbound,
  z.ZodTypeDef,
  ResponsesIncompleteDetails
> = z.object({
  reason: ResponsesIncompleteDetailsReason$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesIncompleteDetails$ {
  /** @deprecated use `ResponsesIncompleteDetails$inboundSchema` instead. */
  export const inboundSchema = ResponsesIncompleteDetails$inboundSchema;
  /** @deprecated use `ResponsesIncompleteDetails$outboundSchema` instead. */
  export const outboundSchema = ResponsesIncompleteDetails$outboundSchema;
  /** @deprecated use `ResponsesIncompleteDetails$Outbound` instead. */
  export type Outbound = ResponsesIncompleteDetails$Outbound;
}

export function responsesIncompleteDetailsToJSON(
  responsesIncompleteDetails: ResponsesIncompleteDetails,
): string {
  return JSON.stringify(
    ResponsesIncompleteDetails$outboundSchema.parse(responsesIncompleteDetails),
  );
}

export function responsesIncompleteDetailsFromJSON(
  jsonString: string,
): SafeParseResult<ResponsesIncompleteDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponsesIncompleteDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponsesIncompleteDetails' from JSON`,
  );
}
