/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v4";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const ReasoningSummaryTextType = {
  SummaryText: "summary_text",
} as const;
export type ReasoningSummaryTextType = ClosedEnum<
  typeof ReasoningSummaryTextType
>;

export type ReasoningSummaryText = {
  type: ReasoningSummaryTextType;
  text: string;
};

/** @internal */
export const ReasoningSummaryTextType$inboundSchema: z.ZodEnum<
  typeof ReasoningSummaryTextType
> = z.enum(ReasoningSummaryTextType);

/** @internal */
export const ReasoningSummaryTextType$outboundSchema: z.ZodEnum<
  typeof ReasoningSummaryTextType
> = ReasoningSummaryTextType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReasoningSummaryTextType$ {
  /** @deprecated use `ReasoningSummaryTextType$inboundSchema` instead. */
  export const inboundSchema = ReasoningSummaryTextType$inboundSchema;
  /** @deprecated use `ReasoningSummaryTextType$outboundSchema` instead. */
  export const outboundSchema = ReasoningSummaryTextType$outboundSchema;
}

/** @internal */
export const ReasoningSummaryText$inboundSchema: z.ZodType<
  ReasoningSummaryText,
  unknown
> = z.object({
  type: ReasoningSummaryTextType$inboundSchema,
  text: z.string(),
});

/** @internal */
export type ReasoningSummaryText$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const ReasoningSummaryText$outboundSchema: z.ZodType<
  ReasoningSummaryText$Outbound,
  ReasoningSummaryText
> = z.object({
  type: ReasoningSummaryTextType$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReasoningSummaryText$ {
  /** @deprecated use `ReasoningSummaryText$inboundSchema` instead. */
  export const inboundSchema = ReasoningSummaryText$inboundSchema;
  /** @deprecated use `ReasoningSummaryText$outboundSchema` instead. */
  export const outboundSchema = ReasoningSummaryText$outboundSchema;
  /** @deprecated use `ReasoningSummaryText$Outbound` instead. */
  export type Outbound = ReasoningSummaryText$Outbound;
}

export function reasoningSummaryTextToJSON(
  reasoningSummaryText: ReasoningSummaryText,
): string {
  return JSON.stringify(
    ReasoningSummaryText$outboundSchema.parse(reasoningSummaryText),
  );
}

export function reasoningSummaryTextFromJSON(
  jsonString: string,
): SafeParseResult<ReasoningSummaryText, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReasoningSummaryText$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReasoningSummaryText' from JSON`,
  );
}
