/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ChatMessageTokenLogprob,
  ChatMessageTokenLogprob$inboundSchema,
  ChatMessageTokenLogprob$Outbound,
  ChatMessageTokenLogprob$outboundSchema,
} from "./chatmessagetokenlogprob.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ChatMessageTokenLogprobs = {
  content: Array<ChatMessageTokenLogprob> | null;
  refusal: Array<ChatMessageTokenLogprob> | null;
};

/** @internal */
export const ChatMessageTokenLogprobs$inboundSchema: z.ZodType<
  ChatMessageTokenLogprobs,
  z.ZodTypeDef,
  unknown
> = z.object({
  content: z.nullable(z.array(ChatMessageTokenLogprob$inboundSchema)),
  refusal: z.nullable(z.array(ChatMessageTokenLogprob$inboundSchema)),
});

/** @internal */
export type ChatMessageTokenLogprobs$Outbound = {
  content: Array<ChatMessageTokenLogprob$Outbound> | null;
  refusal: Array<ChatMessageTokenLogprob$Outbound> | null;
};

/** @internal */
export const ChatMessageTokenLogprobs$outboundSchema: z.ZodType<
  ChatMessageTokenLogprobs$Outbound,
  z.ZodTypeDef,
  ChatMessageTokenLogprobs
> = z.object({
  content: z.nullable(z.array(ChatMessageTokenLogprob$outboundSchema)),
  refusal: z.nullable(z.array(ChatMessageTokenLogprob$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatMessageTokenLogprobs$ {
  /** @deprecated use `ChatMessageTokenLogprobs$inboundSchema` instead. */
  export const inboundSchema = ChatMessageTokenLogprobs$inboundSchema;
  /** @deprecated use `ChatMessageTokenLogprobs$outboundSchema` instead. */
  export const outboundSchema = ChatMessageTokenLogprobs$outboundSchema;
  /** @deprecated use `ChatMessageTokenLogprobs$Outbound` instead. */
  export type Outbound = ChatMessageTokenLogprobs$Outbound;
}

export function chatMessageTokenLogprobsToJSON(
  chatMessageTokenLogprobs: ChatMessageTokenLogprobs,
): string {
  return JSON.stringify(
    ChatMessageTokenLogprobs$outboundSchema.parse(chatMessageTokenLogprobs),
  );
}

export function chatMessageTokenLogprobsFromJSON(
  jsonString: string,
): SafeParseResult<ChatMessageTokenLogprobs, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatMessageTokenLogprobs$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatMessageTokenLogprobs' from JSON`,
  );
}
