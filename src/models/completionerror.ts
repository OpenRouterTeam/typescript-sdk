/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type CompletionErrorCode = string | number;

export type CompletionErrorError = {
  code: string | number | null;
  message: string;
  param: string | null;
  type: string;
};

/** @internal */
export const CompletionErrorCode$inboundSchema: z.ZodType<
  CompletionErrorCode,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number()]);

/** @internal */
export type CompletionErrorCode$Outbound = string | number;

/** @internal */
export const CompletionErrorCode$outboundSchema: z.ZodType<
  CompletionErrorCode$Outbound,
  z.ZodTypeDef,
  CompletionErrorCode
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompletionErrorCode$ {
  /** @deprecated use `CompletionErrorCode$inboundSchema` instead. */
  export const inboundSchema = CompletionErrorCode$inboundSchema;
  /** @deprecated use `CompletionErrorCode$outboundSchema` instead. */
  export const outboundSchema = CompletionErrorCode$outboundSchema;
  /** @deprecated use `CompletionErrorCode$Outbound` instead. */
  export type Outbound = CompletionErrorCode$Outbound;
}

export function completionErrorCodeToJSON(
  completionErrorCode: CompletionErrorCode,
): string {
  return JSON.stringify(
    CompletionErrorCode$outboundSchema.parse(completionErrorCode),
  );
}

export function completionErrorCodeFromJSON(
  jsonString: string,
): SafeParseResult<CompletionErrorCode, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompletionErrorCode$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompletionErrorCode' from JSON`,
  );
}

/** @internal */
export const CompletionErrorError$inboundSchema: z.ZodType<
  CompletionErrorError,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.nullable(z.union([z.string(), z.number()])),
  message: z.string(),
  param: z.nullable(z.string()),
  type: z.string(),
});

/** @internal */
export type CompletionErrorError$Outbound = {
  code: string | number | null;
  message: string;
  param: string | null;
  type: string;
};

/** @internal */
export const CompletionErrorError$outboundSchema: z.ZodType<
  CompletionErrorError$Outbound,
  z.ZodTypeDef,
  CompletionErrorError
> = z.object({
  code: z.nullable(z.union([z.string(), z.number()])),
  message: z.string(),
  param: z.nullable(z.string()),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompletionErrorError$ {
  /** @deprecated use `CompletionErrorError$inboundSchema` instead. */
  export const inboundSchema = CompletionErrorError$inboundSchema;
  /** @deprecated use `CompletionErrorError$outboundSchema` instead. */
  export const outboundSchema = CompletionErrorError$outboundSchema;
  /** @deprecated use `CompletionErrorError$Outbound` instead. */
  export type Outbound = CompletionErrorError$Outbound;
}

export function completionErrorErrorToJSON(
  completionErrorError: CompletionErrorError,
): string {
  return JSON.stringify(
    CompletionErrorError$outboundSchema.parse(completionErrorError),
  );
}

export function completionErrorErrorFromJSON(
  jsonString: string,
): SafeParseResult<CompletionErrorError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompletionErrorError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompletionErrorError' from JSON`,
  );
}
