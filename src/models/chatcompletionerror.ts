/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ChatCompletionErrorError = {
  code: string | null;
  message: string;
  param: string | null;
  type: string;
};

/** @internal */
export const ChatCompletionErrorError$inboundSchema: z.ZodType<
  ChatCompletionErrorError,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.nullable(z.string()),
  message: z.string(),
  param: z.nullable(z.string()),
  type: z.string(),
});

/** @internal */
export type ChatCompletionErrorError$Outbound = {
  code: string | null;
  message: string;
  param: string | null;
  type: string;
};

/** @internal */
export const ChatCompletionErrorError$outboundSchema: z.ZodType<
  ChatCompletionErrorError$Outbound,
  z.ZodTypeDef,
  ChatCompletionErrorError
> = z.object({
  code: z.nullable(z.string()),
  message: z.string(),
  param: z.nullable(z.string()),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionErrorError$ {
  /** @deprecated use `ChatCompletionErrorError$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionErrorError$inboundSchema;
  /** @deprecated use `ChatCompletionErrorError$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionErrorError$outboundSchema;
  /** @deprecated use `ChatCompletionErrorError$Outbound` instead. */
  export type Outbound = ChatCompletionErrorError$Outbound;
}

export function chatCompletionErrorErrorToJSON(
  chatCompletionErrorError: ChatCompletionErrorError,
): string {
  return JSON.stringify(
    ChatCompletionErrorError$outboundSchema.parse(chatCompletionErrorError),
  );
}

export function chatCompletionErrorErrorFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionErrorError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionErrorError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionErrorError' from JSON`,
  );
}
