/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v4";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  OpenResponsesInputContent,
  OpenResponsesInputContent$inboundSchema,
  OpenResponsesInputContent$Outbound,
  OpenResponsesInputContent$outboundSchema,
} from "./openresponsesinputcontent.js";

/**
 * Prompt template with variables for the response
 */
export type OpenResponsesPrompt = {
  id: string;
  variables?: { [k: string]: OpenResponsesInputContent } | null | undefined;
};

/** @internal */
export const OpenResponsesPrompt$inboundSchema: z.ZodType<
  OpenResponsesPrompt,
  unknown
> = z.object({
  id: z.string(),
  variables: z.nullable(
    z.record(z.string(), OpenResponsesInputContent$inboundSchema),
  ).optional(),
});

/** @internal */
export type OpenResponsesPrompt$Outbound = {
  id: string;
  variables?:
    | { [k: string]: OpenResponsesInputContent$Outbound }
    | null
    | undefined;
};

/** @internal */
export const OpenResponsesPrompt$outboundSchema: z.ZodType<
  OpenResponsesPrompt$Outbound,
  OpenResponsesPrompt
> = z.object({
  id: z.string(),
  variables: z.nullable(
    z.record(z.string(), OpenResponsesInputContent$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesPrompt$ {
  /** @deprecated use `OpenResponsesPrompt$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesPrompt$inboundSchema;
  /** @deprecated use `OpenResponsesPrompt$outboundSchema` instead. */
  export const outboundSchema = OpenResponsesPrompt$outboundSchema;
  /** @deprecated use `OpenResponsesPrompt$Outbound` instead. */
  export type Outbound = OpenResponsesPrompt$Outbound;
}

export function openResponsesPromptToJSON(
  openResponsesPrompt: OpenResponsesPrompt,
): string {
  return JSON.stringify(
    OpenResponsesPrompt$outboundSchema.parse(openResponsesPrompt),
  );
}

export function openResponsesPromptFromJSON(
  jsonString: string,
): SafeParseResult<OpenResponsesPrompt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenResponsesPrompt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenResponsesPrompt' from JSON`,
  );
}
