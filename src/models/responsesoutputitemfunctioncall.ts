/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v4";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const ResponsesOutputItemFunctionCallType = {
  FunctionCall: "function_call",
} as const;
export type ResponsesOutputItemFunctionCallType = ClosedEnum<
  typeof ResponsesOutputItemFunctionCallType
>;

export type ResponsesOutputItemFunctionCall = {
  type: ResponsesOutputItemFunctionCallType;
  id?: string | undefined;
  name: string;
  arguments: string;
  callId: string;
};

/** @internal */
export const ResponsesOutputItemFunctionCallType$inboundSchema: z.ZodEnum<
  typeof ResponsesOutputItemFunctionCallType
> = z.enum(ResponsesOutputItemFunctionCallType);

/** @internal */
export const ResponsesOutputItemFunctionCallType$outboundSchema: z.ZodEnum<
  typeof ResponsesOutputItemFunctionCallType
> = ResponsesOutputItemFunctionCallType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesOutputItemFunctionCallType$ {
  /** @deprecated use `ResponsesOutputItemFunctionCallType$inboundSchema` instead. */
  export const inboundSchema =
    ResponsesOutputItemFunctionCallType$inboundSchema;
  /** @deprecated use `ResponsesOutputItemFunctionCallType$outboundSchema` instead. */
  export const outboundSchema =
    ResponsesOutputItemFunctionCallType$outboundSchema;
}

/** @internal */
export const ResponsesOutputItemFunctionCall$inboundSchema: z.ZodType<
  ResponsesOutputItemFunctionCall,
  unknown
> = z.object({
  type: ResponsesOutputItemFunctionCallType$inboundSchema,
  id: z.string().optional(),
  name: z.string(),
  arguments: z.string(),
  call_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "call_id": "callId",
  });
});

/** @internal */
export type ResponsesOutputItemFunctionCall$Outbound = {
  type: string;
  id?: string | undefined;
  name: string;
  arguments: string;
  call_id: string;
};

/** @internal */
export const ResponsesOutputItemFunctionCall$outboundSchema: z.ZodType<
  ResponsesOutputItemFunctionCall$Outbound,
  ResponsesOutputItemFunctionCall
> = z.object({
  type: ResponsesOutputItemFunctionCallType$outboundSchema,
  id: z.string().optional(),
  name: z.string(),
  arguments: z.string(),
  callId: z.string(),
}).transform((v) => {
  return remap$(v, {
    callId: "call_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesOutputItemFunctionCall$ {
  /** @deprecated use `ResponsesOutputItemFunctionCall$inboundSchema` instead. */
  export const inboundSchema = ResponsesOutputItemFunctionCall$inboundSchema;
  /** @deprecated use `ResponsesOutputItemFunctionCall$outboundSchema` instead. */
  export const outboundSchema = ResponsesOutputItemFunctionCall$outboundSchema;
  /** @deprecated use `ResponsesOutputItemFunctionCall$Outbound` instead. */
  export type Outbound = ResponsesOutputItemFunctionCall$Outbound;
}

export function responsesOutputItemFunctionCallToJSON(
  responsesOutputItemFunctionCall: ResponsesOutputItemFunctionCall,
): string {
  return JSON.stringify(
    ResponsesOutputItemFunctionCall$outboundSchema.parse(
      responsesOutputItemFunctionCall,
    ),
  );
}

export function responsesOutputItemFunctionCallFromJSON(
  jsonString: string,
): SafeParseResult<ResponsesOutputItemFunctionCall, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponsesOutputItemFunctionCall$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponsesOutputItemFunctionCall' from JSON`,
  );
}
