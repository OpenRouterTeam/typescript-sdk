/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";

export const OpenResponsesTruncation = {
  Auto: "auto",
  Disabled: "disabled",
} as const;
export type OpenResponsesTruncation = OpenEnum<typeof OpenResponsesTruncation>;

/** @internal */
export const OpenResponsesTruncation$inboundSchema: z.ZodType<
  OpenResponsesTruncation,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(OpenResponsesTruncation),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const OpenResponsesTruncation$outboundSchema: z.ZodType<
  OpenResponsesTruncation,
  z.ZodTypeDef,
  OpenResponsesTruncation
> = z.union([
  z.nativeEnum(OpenResponsesTruncation),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesTruncation$ {
  /** @deprecated use `OpenResponsesTruncation$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesTruncation$inboundSchema;
  /** @deprecated use `OpenResponsesTruncation$outboundSchema` instead. */
  export const outboundSchema = OpenResponsesTruncation$outboundSchema;
}
