/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ChatStreamingMessageToolCall,
  ChatStreamingMessageToolCall$inboundSchema,
  ChatStreamingMessageToolCall$Outbound,
  ChatStreamingMessageToolCall$outboundSchema,
} from "./chatstreamingmessagetoolcall.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const Role = {
  Assistant: "assistant",
} as const;
export type Role = ClosedEnum<typeof Role>;

export type ChatStreamingMessageChunk = {
  role?: Role | undefined;
  content?: string | null | undefined;
  reasoning?: string | null | undefined;
  refusal?: string | null | undefined;
  toolCalls?: Array<ChatStreamingMessageToolCall> | undefined;
};

/** @internal */
export const Role$inboundSchema: z.ZodNativeEnum<typeof Role> = z.nativeEnum(
  Role,
);

/** @internal */
export const Role$outboundSchema: z.ZodNativeEnum<typeof Role> =
  Role$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Role$ {
  /** @deprecated use `Role$inboundSchema` instead. */
  export const inboundSchema = Role$inboundSchema;
  /** @deprecated use `Role$outboundSchema` instead. */
  export const outboundSchema = Role$outboundSchema;
}

/** @internal */
export const ChatStreamingMessageChunk$inboundSchema: z.ZodType<
  ChatStreamingMessageChunk,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: Role$inboundSchema.optional(),
  content: z.nullable(z.string()).optional(),
  reasoning: z.nullable(z.string()).optional(),
  refusal: z.nullable(z.string()).optional(),
  tool_calls: z.array(ChatStreamingMessageToolCall$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type ChatStreamingMessageChunk$Outbound = {
  role?: string | undefined;
  content?: string | null | undefined;
  reasoning?: string | null | undefined;
  refusal?: string | null | undefined;
  tool_calls?: Array<ChatStreamingMessageToolCall$Outbound> | undefined;
};

/** @internal */
export const ChatStreamingMessageChunk$outboundSchema: z.ZodType<
  ChatStreamingMessageChunk$Outbound,
  z.ZodTypeDef,
  ChatStreamingMessageChunk
> = z.object({
  role: Role$outboundSchema.optional(),
  content: z.nullable(z.string()).optional(),
  reasoning: z.nullable(z.string()).optional(),
  refusal: z.nullable(z.string()).optional(),
  toolCalls: z.array(ChatStreamingMessageToolCall$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatStreamingMessageChunk$ {
  /** @deprecated use `ChatStreamingMessageChunk$inboundSchema` instead. */
  export const inboundSchema = ChatStreamingMessageChunk$inboundSchema;
  /** @deprecated use `ChatStreamingMessageChunk$outboundSchema` instead. */
  export const outboundSchema = ChatStreamingMessageChunk$outboundSchema;
  /** @deprecated use `ChatStreamingMessageChunk$Outbound` instead. */
  export type Outbound = ChatStreamingMessageChunk$Outbound;
}

export function chatStreamingMessageChunkToJSON(
  chatStreamingMessageChunk: ChatStreamingMessageChunk,
): string {
  return JSON.stringify(
    ChatStreamingMessageChunk$outboundSchema.parse(chatStreamingMessageChunk),
  );
}

export function chatStreamingMessageChunkFromJSON(
  jsonString: string,
): SafeParseResult<ChatStreamingMessageChunk, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatStreamingMessageChunk$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatStreamingMessageChunk' from JSON`,
  );
}
