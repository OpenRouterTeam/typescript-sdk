/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ChatCompletionChunkChoiceDeltaToolCall,
  ChatCompletionChunkChoiceDeltaToolCall$inboundSchema,
  ChatCompletionChunkChoiceDeltaToolCall$Outbound,
  ChatCompletionChunkChoiceDeltaToolCall$outboundSchema,
} from "./chatcompletionchunkchoicedeltatoolcall.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const Role = {
  Assistant: "assistant",
} as const;
export type Role = ClosedEnum<typeof Role>;

export type ChatCompletionChunkChoiceDelta = {
  role?: Role | undefined;
  content?: string | null | undefined;
  reasoning?: string | null | undefined;
  refusal?: string | null | undefined;
  toolCalls?: Array<ChatCompletionChunkChoiceDeltaToolCall> | undefined;
};

/** @internal */
export const Role$inboundSchema: z.ZodNativeEnum<typeof Role> = z.nativeEnum(
  Role,
);

/** @internal */
export const Role$outboundSchema: z.ZodNativeEnum<typeof Role> =
  Role$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Role$ {
  /** @deprecated use `Role$inboundSchema` instead. */
  export const inboundSchema = Role$inboundSchema;
  /** @deprecated use `Role$outboundSchema` instead. */
  export const outboundSchema = Role$outboundSchema;
}

/** @internal */
export const ChatCompletionChunkChoiceDelta$inboundSchema: z.ZodType<
  ChatCompletionChunkChoiceDelta,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: Role$inboundSchema.optional(),
  content: z.nullable(z.string()).optional(),
  reasoning: z.nullable(z.string()).optional(),
  refusal: z.nullable(z.string()).optional(),
  tool_calls: z.array(ChatCompletionChunkChoiceDeltaToolCall$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type ChatCompletionChunkChoiceDelta$Outbound = {
  role?: string | undefined;
  content?: string | null | undefined;
  reasoning?: string | null | undefined;
  refusal?: string | null | undefined;
  tool_calls?:
    | Array<ChatCompletionChunkChoiceDeltaToolCall$Outbound>
    | undefined;
};

/** @internal */
export const ChatCompletionChunkChoiceDelta$outboundSchema: z.ZodType<
  ChatCompletionChunkChoiceDelta$Outbound,
  z.ZodTypeDef,
  ChatCompletionChunkChoiceDelta
> = z.object({
  role: Role$outboundSchema.optional(),
  content: z.nullable(z.string()).optional(),
  reasoning: z.nullable(z.string()).optional(),
  refusal: z.nullable(z.string()).optional(),
  toolCalls: z.array(ChatCompletionChunkChoiceDeltaToolCall$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionChunkChoiceDelta$ {
  /** @deprecated use `ChatCompletionChunkChoiceDelta$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionChunkChoiceDelta$inboundSchema;
  /** @deprecated use `ChatCompletionChunkChoiceDelta$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionChunkChoiceDelta$outboundSchema;
  /** @deprecated use `ChatCompletionChunkChoiceDelta$Outbound` instead. */
  export type Outbound = ChatCompletionChunkChoiceDelta$Outbound;
}

export function chatCompletionChunkChoiceDeltaToJSON(
  chatCompletionChunkChoiceDelta: ChatCompletionChunkChoiceDelta,
): string {
  return JSON.stringify(
    ChatCompletionChunkChoiceDelta$outboundSchema.parse(
      chatCompletionChunkChoiceDelta,
    ),
  );
}

export function chatCompletionChunkChoiceDeltaFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionChunkChoiceDelta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionChunkChoiceDelta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionChunkChoiceDelta' from JSON`,
  );
}
