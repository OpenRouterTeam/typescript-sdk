/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ToolChoiceFunction,
  ToolChoiceFunction$inboundSchema,
  ToolChoiceFunction$Outbound,
  ToolChoiceFunction$outboundSchema,
} from "./toolchoicefunction.js";
import {
  ToolChoiceTypes,
  ToolChoiceTypes$inboundSchema,
  ToolChoiceTypes$Outbound,
  ToolChoiceTypes$outboundSchema,
} from "./toolchoicetypes.js";

export const ToolChoiceRequired = {
  Required: "required",
} as const;
export type ToolChoiceRequired = ClosedEnum<typeof ToolChoiceRequired>;

export const ToolChoiceNone = {
  None: "none",
} as const;
export type ToolChoiceNone = ClosedEnum<typeof ToolChoiceNone>;

export const ToolChoiceAuto = {
  Auto: "auto",
} as const;
export type ToolChoiceAuto = ClosedEnum<typeof ToolChoiceAuto>;

/**
 * Tool choice configuration
 */
export type ToolChoice =
  | ToolChoiceFunction
  | ToolChoiceTypes
  | ToolChoiceAuto
  | ToolChoiceNone
  | ToolChoiceRequired;

/** @internal */
export const ToolChoiceRequired$inboundSchema: z.ZodNativeEnum<
  typeof ToolChoiceRequired
> = z.nativeEnum(ToolChoiceRequired);

/** @internal */
export const ToolChoiceRequired$outboundSchema: z.ZodNativeEnum<
  typeof ToolChoiceRequired
> = ToolChoiceRequired$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolChoiceRequired$ {
  /** @deprecated use `ToolChoiceRequired$inboundSchema` instead. */
  export const inboundSchema = ToolChoiceRequired$inboundSchema;
  /** @deprecated use `ToolChoiceRequired$outboundSchema` instead. */
  export const outboundSchema = ToolChoiceRequired$outboundSchema;
}

/** @internal */
export const ToolChoiceNone$inboundSchema: z.ZodNativeEnum<
  typeof ToolChoiceNone
> = z.nativeEnum(ToolChoiceNone);

/** @internal */
export const ToolChoiceNone$outboundSchema: z.ZodNativeEnum<
  typeof ToolChoiceNone
> = ToolChoiceNone$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolChoiceNone$ {
  /** @deprecated use `ToolChoiceNone$inboundSchema` instead. */
  export const inboundSchema = ToolChoiceNone$inboundSchema;
  /** @deprecated use `ToolChoiceNone$outboundSchema` instead. */
  export const outboundSchema = ToolChoiceNone$outboundSchema;
}

/** @internal */
export const ToolChoiceAuto$inboundSchema: z.ZodNativeEnum<
  typeof ToolChoiceAuto
> = z.nativeEnum(ToolChoiceAuto);

/** @internal */
export const ToolChoiceAuto$outboundSchema: z.ZodNativeEnum<
  typeof ToolChoiceAuto
> = ToolChoiceAuto$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolChoiceAuto$ {
  /** @deprecated use `ToolChoiceAuto$inboundSchema` instead. */
  export const inboundSchema = ToolChoiceAuto$inboundSchema;
  /** @deprecated use `ToolChoiceAuto$outboundSchema` instead. */
  export const outboundSchema = ToolChoiceAuto$outboundSchema;
}

/** @internal */
export const ToolChoice$inboundSchema: z.ZodType<
  ToolChoice,
  z.ZodTypeDef,
  unknown
> = z.union([
  ToolChoiceFunction$inboundSchema,
  ToolChoiceTypes$inboundSchema,
  ToolChoiceAuto$inboundSchema,
  ToolChoiceNone$inboundSchema,
  ToolChoiceRequired$inboundSchema,
]);

/** @internal */
export type ToolChoice$Outbound =
  | ToolChoiceFunction$Outbound
  | ToolChoiceTypes$Outbound
  | string
  | string
  | string;

/** @internal */
export const ToolChoice$outboundSchema: z.ZodType<
  ToolChoice$Outbound,
  z.ZodTypeDef,
  ToolChoice
> = z.union([
  ToolChoiceFunction$outboundSchema,
  ToolChoiceTypes$outboundSchema,
  ToolChoiceAuto$outboundSchema,
  ToolChoiceNone$outboundSchema,
  ToolChoiceRequired$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolChoice$ {
  /** @deprecated use `ToolChoice$inboundSchema` instead. */
  export const inboundSchema = ToolChoice$inboundSchema;
  /** @deprecated use `ToolChoice$outboundSchema` instead. */
  export const outboundSchema = ToolChoice$outboundSchema;
  /** @deprecated use `ToolChoice$Outbound` instead. */
  export type Outbound = ToolChoice$Outbound;
}

export function toolChoiceToJSON(toolChoice: ToolChoice): string {
  return JSON.stringify(ToolChoice$outboundSchema.parse(toolChoice));
}

export function toolChoiceFromJSON(
  jsonString: string,
): SafeParseResult<ToolChoice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolChoice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolChoice' from JSON`,
  );
}
