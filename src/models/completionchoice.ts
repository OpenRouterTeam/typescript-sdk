/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  CompletionFinishReason,
  CompletionFinishReason$inboundSchema,
  CompletionFinishReason$outboundSchema,
} from "./completionfinishreason.js";
import {
  CompletionLogprobs,
  CompletionLogprobs$inboundSchema,
  CompletionLogprobs$Outbound,
  CompletionLogprobs$outboundSchema,
} from "./completionlogprobs.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type CompletionChoice = {
  text: string;
  index: number;
  logprobs: CompletionLogprobs | null;
  finishReason: CompletionFinishReason | null;
};

/** @internal */
export const CompletionChoice$inboundSchema: z.ZodType<
  CompletionChoice,
  z.ZodTypeDef,
  unknown
> = z.object({
  text: z.string(),
  index: z.number(),
  logprobs: z.nullable(CompletionLogprobs$inboundSchema),
  finish_reason: z.nullable(CompletionFinishReason$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "finish_reason": "finishReason",
  });
});

/** @internal */
export type CompletionChoice$Outbound = {
  text: string;
  index: number;
  logprobs: CompletionLogprobs$Outbound | null;
  finish_reason: string | null;
};

/** @internal */
export const CompletionChoice$outboundSchema: z.ZodType<
  CompletionChoice$Outbound,
  z.ZodTypeDef,
  CompletionChoice
> = z.object({
  text: z.string(),
  index: z.number(),
  logprobs: z.nullable(CompletionLogprobs$outboundSchema),
  finishReason: z.nullable(CompletionFinishReason$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    finishReason: "finish_reason",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompletionChoice$ {
  /** @deprecated use `CompletionChoice$inboundSchema` instead. */
  export const inboundSchema = CompletionChoice$inboundSchema;
  /** @deprecated use `CompletionChoice$outboundSchema` instead. */
  export const outboundSchema = CompletionChoice$outboundSchema;
  /** @deprecated use `CompletionChoice$Outbound` instead. */
  export type Outbound = CompletionChoice$Outbound;
}

export function completionChoiceToJSON(
  completionChoice: CompletionChoice,
): string {
  return JSON.stringify(
    CompletionChoice$outboundSchema.parse(completionChoice),
  );
}

export function completionChoiceFromJSON(
  jsonString: string,
): SafeParseResult<CompletionChoice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompletionChoice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompletionChoice' from JSON`,
  );
}
