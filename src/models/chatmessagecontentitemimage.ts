/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const Detail = {
  Auto: "auto",
  Low: "low",
  High: "high",
} as const;
export type Detail = ClosedEnum<typeof Detail>;

export type ImageUrl = {
  url: string;
  detail?: Detail | undefined;
};

export type ChatMessageContentItemImage = {
  type: "image_url";
  imageUrl: ImageUrl;
};

/** @internal */
export const Detail$inboundSchema: z.ZodNativeEnum<typeof Detail> = z
  .nativeEnum(Detail);

/** @internal */
export const Detail$outboundSchema: z.ZodNativeEnum<typeof Detail> =
  Detail$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Detail$ {
  /** @deprecated use `Detail$inboundSchema` instead. */
  export const inboundSchema = Detail$inboundSchema;
  /** @deprecated use `Detail$outboundSchema` instead. */
  export const outboundSchema = Detail$outboundSchema;
}

/** @internal */
export const ImageUrl$inboundSchema: z.ZodType<
  ImageUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
  detail: Detail$inboundSchema.optional(),
});

/** @internal */
export type ImageUrl$Outbound = {
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const ImageUrl$outboundSchema: z.ZodType<
  ImageUrl$Outbound,
  z.ZodTypeDef,
  ImageUrl
> = z.object({
  url: z.string(),
  detail: Detail$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ImageUrl$ {
  /** @deprecated use `ImageUrl$inboundSchema` instead. */
  export const inboundSchema = ImageUrl$inboundSchema;
  /** @deprecated use `ImageUrl$outboundSchema` instead. */
  export const outboundSchema = ImageUrl$outboundSchema;
  /** @deprecated use `ImageUrl$Outbound` instead. */
  export type Outbound = ImageUrl$Outbound;
}

export function imageUrlToJSON(imageUrl: ImageUrl): string {
  return JSON.stringify(ImageUrl$outboundSchema.parse(imageUrl));
}

export function imageUrlFromJSON(
  jsonString: string,
): SafeParseResult<ImageUrl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ImageUrl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ImageUrl' from JSON`,
  );
}

/** @internal */
export const ChatMessageContentItemImage$inboundSchema: z.ZodType<
  ChatMessageContentItemImage,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal("image_url"),
  image_url: z.lazy(() => ImageUrl$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type ChatMessageContentItemImage$Outbound = {
  type: "image_url";
  image_url: ImageUrl$Outbound;
};

/** @internal */
export const ChatMessageContentItemImage$outboundSchema: z.ZodType<
  ChatMessageContentItemImage$Outbound,
  z.ZodTypeDef,
  ChatMessageContentItemImage
> = z.object({
  type: z.literal("image_url"),
  imageUrl: z.lazy(() => ImageUrl$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatMessageContentItemImage$ {
  /** @deprecated use `ChatMessageContentItemImage$inboundSchema` instead. */
  export const inboundSchema = ChatMessageContentItemImage$inboundSchema;
  /** @deprecated use `ChatMessageContentItemImage$outboundSchema` instead. */
  export const outboundSchema = ChatMessageContentItemImage$outboundSchema;
  /** @deprecated use `ChatMessageContentItemImage$Outbound` instead. */
  export type Outbound = ChatMessageContentItemImage$Outbound;
}

export function chatMessageContentItemImageToJSON(
  chatMessageContentItemImage: ChatMessageContentItemImage,
): string {
  return JSON.stringify(
    ChatMessageContentItemImage$outboundSchema.parse(
      chatMessageContentItemImage,
    ),
  );
}

export function chatMessageContentItemImageFromJSON(
  jsonString: string,
): SafeParseResult<ChatMessageContentItemImage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatMessageContentItemImage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatMessageContentItemImage' from JSON`,
  );
}
