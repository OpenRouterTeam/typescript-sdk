/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ChatMessageTokenLogprobTopLogprob = {
  token: string;
  logprob: number;
  bytes: Array<number> | null;
};

export type ChatMessageTokenLogprob = {
  token: string;
  logprob: number;
  bytes: Array<number> | null;
  topLogprobs: Array<ChatMessageTokenLogprobTopLogprob>;
};

/** @internal */
export const ChatMessageTokenLogprobTopLogprob$inboundSchema: z.ZodType<
  ChatMessageTokenLogprobTopLogprob,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string(),
  logprob: z.number(),
  bytes: z.nullable(z.array(z.number())),
});

/** @internal */
export type ChatMessageTokenLogprobTopLogprob$Outbound = {
  token: string;
  logprob: number;
  bytes: Array<number> | null;
};

/** @internal */
export const ChatMessageTokenLogprobTopLogprob$outboundSchema: z.ZodType<
  ChatMessageTokenLogprobTopLogprob$Outbound,
  z.ZodTypeDef,
  ChatMessageTokenLogprobTopLogprob
> = z.object({
  token: z.string(),
  logprob: z.number(),
  bytes: z.nullable(z.array(z.number())),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatMessageTokenLogprobTopLogprob$ {
  /** @deprecated use `ChatMessageTokenLogprobTopLogprob$inboundSchema` instead. */
  export const inboundSchema = ChatMessageTokenLogprobTopLogprob$inboundSchema;
  /** @deprecated use `ChatMessageTokenLogprobTopLogprob$outboundSchema` instead. */
  export const outboundSchema =
    ChatMessageTokenLogprobTopLogprob$outboundSchema;
  /** @deprecated use `ChatMessageTokenLogprobTopLogprob$Outbound` instead. */
  export type Outbound = ChatMessageTokenLogprobTopLogprob$Outbound;
}

export function chatMessageTokenLogprobTopLogprobToJSON(
  chatMessageTokenLogprobTopLogprob: ChatMessageTokenLogprobTopLogprob,
): string {
  return JSON.stringify(
    ChatMessageTokenLogprobTopLogprob$outboundSchema.parse(
      chatMessageTokenLogprobTopLogprob,
    ),
  );
}

export function chatMessageTokenLogprobTopLogprobFromJSON(
  jsonString: string,
): SafeParseResult<ChatMessageTokenLogprobTopLogprob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatMessageTokenLogprobTopLogprob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatMessageTokenLogprobTopLogprob' from JSON`,
  );
}

/** @internal */
export const ChatMessageTokenLogprob$inboundSchema: z.ZodType<
  ChatMessageTokenLogprob,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string(),
  logprob: z.number(),
  bytes: z.nullable(z.array(z.number())),
  top_logprobs: z.array(
    z.lazy(() => ChatMessageTokenLogprobTopLogprob$inboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    "top_logprobs": "topLogprobs",
  });
});

/** @internal */
export type ChatMessageTokenLogprob$Outbound = {
  token: string;
  logprob: number;
  bytes: Array<number> | null;
  top_logprobs: Array<ChatMessageTokenLogprobTopLogprob$Outbound>;
};

/** @internal */
export const ChatMessageTokenLogprob$outboundSchema: z.ZodType<
  ChatMessageTokenLogprob$Outbound,
  z.ZodTypeDef,
  ChatMessageTokenLogprob
> = z.object({
  token: z.string(),
  logprob: z.number(),
  bytes: z.nullable(z.array(z.number())),
  topLogprobs: z.array(
    z.lazy(() => ChatMessageTokenLogprobTopLogprob$outboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    topLogprobs: "top_logprobs",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatMessageTokenLogprob$ {
  /** @deprecated use `ChatMessageTokenLogprob$inboundSchema` instead. */
  export const inboundSchema = ChatMessageTokenLogprob$inboundSchema;
  /** @deprecated use `ChatMessageTokenLogprob$outboundSchema` instead. */
  export const outboundSchema = ChatMessageTokenLogprob$outboundSchema;
  /** @deprecated use `ChatMessageTokenLogprob$Outbound` instead. */
  export type Outbound = ChatMessageTokenLogprob$Outbound;
}

export function chatMessageTokenLogprobToJSON(
  chatMessageTokenLogprob: ChatMessageTokenLogprob,
): string {
  return JSON.stringify(
    ChatMessageTokenLogprob$outboundSchema.parse(chatMessageTokenLogprob),
  );
}

export function chatMessageTokenLogprobFromJSON(
  jsonString: string,
): SafeParseResult<ChatMessageTokenLogprob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatMessageTokenLogprob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatMessageTokenLogprob' from JSON`,
  );
}
