/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v4";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const OpenResponsesInputTextType = {
  InputText: "input_text",
} as const;
export type OpenResponsesInputTextType = ClosedEnum<
  typeof OpenResponsesInputTextType
>;

/**
 * Text input content item
 */
export type OpenResponsesInputText = {
  type: OpenResponsesInputTextType;
  text: string;
};

/** @internal */
export const OpenResponsesInputTextType$inboundSchema: z.ZodEnum<
  typeof OpenResponsesInputTextType
> = z.enum(OpenResponsesInputTextType);

/** @internal */
export const OpenResponsesInputTextType$outboundSchema: z.ZodEnum<
  typeof OpenResponsesInputTextType
> = OpenResponsesInputTextType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesInputTextType$ {
  /** @deprecated use `OpenResponsesInputTextType$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesInputTextType$inboundSchema;
  /** @deprecated use `OpenResponsesInputTextType$outboundSchema` instead. */
  export const outboundSchema = OpenResponsesInputTextType$outboundSchema;
}

/** @internal */
export const OpenResponsesInputText$inboundSchema: z.ZodType<
  OpenResponsesInputText,
  unknown
> = z.object({
  type: OpenResponsesInputTextType$inboundSchema,
  text: z.string(),
});

/** @internal */
export type OpenResponsesInputText$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const OpenResponsesInputText$outboundSchema: z.ZodType<
  OpenResponsesInputText$Outbound,
  OpenResponsesInputText
> = z.object({
  type: OpenResponsesInputTextType$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesInputText$ {
  /** @deprecated use `OpenResponsesInputText$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesInputText$inboundSchema;
  /** @deprecated use `OpenResponsesInputText$outboundSchema` instead. */
  export const outboundSchema = OpenResponsesInputText$outboundSchema;
  /** @deprecated use `OpenResponsesInputText$Outbound` instead. */
  export type Outbound = OpenResponsesInputText$Outbound;
}

export function openResponsesInputTextToJSON(
  openResponsesInputText: OpenResponsesInputText,
): string {
  return JSON.stringify(
    OpenResponsesInputText$outboundSchema.parse(openResponsesInputText),
  );
}

export function openResponsesInputTextFromJSON(
  jsonString: string,
): SafeParseResult<OpenResponsesInputText, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenResponsesInputText$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenResponsesInputText' from JSON`,
  );
}
