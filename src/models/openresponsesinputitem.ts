/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v4";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  OpenResponsesEasyInputMessage,
  OpenResponsesEasyInputMessage$inboundSchema,
  OpenResponsesEasyInputMessage$Outbound,
  OpenResponsesEasyInputMessage$outboundSchema,
} from "./openresponseseasyinputmessage.js";
import {
  OpenResponsesFunctionCallOutput,
  OpenResponsesFunctionCallOutput$inboundSchema,
  OpenResponsesFunctionCallOutput$Outbound,
  OpenResponsesFunctionCallOutput$outboundSchema,
} from "./openresponsesfunctioncalloutput.js";
import {
  OpenResponsesFunctionToolCall,
  OpenResponsesFunctionToolCall$inboundSchema,
  OpenResponsesFunctionToolCall$Outbound,
  OpenResponsesFunctionToolCall$outboundSchema,
} from "./openresponsesfunctiontoolcall.js";
import {
  OpenResponsesInputMessageItem,
  OpenResponsesInputMessageItem$inboundSchema,
  OpenResponsesInputMessageItem$Outbound,
  OpenResponsesInputMessageItem$outboundSchema,
} from "./openresponsesinputmessageitem.js";
import {
  OpenResponsesReasoning,
  OpenResponsesReasoning$inboundSchema,
  OpenResponsesReasoning$Outbound,
  OpenResponsesReasoning$outboundSchema,
} from "./openresponsesreasoning.js";
import {
  ResponsesImageGenerationCall,
  ResponsesImageGenerationCall$inboundSchema,
  ResponsesImageGenerationCall$Outbound,
  ResponsesImageGenerationCall$outboundSchema,
} from "./responsesimagegenerationcall.js";
import {
  ResponsesOutputItemFileSearchCall,
  ResponsesOutputItemFileSearchCall$inboundSchema,
  ResponsesOutputItemFileSearchCall$Outbound,
  ResponsesOutputItemFileSearchCall$outboundSchema,
} from "./responsesoutputitemfilesearchcall.js";
import {
  ResponsesOutputItemFunctionCall,
  ResponsesOutputItemFunctionCall$inboundSchema,
  ResponsesOutputItemFunctionCall$Outbound,
  ResponsesOutputItemFunctionCall$outboundSchema,
} from "./responsesoutputitemfunctioncall.js";
import {
  ResponsesOutputItemReasoning,
  ResponsesOutputItemReasoning$inboundSchema,
  ResponsesOutputItemReasoning$Outbound,
  ResponsesOutputItemReasoning$outboundSchema,
} from "./responsesoutputitemreasoning.js";
import {
  ResponsesOutputMessage,
  ResponsesOutputMessage$inboundSchema,
  ResponsesOutputMessage$Outbound,
  ResponsesOutputMessage$outboundSchema,
} from "./responsesoutputmessage.js";
import {
  ResponsesWebSearchCallOutput,
  ResponsesWebSearchCallOutput$inboundSchema,
  ResponsesWebSearchCallOutput$Outbound,
  ResponsesWebSearchCallOutput$outboundSchema,
} from "./responseswebsearchcalloutput.js";

/**
 * An item in the input array for a response request
 */
export type OpenResponsesInputItem =
  | OpenResponsesFunctionToolCall
  | ResponsesOutputMessage
  | OpenResponsesFunctionCallOutput
  | ResponsesOutputItemFunctionCall
  | ResponsesOutputItemFileSearchCall
  | ResponsesImageGenerationCall
  | OpenResponsesReasoning
  | OpenResponsesInputMessageItem
  | ResponsesWebSearchCallOutput
  | OpenResponsesEasyInputMessage
  | ResponsesOutputItemReasoning;

/** @internal */
export const OpenResponsesInputItem$inboundSchema: z.ZodType<
  OpenResponsesInputItem,
  unknown
> = z.union([
  OpenResponsesFunctionToolCall$inboundSchema,
  ResponsesOutputMessage$inboundSchema,
  OpenResponsesFunctionCallOutput$inboundSchema,
  ResponsesOutputItemFunctionCall$inboundSchema,
  ResponsesOutputItemFileSearchCall$inboundSchema,
  ResponsesImageGenerationCall$inboundSchema,
  OpenResponsesReasoning$inboundSchema,
  OpenResponsesInputMessageItem$inboundSchema,
  ResponsesWebSearchCallOutput$inboundSchema,
  OpenResponsesEasyInputMessage$inboundSchema,
  ResponsesOutputItemReasoning$inboundSchema,
]);

/** @internal */
export type OpenResponsesInputItem$Outbound =
  | OpenResponsesFunctionToolCall$Outbound
  | ResponsesOutputMessage$Outbound
  | OpenResponsesFunctionCallOutput$Outbound
  | ResponsesOutputItemFunctionCall$Outbound
  | ResponsesOutputItemFileSearchCall$Outbound
  | ResponsesImageGenerationCall$Outbound
  | OpenResponsesReasoning$Outbound
  | OpenResponsesInputMessageItem$Outbound
  | ResponsesWebSearchCallOutput$Outbound
  | OpenResponsesEasyInputMessage$Outbound
  | ResponsesOutputItemReasoning$Outbound;

/** @internal */
export const OpenResponsesInputItem$outboundSchema: z.ZodType<
  OpenResponsesInputItem$Outbound,
  OpenResponsesInputItem
> = z.union([
  OpenResponsesFunctionToolCall$outboundSchema,
  ResponsesOutputMessage$outboundSchema,
  OpenResponsesFunctionCallOutput$outboundSchema,
  ResponsesOutputItemFunctionCall$outboundSchema,
  ResponsesOutputItemFileSearchCall$outboundSchema,
  ResponsesImageGenerationCall$outboundSchema,
  OpenResponsesReasoning$outboundSchema,
  OpenResponsesInputMessageItem$outboundSchema,
  ResponsesWebSearchCallOutput$outboundSchema,
  OpenResponsesEasyInputMessage$outboundSchema,
  ResponsesOutputItemReasoning$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesInputItem$ {
  /** @deprecated use `OpenResponsesInputItem$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesInputItem$inboundSchema;
  /** @deprecated use `OpenResponsesInputItem$outboundSchema` instead. */
  export const outboundSchema = OpenResponsesInputItem$outboundSchema;
  /** @deprecated use `OpenResponsesInputItem$Outbound` instead. */
  export type Outbound = OpenResponsesInputItem$Outbound;
}

export function openResponsesInputItemToJSON(
  openResponsesInputItem: OpenResponsesInputItem,
): string {
  return JSON.stringify(
    OpenResponsesInputItem$outboundSchema.parse(openResponsesInputItem),
  );
}

export function openResponsesInputItemFromJSON(
  jsonString: string,
): SafeParseResult<OpenResponsesInputItem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenResponsesInputItem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenResponsesInputItem' from JSON`,
  );
}
