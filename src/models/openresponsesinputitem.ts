/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v4";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ImageGenerationStatus,
  ImageGenerationStatus$inboundSchema,
  ImageGenerationStatus$outboundSchema,
} from "./imagegenerationstatus.js";
import {
  OpenResponsesEasyInputMessage,
  OpenResponsesEasyInputMessage$inboundSchema,
  OpenResponsesEasyInputMessage$Outbound,
  OpenResponsesEasyInputMessage$outboundSchema,
} from "./openresponseseasyinputmessage.js";
import {
  OpenResponsesFunctionCallOutput,
  OpenResponsesFunctionCallOutput$inboundSchema,
  OpenResponsesFunctionCallOutput$Outbound,
  OpenResponsesFunctionCallOutput$outboundSchema,
} from "./openresponsesfunctioncalloutput.js";
import {
  OpenResponsesFunctionToolCall,
  OpenResponsesFunctionToolCall$inboundSchema,
  OpenResponsesFunctionToolCall$Outbound,
  OpenResponsesFunctionToolCall$outboundSchema,
} from "./openresponsesfunctiontoolcall.js";
import {
  OpenResponsesInputMessageItem,
  OpenResponsesInputMessageItem$inboundSchema,
  OpenResponsesInputMessageItem$Outbound,
  OpenResponsesInputMessageItem$outboundSchema,
} from "./openresponsesinputmessageitem.js";
import {
  OpenResponsesReasoning,
  OpenResponsesReasoning$inboundSchema,
  OpenResponsesReasoning$Outbound,
  OpenResponsesReasoning$outboundSchema,
} from "./openresponsesreasoning.js";
import {
  OutputTextContent,
  OutputTextContent$inboundSchema,
  OutputTextContent$Outbound,
  OutputTextContent$outboundSchema,
} from "./outputtextcontent.js";
import {
  ReasoningSummaryText,
  ReasoningSummaryText$inboundSchema,
  ReasoningSummaryText$Outbound,
  ReasoningSummaryText$outboundSchema,
} from "./reasoningsummarytext.js";
import {
  ReasoningTextContent,
  ReasoningTextContent$inboundSchema,
  ReasoningTextContent$Outbound,
  ReasoningTextContent$outboundSchema,
} from "./reasoningtextcontent.js";
import {
  RefusalContent,
  RefusalContent$inboundSchema,
  RefusalContent$Outbound,
  RefusalContent$outboundSchema,
} from "./refusalcontent.js";
import {
  WebSearchStatus,
  WebSearchStatus$inboundSchema,
  WebSearchStatus$outboundSchema,
} from "./websearchstatus.js";

export const OpenResponsesInputItemTypeImageGenerationCall = {
  ImageGenerationCall: "image_generation_call",
} as const;
export type OpenResponsesInputItemTypeImageGenerationCall = ClosedEnum<
  typeof OpenResponsesInputItemTypeImageGenerationCall
>;

export type OpenResponsesInputItemImageGenerationCall = {
  type: OpenResponsesInputItemTypeImageGenerationCall;
  id: string;
  result: string | null;
  status: ImageGenerationStatus;
};

export const OpenResponsesInputItemTypeFileSearchCall = {
  FileSearchCall: "file_search_call",
} as const;
export type OpenResponsesInputItemTypeFileSearchCall = ClosedEnum<
  typeof OpenResponsesInputItemTypeFileSearchCall
>;

export type OpenResponsesInputItemFileSearchCall = {
  type: OpenResponsesInputItemTypeFileSearchCall;
  id: string;
  queries: Array<string>;
  status: WebSearchStatus;
};

export const OpenResponsesInputItemTypeWebSearchCall = {
  WebSearchCall: "web_search_call",
} as const;
export type OpenResponsesInputItemTypeWebSearchCall = ClosedEnum<
  typeof OpenResponsesInputItemTypeWebSearchCall
>;

export type OpenResponsesInputItemWebSearchCall = {
  type: OpenResponsesInputItemTypeWebSearchCall;
  id: string;
  status: WebSearchStatus;
};

export const OpenResponsesInputItemTypeFunctionCall = {
  FunctionCall: "function_call",
} as const;
export type OpenResponsesInputItemTypeFunctionCall = ClosedEnum<
  typeof OpenResponsesInputItemTypeFunctionCall
>;

export type OpenResponsesInputItemFunctionCall = {
  type: OpenResponsesInputItemTypeFunctionCall;
  id?: string | undefined;
  name: string;
  arguments: string;
  callId: string;
};

export const OpenResponsesInputItemTypeReasoning = {
  Reasoning: "reasoning",
} as const;
export type OpenResponsesInputItemTypeReasoning = ClosedEnum<
  typeof OpenResponsesInputItemTypeReasoning
>;

export type OpenResponsesInputItemReasoning = {
  type: OpenResponsesInputItemTypeReasoning;
  id?: string | undefined;
  content?: Array<ReasoningTextContent> | undefined;
  summary: Array<ReasoningSummaryText>;
  encryptedContent?: string | null | undefined;
};

export const OpenResponsesInputItemRole = {
  Assistant: "assistant",
} as const;
export type OpenResponsesInputItemRole = ClosedEnum<
  typeof OpenResponsesInputItemRole
>;

export const OpenResponsesInputItemTypeMessage = {
  Message: "message",
} as const;
export type OpenResponsesInputItemTypeMessage = ClosedEnum<
  typeof OpenResponsesInputItemTypeMessage
>;

export const OpenResponsesInputItemStatusInProgress = {
  InProgress: "in_progress",
} as const;
export type OpenResponsesInputItemStatusInProgress = ClosedEnum<
  typeof OpenResponsesInputItemStatusInProgress
>;

export const OpenResponsesInputItemStatusIncomplete = {
  Incomplete: "incomplete",
} as const;
export type OpenResponsesInputItemStatusIncomplete = ClosedEnum<
  typeof OpenResponsesInputItemStatusIncomplete
>;

export const OpenResponsesInputItemStatusCompleted = {
  Completed: "completed",
} as const;
export type OpenResponsesInputItemStatusCompleted = ClosedEnum<
  typeof OpenResponsesInputItemStatusCompleted
>;

export type OpenResponsesInputItemStatusUnion =
  | OpenResponsesInputItemStatusCompleted
  | OpenResponsesInputItemStatusIncomplete
  | OpenResponsesInputItemStatusInProgress;

export type OpenResponsesInputItemContent = OutputTextContent | RefusalContent;

export type OpenResponsesInputItemMessage = {
  id: string;
  role: OpenResponsesInputItemRole;
  type: OpenResponsesInputItemTypeMessage;
  status:
    | OpenResponsesInputItemStatusCompleted
    | OpenResponsesInputItemStatusIncomplete
    | OpenResponsesInputItemStatusInProgress;
  content: Array<OutputTextContent | RefusalContent>;
};

/**
 * An item in the input array for a response request
 */
export type OpenResponsesInputItem =
  | OpenResponsesFunctionToolCall
  | OpenResponsesInputItemMessage
  | OpenResponsesFunctionCallOutput
  | OpenResponsesInputItemFunctionCall
  | OpenResponsesInputItemFileSearchCall
  | OpenResponsesInputItemImageGenerationCall
  | OpenResponsesReasoning
  | OpenResponsesInputMessageItem
  | OpenResponsesInputItemWebSearchCall
  | OpenResponsesEasyInputMessage
  | OpenResponsesInputItemReasoning;

/** @internal */
export const OpenResponsesInputItemTypeImageGenerationCall$inboundSchema:
  z.ZodEnum<typeof OpenResponsesInputItemTypeImageGenerationCall> = z.enum(
    OpenResponsesInputItemTypeImageGenerationCall,
  );

/** @internal */
export const OpenResponsesInputItemTypeImageGenerationCall$outboundSchema:
  z.ZodEnum<typeof OpenResponsesInputItemTypeImageGenerationCall> =
    OpenResponsesInputItemTypeImageGenerationCall$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesInputItemTypeImageGenerationCall$ {
  /** @deprecated use `OpenResponsesInputItemTypeImageGenerationCall$inboundSchema` instead. */
  export const inboundSchema =
    OpenResponsesInputItemTypeImageGenerationCall$inboundSchema;
  /** @deprecated use `OpenResponsesInputItemTypeImageGenerationCall$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesInputItemTypeImageGenerationCall$outboundSchema;
}

/** @internal */
export const OpenResponsesInputItemImageGenerationCall$inboundSchema: z.ZodType<
  OpenResponsesInputItemImageGenerationCall,
  unknown
> = z.object({
  type: OpenResponsesInputItemTypeImageGenerationCall$inboundSchema,
  id: z.string(),
  result: z.nullable(z.string()),
  status: ImageGenerationStatus$inboundSchema,
});

/** @internal */
export type OpenResponsesInputItemImageGenerationCall$Outbound = {
  type: string;
  id: string;
  result: string | null;
  status: string;
};

/** @internal */
export const OpenResponsesInputItemImageGenerationCall$outboundSchema:
  z.ZodType<
    OpenResponsesInputItemImageGenerationCall$Outbound,
    OpenResponsesInputItemImageGenerationCall
  > = z.object({
    type: OpenResponsesInputItemTypeImageGenerationCall$outboundSchema,
    id: z.string(),
    result: z.nullable(z.string()),
    status: ImageGenerationStatus$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesInputItemImageGenerationCall$ {
  /** @deprecated use `OpenResponsesInputItemImageGenerationCall$inboundSchema` instead. */
  export const inboundSchema =
    OpenResponsesInputItemImageGenerationCall$inboundSchema;
  /** @deprecated use `OpenResponsesInputItemImageGenerationCall$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesInputItemImageGenerationCall$outboundSchema;
  /** @deprecated use `OpenResponsesInputItemImageGenerationCall$Outbound` instead. */
  export type Outbound = OpenResponsesInputItemImageGenerationCall$Outbound;
}

export function openResponsesInputItemImageGenerationCallToJSON(
  openResponsesInputItemImageGenerationCall:
    OpenResponsesInputItemImageGenerationCall,
): string {
  return JSON.stringify(
    OpenResponsesInputItemImageGenerationCall$outboundSchema.parse(
      openResponsesInputItemImageGenerationCall,
    ),
  );
}

export function openResponsesInputItemImageGenerationCallFromJSON(
  jsonString: string,
): SafeParseResult<
  OpenResponsesInputItemImageGenerationCall,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      OpenResponsesInputItemImageGenerationCall$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'OpenResponsesInputItemImageGenerationCall' from JSON`,
  );
}

/** @internal */
export const OpenResponsesInputItemTypeFileSearchCall$inboundSchema: z.ZodEnum<
  typeof OpenResponsesInputItemTypeFileSearchCall
> = z.enum(OpenResponsesInputItemTypeFileSearchCall);

/** @internal */
export const OpenResponsesInputItemTypeFileSearchCall$outboundSchema: z.ZodEnum<
  typeof OpenResponsesInputItemTypeFileSearchCall
> = OpenResponsesInputItemTypeFileSearchCall$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesInputItemTypeFileSearchCall$ {
  /** @deprecated use `OpenResponsesInputItemTypeFileSearchCall$inboundSchema` instead. */
  export const inboundSchema =
    OpenResponsesInputItemTypeFileSearchCall$inboundSchema;
  /** @deprecated use `OpenResponsesInputItemTypeFileSearchCall$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesInputItemTypeFileSearchCall$outboundSchema;
}

/** @internal */
export const OpenResponsesInputItemFileSearchCall$inboundSchema: z.ZodType<
  OpenResponsesInputItemFileSearchCall,
  unknown
> = z.object({
  type: OpenResponsesInputItemTypeFileSearchCall$inboundSchema,
  id: z.string(),
  queries: z.array(z.string()),
  status: WebSearchStatus$inboundSchema,
});

/** @internal */
export type OpenResponsesInputItemFileSearchCall$Outbound = {
  type: string;
  id: string;
  queries: Array<string>;
  status: string;
};

/** @internal */
export const OpenResponsesInputItemFileSearchCall$outboundSchema: z.ZodType<
  OpenResponsesInputItemFileSearchCall$Outbound,
  OpenResponsesInputItemFileSearchCall
> = z.object({
  type: OpenResponsesInputItemTypeFileSearchCall$outboundSchema,
  id: z.string(),
  queries: z.array(z.string()),
  status: WebSearchStatus$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesInputItemFileSearchCall$ {
  /** @deprecated use `OpenResponsesInputItemFileSearchCall$inboundSchema` instead. */
  export const inboundSchema =
    OpenResponsesInputItemFileSearchCall$inboundSchema;
  /** @deprecated use `OpenResponsesInputItemFileSearchCall$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesInputItemFileSearchCall$outboundSchema;
  /** @deprecated use `OpenResponsesInputItemFileSearchCall$Outbound` instead. */
  export type Outbound = OpenResponsesInputItemFileSearchCall$Outbound;
}

export function openResponsesInputItemFileSearchCallToJSON(
  openResponsesInputItemFileSearchCall: OpenResponsesInputItemFileSearchCall,
): string {
  return JSON.stringify(
    OpenResponsesInputItemFileSearchCall$outboundSchema.parse(
      openResponsesInputItemFileSearchCall,
    ),
  );
}

export function openResponsesInputItemFileSearchCallFromJSON(
  jsonString: string,
): SafeParseResult<OpenResponsesInputItemFileSearchCall, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OpenResponsesInputItemFileSearchCall$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenResponsesInputItemFileSearchCall' from JSON`,
  );
}

/** @internal */
export const OpenResponsesInputItemTypeWebSearchCall$inboundSchema: z.ZodEnum<
  typeof OpenResponsesInputItemTypeWebSearchCall
> = z.enum(OpenResponsesInputItemTypeWebSearchCall);

/** @internal */
export const OpenResponsesInputItemTypeWebSearchCall$outboundSchema: z.ZodEnum<
  typeof OpenResponsesInputItemTypeWebSearchCall
> = OpenResponsesInputItemTypeWebSearchCall$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesInputItemTypeWebSearchCall$ {
  /** @deprecated use `OpenResponsesInputItemTypeWebSearchCall$inboundSchema` instead. */
  export const inboundSchema =
    OpenResponsesInputItemTypeWebSearchCall$inboundSchema;
  /** @deprecated use `OpenResponsesInputItemTypeWebSearchCall$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesInputItemTypeWebSearchCall$outboundSchema;
}

/** @internal */
export const OpenResponsesInputItemWebSearchCall$inboundSchema: z.ZodType<
  OpenResponsesInputItemWebSearchCall,
  unknown
> = z.object({
  type: OpenResponsesInputItemTypeWebSearchCall$inboundSchema,
  id: z.string(),
  status: WebSearchStatus$inboundSchema,
});

/** @internal */
export type OpenResponsesInputItemWebSearchCall$Outbound = {
  type: string;
  id: string;
  status: string;
};

/** @internal */
export const OpenResponsesInputItemWebSearchCall$outboundSchema: z.ZodType<
  OpenResponsesInputItemWebSearchCall$Outbound,
  OpenResponsesInputItemWebSearchCall
> = z.object({
  type: OpenResponsesInputItemTypeWebSearchCall$outboundSchema,
  id: z.string(),
  status: WebSearchStatus$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesInputItemWebSearchCall$ {
  /** @deprecated use `OpenResponsesInputItemWebSearchCall$inboundSchema` instead. */
  export const inboundSchema =
    OpenResponsesInputItemWebSearchCall$inboundSchema;
  /** @deprecated use `OpenResponsesInputItemWebSearchCall$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesInputItemWebSearchCall$outboundSchema;
  /** @deprecated use `OpenResponsesInputItemWebSearchCall$Outbound` instead. */
  export type Outbound = OpenResponsesInputItemWebSearchCall$Outbound;
}

export function openResponsesInputItemWebSearchCallToJSON(
  openResponsesInputItemWebSearchCall: OpenResponsesInputItemWebSearchCall,
): string {
  return JSON.stringify(
    OpenResponsesInputItemWebSearchCall$outboundSchema.parse(
      openResponsesInputItemWebSearchCall,
    ),
  );
}

export function openResponsesInputItemWebSearchCallFromJSON(
  jsonString: string,
): SafeParseResult<OpenResponsesInputItemWebSearchCall, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OpenResponsesInputItemWebSearchCall$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenResponsesInputItemWebSearchCall' from JSON`,
  );
}

/** @internal */
export const OpenResponsesInputItemTypeFunctionCall$inboundSchema: z.ZodEnum<
  typeof OpenResponsesInputItemTypeFunctionCall
> = z.enum(OpenResponsesInputItemTypeFunctionCall);

/** @internal */
export const OpenResponsesInputItemTypeFunctionCall$outboundSchema: z.ZodEnum<
  typeof OpenResponsesInputItemTypeFunctionCall
> = OpenResponsesInputItemTypeFunctionCall$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesInputItemTypeFunctionCall$ {
  /** @deprecated use `OpenResponsesInputItemTypeFunctionCall$inboundSchema` instead. */
  export const inboundSchema =
    OpenResponsesInputItemTypeFunctionCall$inboundSchema;
  /** @deprecated use `OpenResponsesInputItemTypeFunctionCall$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesInputItemTypeFunctionCall$outboundSchema;
}

/** @internal */
export const OpenResponsesInputItemFunctionCall$inboundSchema: z.ZodType<
  OpenResponsesInputItemFunctionCall,
  unknown
> = z.object({
  type: OpenResponsesInputItemTypeFunctionCall$inboundSchema,
  id: z.string().optional(),
  name: z.string(),
  arguments: z.string(),
  call_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "call_id": "callId",
  });
});

/** @internal */
export type OpenResponsesInputItemFunctionCall$Outbound = {
  type: string;
  id?: string | undefined;
  name: string;
  arguments: string;
  call_id: string;
};

/** @internal */
export const OpenResponsesInputItemFunctionCall$outboundSchema: z.ZodType<
  OpenResponsesInputItemFunctionCall$Outbound,
  OpenResponsesInputItemFunctionCall
> = z.object({
  type: OpenResponsesInputItemTypeFunctionCall$outboundSchema,
  id: z.string().optional(),
  name: z.string(),
  arguments: z.string(),
  callId: z.string(),
}).transform((v) => {
  return remap$(v, {
    callId: "call_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesInputItemFunctionCall$ {
  /** @deprecated use `OpenResponsesInputItemFunctionCall$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesInputItemFunctionCall$inboundSchema;
  /** @deprecated use `OpenResponsesInputItemFunctionCall$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesInputItemFunctionCall$outboundSchema;
  /** @deprecated use `OpenResponsesInputItemFunctionCall$Outbound` instead. */
  export type Outbound = OpenResponsesInputItemFunctionCall$Outbound;
}

export function openResponsesInputItemFunctionCallToJSON(
  openResponsesInputItemFunctionCall: OpenResponsesInputItemFunctionCall,
): string {
  return JSON.stringify(
    OpenResponsesInputItemFunctionCall$outboundSchema.parse(
      openResponsesInputItemFunctionCall,
    ),
  );
}

export function openResponsesInputItemFunctionCallFromJSON(
  jsonString: string,
): SafeParseResult<OpenResponsesInputItemFunctionCall, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OpenResponsesInputItemFunctionCall$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenResponsesInputItemFunctionCall' from JSON`,
  );
}

/** @internal */
export const OpenResponsesInputItemTypeReasoning$inboundSchema: z.ZodEnum<
  typeof OpenResponsesInputItemTypeReasoning
> = z.enum(OpenResponsesInputItemTypeReasoning);

/** @internal */
export const OpenResponsesInputItemTypeReasoning$outboundSchema: z.ZodEnum<
  typeof OpenResponsesInputItemTypeReasoning
> = OpenResponsesInputItemTypeReasoning$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesInputItemTypeReasoning$ {
  /** @deprecated use `OpenResponsesInputItemTypeReasoning$inboundSchema` instead. */
  export const inboundSchema =
    OpenResponsesInputItemTypeReasoning$inboundSchema;
  /** @deprecated use `OpenResponsesInputItemTypeReasoning$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesInputItemTypeReasoning$outboundSchema;
}

/** @internal */
export const OpenResponsesInputItemReasoning$inboundSchema: z.ZodType<
  OpenResponsesInputItemReasoning,
  unknown
> = z.object({
  type: OpenResponsesInputItemTypeReasoning$inboundSchema,
  id: z.string().optional(),
  content: z.array(ReasoningTextContent$inboundSchema).optional(),
  summary: z.array(ReasoningSummaryText$inboundSchema),
  encrypted_content: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "encrypted_content": "encryptedContent",
  });
});

/** @internal */
export type OpenResponsesInputItemReasoning$Outbound = {
  type: string;
  id?: string | undefined;
  content?: Array<ReasoningTextContent$Outbound> | undefined;
  summary: Array<ReasoningSummaryText$Outbound>;
  encrypted_content?: string | null | undefined;
};

/** @internal */
export const OpenResponsesInputItemReasoning$outboundSchema: z.ZodType<
  OpenResponsesInputItemReasoning$Outbound,
  OpenResponsesInputItemReasoning
> = z.object({
  type: OpenResponsesInputItemTypeReasoning$outboundSchema,
  id: z.string().optional(),
  content: z.array(ReasoningTextContent$outboundSchema).optional(),
  summary: z.array(ReasoningSummaryText$outboundSchema),
  encryptedContent: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    encryptedContent: "encrypted_content",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesInputItemReasoning$ {
  /** @deprecated use `OpenResponsesInputItemReasoning$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesInputItemReasoning$inboundSchema;
  /** @deprecated use `OpenResponsesInputItemReasoning$outboundSchema` instead. */
  export const outboundSchema = OpenResponsesInputItemReasoning$outboundSchema;
  /** @deprecated use `OpenResponsesInputItemReasoning$Outbound` instead. */
  export type Outbound = OpenResponsesInputItemReasoning$Outbound;
}

export function openResponsesInputItemReasoningToJSON(
  openResponsesInputItemReasoning: OpenResponsesInputItemReasoning,
): string {
  return JSON.stringify(
    OpenResponsesInputItemReasoning$outboundSchema.parse(
      openResponsesInputItemReasoning,
    ),
  );
}

export function openResponsesInputItemReasoningFromJSON(
  jsonString: string,
): SafeParseResult<OpenResponsesInputItemReasoning, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenResponsesInputItemReasoning$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenResponsesInputItemReasoning' from JSON`,
  );
}

/** @internal */
export const OpenResponsesInputItemRole$inboundSchema: z.ZodEnum<
  typeof OpenResponsesInputItemRole
> = z.enum(OpenResponsesInputItemRole);

/** @internal */
export const OpenResponsesInputItemRole$outboundSchema: z.ZodEnum<
  typeof OpenResponsesInputItemRole
> = OpenResponsesInputItemRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesInputItemRole$ {
  /** @deprecated use `OpenResponsesInputItemRole$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesInputItemRole$inboundSchema;
  /** @deprecated use `OpenResponsesInputItemRole$outboundSchema` instead. */
  export const outboundSchema = OpenResponsesInputItemRole$outboundSchema;
}

/** @internal */
export const OpenResponsesInputItemTypeMessage$inboundSchema: z.ZodEnum<
  typeof OpenResponsesInputItemTypeMessage
> = z.enum(OpenResponsesInputItemTypeMessage);

/** @internal */
export const OpenResponsesInputItemTypeMessage$outboundSchema: z.ZodEnum<
  typeof OpenResponsesInputItemTypeMessage
> = OpenResponsesInputItemTypeMessage$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesInputItemTypeMessage$ {
  /** @deprecated use `OpenResponsesInputItemTypeMessage$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesInputItemTypeMessage$inboundSchema;
  /** @deprecated use `OpenResponsesInputItemTypeMessage$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesInputItemTypeMessage$outboundSchema;
}

/** @internal */
export const OpenResponsesInputItemStatusInProgress$inboundSchema: z.ZodEnum<
  typeof OpenResponsesInputItemStatusInProgress
> = z.enum(OpenResponsesInputItemStatusInProgress);

/** @internal */
export const OpenResponsesInputItemStatusInProgress$outboundSchema: z.ZodEnum<
  typeof OpenResponsesInputItemStatusInProgress
> = OpenResponsesInputItemStatusInProgress$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesInputItemStatusInProgress$ {
  /** @deprecated use `OpenResponsesInputItemStatusInProgress$inboundSchema` instead. */
  export const inboundSchema =
    OpenResponsesInputItemStatusInProgress$inboundSchema;
  /** @deprecated use `OpenResponsesInputItemStatusInProgress$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesInputItemStatusInProgress$outboundSchema;
}

/** @internal */
export const OpenResponsesInputItemStatusIncomplete$inboundSchema: z.ZodEnum<
  typeof OpenResponsesInputItemStatusIncomplete
> = z.enum(OpenResponsesInputItemStatusIncomplete);

/** @internal */
export const OpenResponsesInputItemStatusIncomplete$outboundSchema: z.ZodEnum<
  typeof OpenResponsesInputItemStatusIncomplete
> = OpenResponsesInputItemStatusIncomplete$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesInputItemStatusIncomplete$ {
  /** @deprecated use `OpenResponsesInputItemStatusIncomplete$inboundSchema` instead. */
  export const inboundSchema =
    OpenResponsesInputItemStatusIncomplete$inboundSchema;
  /** @deprecated use `OpenResponsesInputItemStatusIncomplete$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesInputItemStatusIncomplete$outboundSchema;
}

/** @internal */
export const OpenResponsesInputItemStatusCompleted$inboundSchema: z.ZodEnum<
  typeof OpenResponsesInputItemStatusCompleted
> = z.enum(OpenResponsesInputItemStatusCompleted);

/** @internal */
export const OpenResponsesInputItemStatusCompleted$outboundSchema: z.ZodEnum<
  typeof OpenResponsesInputItemStatusCompleted
> = OpenResponsesInputItemStatusCompleted$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesInputItemStatusCompleted$ {
  /** @deprecated use `OpenResponsesInputItemStatusCompleted$inboundSchema` instead. */
  export const inboundSchema =
    OpenResponsesInputItemStatusCompleted$inboundSchema;
  /** @deprecated use `OpenResponsesInputItemStatusCompleted$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesInputItemStatusCompleted$outboundSchema;
}

/** @internal */
export const OpenResponsesInputItemStatusUnion$inboundSchema: z.ZodType<
  OpenResponsesInputItemStatusUnion,
  unknown
> = z.union([
  OpenResponsesInputItemStatusCompleted$inboundSchema,
  OpenResponsesInputItemStatusIncomplete$inboundSchema,
  OpenResponsesInputItemStatusInProgress$inboundSchema,
]);

/** @internal */
export type OpenResponsesInputItemStatusUnion$Outbound =
  | string
  | string
  | string;

/** @internal */
export const OpenResponsesInputItemStatusUnion$outboundSchema: z.ZodType<
  OpenResponsesInputItemStatusUnion$Outbound,
  OpenResponsesInputItemStatusUnion
> = z.union([
  OpenResponsesInputItemStatusCompleted$outboundSchema,
  OpenResponsesInputItemStatusIncomplete$outboundSchema,
  OpenResponsesInputItemStatusInProgress$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesInputItemStatusUnion$ {
  /** @deprecated use `OpenResponsesInputItemStatusUnion$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesInputItemStatusUnion$inboundSchema;
  /** @deprecated use `OpenResponsesInputItemStatusUnion$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesInputItemStatusUnion$outboundSchema;
  /** @deprecated use `OpenResponsesInputItemStatusUnion$Outbound` instead. */
  export type Outbound = OpenResponsesInputItemStatusUnion$Outbound;
}

export function openResponsesInputItemStatusUnionToJSON(
  openResponsesInputItemStatusUnion: OpenResponsesInputItemStatusUnion,
): string {
  return JSON.stringify(
    OpenResponsesInputItemStatusUnion$outboundSchema.parse(
      openResponsesInputItemStatusUnion,
    ),
  );
}

export function openResponsesInputItemStatusUnionFromJSON(
  jsonString: string,
): SafeParseResult<OpenResponsesInputItemStatusUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenResponsesInputItemStatusUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenResponsesInputItemStatusUnion' from JSON`,
  );
}

/** @internal */
export const OpenResponsesInputItemContent$inboundSchema: z.ZodType<
  OpenResponsesInputItemContent,
  unknown
> = z.union([OutputTextContent$inboundSchema, RefusalContent$inboundSchema]);

/** @internal */
export type OpenResponsesInputItemContent$Outbound =
  | OutputTextContent$Outbound
  | RefusalContent$Outbound;

/** @internal */
export const OpenResponsesInputItemContent$outboundSchema: z.ZodType<
  OpenResponsesInputItemContent$Outbound,
  OpenResponsesInputItemContent
> = z.union([OutputTextContent$outboundSchema, RefusalContent$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesInputItemContent$ {
  /** @deprecated use `OpenResponsesInputItemContent$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesInputItemContent$inboundSchema;
  /** @deprecated use `OpenResponsesInputItemContent$outboundSchema` instead. */
  export const outboundSchema = OpenResponsesInputItemContent$outboundSchema;
  /** @deprecated use `OpenResponsesInputItemContent$Outbound` instead. */
  export type Outbound = OpenResponsesInputItemContent$Outbound;
}

export function openResponsesInputItemContentToJSON(
  openResponsesInputItemContent: OpenResponsesInputItemContent,
): string {
  return JSON.stringify(
    OpenResponsesInputItemContent$outboundSchema.parse(
      openResponsesInputItemContent,
    ),
  );
}

export function openResponsesInputItemContentFromJSON(
  jsonString: string,
): SafeParseResult<OpenResponsesInputItemContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenResponsesInputItemContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenResponsesInputItemContent' from JSON`,
  );
}

/** @internal */
export const OpenResponsesInputItemMessage$inboundSchema: z.ZodType<
  OpenResponsesInputItemMessage,
  unknown
> = z.object({
  id: z.string(),
  role: OpenResponsesInputItemRole$inboundSchema,
  type: OpenResponsesInputItemTypeMessage$inboundSchema,
  status: z.union([
    OpenResponsesInputItemStatusCompleted$inboundSchema,
    OpenResponsesInputItemStatusIncomplete$inboundSchema,
    OpenResponsesInputItemStatusInProgress$inboundSchema,
  ]),
  content: z.array(
    z.union([OutputTextContent$inboundSchema, RefusalContent$inboundSchema]),
  ),
});

/** @internal */
export type OpenResponsesInputItemMessage$Outbound = {
  id: string;
  role: string;
  type: string;
  status: string | string | string;
  content: Array<OutputTextContent$Outbound | RefusalContent$Outbound>;
};

/** @internal */
export const OpenResponsesInputItemMessage$outboundSchema: z.ZodType<
  OpenResponsesInputItemMessage$Outbound,
  OpenResponsesInputItemMessage
> = z.object({
  id: z.string(),
  role: OpenResponsesInputItemRole$outboundSchema,
  type: OpenResponsesInputItemTypeMessage$outboundSchema,
  status: z.union([
    OpenResponsesInputItemStatusCompleted$outboundSchema,
    OpenResponsesInputItemStatusIncomplete$outboundSchema,
    OpenResponsesInputItemStatusInProgress$outboundSchema,
  ]),
  content: z.array(
    z.union([OutputTextContent$outboundSchema, RefusalContent$outboundSchema]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesInputItemMessage$ {
  /** @deprecated use `OpenResponsesInputItemMessage$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesInputItemMessage$inboundSchema;
  /** @deprecated use `OpenResponsesInputItemMessage$outboundSchema` instead. */
  export const outboundSchema = OpenResponsesInputItemMessage$outboundSchema;
  /** @deprecated use `OpenResponsesInputItemMessage$Outbound` instead. */
  export type Outbound = OpenResponsesInputItemMessage$Outbound;
}

export function openResponsesInputItemMessageToJSON(
  openResponsesInputItemMessage: OpenResponsesInputItemMessage,
): string {
  return JSON.stringify(
    OpenResponsesInputItemMessage$outboundSchema.parse(
      openResponsesInputItemMessage,
    ),
  );
}

export function openResponsesInputItemMessageFromJSON(
  jsonString: string,
): SafeParseResult<OpenResponsesInputItemMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenResponsesInputItemMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenResponsesInputItemMessage' from JSON`,
  );
}

/** @internal */
export const OpenResponsesInputItem$inboundSchema: z.ZodType<
  OpenResponsesInputItem,
  unknown
> = z.union([
  OpenResponsesFunctionToolCall$inboundSchema,
  z.lazy(() => OpenResponsesInputItemMessage$inboundSchema),
  OpenResponsesFunctionCallOutput$inboundSchema,
  z.lazy(() => OpenResponsesInputItemFunctionCall$inboundSchema),
  z.lazy(() => OpenResponsesInputItemFileSearchCall$inboundSchema),
  z.lazy(() => OpenResponsesInputItemImageGenerationCall$inboundSchema),
  OpenResponsesReasoning$inboundSchema,
  OpenResponsesInputMessageItem$inboundSchema,
  z.lazy(() => OpenResponsesInputItemWebSearchCall$inboundSchema),
  OpenResponsesEasyInputMessage$inboundSchema,
  z.lazy(() => OpenResponsesInputItemReasoning$inboundSchema),
]);

/** @internal */
export type OpenResponsesInputItem$Outbound =
  | OpenResponsesFunctionToolCall$Outbound
  | OpenResponsesInputItemMessage$Outbound
  | OpenResponsesFunctionCallOutput$Outbound
  | OpenResponsesInputItemFunctionCall$Outbound
  | OpenResponsesInputItemFileSearchCall$Outbound
  | OpenResponsesInputItemImageGenerationCall$Outbound
  | OpenResponsesReasoning$Outbound
  | OpenResponsesInputMessageItem$Outbound
  | OpenResponsesInputItemWebSearchCall$Outbound
  | OpenResponsesEasyInputMessage$Outbound
  | OpenResponsesInputItemReasoning$Outbound;

/** @internal */
export const OpenResponsesInputItem$outboundSchema: z.ZodType<
  OpenResponsesInputItem$Outbound,
  OpenResponsesInputItem
> = z.union([
  OpenResponsesFunctionToolCall$outboundSchema,
  z.lazy(() => OpenResponsesInputItemMessage$outboundSchema),
  OpenResponsesFunctionCallOutput$outboundSchema,
  z.lazy(() => OpenResponsesInputItemFunctionCall$outboundSchema),
  z.lazy(() => OpenResponsesInputItemFileSearchCall$outboundSchema),
  z.lazy(() => OpenResponsesInputItemImageGenerationCall$outboundSchema),
  OpenResponsesReasoning$outboundSchema,
  OpenResponsesInputMessageItem$outboundSchema,
  z.lazy(() => OpenResponsesInputItemWebSearchCall$outboundSchema),
  OpenResponsesEasyInputMessage$outboundSchema,
  z.lazy(() => OpenResponsesInputItemReasoning$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesInputItem$ {
  /** @deprecated use `OpenResponsesInputItem$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesInputItem$inboundSchema;
  /** @deprecated use `OpenResponsesInputItem$outboundSchema` instead. */
  export const outboundSchema = OpenResponsesInputItem$outboundSchema;
  /** @deprecated use `OpenResponsesInputItem$Outbound` instead. */
  export type Outbound = OpenResponsesInputItem$Outbound;
}

export function openResponsesInputItemToJSON(
  openResponsesInputItem: OpenResponsesInputItem,
): string {
  return JSON.stringify(
    OpenResponsesInputItem$outboundSchema.parse(openResponsesInputItem),
  );
}

export function openResponsesInputItemFromJSON(
  jsonString: string,
): SafeParseResult<OpenResponsesInputItem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenResponsesInputItem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenResponsesInputItem' from JSON`,
  );
}
