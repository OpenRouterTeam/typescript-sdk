/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v4";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  FileCitation,
  FileCitation$inboundSchema,
  FileCitation$Outbound,
  FileCitation$outboundSchema,
} from "./filecitation.js";
import {
  FilePath,
  FilePath$inboundSchema,
  FilePath$Outbound,
  FilePath$outboundSchema,
} from "./filepath.js";
import {
  URLCitation,
  URLCitation$inboundSchema,
  URLCitation$Outbound,
  URLCitation$outboundSchema,
} from "./urlcitation.js";

export type OpenAIResponsesAnnotation = URLCitation | FileCitation | FilePath;

/** @internal */
export const OpenAIResponsesAnnotation$inboundSchema: z.ZodType<
  OpenAIResponsesAnnotation,
  unknown
> = z.union([
  URLCitation$inboundSchema,
  FileCitation$inboundSchema,
  FilePath$inboundSchema,
]);

/** @internal */
export type OpenAIResponsesAnnotation$Outbound =
  | URLCitation$Outbound
  | FileCitation$Outbound
  | FilePath$Outbound;

/** @internal */
export const OpenAIResponsesAnnotation$outboundSchema: z.ZodType<
  OpenAIResponsesAnnotation$Outbound,
  OpenAIResponsesAnnotation
> = z.union([
  URLCitation$outboundSchema,
  FileCitation$outboundSchema,
  FilePath$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenAIResponsesAnnotation$ {
  /** @deprecated use `OpenAIResponsesAnnotation$inboundSchema` instead. */
  export const inboundSchema = OpenAIResponsesAnnotation$inboundSchema;
  /** @deprecated use `OpenAIResponsesAnnotation$outboundSchema` instead. */
  export const outboundSchema = OpenAIResponsesAnnotation$outboundSchema;
  /** @deprecated use `OpenAIResponsesAnnotation$Outbound` instead. */
  export type Outbound = OpenAIResponsesAnnotation$Outbound;
}

export function openAIResponsesAnnotationToJSON(
  openAIResponsesAnnotation: OpenAIResponsesAnnotation,
): string {
  return JSON.stringify(
    OpenAIResponsesAnnotation$outboundSchema.parse(openAIResponsesAnnotation),
  );
}

export function openAIResponsesAnnotationFromJSON(
  jsonString: string,
): SafeParseResult<OpenAIResponsesAnnotation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenAIResponsesAnnotation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenAIResponsesAnnotation' from JSON`,
  );
}
