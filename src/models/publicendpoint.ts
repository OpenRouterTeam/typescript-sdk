/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  EndpointStatus,
  EndpointStatus$inboundSchema,
  EndpointStatus$outboundSchema,
} from "./endpointstatus.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Parameter,
  Parameter$inboundSchema,
  Parameter$outboundSchema,
} from "./parameter.js";
import {
  ProviderName,
  ProviderName$inboundSchema,
  ProviderName$outboundSchema,
} from "./providername.js";

export type PublicEndpointPrompt = number | string | any;

export type PublicEndpointCompletion = number | string | any;

export type PublicEndpointRequest = number | string | any;

export type PublicEndpointImage = number | string | any;

export type PublicEndpointImageOutput = number | string | any;

export type PublicEndpointAudio = number | string | any;

export type PublicEndpointInputAudioCache = number | string | any;

export type PublicEndpointWebSearch = number | string | any;

export type PublicEndpointInternalReasoning = number | string | any;

export type PublicEndpointInputCacheRead = number | string | any;

export type PublicEndpointInputCacheWrite = number | string | any;

export type PublicEndpointPricing = {
  prompt?: number | string | any | undefined;
  completion?: number | string | any | undefined;
  request?: number | string | any | undefined;
  image?: number | string | any | undefined;
  imageOutput?: number | string | any | undefined;
  audio?: number | string | any | undefined;
  inputAudioCache?: number | string | any | undefined;
  webSearch?: number | string | any | undefined;
  internalReasoning?: number | string | any | undefined;
  inputCacheRead?: number | string | any | undefined;
  inputCacheWrite?: number | string | any | undefined;
  discount?: number | undefined;
};

export const PublicEndpointQuantization = {
  Int4: "int4",
  Int8: "int8",
  Fp4: "fp4",
  Fp6: "fp6",
  Fp8: "fp8",
  Fp16: "fp16",
  Bf16: "bf16",
  Fp32: "fp32",
  Unknown: "unknown",
} as const;
export type PublicEndpointQuantization = OpenEnum<
  typeof PublicEndpointQuantization
>;

/**
 * Information about a specific model endpoint
 */
export type PublicEndpoint = {
  name: string;
  modelName: string;
  contextLength: number;
  pricing: PublicEndpointPricing;
  providerName: ProviderName;
  tag: string;
  quantization: PublicEndpointQuantization | null;
  maxCompletionTokens: number | null;
  maxPromptTokens: number | null;
  supportedParameters: Array<Parameter>;
  status?: EndpointStatus | undefined;
  uptimeLast30m: number | null;
  supportsImplicitCaching: boolean;
};

/** @internal */
export const PublicEndpointPrompt$inboundSchema: z.ZodType<
  PublicEndpointPrompt,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type PublicEndpointPrompt$Outbound = number | string | any;

/** @internal */
export const PublicEndpointPrompt$outboundSchema: z.ZodType<
  PublicEndpointPrompt$Outbound,
  z.ZodTypeDef,
  PublicEndpointPrompt
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PublicEndpointPrompt$ {
  /** @deprecated use `PublicEndpointPrompt$inboundSchema` instead. */
  export const inboundSchema = PublicEndpointPrompt$inboundSchema;
  /** @deprecated use `PublicEndpointPrompt$outboundSchema` instead. */
  export const outboundSchema = PublicEndpointPrompt$outboundSchema;
  /** @deprecated use `PublicEndpointPrompt$Outbound` instead. */
  export type Outbound = PublicEndpointPrompt$Outbound;
}

export function publicEndpointPromptToJSON(
  publicEndpointPrompt: PublicEndpointPrompt,
): string {
  return JSON.stringify(
    PublicEndpointPrompt$outboundSchema.parse(publicEndpointPrompt),
  );
}

export function publicEndpointPromptFromJSON(
  jsonString: string,
): SafeParseResult<PublicEndpointPrompt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PublicEndpointPrompt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PublicEndpointPrompt' from JSON`,
  );
}

/** @internal */
export const PublicEndpointCompletion$inboundSchema: z.ZodType<
  PublicEndpointCompletion,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type PublicEndpointCompletion$Outbound = number | string | any;

/** @internal */
export const PublicEndpointCompletion$outboundSchema: z.ZodType<
  PublicEndpointCompletion$Outbound,
  z.ZodTypeDef,
  PublicEndpointCompletion
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PublicEndpointCompletion$ {
  /** @deprecated use `PublicEndpointCompletion$inboundSchema` instead. */
  export const inboundSchema = PublicEndpointCompletion$inboundSchema;
  /** @deprecated use `PublicEndpointCompletion$outboundSchema` instead. */
  export const outboundSchema = PublicEndpointCompletion$outboundSchema;
  /** @deprecated use `PublicEndpointCompletion$Outbound` instead. */
  export type Outbound = PublicEndpointCompletion$Outbound;
}

export function publicEndpointCompletionToJSON(
  publicEndpointCompletion: PublicEndpointCompletion,
): string {
  return JSON.stringify(
    PublicEndpointCompletion$outboundSchema.parse(publicEndpointCompletion),
  );
}

export function publicEndpointCompletionFromJSON(
  jsonString: string,
): SafeParseResult<PublicEndpointCompletion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PublicEndpointCompletion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PublicEndpointCompletion' from JSON`,
  );
}

/** @internal */
export const PublicEndpointRequest$inboundSchema: z.ZodType<
  PublicEndpointRequest,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type PublicEndpointRequest$Outbound = number | string | any;

/** @internal */
export const PublicEndpointRequest$outboundSchema: z.ZodType<
  PublicEndpointRequest$Outbound,
  z.ZodTypeDef,
  PublicEndpointRequest
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PublicEndpointRequest$ {
  /** @deprecated use `PublicEndpointRequest$inboundSchema` instead. */
  export const inboundSchema = PublicEndpointRequest$inboundSchema;
  /** @deprecated use `PublicEndpointRequest$outboundSchema` instead. */
  export const outboundSchema = PublicEndpointRequest$outboundSchema;
  /** @deprecated use `PublicEndpointRequest$Outbound` instead. */
  export type Outbound = PublicEndpointRequest$Outbound;
}

export function publicEndpointRequestToJSON(
  publicEndpointRequest: PublicEndpointRequest,
): string {
  return JSON.stringify(
    PublicEndpointRequest$outboundSchema.parse(publicEndpointRequest),
  );
}

export function publicEndpointRequestFromJSON(
  jsonString: string,
): SafeParseResult<PublicEndpointRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PublicEndpointRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PublicEndpointRequest' from JSON`,
  );
}

/** @internal */
export const PublicEndpointImage$inboundSchema: z.ZodType<
  PublicEndpointImage,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type PublicEndpointImage$Outbound = number | string | any;

/** @internal */
export const PublicEndpointImage$outboundSchema: z.ZodType<
  PublicEndpointImage$Outbound,
  z.ZodTypeDef,
  PublicEndpointImage
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PublicEndpointImage$ {
  /** @deprecated use `PublicEndpointImage$inboundSchema` instead. */
  export const inboundSchema = PublicEndpointImage$inboundSchema;
  /** @deprecated use `PublicEndpointImage$outboundSchema` instead. */
  export const outboundSchema = PublicEndpointImage$outboundSchema;
  /** @deprecated use `PublicEndpointImage$Outbound` instead. */
  export type Outbound = PublicEndpointImage$Outbound;
}

export function publicEndpointImageToJSON(
  publicEndpointImage: PublicEndpointImage,
): string {
  return JSON.stringify(
    PublicEndpointImage$outboundSchema.parse(publicEndpointImage),
  );
}

export function publicEndpointImageFromJSON(
  jsonString: string,
): SafeParseResult<PublicEndpointImage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PublicEndpointImage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PublicEndpointImage' from JSON`,
  );
}

/** @internal */
export const PublicEndpointImageOutput$inboundSchema: z.ZodType<
  PublicEndpointImageOutput,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type PublicEndpointImageOutput$Outbound = number | string | any;

/** @internal */
export const PublicEndpointImageOutput$outboundSchema: z.ZodType<
  PublicEndpointImageOutput$Outbound,
  z.ZodTypeDef,
  PublicEndpointImageOutput
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PublicEndpointImageOutput$ {
  /** @deprecated use `PublicEndpointImageOutput$inboundSchema` instead. */
  export const inboundSchema = PublicEndpointImageOutput$inboundSchema;
  /** @deprecated use `PublicEndpointImageOutput$outboundSchema` instead. */
  export const outboundSchema = PublicEndpointImageOutput$outboundSchema;
  /** @deprecated use `PublicEndpointImageOutput$Outbound` instead. */
  export type Outbound = PublicEndpointImageOutput$Outbound;
}

export function publicEndpointImageOutputToJSON(
  publicEndpointImageOutput: PublicEndpointImageOutput,
): string {
  return JSON.stringify(
    PublicEndpointImageOutput$outboundSchema.parse(publicEndpointImageOutput),
  );
}

export function publicEndpointImageOutputFromJSON(
  jsonString: string,
): SafeParseResult<PublicEndpointImageOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PublicEndpointImageOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PublicEndpointImageOutput' from JSON`,
  );
}

/** @internal */
export const PublicEndpointAudio$inboundSchema: z.ZodType<
  PublicEndpointAudio,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type PublicEndpointAudio$Outbound = number | string | any;

/** @internal */
export const PublicEndpointAudio$outboundSchema: z.ZodType<
  PublicEndpointAudio$Outbound,
  z.ZodTypeDef,
  PublicEndpointAudio
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PublicEndpointAudio$ {
  /** @deprecated use `PublicEndpointAudio$inboundSchema` instead. */
  export const inboundSchema = PublicEndpointAudio$inboundSchema;
  /** @deprecated use `PublicEndpointAudio$outboundSchema` instead. */
  export const outboundSchema = PublicEndpointAudio$outboundSchema;
  /** @deprecated use `PublicEndpointAudio$Outbound` instead. */
  export type Outbound = PublicEndpointAudio$Outbound;
}

export function publicEndpointAudioToJSON(
  publicEndpointAudio: PublicEndpointAudio,
): string {
  return JSON.stringify(
    PublicEndpointAudio$outboundSchema.parse(publicEndpointAudio),
  );
}

export function publicEndpointAudioFromJSON(
  jsonString: string,
): SafeParseResult<PublicEndpointAudio, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PublicEndpointAudio$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PublicEndpointAudio' from JSON`,
  );
}

/** @internal */
export const PublicEndpointInputAudioCache$inboundSchema: z.ZodType<
  PublicEndpointInputAudioCache,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type PublicEndpointInputAudioCache$Outbound = number | string | any;

/** @internal */
export const PublicEndpointInputAudioCache$outboundSchema: z.ZodType<
  PublicEndpointInputAudioCache$Outbound,
  z.ZodTypeDef,
  PublicEndpointInputAudioCache
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PublicEndpointInputAudioCache$ {
  /** @deprecated use `PublicEndpointInputAudioCache$inboundSchema` instead. */
  export const inboundSchema = PublicEndpointInputAudioCache$inboundSchema;
  /** @deprecated use `PublicEndpointInputAudioCache$outboundSchema` instead. */
  export const outboundSchema = PublicEndpointInputAudioCache$outboundSchema;
  /** @deprecated use `PublicEndpointInputAudioCache$Outbound` instead. */
  export type Outbound = PublicEndpointInputAudioCache$Outbound;
}

export function publicEndpointInputAudioCacheToJSON(
  publicEndpointInputAudioCache: PublicEndpointInputAudioCache,
): string {
  return JSON.stringify(
    PublicEndpointInputAudioCache$outboundSchema.parse(
      publicEndpointInputAudioCache,
    ),
  );
}

export function publicEndpointInputAudioCacheFromJSON(
  jsonString: string,
): SafeParseResult<PublicEndpointInputAudioCache, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PublicEndpointInputAudioCache$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PublicEndpointInputAudioCache' from JSON`,
  );
}

/** @internal */
export const PublicEndpointWebSearch$inboundSchema: z.ZodType<
  PublicEndpointWebSearch,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type PublicEndpointWebSearch$Outbound = number | string | any;

/** @internal */
export const PublicEndpointWebSearch$outboundSchema: z.ZodType<
  PublicEndpointWebSearch$Outbound,
  z.ZodTypeDef,
  PublicEndpointWebSearch
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PublicEndpointWebSearch$ {
  /** @deprecated use `PublicEndpointWebSearch$inboundSchema` instead. */
  export const inboundSchema = PublicEndpointWebSearch$inboundSchema;
  /** @deprecated use `PublicEndpointWebSearch$outboundSchema` instead. */
  export const outboundSchema = PublicEndpointWebSearch$outboundSchema;
  /** @deprecated use `PublicEndpointWebSearch$Outbound` instead. */
  export type Outbound = PublicEndpointWebSearch$Outbound;
}

export function publicEndpointWebSearchToJSON(
  publicEndpointWebSearch: PublicEndpointWebSearch,
): string {
  return JSON.stringify(
    PublicEndpointWebSearch$outboundSchema.parse(publicEndpointWebSearch),
  );
}

export function publicEndpointWebSearchFromJSON(
  jsonString: string,
): SafeParseResult<PublicEndpointWebSearch, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PublicEndpointWebSearch$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PublicEndpointWebSearch' from JSON`,
  );
}

/** @internal */
export const PublicEndpointInternalReasoning$inboundSchema: z.ZodType<
  PublicEndpointInternalReasoning,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type PublicEndpointInternalReasoning$Outbound = number | string | any;

/** @internal */
export const PublicEndpointInternalReasoning$outboundSchema: z.ZodType<
  PublicEndpointInternalReasoning$Outbound,
  z.ZodTypeDef,
  PublicEndpointInternalReasoning
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PublicEndpointInternalReasoning$ {
  /** @deprecated use `PublicEndpointInternalReasoning$inboundSchema` instead. */
  export const inboundSchema = PublicEndpointInternalReasoning$inboundSchema;
  /** @deprecated use `PublicEndpointInternalReasoning$outboundSchema` instead. */
  export const outboundSchema = PublicEndpointInternalReasoning$outboundSchema;
  /** @deprecated use `PublicEndpointInternalReasoning$Outbound` instead. */
  export type Outbound = PublicEndpointInternalReasoning$Outbound;
}

export function publicEndpointInternalReasoningToJSON(
  publicEndpointInternalReasoning: PublicEndpointInternalReasoning,
): string {
  return JSON.stringify(
    PublicEndpointInternalReasoning$outboundSchema.parse(
      publicEndpointInternalReasoning,
    ),
  );
}

export function publicEndpointInternalReasoningFromJSON(
  jsonString: string,
): SafeParseResult<PublicEndpointInternalReasoning, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PublicEndpointInternalReasoning$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PublicEndpointInternalReasoning' from JSON`,
  );
}

/** @internal */
export const PublicEndpointInputCacheRead$inboundSchema: z.ZodType<
  PublicEndpointInputCacheRead,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type PublicEndpointInputCacheRead$Outbound = number | string | any;

/** @internal */
export const PublicEndpointInputCacheRead$outboundSchema: z.ZodType<
  PublicEndpointInputCacheRead$Outbound,
  z.ZodTypeDef,
  PublicEndpointInputCacheRead
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PublicEndpointInputCacheRead$ {
  /** @deprecated use `PublicEndpointInputCacheRead$inboundSchema` instead. */
  export const inboundSchema = PublicEndpointInputCacheRead$inboundSchema;
  /** @deprecated use `PublicEndpointInputCacheRead$outboundSchema` instead. */
  export const outboundSchema = PublicEndpointInputCacheRead$outboundSchema;
  /** @deprecated use `PublicEndpointInputCacheRead$Outbound` instead. */
  export type Outbound = PublicEndpointInputCacheRead$Outbound;
}

export function publicEndpointInputCacheReadToJSON(
  publicEndpointInputCacheRead: PublicEndpointInputCacheRead,
): string {
  return JSON.stringify(
    PublicEndpointInputCacheRead$outboundSchema.parse(
      publicEndpointInputCacheRead,
    ),
  );
}

export function publicEndpointInputCacheReadFromJSON(
  jsonString: string,
): SafeParseResult<PublicEndpointInputCacheRead, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PublicEndpointInputCacheRead$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PublicEndpointInputCacheRead' from JSON`,
  );
}

/** @internal */
export const PublicEndpointInputCacheWrite$inboundSchema: z.ZodType<
  PublicEndpointInputCacheWrite,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type PublicEndpointInputCacheWrite$Outbound = number | string | any;

/** @internal */
export const PublicEndpointInputCacheWrite$outboundSchema: z.ZodType<
  PublicEndpointInputCacheWrite$Outbound,
  z.ZodTypeDef,
  PublicEndpointInputCacheWrite
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PublicEndpointInputCacheWrite$ {
  /** @deprecated use `PublicEndpointInputCacheWrite$inboundSchema` instead. */
  export const inboundSchema = PublicEndpointInputCacheWrite$inboundSchema;
  /** @deprecated use `PublicEndpointInputCacheWrite$outboundSchema` instead. */
  export const outboundSchema = PublicEndpointInputCacheWrite$outboundSchema;
  /** @deprecated use `PublicEndpointInputCacheWrite$Outbound` instead. */
  export type Outbound = PublicEndpointInputCacheWrite$Outbound;
}

export function publicEndpointInputCacheWriteToJSON(
  publicEndpointInputCacheWrite: PublicEndpointInputCacheWrite,
): string {
  return JSON.stringify(
    PublicEndpointInputCacheWrite$outboundSchema.parse(
      publicEndpointInputCacheWrite,
    ),
  );
}

export function publicEndpointInputCacheWriteFromJSON(
  jsonString: string,
): SafeParseResult<PublicEndpointInputCacheWrite, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PublicEndpointInputCacheWrite$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PublicEndpointInputCacheWrite' from JSON`,
  );
}

/** @internal */
export const PublicEndpointPricing$inboundSchema: z.ZodType<
  PublicEndpointPricing,
  z.ZodTypeDef,
  unknown
> = z.object({
  prompt: z.union([z.number(), z.string(), z.any()]).optional(),
  completion: z.union([z.number(), z.string(), z.any()]).optional(),
  request: z.union([z.number(), z.string(), z.any()]).optional(),
  image: z.union([z.number(), z.string(), z.any()]).optional(),
  image_output: z.union([z.number(), z.string(), z.any()]).optional(),
  audio: z.union([z.number(), z.string(), z.any()]).optional(),
  input_audio_cache: z.union([z.number(), z.string(), z.any()]).optional(),
  web_search: z.union([z.number(), z.string(), z.any()]).optional(),
  internal_reasoning: z.union([z.number(), z.string(), z.any()]).optional(),
  input_cache_read: z.union([z.number(), z.string(), z.any()]).optional(),
  input_cache_write: z.union([z.number(), z.string(), z.any()]).optional(),
  discount: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "image_output": "imageOutput",
    "input_audio_cache": "inputAudioCache",
    "web_search": "webSearch",
    "internal_reasoning": "internalReasoning",
    "input_cache_read": "inputCacheRead",
    "input_cache_write": "inputCacheWrite",
  });
});

/** @internal */
export type PublicEndpointPricing$Outbound = {
  prompt?: number | string | any | undefined;
  completion?: number | string | any | undefined;
  request?: number | string | any | undefined;
  image?: number | string | any | undefined;
  image_output?: number | string | any | undefined;
  audio?: number | string | any | undefined;
  input_audio_cache?: number | string | any | undefined;
  web_search?: number | string | any | undefined;
  internal_reasoning?: number | string | any | undefined;
  input_cache_read?: number | string | any | undefined;
  input_cache_write?: number | string | any | undefined;
  discount?: number | undefined;
};

/** @internal */
export const PublicEndpointPricing$outboundSchema: z.ZodType<
  PublicEndpointPricing$Outbound,
  z.ZodTypeDef,
  PublicEndpointPricing
> = z.object({
  prompt: z.union([z.number(), z.string(), z.any()]).optional(),
  completion: z.union([z.number(), z.string(), z.any()]).optional(),
  request: z.union([z.number(), z.string(), z.any()]).optional(),
  image: z.union([z.number(), z.string(), z.any()]).optional(),
  imageOutput: z.union([z.number(), z.string(), z.any()]).optional(),
  audio: z.union([z.number(), z.string(), z.any()]).optional(),
  inputAudioCache: z.union([z.number(), z.string(), z.any()]).optional(),
  webSearch: z.union([z.number(), z.string(), z.any()]).optional(),
  internalReasoning: z.union([z.number(), z.string(), z.any()]).optional(),
  inputCacheRead: z.union([z.number(), z.string(), z.any()]).optional(),
  inputCacheWrite: z.union([z.number(), z.string(), z.any()]).optional(),
  discount: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    imageOutput: "image_output",
    inputAudioCache: "input_audio_cache",
    webSearch: "web_search",
    internalReasoning: "internal_reasoning",
    inputCacheRead: "input_cache_read",
    inputCacheWrite: "input_cache_write",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PublicEndpointPricing$ {
  /** @deprecated use `PublicEndpointPricing$inboundSchema` instead. */
  export const inboundSchema = PublicEndpointPricing$inboundSchema;
  /** @deprecated use `PublicEndpointPricing$outboundSchema` instead. */
  export const outboundSchema = PublicEndpointPricing$outboundSchema;
  /** @deprecated use `PublicEndpointPricing$Outbound` instead. */
  export type Outbound = PublicEndpointPricing$Outbound;
}

export function publicEndpointPricingToJSON(
  publicEndpointPricing: PublicEndpointPricing,
): string {
  return JSON.stringify(
    PublicEndpointPricing$outboundSchema.parse(publicEndpointPricing),
  );
}

export function publicEndpointPricingFromJSON(
  jsonString: string,
): SafeParseResult<PublicEndpointPricing, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PublicEndpointPricing$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PublicEndpointPricing' from JSON`,
  );
}

/** @internal */
export const PublicEndpointQuantization$inboundSchema: z.ZodType<
  PublicEndpointQuantization,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(PublicEndpointQuantization),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const PublicEndpointQuantization$outboundSchema: z.ZodType<
  PublicEndpointQuantization,
  z.ZodTypeDef,
  PublicEndpointQuantization
> = z.union([
  z.nativeEnum(PublicEndpointQuantization),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PublicEndpointQuantization$ {
  /** @deprecated use `PublicEndpointQuantization$inboundSchema` instead. */
  export const inboundSchema = PublicEndpointQuantization$inboundSchema;
  /** @deprecated use `PublicEndpointQuantization$outboundSchema` instead. */
  export const outboundSchema = PublicEndpointQuantization$outboundSchema;
}

/** @internal */
export const PublicEndpoint$inboundSchema: z.ZodType<
  PublicEndpoint,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  model_name: z.string(),
  context_length: z.number(),
  pricing: z.lazy(() => PublicEndpointPricing$inboundSchema),
  provider_name: ProviderName$inboundSchema,
  tag: z.string(),
  quantization: z.nullable(PublicEndpointQuantization$inboundSchema),
  max_completion_tokens: z.nullable(z.number()),
  max_prompt_tokens: z.nullable(z.number()),
  supported_parameters: z.array(Parameter$inboundSchema),
  status: EndpointStatus$inboundSchema.optional(),
  uptime_last_30m: z.nullable(z.number()),
  supports_implicit_caching: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "model_name": "modelName",
    "context_length": "contextLength",
    "provider_name": "providerName",
    "max_completion_tokens": "maxCompletionTokens",
    "max_prompt_tokens": "maxPromptTokens",
    "supported_parameters": "supportedParameters",
    "uptime_last_30m": "uptimeLast30m",
    "supports_implicit_caching": "supportsImplicitCaching",
  });
});

/** @internal */
export type PublicEndpoint$Outbound = {
  name: string;
  model_name: string;
  context_length: number;
  pricing: PublicEndpointPricing$Outbound;
  provider_name: string;
  tag: string;
  quantization: string | null;
  max_completion_tokens: number | null;
  max_prompt_tokens: number | null;
  supported_parameters: Array<string>;
  status?: number | undefined;
  uptime_last_30m: number | null;
  supports_implicit_caching: boolean;
};

/** @internal */
export const PublicEndpoint$outboundSchema: z.ZodType<
  PublicEndpoint$Outbound,
  z.ZodTypeDef,
  PublicEndpoint
> = z.object({
  name: z.string(),
  modelName: z.string(),
  contextLength: z.number(),
  pricing: z.lazy(() => PublicEndpointPricing$outboundSchema),
  providerName: ProviderName$outboundSchema,
  tag: z.string(),
  quantization: z.nullable(PublicEndpointQuantization$outboundSchema),
  maxCompletionTokens: z.nullable(z.number()),
  maxPromptTokens: z.nullable(z.number()),
  supportedParameters: z.array(Parameter$outboundSchema),
  status: EndpointStatus$outboundSchema.optional(),
  uptimeLast30m: z.nullable(z.number()),
  supportsImplicitCaching: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    modelName: "model_name",
    contextLength: "context_length",
    providerName: "provider_name",
    maxCompletionTokens: "max_completion_tokens",
    maxPromptTokens: "max_prompt_tokens",
    supportedParameters: "supported_parameters",
    uptimeLast30m: "uptime_last_30m",
    supportsImplicitCaching: "supports_implicit_caching",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PublicEndpoint$ {
  /** @deprecated use `PublicEndpoint$inboundSchema` instead. */
  export const inboundSchema = PublicEndpoint$inboundSchema;
  /** @deprecated use `PublicEndpoint$outboundSchema` instead. */
  export const outboundSchema = PublicEndpoint$outboundSchema;
  /** @deprecated use `PublicEndpoint$Outbound` instead. */
  export type Outbound = PublicEndpoint$Outbound;
}

export function publicEndpointToJSON(publicEndpoint: PublicEndpoint): string {
  return JSON.stringify(PublicEndpoint$outboundSchema.parse(publicEndpoint));
}

export function publicEndpointFromJSON(
  jsonString: string,
): SafeParseResult<PublicEndpoint, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PublicEndpoint$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PublicEndpoint' from JSON`,
  );
}
