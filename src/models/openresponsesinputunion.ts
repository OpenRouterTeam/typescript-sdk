/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ImageGenerationStatus,
  ImageGenerationStatus$inboundSchema,
  ImageGenerationStatus$outboundSchema,
} from "./imagegenerationstatus.js";
import {
  OpenResponsesEasyInputMessage,
  OpenResponsesEasyInputMessage$inboundSchema,
  OpenResponsesEasyInputMessage$Outbound,
  OpenResponsesEasyInputMessage$outboundSchema,
} from "./openresponseseasyinputmessage.js";
import {
  OpenResponsesFunctionCallOutput,
  OpenResponsesFunctionCallOutput$inboundSchema,
  OpenResponsesFunctionCallOutput$Outbound,
  OpenResponsesFunctionCallOutput$outboundSchema,
} from "./openresponsesfunctioncalloutput.js";
import {
  OpenResponsesFunctionToolCall,
  OpenResponsesFunctionToolCall$inboundSchema,
  OpenResponsesFunctionToolCall$Outbound,
  OpenResponsesFunctionToolCall$outboundSchema,
} from "./openresponsesfunctiontoolcall.js";
import {
  OpenResponsesInputMessageItem,
  OpenResponsesInputMessageItem$inboundSchema,
  OpenResponsesInputMessageItem$Outbound,
  OpenResponsesInputMessageItem$outboundSchema,
} from "./openresponsesinputmessageitem.js";
import {
  OpenResponsesOutputItemReasoning,
  OpenResponsesOutputItemReasoning$inboundSchema,
  OpenResponsesOutputItemReasoning$Outbound,
  OpenResponsesOutputItemReasoning$outboundSchema,
} from "./openresponsesoutputitemreasoning.js";
import {
  OpenResponsesOutputMessage,
  OpenResponsesOutputMessage$inboundSchema,
  OpenResponsesOutputMessage$Outbound,
  OpenResponsesOutputMessage$outboundSchema,
} from "./openresponsesoutputmessage.js";
import {
  OpenResponsesReasoning,
  OpenResponsesReasoning$inboundSchema,
  OpenResponsesReasoning$Outbound,
  OpenResponsesReasoning$outboundSchema,
} from "./openresponsesreasoning.js";
import {
  WebSearchStatus,
  WebSearchStatus$inboundSchema,
  WebSearchStatus$outboundSchema,
} from "./websearchstatus.js";

export const OpenResponsesInputTypeImageGenerationCall = {
  ImageGenerationCall: "image_generation_call",
} as const;
export type OpenResponsesInputTypeImageGenerationCall = ClosedEnum<
  typeof OpenResponsesInputTypeImageGenerationCall
>;

export type OpenResponsesInputImageGenerationCall = {
  type: OpenResponsesInputTypeImageGenerationCall;
  id: string;
  result: string | null;
  status: ImageGenerationStatus;
};

export const OpenResponsesInputTypeFileSearchCall = {
  FileSearchCall: "file_search_call",
} as const;
export type OpenResponsesInputTypeFileSearchCall = ClosedEnum<
  typeof OpenResponsesInputTypeFileSearchCall
>;

export type OpenResponsesInputFileSearchCall = {
  type: OpenResponsesInputTypeFileSearchCall;
  id: string;
  queries: Array<string>;
  status: WebSearchStatus;
};

export const OpenResponsesInputTypeWebSearchCall = {
  WebSearchCall: "web_search_call",
} as const;
export type OpenResponsesInputTypeWebSearchCall = ClosedEnum<
  typeof OpenResponsesInputTypeWebSearchCall
>;

export type OpenResponsesInputWebSearchCall = {
  type: OpenResponsesInputTypeWebSearchCall;
  id: string;
  status: WebSearchStatus;
};

export const OpenResponsesInputTypeFunctionCall = {
  FunctionCall: "function_call",
} as const;
export type OpenResponsesInputTypeFunctionCall = ClosedEnum<
  typeof OpenResponsesInputTypeFunctionCall
>;

export const OpenResponsesInputStatusInProgress = {
  InProgress: "in_progress",
} as const;
export type OpenResponsesInputStatusInProgress = ClosedEnum<
  typeof OpenResponsesInputStatusInProgress
>;

export const OpenResponsesInputStatusIncomplete = {
  Incomplete: "incomplete",
} as const;
export type OpenResponsesInputStatusIncomplete = ClosedEnum<
  typeof OpenResponsesInputStatusIncomplete
>;

export const OpenResponsesInputStatusCompleted = {
  Completed: "completed",
} as const;
export type OpenResponsesInputStatusCompleted = ClosedEnum<
  typeof OpenResponsesInputStatusCompleted
>;

export type OpenResponsesInputStatusUnion =
  | OpenResponsesInputStatusCompleted
  | OpenResponsesInputStatusIncomplete
  | OpenResponsesInputStatusInProgress;

export type OpenResponsesInputFunctionCall = {
  type: OpenResponsesInputTypeFunctionCall;
  id?: string | undefined;
  name: string;
  arguments: string;
  callId: string;
  status?:
    | OpenResponsesInputStatusCompleted
    | OpenResponsesInputStatusIncomplete
    | OpenResponsesInputStatusInProgress
    | undefined;
};

export type OpenResponsesInputUnion1 =
  | OpenResponsesFunctionToolCall
  | OpenResponsesFunctionCallOutput
  | OpenResponsesOutputMessage
  | OpenResponsesInputFunctionCall
  | OpenResponsesInputFileSearchCall
  | OpenResponsesInputImageGenerationCall
  | OpenResponsesReasoning
  | OpenResponsesOutputItemReasoning
  | OpenResponsesInputWebSearchCall
  | OpenResponsesEasyInputMessage
  | OpenResponsesInputMessageItem;

/**
 * Input for a response request - can be a string or array of items
 */
export type OpenResponsesInputUnion =
  | string
  | Array<
    | OpenResponsesFunctionToolCall
    | OpenResponsesFunctionCallOutput
    | OpenResponsesOutputMessage
    | OpenResponsesInputFunctionCall
    | OpenResponsesInputFileSearchCall
    | OpenResponsesInputImageGenerationCall
    | OpenResponsesReasoning
    | OpenResponsesOutputItemReasoning
    | OpenResponsesInputWebSearchCall
    | OpenResponsesEasyInputMessage
    | OpenResponsesInputMessageItem
  >;

/** @internal */
export const OpenResponsesInputTypeImageGenerationCall$inboundSchema:
  z.ZodNativeEnum<typeof OpenResponsesInputTypeImageGenerationCall> = z
    .nativeEnum(OpenResponsesInputTypeImageGenerationCall);

/** @internal */
export const OpenResponsesInputTypeImageGenerationCall$outboundSchema:
  z.ZodNativeEnum<typeof OpenResponsesInputTypeImageGenerationCall> =
    OpenResponsesInputTypeImageGenerationCall$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesInputTypeImageGenerationCall$ {
  /** @deprecated use `OpenResponsesInputTypeImageGenerationCall$inboundSchema` instead. */
  export const inboundSchema =
    OpenResponsesInputTypeImageGenerationCall$inboundSchema;
  /** @deprecated use `OpenResponsesInputTypeImageGenerationCall$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesInputTypeImageGenerationCall$outboundSchema;
}

/** @internal */
export const OpenResponsesInputImageGenerationCall$inboundSchema: z.ZodType<
  OpenResponsesInputImageGenerationCall,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: OpenResponsesInputTypeImageGenerationCall$inboundSchema,
  id: z.string(),
  result: z.nullable(z.string()),
  status: ImageGenerationStatus$inboundSchema,
});

/** @internal */
export type OpenResponsesInputImageGenerationCall$Outbound = {
  type: string;
  id: string;
  result: string | null;
  status: string;
};

/** @internal */
export const OpenResponsesInputImageGenerationCall$outboundSchema: z.ZodType<
  OpenResponsesInputImageGenerationCall$Outbound,
  z.ZodTypeDef,
  OpenResponsesInputImageGenerationCall
> = z.object({
  type: OpenResponsesInputTypeImageGenerationCall$outboundSchema,
  id: z.string(),
  result: z.nullable(z.string()),
  status: ImageGenerationStatus$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesInputImageGenerationCall$ {
  /** @deprecated use `OpenResponsesInputImageGenerationCall$inboundSchema` instead. */
  export const inboundSchema =
    OpenResponsesInputImageGenerationCall$inboundSchema;
  /** @deprecated use `OpenResponsesInputImageGenerationCall$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesInputImageGenerationCall$outboundSchema;
  /** @deprecated use `OpenResponsesInputImageGenerationCall$Outbound` instead. */
  export type Outbound = OpenResponsesInputImageGenerationCall$Outbound;
}

export function openResponsesInputImageGenerationCallToJSON(
  openResponsesInputImageGenerationCall: OpenResponsesInputImageGenerationCall,
): string {
  return JSON.stringify(
    OpenResponsesInputImageGenerationCall$outboundSchema.parse(
      openResponsesInputImageGenerationCall,
    ),
  );
}

export function openResponsesInputImageGenerationCallFromJSON(
  jsonString: string,
): SafeParseResult<OpenResponsesInputImageGenerationCall, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OpenResponsesInputImageGenerationCall$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenResponsesInputImageGenerationCall' from JSON`,
  );
}

/** @internal */
export const OpenResponsesInputTypeFileSearchCall$inboundSchema:
  z.ZodNativeEnum<typeof OpenResponsesInputTypeFileSearchCall> = z.nativeEnum(
    OpenResponsesInputTypeFileSearchCall,
  );

/** @internal */
export const OpenResponsesInputTypeFileSearchCall$outboundSchema:
  z.ZodNativeEnum<typeof OpenResponsesInputTypeFileSearchCall> =
    OpenResponsesInputTypeFileSearchCall$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesInputTypeFileSearchCall$ {
  /** @deprecated use `OpenResponsesInputTypeFileSearchCall$inboundSchema` instead. */
  export const inboundSchema =
    OpenResponsesInputTypeFileSearchCall$inboundSchema;
  /** @deprecated use `OpenResponsesInputTypeFileSearchCall$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesInputTypeFileSearchCall$outboundSchema;
}

/** @internal */
export const OpenResponsesInputFileSearchCall$inboundSchema: z.ZodType<
  OpenResponsesInputFileSearchCall,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: OpenResponsesInputTypeFileSearchCall$inboundSchema,
  id: z.string(),
  queries: z.array(z.string()),
  status: WebSearchStatus$inboundSchema,
});

/** @internal */
export type OpenResponsesInputFileSearchCall$Outbound = {
  type: string;
  id: string;
  queries: Array<string>;
  status: string;
};

/** @internal */
export const OpenResponsesInputFileSearchCall$outboundSchema: z.ZodType<
  OpenResponsesInputFileSearchCall$Outbound,
  z.ZodTypeDef,
  OpenResponsesInputFileSearchCall
> = z.object({
  type: OpenResponsesInputTypeFileSearchCall$outboundSchema,
  id: z.string(),
  queries: z.array(z.string()),
  status: WebSearchStatus$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesInputFileSearchCall$ {
  /** @deprecated use `OpenResponsesInputFileSearchCall$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesInputFileSearchCall$inboundSchema;
  /** @deprecated use `OpenResponsesInputFileSearchCall$outboundSchema` instead. */
  export const outboundSchema = OpenResponsesInputFileSearchCall$outboundSchema;
  /** @deprecated use `OpenResponsesInputFileSearchCall$Outbound` instead. */
  export type Outbound = OpenResponsesInputFileSearchCall$Outbound;
}

export function openResponsesInputFileSearchCallToJSON(
  openResponsesInputFileSearchCall: OpenResponsesInputFileSearchCall,
): string {
  return JSON.stringify(
    OpenResponsesInputFileSearchCall$outboundSchema.parse(
      openResponsesInputFileSearchCall,
    ),
  );
}

export function openResponsesInputFileSearchCallFromJSON(
  jsonString: string,
): SafeParseResult<OpenResponsesInputFileSearchCall, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenResponsesInputFileSearchCall$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenResponsesInputFileSearchCall' from JSON`,
  );
}

/** @internal */
export const OpenResponsesInputTypeWebSearchCall$inboundSchema: z.ZodNativeEnum<
  typeof OpenResponsesInputTypeWebSearchCall
> = z.nativeEnum(OpenResponsesInputTypeWebSearchCall);

/** @internal */
export const OpenResponsesInputTypeWebSearchCall$outboundSchema:
  z.ZodNativeEnum<typeof OpenResponsesInputTypeWebSearchCall> =
    OpenResponsesInputTypeWebSearchCall$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesInputTypeWebSearchCall$ {
  /** @deprecated use `OpenResponsesInputTypeWebSearchCall$inboundSchema` instead. */
  export const inboundSchema =
    OpenResponsesInputTypeWebSearchCall$inboundSchema;
  /** @deprecated use `OpenResponsesInputTypeWebSearchCall$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesInputTypeWebSearchCall$outboundSchema;
}

/** @internal */
export const OpenResponsesInputWebSearchCall$inboundSchema: z.ZodType<
  OpenResponsesInputWebSearchCall,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: OpenResponsesInputTypeWebSearchCall$inboundSchema,
  id: z.string(),
  status: WebSearchStatus$inboundSchema,
});

/** @internal */
export type OpenResponsesInputWebSearchCall$Outbound = {
  type: string;
  id: string;
  status: string;
};

/** @internal */
export const OpenResponsesInputWebSearchCall$outboundSchema: z.ZodType<
  OpenResponsesInputWebSearchCall$Outbound,
  z.ZodTypeDef,
  OpenResponsesInputWebSearchCall
> = z.object({
  type: OpenResponsesInputTypeWebSearchCall$outboundSchema,
  id: z.string(),
  status: WebSearchStatus$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesInputWebSearchCall$ {
  /** @deprecated use `OpenResponsesInputWebSearchCall$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesInputWebSearchCall$inboundSchema;
  /** @deprecated use `OpenResponsesInputWebSearchCall$outboundSchema` instead. */
  export const outboundSchema = OpenResponsesInputWebSearchCall$outboundSchema;
  /** @deprecated use `OpenResponsesInputWebSearchCall$Outbound` instead. */
  export type Outbound = OpenResponsesInputWebSearchCall$Outbound;
}

export function openResponsesInputWebSearchCallToJSON(
  openResponsesInputWebSearchCall: OpenResponsesInputWebSearchCall,
): string {
  return JSON.stringify(
    OpenResponsesInputWebSearchCall$outboundSchema.parse(
      openResponsesInputWebSearchCall,
    ),
  );
}

export function openResponsesInputWebSearchCallFromJSON(
  jsonString: string,
): SafeParseResult<OpenResponsesInputWebSearchCall, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenResponsesInputWebSearchCall$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenResponsesInputWebSearchCall' from JSON`,
  );
}

/** @internal */
export const OpenResponsesInputTypeFunctionCall$inboundSchema: z.ZodNativeEnum<
  typeof OpenResponsesInputTypeFunctionCall
> = z.nativeEnum(OpenResponsesInputTypeFunctionCall);

/** @internal */
export const OpenResponsesInputTypeFunctionCall$outboundSchema: z.ZodNativeEnum<
  typeof OpenResponsesInputTypeFunctionCall
> = OpenResponsesInputTypeFunctionCall$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesInputTypeFunctionCall$ {
  /** @deprecated use `OpenResponsesInputTypeFunctionCall$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesInputTypeFunctionCall$inboundSchema;
  /** @deprecated use `OpenResponsesInputTypeFunctionCall$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesInputTypeFunctionCall$outboundSchema;
}

/** @internal */
export const OpenResponsesInputStatusInProgress$inboundSchema: z.ZodNativeEnum<
  typeof OpenResponsesInputStatusInProgress
> = z.nativeEnum(OpenResponsesInputStatusInProgress);

/** @internal */
export const OpenResponsesInputStatusInProgress$outboundSchema: z.ZodNativeEnum<
  typeof OpenResponsesInputStatusInProgress
> = OpenResponsesInputStatusInProgress$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesInputStatusInProgress$ {
  /** @deprecated use `OpenResponsesInputStatusInProgress$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesInputStatusInProgress$inboundSchema;
  /** @deprecated use `OpenResponsesInputStatusInProgress$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesInputStatusInProgress$outboundSchema;
}

/** @internal */
export const OpenResponsesInputStatusIncomplete$inboundSchema: z.ZodNativeEnum<
  typeof OpenResponsesInputStatusIncomplete
> = z.nativeEnum(OpenResponsesInputStatusIncomplete);

/** @internal */
export const OpenResponsesInputStatusIncomplete$outboundSchema: z.ZodNativeEnum<
  typeof OpenResponsesInputStatusIncomplete
> = OpenResponsesInputStatusIncomplete$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesInputStatusIncomplete$ {
  /** @deprecated use `OpenResponsesInputStatusIncomplete$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesInputStatusIncomplete$inboundSchema;
  /** @deprecated use `OpenResponsesInputStatusIncomplete$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesInputStatusIncomplete$outboundSchema;
}

/** @internal */
export const OpenResponsesInputStatusCompleted$inboundSchema: z.ZodNativeEnum<
  typeof OpenResponsesInputStatusCompleted
> = z.nativeEnum(OpenResponsesInputStatusCompleted);

/** @internal */
export const OpenResponsesInputStatusCompleted$outboundSchema: z.ZodNativeEnum<
  typeof OpenResponsesInputStatusCompleted
> = OpenResponsesInputStatusCompleted$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesInputStatusCompleted$ {
  /** @deprecated use `OpenResponsesInputStatusCompleted$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesInputStatusCompleted$inboundSchema;
  /** @deprecated use `OpenResponsesInputStatusCompleted$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesInputStatusCompleted$outboundSchema;
}

/** @internal */
export const OpenResponsesInputStatusUnion$inboundSchema: z.ZodType<
  OpenResponsesInputStatusUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  OpenResponsesInputStatusCompleted$inboundSchema,
  OpenResponsesInputStatusIncomplete$inboundSchema,
  OpenResponsesInputStatusInProgress$inboundSchema,
]);

/** @internal */
export type OpenResponsesInputStatusUnion$Outbound = string | string | string;

/** @internal */
export const OpenResponsesInputStatusUnion$outboundSchema: z.ZodType<
  OpenResponsesInputStatusUnion$Outbound,
  z.ZodTypeDef,
  OpenResponsesInputStatusUnion
> = z.union([
  OpenResponsesInputStatusCompleted$outboundSchema,
  OpenResponsesInputStatusIncomplete$outboundSchema,
  OpenResponsesInputStatusInProgress$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesInputStatusUnion$ {
  /** @deprecated use `OpenResponsesInputStatusUnion$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesInputStatusUnion$inboundSchema;
  /** @deprecated use `OpenResponsesInputStatusUnion$outboundSchema` instead. */
  export const outboundSchema = OpenResponsesInputStatusUnion$outboundSchema;
  /** @deprecated use `OpenResponsesInputStatusUnion$Outbound` instead. */
  export type Outbound = OpenResponsesInputStatusUnion$Outbound;
}

export function openResponsesInputStatusUnionToJSON(
  openResponsesInputStatusUnion: OpenResponsesInputStatusUnion,
): string {
  return JSON.stringify(
    OpenResponsesInputStatusUnion$outboundSchema.parse(
      openResponsesInputStatusUnion,
    ),
  );
}

export function openResponsesInputStatusUnionFromJSON(
  jsonString: string,
): SafeParseResult<OpenResponsesInputStatusUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenResponsesInputStatusUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenResponsesInputStatusUnion' from JSON`,
  );
}

/** @internal */
export const OpenResponsesInputFunctionCall$inboundSchema: z.ZodType<
  OpenResponsesInputFunctionCall,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: OpenResponsesInputTypeFunctionCall$inboundSchema,
  id: z.string().optional(),
  name: z.string(),
  arguments: z.string(),
  call_id: z.string(),
  status: z.union([
    OpenResponsesInputStatusCompleted$inboundSchema,
    OpenResponsesInputStatusIncomplete$inboundSchema,
    OpenResponsesInputStatusInProgress$inboundSchema,
  ]).optional(),
}).transform((v) => {
  return remap$(v, {
    "call_id": "callId",
  });
});

/** @internal */
export type OpenResponsesInputFunctionCall$Outbound = {
  type: string;
  id?: string | undefined;
  name: string;
  arguments: string;
  call_id: string;
  status?: string | string | string | undefined;
};

/** @internal */
export const OpenResponsesInputFunctionCall$outboundSchema: z.ZodType<
  OpenResponsesInputFunctionCall$Outbound,
  z.ZodTypeDef,
  OpenResponsesInputFunctionCall
> = z.object({
  type: OpenResponsesInputTypeFunctionCall$outboundSchema,
  id: z.string().optional(),
  name: z.string(),
  arguments: z.string(),
  callId: z.string(),
  status: z.union([
    OpenResponsesInputStatusCompleted$outboundSchema,
    OpenResponsesInputStatusIncomplete$outboundSchema,
    OpenResponsesInputStatusInProgress$outboundSchema,
  ]).optional(),
}).transform((v) => {
  return remap$(v, {
    callId: "call_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesInputFunctionCall$ {
  /** @deprecated use `OpenResponsesInputFunctionCall$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesInputFunctionCall$inboundSchema;
  /** @deprecated use `OpenResponsesInputFunctionCall$outboundSchema` instead. */
  export const outboundSchema = OpenResponsesInputFunctionCall$outboundSchema;
  /** @deprecated use `OpenResponsesInputFunctionCall$Outbound` instead. */
  export type Outbound = OpenResponsesInputFunctionCall$Outbound;
}

export function openResponsesInputFunctionCallToJSON(
  openResponsesInputFunctionCall: OpenResponsesInputFunctionCall,
): string {
  return JSON.stringify(
    OpenResponsesInputFunctionCall$outboundSchema.parse(
      openResponsesInputFunctionCall,
    ),
  );
}

export function openResponsesInputFunctionCallFromJSON(
  jsonString: string,
): SafeParseResult<OpenResponsesInputFunctionCall, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenResponsesInputFunctionCall$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenResponsesInputFunctionCall' from JSON`,
  );
}

/** @internal */
export const OpenResponsesInputUnion1$inboundSchema: z.ZodType<
  OpenResponsesInputUnion1,
  z.ZodTypeDef,
  unknown
> = z.union([
  OpenResponsesFunctionToolCall$inboundSchema,
  OpenResponsesFunctionCallOutput$inboundSchema,
  OpenResponsesOutputMessage$inboundSchema,
  z.lazy(() => OpenResponsesInputFunctionCall$inboundSchema),
  z.lazy(() => OpenResponsesInputFileSearchCall$inboundSchema),
  z.lazy(() => OpenResponsesInputImageGenerationCall$inboundSchema),
  OpenResponsesReasoning$inboundSchema,
  OpenResponsesOutputItemReasoning$inboundSchema,
  z.lazy(() => OpenResponsesInputWebSearchCall$inboundSchema),
  OpenResponsesEasyInputMessage$inboundSchema,
  OpenResponsesInputMessageItem$inboundSchema,
]);

/** @internal */
export type OpenResponsesInputUnion1$Outbound =
  | OpenResponsesFunctionToolCall$Outbound
  | OpenResponsesFunctionCallOutput$Outbound
  | OpenResponsesOutputMessage$Outbound
  | OpenResponsesInputFunctionCall$Outbound
  | OpenResponsesInputFileSearchCall$Outbound
  | OpenResponsesInputImageGenerationCall$Outbound
  | OpenResponsesReasoning$Outbound
  | OpenResponsesOutputItemReasoning$Outbound
  | OpenResponsesInputWebSearchCall$Outbound
  | OpenResponsesEasyInputMessage$Outbound
  | OpenResponsesInputMessageItem$Outbound;

/** @internal */
export const OpenResponsesInputUnion1$outboundSchema: z.ZodType<
  OpenResponsesInputUnion1$Outbound,
  z.ZodTypeDef,
  OpenResponsesInputUnion1
> = z.union([
  OpenResponsesFunctionToolCall$outboundSchema,
  OpenResponsesFunctionCallOutput$outboundSchema,
  OpenResponsesOutputMessage$outboundSchema,
  z.lazy(() => OpenResponsesInputFunctionCall$outboundSchema),
  z.lazy(() => OpenResponsesInputFileSearchCall$outboundSchema),
  z.lazy(() => OpenResponsesInputImageGenerationCall$outboundSchema),
  OpenResponsesReasoning$outboundSchema,
  OpenResponsesOutputItemReasoning$outboundSchema,
  z.lazy(() => OpenResponsesInputWebSearchCall$outboundSchema),
  OpenResponsesEasyInputMessage$outboundSchema,
  OpenResponsesInputMessageItem$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesInputUnion1$ {
  /** @deprecated use `OpenResponsesInputUnion1$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesInputUnion1$inboundSchema;
  /** @deprecated use `OpenResponsesInputUnion1$outboundSchema` instead. */
  export const outboundSchema = OpenResponsesInputUnion1$outboundSchema;
  /** @deprecated use `OpenResponsesInputUnion1$Outbound` instead. */
  export type Outbound = OpenResponsesInputUnion1$Outbound;
}

export function openResponsesInputUnion1ToJSON(
  openResponsesInputUnion1: OpenResponsesInputUnion1,
): string {
  return JSON.stringify(
    OpenResponsesInputUnion1$outboundSchema.parse(openResponsesInputUnion1),
  );
}

export function openResponsesInputUnion1FromJSON(
  jsonString: string,
): SafeParseResult<OpenResponsesInputUnion1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenResponsesInputUnion1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenResponsesInputUnion1' from JSON`,
  );
}

/** @internal */
export const OpenResponsesInputUnion$inboundSchema: z.ZodType<
  OpenResponsesInputUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(
    z.union([
      OpenResponsesFunctionToolCall$inboundSchema,
      OpenResponsesFunctionCallOutput$inboundSchema,
      OpenResponsesOutputMessage$inboundSchema,
      z.lazy(() => OpenResponsesInputFunctionCall$inboundSchema),
      z.lazy(() => OpenResponsesInputFileSearchCall$inboundSchema),
      z.lazy(() => OpenResponsesInputImageGenerationCall$inboundSchema),
      OpenResponsesReasoning$inboundSchema,
      OpenResponsesOutputItemReasoning$inboundSchema,
      z.lazy(() => OpenResponsesInputWebSearchCall$inboundSchema),
      OpenResponsesEasyInputMessage$inboundSchema,
      OpenResponsesInputMessageItem$inboundSchema,
    ]),
  ),
]);

/** @internal */
export type OpenResponsesInputUnion$Outbound =
  | string
  | Array<
    | OpenResponsesFunctionToolCall$Outbound
    | OpenResponsesFunctionCallOutput$Outbound
    | OpenResponsesOutputMessage$Outbound
    | OpenResponsesInputFunctionCall$Outbound
    | OpenResponsesInputFileSearchCall$Outbound
    | OpenResponsesInputImageGenerationCall$Outbound
    | OpenResponsesReasoning$Outbound
    | OpenResponsesOutputItemReasoning$Outbound
    | OpenResponsesInputWebSearchCall$Outbound
    | OpenResponsesEasyInputMessage$Outbound
    | OpenResponsesInputMessageItem$Outbound
  >;

/** @internal */
export const OpenResponsesInputUnion$outboundSchema: z.ZodType<
  OpenResponsesInputUnion$Outbound,
  z.ZodTypeDef,
  OpenResponsesInputUnion
> = z.union([
  z.string(),
  z.array(
    z.union([
      OpenResponsesFunctionToolCall$outboundSchema,
      OpenResponsesFunctionCallOutput$outboundSchema,
      OpenResponsesOutputMessage$outboundSchema,
      z.lazy(() => OpenResponsesInputFunctionCall$outboundSchema),
      z.lazy(() => OpenResponsesInputFileSearchCall$outboundSchema),
      z.lazy(() => OpenResponsesInputImageGenerationCall$outboundSchema),
      OpenResponsesReasoning$outboundSchema,
      OpenResponsesOutputItemReasoning$outboundSchema,
      z.lazy(() => OpenResponsesInputWebSearchCall$outboundSchema),
      OpenResponsesEasyInputMessage$outboundSchema,
      OpenResponsesInputMessageItem$outboundSchema,
    ]),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesInputUnion$ {
  /** @deprecated use `OpenResponsesInputUnion$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesInputUnion$inboundSchema;
  /** @deprecated use `OpenResponsesInputUnion$outboundSchema` instead. */
  export const outboundSchema = OpenResponsesInputUnion$outboundSchema;
  /** @deprecated use `OpenResponsesInputUnion$Outbound` instead. */
  export type Outbound = OpenResponsesInputUnion$Outbound;
}

export function openResponsesInputUnionToJSON(
  openResponsesInputUnion: OpenResponsesInputUnion,
): string {
  return JSON.stringify(
    OpenResponsesInputUnion$outboundSchema.parse(openResponsesInputUnion),
  );
}

export function openResponsesInputUnionFromJSON(
  jsonString: string,
): SafeParseResult<OpenResponsesInputUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenResponsesInputUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenResponsesInputUnion' from JSON`,
  );
}
