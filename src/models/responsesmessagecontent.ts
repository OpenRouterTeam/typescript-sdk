/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ResponsesOutputText,
  ResponsesOutputText$inboundSchema,
  ResponsesOutputText$Outbound,
  ResponsesOutputText$outboundSchema,
} from "./responsesoutputtext.js";
import {
  ResponsesRefusalContent,
  ResponsesRefusalContent$inboundSchema,
  ResponsesRefusalContent$Outbound,
  ResponsesRefusalContent$outboundSchema,
} from "./responsesrefusalcontent.js";

export type ResponsesMessageContent =
  | ResponsesOutputText
  | ResponsesRefusalContent;

/** @internal */
export const ResponsesMessageContent$inboundSchema: z.ZodType<
  ResponsesMessageContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  ResponsesOutputText$inboundSchema,
  ResponsesRefusalContent$inboundSchema,
]);

/** @internal */
export type ResponsesMessageContent$Outbound =
  | ResponsesOutputText$Outbound
  | ResponsesRefusalContent$Outbound;

/** @internal */
export const ResponsesMessageContent$outboundSchema: z.ZodType<
  ResponsesMessageContent$Outbound,
  z.ZodTypeDef,
  ResponsesMessageContent
> = z.union([
  ResponsesOutputText$outboundSchema,
  ResponsesRefusalContent$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesMessageContent$ {
  /** @deprecated use `ResponsesMessageContent$inboundSchema` instead. */
  export const inboundSchema = ResponsesMessageContent$inboundSchema;
  /** @deprecated use `ResponsesMessageContent$outboundSchema` instead. */
  export const outboundSchema = ResponsesMessageContent$outboundSchema;
  /** @deprecated use `ResponsesMessageContent$Outbound` instead. */
  export type Outbound = ResponsesMessageContent$Outbound;
}

export function responsesMessageContentToJSON(
  responsesMessageContent: ResponsesMessageContent,
): string {
  return JSON.stringify(
    ResponsesMessageContent$outboundSchema.parse(responsesMessageContent),
  );
}

export function responsesMessageContentFromJSON(
  jsonString: string,
): SafeParseResult<ResponsesMessageContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponsesMessageContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponsesMessageContent' from JSON`,
  );
}
