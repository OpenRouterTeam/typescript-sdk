/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  CompletionStreamingChoice,
  CompletionStreamingChoice$inboundSchema,
  CompletionStreamingChoice$Outbound,
  CompletionStreamingChoice$outboundSchema,
} from "./completionstreamingchoice.js";
import {
  CompletionUsage,
  CompletionUsage$inboundSchema,
  CompletionUsage$Outbound,
  CompletionUsage$outboundSchema,
} from "./completionusage.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type CompletionStreamingResponseChunkData = {
  id: string;
  object: "text_completion.chunk";
  created: number;
  model: string;
  systemFingerprint?: string | undefined;
  choices: Array<CompletionStreamingChoice>;
  usage?: CompletionUsage | undefined;
};

export type CompletionStreamingResponseChunk = {
  data: CompletionStreamingResponseChunkData;
};

/** @internal */
export const CompletionStreamingResponseChunkData$inboundSchema: z.ZodType<
  CompletionStreamingResponseChunkData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  object: z.literal("text_completion.chunk"),
  created: z.number(),
  model: z.string(),
  system_fingerprint: z.string().optional(),
  choices: z.array(CompletionStreamingChoice$inboundSchema),
  usage: CompletionUsage$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "system_fingerprint": "systemFingerprint",
  });
});

/** @internal */
export type CompletionStreamingResponseChunkData$Outbound = {
  id: string;
  object: "text_completion.chunk";
  created: number;
  model: string;
  system_fingerprint?: string | undefined;
  choices: Array<CompletionStreamingChoice$Outbound>;
  usage?: CompletionUsage$Outbound | undefined;
};

/** @internal */
export const CompletionStreamingResponseChunkData$outboundSchema: z.ZodType<
  CompletionStreamingResponseChunkData$Outbound,
  z.ZodTypeDef,
  CompletionStreamingResponseChunkData
> = z.object({
  id: z.string(),
  object: z.literal("text_completion.chunk"),
  created: z.number(),
  model: z.string(),
  systemFingerprint: z.string().optional(),
  choices: z.array(CompletionStreamingChoice$outboundSchema),
  usage: CompletionUsage$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    systemFingerprint: "system_fingerprint",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompletionStreamingResponseChunkData$ {
  /** @deprecated use `CompletionStreamingResponseChunkData$inboundSchema` instead. */
  export const inboundSchema =
    CompletionStreamingResponseChunkData$inboundSchema;
  /** @deprecated use `CompletionStreamingResponseChunkData$outboundSchema` instead. */
  export const outboundSchema =
    CompletionStreamingResponseChunkData$outboundSchema;
  /** @deprecated use `CompletionStreamingResponseChunkData$Outbound` instead. */
  export type Outbound = CompletionStreamingResponseChunkData$Outbound;
}

export function completionStreamingResponseChunkDataToJSON(
  completionStreamingResponseChunkData: CompletionStreamingResponseChunkData,
): string {
  return JSON.stringify(
    CompletionStreamingResponseChunkData$outboundSchema.parse(
      completionStreamingResponseChunkData,
    ),
  );
}

export function completionStreamingResponseChunkDataFromJSON(
  jsonString: string,
): SafeParseResult<CompletionStreamingResponseChunkData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CompletionStreamingResponseChunkData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompletionStreamingResponseChunkData' from JSON`,
  );
}

/** @internal */
export const CompletionStreamingResponseChunk$inboundSchema: z.ZodType<
  CompletionStreamingResponseChunk,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.string().transform((v, ctx) => {
    try {
      return JSON.parse(v);
    } catch (err) {
      ctx.addIssue({
        code: z.ZodIssueCode.custom,
        message: `malformed json: ${err}`,
      });
      return z.NEVER;
    }
  }).pipe(z.lazy(() => CompletionStreamingResponseChunkData$inboundSchema)),
});

/** @internal */
export type CompletionStreamingResponseChunk$Outbound = {
  data: CompletionStreamingResponseChunkData$Outbound;
};

/** @internal */
export const CompletionStreamingResponseChunk$outboundSchema: z.ZodType<
  CompletionStreamingResponseChunk$Outbound,
  z.ZodTypeDef,
  CompletionStreamingResponseChunk
> = z.object({
  data: z.lazy(() => CompletionStreamingResponseChunkData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompletionStreamingResponseChunk$ {
  /** @deprecated use `CompletionStreamingResponseChunk$inboundSchema` instead. */
  export const inboundSchema = CompletionStreamingResponseChunk$inboundSchema;
  /** @deprecated use `CompletionStreamingResponseChunk$outboundSchema` instead. */
  export const outboundSchema = CompletionStreamingResponseChunk$outboundSchema;
  /** @deprecated use `CompletionStreamingResponseChunk$Outbound` instead. */
  export type Outbound = CompletionStreamingResponseChunk$Outbound;
}

export function completionStreamingResponseChunkToJSON(
  completionStreamingResponseChunk: CompletionStreamingResponseChunk,
): string {
  return JSON.stringify(
    CompletionStreamingResponseChunk$outboundSchema.parse(
      completionStreamingResponseChunk,
    ),
  );
}

export function completionStreamingResponseChunkFromJSON(
  jsonString: string,
): SafeParseResult<CompletionStreamingResponseChunk, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompletionStreamingResponseChunk$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompletionStreamingResponseChunk' from JSON`,
  );
}
