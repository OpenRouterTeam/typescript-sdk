/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v4";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  DefaultParameters,
  DefaultParameters$inboundSchema,
  DefaultParameters$Outbound,
  DefaultParameters$outboundSchema,
} from "./defaultparameters.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ModelArchitecture,
  ModelArchitecture$inboundSchema,
  ModelArchitecture$Outbound,
  ModelArchitecture$outboundSchema,
} from "./modelarchitecture.js";
import {
  Parameter,
  Parameter$inboundSchema,
  Parameter$outboundSchema,
} from "./parameter.js";
import {
  PerRequestLimits,
  PerRequestLimits$inboundSchema,
  PerRequestLimits$Outbound,
  PerRequestLimits$outboundSchema,
} from "./perrequestlimits.js";
import {
  PublicPricing,
  PublicPricing$inboundSchema,
  PublicPricing$Outbound,
  PublicPricing$outboundSchema,
} from "./publicpricing.js";
import {
  TopProviderInfo,
  TopProviderInfo$inboundSchema,
  TopProviderInfo$Outbound,
  TopProviderInfo$outboundSchema,
} from "./topproviderinfo.js";

/**
 * Information about an AI model available on OpenRouter
 */
export type Model = {
  /**
   * Unique identifier for the model
   */
  id: string;
  /**
   * Canonical slug for the model
   */
  canonicalSlug: string;
  /**
   * Hugging Face model identifier, if applicable
   */
  huggingFaceId?: string | null | undefined;
  /**
   * Display name of the model
   */
  name: string;
  /**
   * Unix timestamp of when the model was created
   */
  created: number;
  /**
   * Description of the model
   */
  description?: string | undefined;
  /**
   * Pricing information for the model
   */
  pricing: PublicPricing;
  /**
   * Maximum context length in tokens
   */
  contextLength: number | null;
  /**
   * Model architecture information
   */
  architecture: ModelArchitecture;
  /**
   * Information about the top provider for this model
   */
  topProvider: TopProviderInfo;
  /**
   * Per-request token limits
   */
  perRequestLimits: PerRequestLimits | null;
  /**
   * List of supported parameters for this model
   */
  supportedParameters: Array<Parameter>;
  /**
   * Default parameters for this model
   */
  defaultParameters: DefaultParameters | null;
};

/** @internal */
export const Model$inboundSchema: z.ZodType<Model, unknown> = z.object({
  id: z.string(),
  canonical_slug: z.string(),
  hugging_face_id: z.nullable(z.string()).optional(),
  name: z.string(),
  created: z.number(),
  description: z.string().optional(),
  pricing: PublicPricing$inboundSchema,
  context_length: z.nullable(z.number()),
  architecture: ModelArchitecture$inboundSchema,
  top_provider: TopProviderInfo$inboundSchema,
  per_request_limits: z.nullable(PerRequestLimits$inboundSchema),
  supported_parameters: z.array(Parameter$inboundSchema),
  default_parameters: z.nullable(DefaultParameters$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "canonical_slug": "canonicalSlug",
    "hugging_face_id": "huggingFaceId",
    "context_length": "contextLength",
    "top_provider": "topProvider",
    "per_request_limits": "perRequestLimits",
    "supported_parameters": "supportedParameters",
    "default_parameters": "defaultParameters",
  });
});

/** @internal */
export type Model$Outbound = {
  id: string;
  canonical_slug: string;
  hugging_face_id?: string | null | undefined;
  name: string;
  created: number;
  description?: string | undefined;
  pricing: PublicPricing$Outbound;
  context_length: number | null;
  architecture: ModelArchitecture$Outbound;
  top_provider: TopProviderInfo$Outbound;
  per_request_limits: PerRequestLimits$Outbound | null;
  supported_parameters: Array<string>;
  default_parameters: DefaultParameters$Outbound | null;
};

/** @internal */
export const Model$outboundSchema: z.ZodType<Model$Outbound, Model> = z.object({
  id: z.string(),
  canonicalSlug: z.string(),
  huggingFaceId: z.nullable(z.string()).optional(),
  name: z.string(),
  created: z.number(),
  description: z.string().optional(),
  pricing: PublicPricing$outboundSchema,
  contextLength: z.nullable(z.number()),
  architecture: ModelArchitecture$outboundSchema,
  topProvider: TopProviderInfo$outboundSchema,
  perRequestLimits: z.nullable(PerRequestLimits$outboundSchema),
  supportedParameters: z.array(Parameter$outboundSchema),
  defaultParameters: z.nullable(DefaultParameters$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    canonicalSlug: "canonical_slug",
    huggingFaceId: "hugging_face_id",
    contextLength: "context_length",
    topProvider: "top_provider",
    perRequestLimits: "per_request_limits",
    supportedParameters: "supported_parameters",
    defaultParameters: "default_parameters",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Model$ {
  /** @deprecated use `Model$inboundSchema` instead. */
  export const inboundSchema = Model$inboundSchema;
  /** @deprecated use `Model$outboundSchema` instead. */
  export const outboundSchema = Model$outboundSchema;
  /** @deprecated use `Model$Outbound` instead. */
  export type Outbound = Model$Outbound;
}

export function modelToJSON(model: Model): string {
  return JSON.stringify(Model$outboundSchema.parse(model));
}

export function modelFromJSON(
  jsonString: string,
): SafeParseResult<Model, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Model$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Model' from JSON`,
  );
}
