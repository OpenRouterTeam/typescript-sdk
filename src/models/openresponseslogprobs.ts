/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  OpenResponsesTopLogprobs,
  OpenResponsesTopLogprobs$inboundSchema,
  OpenResponsesTopLogprobs$Outbound,
  OpenResponsesTopLogprobs$outboundSchema,
} from "./openresponsestoplogprobs.js";

/**
 * Log probability information for a token
 */
export type OpenResponsesLogProbs = {
  logprob: number;
  token: string;
  topLogprobs?: Array<OpenResponsesTopLogprobs> | undefined;
};

/** @internal */
export const OpenResponsesLogProbs$inboundSchema: z.ZodType<
  OpenResponsesLogProbs,
  z.ZodTypeDef,
  unknown
> = z.object({
  logprob: z.number(),
  token: z.string(),
  top_logprobs: z.array(OpenResponsesTopLogprobs$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "top_logprobs": "topLogprobs",
  });
});

/** @internal */
export type OpenResponsesLogProbs$Outbound = {
  logprob: number;
  token: string;
  top_logprobs?: Array<OpenResponsesTopLogprobs$Outbound> | undefined;
};

/** @internal */
export const OpenResponsesLogProbs$outboundSchema: z.ZodType<
  OpenResponsesLogProbs$Outbound,
  z.ZodTypeDef,
  OpenResponsesLogProbs
> = z.object({
  logprob: z.number(),
  token: z.string(),
  topLogprobs: z.array(OpenResponsesTopLogprobs$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    topLogprobs: "top_logprobs",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesLogProbs$ {
  /** @deprecated use `OpenResponsesLogProbs$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesLogProbs$inboundSchema;
  /** @deprecated use `OpenResponsesLogProbs$outboundSchema` instead. */
  export const outboundSchema = OpenResponsesLogProbs$outboundSchema;
  /** @deprecated use `OpenResponsesLogProbs$Outbound` instead. */
  export type Outbound = OpenResponsesLogProbs$Outbound;
}

export function openResponsesLogProbsToJSON(
  openResponsesLogProbs: OpenResponsesLogProbs,
): string {
  return JSON.stringify(
    OpenResponsesLogProbs$outboundSchema.parse(openResponsesLogProbs),
  );
}

export function openResponsesLogProbsFromJSON(
  jsonString: string,
): SafeParseResult<OpenResponsesLogProbs, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenResponsesLogProbs$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenResponsesLogProbs' from JSON`,
  );
}
