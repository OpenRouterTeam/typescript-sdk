/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ResponseFunctionCallStatus,
  ResponseFunctionCallStatus$inboundSchema,
  ResponseFunctionCallStatus$outboundSchema,
} from "./responsefunctioncallstatus.js";

export const ResponseFunctionCallOutputItemType = {
  FunctionCallOutput: "function_call_output",
} as const;
export type ResponseFunctionCallOutputItemType = ClosedEnum<
  typeof ResponseFunctionCallOutputItemType
>;

/**
 * Function call output item in Responses API
 */
export type ResponseFunctionCallOutputItem = {
  type: ResponseFunctionCallOutputItemType;
  id: string;
  callId: string;
  output: string;
  status?: ResponseFunctionCallStatus | undefined;
};

/** @internal */
export const ResponseFunctionCallOutputItemType$inboundSchema: z.ZodNativeEnum<
  typeof ResponseFunctionCallOutputItemType
> = z.nativeEnum(ResponseFunctionCallOutputItemType);

/** @internal */
export const ResponseFunctionCallOutputItemType$outboundSchema: z.ZodNativeEnum<
  typeof ResponseFunctionCallOutputItemType
> = ResponseFunctionCallOutputItemType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseFunctionCallOutputItemType$ {
  /** @deprecated use `ResponseFunctionCallOutputItemType$inboundSchema` instead. */
  export const inboundSchema = ResponseFunctionCallOutputItemType$inboundSchema;
  /** @deprecated use `ResponseFunctionCallOutputItemType$outboundSchema` instead. */
  export const outboundSchema =
    ResponseFunctionCallOutputItemType$outboundSchema;
}

/** @internal */
export const ResponseFunctionCallOutputItem$inboundSchema: z.ZodType<
  ResponseFunctionCallOutputItem,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ResponseFunctionCallOutputItemType$inboundSchema,
  id: z.string(),
  call_id: z.string(),
  output: z.string(),
  status: ResponseFunctionCallStatus$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "call_id": "callId",
  });
});

/** @internal */
export type ResponseFunctionCallOutputItem$Outbound = {
  type: string;
  id: string;
  call_id: string;
  output: string;
  status?: string | undefined;
};

/** @internal */
export const ResponseFunctionCallOutputItem$outboundSchema: z.ZodType<
  ResponseFunctionCallOutputItem$Outbound,
  z.ZodTypeDef,
  ResponseFunctionCallOutputItem
> = z.object({
  type: ResponseFunctionCallOutputItemType$outboundSchema,
  id: z.string(),
  callId: z.string(),
  output: z.string(),
  status: ResponseFunctionCallStatus$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    callId: "call_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseFunctionCallOutputItem$ {
  /** @deprecated use `ResponseFunctionCallOutputItem$inboundSchema` instead. */
  export const inboundSchema = ResponseFunctionCallOutputItem$inboundSchema;
  /** @deprecated use `ResponseFunctionCallOutputItem$outboundSchema` instead. */
  export const outboundSchema = ResponseFunctionCallOutputItem$outboundSchema;
  /** @deprecated use `ResponseFunctionCallOutputItem$Outbound` instead. */
  export type Outbound = ResponseFunctionCallOutputItem$Outbound;
}

export function responseFunctionCallOutputItemToJSON(
  responseFunctionCallOutputItem: ResponseFunctionCallOutputItem,
): string {
  return JSON.stringify(
    ResponseFunctionCallOutputItem$outboundSchema.parse(
      responseFunctionCallOutputItem,
    ),
  );
}

export function responseFunctionCallOutputItemFromJSON(
  jsonString: string,
): SafeParseResult<ResponseFunctionCallOutputItem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseFunctionCallOutputItem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseFunctionCallOutputItem' from JSON`,
  );
}
