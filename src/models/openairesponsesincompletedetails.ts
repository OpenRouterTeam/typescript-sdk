/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v4";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const Reason = {
  MaxOutputTokens: "max_output_tokens",
  ContentFilter: "content_filter",
} as const;
export type Reason = OpenEnum<typeof Reason>;

export type OpenAIResponsesIncompleteDetails = {
  reason?: Reason | undefined;
};

/** @internal */
export const Reason$inboundSchema: z.ZodType<Reason, unknown> = z
  .union([
    z.enum(Reason),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const Reason$outboundSchema: z.ZodType<Reason, Reason> = z.union([
  z.enum(Reason),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Reason$ {
  /** @deprecated use `Reason$inboundSchema` instead. */
  export const inboundSchema = Reason$inboundSchema;
  /** @deprecated use `Reason$outboundSchema` instead. */
  export const outboundSchema = Reason$outboundSchema;
}

/** @internal */
export const OpenAIResponsesIncompleteDetails$inboundSchema: z.ZodType<
  OpenAIResponsesIncompleteDetails,
  unknown
> = z.object({
  reason: Reason$inboundSchema.optional(),
});

/** @internal */
export type OpenAIResponsesIncompleteDetails$Outbound = {
  reason?: string | undefined;
};

/** @internal */
export const OpenAIResponsesIncompleteDetails$outboundSchema: z.ZodType<
  OpenAIResponsesIncompleteDetails$Outbound,
  OpenAIResponsesIncompleteDetails
> = z.object({
  reason: Reason$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenAIResponsesIncompleteDetails$ {
  /** @deprecated use `OpenAIResponsesIncompleteDetails$inboundSchema` instead. */
  export const inboundSchema = OpenAIResponsesIncompleteDetails$inboundSchema;
  /** @deprecated use `OpenAIResponsesIncompleteDetails$outboundSchema` instead. */
  export const outboundSchema = OpenAIResponsesIncompleteDetails$outboundSchema;
  /** @deprecated use `OpenAIResponsesIncompleteDetails$Outbound` instead. */
  export type Outbound = OpenAIResponsesIncompleteDetails$Outbound;
}

export function openAIResponsesIncompleteDetailsToJSON(
  openAIResponsesIncompleteDetails: OpenAIResponsesIncompleteDetails,
): string {
  return JSON.stringify(
    OpenAIResponsesIncompleteDetails$outboundSchema.parse(
      openAIResponsesIncompleteDetails,
    ),
  );
}

export function openAIResponsesIncompleteDetailsFromJSON(
  jsonString: string,
): SafeParseResult<OpenAIResponsesIncompleteDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenAIResponsesIncompleteDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenAIResponsesIncompleteDetails' from JSON`,
  );
}
