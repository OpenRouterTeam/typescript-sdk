/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ResponseIncludable,
  ResponseIncludable$inboundSchema,
  ResponseIncludable$outboundSchema,
} from "./responseincludable.js";
import {
  ResponseInput,
  ResponseInput$inboundSchema,
  ResponseInput$Outbound,
  ResponseInput$outboundSchema,
} from "./responseinput.js";
import {
  ResponsePrompt,
  ResponsePrompt$inboundSchema,
  ResponsePrompt$Outbound,
  ResponsePrompt$outboundSchema,
} from "./responseprompt.js";
import {
  ResponseReasoningConfig,
  ResponseReasoningConfig$inboundSchema,
  ResponseReasoningConfig$Outbound,
  ResponseReasoningConfig$outboundSchema,
} from "./responsereasoningconfig.js";
import {
  ResponseTextConfig,
  ResponseTextConfig$inboundSchema,
  ResponseTextConfig$Outbound,
  ResponseTextConfig$outboundSchema,
} from "./responsetextconfig.js";
import {
  Tool,
  Tool$inboundSchema,
  Tool$Outbound,
  Tool$outboundSchema,
} from "./tool.js";
import {
  ToolChoice,
  ToolChoice$inboundSchema,
  ToolChoice$Outbound,
  ToolChoice$outboundSchema,
} from "./toolchoice.js";

export const OpenAIResponsesRequestServiceTier = {
  Auto: "auto",
  Default: "default",
  Flex: "flex",
  Priority: "priority",
  Scale: "scale",
} as const;
export type OpenAIResponsesRequestServiceTier = ClosedEnum<
  typeof OpenAIResponsesRequestServiceTier
>;

export const OpenAIResponsesRequestTruncation = {
  Auto: "auto",
  Disabled: "disabled",
} as const;
export type OpenAIResponsesRequestTruncation = ClosedEnum<
  typeof OpenAIResponsesRequestTruncation
>;

/**
 * Data collection setting. If no available model provider meets the requirement, your request will return an error.
 *
 * @remarks
 * - allow: (default) allow providers which store user data non-transiently and may train on it
 * - deny: use only providers which do not collect user data.
 */
export const DataCollection = {
  Deny: "deny",
  Allow: "allow",
} as const;
/**
 * Data collection setting. If no available model provider meets the requirement, your request will return an error.
 *
 * @remarks
 * - allow: (default) allow providers which store user data non-transiently and may train on it
 * - deny: use only providers which do not collect user data.
 */
export type DataCollection = ClosedEnum<typeof DataCollection>;

export const OrderEnum = {
  AnyScale: "AnyScale",
  CentML: "Cent-ML",
  HuggingFace: "HuggingFace",
  Hyperbolic2: "Hyperbolic 2",
  Lepton: "Lepton",
  Lynn2: "Lynn 2",
  Lynn: "Lynn",
  Mancer: "Mancer",
  Modal: "Modal",
  OctoAI: "OctoAI",
  Recursal: "Recursal",
  Reflection: "Reflection",
  Replicate: "Replicate",
  SambaNova2: "SambaNova 2",
  SFCompute: "SF Compute",
  Together2: "Together 2",
  OneDotAI: "01.AI",
  Ai21: "AI21",
  AionLabs: "AionLabs",
  Alibaba: "Alibaba",
  AmazonBedrock: "Amazon Bedrock",
  Anthropic: "Anthropic",
  AtlasCloud: "AtlasCloud",
  Atoma: "Atoma",
  Avian: "Avian",
  Azure: "Azure",
  BaseTen: "BaseTen",
  Cerebras: "Cerebras",
  Chutes: "Chutes",
  Cloudflare: "Cloudflare",
  Cohere: "Cohere",
  CrofAI: "CrofAI",
  Crusoe: "Crusoe",
  DeepInfra: "DeepInfra",
  DeepSeek: "DeepSeek",
  Enfer: "Enfer",
  Featherless: "Featherless",
  Fireworks: "Fireworks",
  Friendli: "Friendli",
  GMICloud: "GMICloud",
  Google: "Google",
  GoogleAIStudio: "Google AI Studio",
  Groq: "Groq",
  Hyperbolic: "Hyperbolic",
  Inception: "Inception",
  InferenceNet: "InferenceNet",
  Infermatic: "Infermatic",
  Inflection: "Inflection",
  InoCloud: "InoCloud",
  Kluster: "Kluster",
  Lambda: "Lambda",
  Liquid: "Liquid",
  Mancer2: "Mancer 2",
  Meta: "Meta",
  Minimax: "Minimax",
  Mistral: "Mistral",
  MoonshotAI: "Moonshot AI",
  Morph: "Morph",
  NCompass: "NCompass",
  Nebius: "Nebius",
  NextBit: "NextBit",
  Nineteen: "Nineteen",
  Novita: "Novita",
  Nvidia: "Nvidia",
  OpenAI: "OpenAI",
  OpenInference: "OpenInference",
  Parasail: "Parasail",
  Perplexity: "Perplexity",
  Phala: "Phala",
  Relace: "Relace",
  SambaNova: "SambaNova",
  SiliconFlow: "SiliconFlow",
  Stealth: "Stealth",
  Switchpoint: "Switchpoint",
  Targon: "Targon",
  Together: "Together",
  Ubicloud: "Ubicloud",
  Venice: "Venice",
  WandB: "WandB",
  XAI: "xAI",
  ZAi: "Z.AI",
  FakeProvider: "FakeProvider",
} as const;
export type OrderEnum = ClosedEnum<typeof OrderEnum>;

export type Order = OrderEnum | string;

export const OnlyEnum = {
  AnyScale: "AnyScale",
  CentML: "Cent-ML",
  HuggingFace: "HuggingFace",
  Hyperbolic2: "Hyperbolic 2",
  Lepton: "Lepton",
  Lynn2: "Lynn 2",
  Lynn: "Lynn",
  Mancer: "Mancer",
  Modal: "Modal",
  OctoAI: "OctoAI",
  Recursal: "Recursal",
  Reflection: "Reflection",
  Replicate: "Replicate",
  SambaNova2: "SambaNova 2",
  SFCompute: "SF Compute",
  Together2: "Together 2",
  OneDotAI: "01.AI",
  Ai21: "AI21",
  AionLabs: "AionLabs",
  Alibaba: "Alibaba",
  AmazonBedrock: "Amazon Bedrock",
  Anthropic: "Anthropic",
  AtlasCloud: "AtlasCloud",
  Atoma: "Atoma",
  Avian: "Avian",
  Azure: "Azure",
  BaseTen: "BaseTen",
  Cerebras: "Cerebras",
  Chutes: "Chutes",
  Cloudflare: "Cloudflare",
  Cohere: "Cohere",
  CrofAI: "CrofAI",
  Crusoe: "Crusoe",
  DeepInfra: "DeepInfra",
  DeepSeek: "DeepSeek",
  Enfer: "Enfer",
  Featherless: "Featherless",
  Fireworks: "Fireworks",
  Friendli: "Friendli",
  GMICloud: "GMICloud",
  Google: "Google",
  GoogleAIStudio: "Google AI Studio",
  Groq: "Groq",
  Hyperbolic: "Hyperbolic",
  Inception: "Inception",
  InferenceNet: "InferenceNet",
  Infermatic: "Infermatic",
  Inflection: "Inflection",
  InoCloud: "InoCloud",
  Kluster: "Kluster",
  Lambda: "Lambda",
  Liquid: "Liquid",
  Mancer2: "Mancer 2",
  Meta: "Meta",
  Minimax: "Minimax",
  Mistral: "Mistral",
  MoonshotAI: "Moonshot AI",
  Morph: "Morph",
  NCompass: "NCompass",
  Nebius: "Nebius",
  NextBit: "NextBit",
  Nineteen: "Nineteen",
  Novita: "Novita",
  Nvidia: "Nvidia",
  OpenAI: "OpenAI",
  OpenInference: "OpenInference",
  Parasail: "Parasail",
  Perplexity: "Perplexity",
  Phala: "Phala",
  Relace: "Relace",
  SambaNova: "SambaNova",
  SiliconFlow: "SiliconFlow",
  Stealth: "Stealth",
  Switchpoint: "Switchpoint",
  Targon: "Targon",
  Together: "Together",
  Ubicloud: "Ubicloud",
  Venice: "Venice",
  WandB: "WandB",
  XAI: "xAI",
  ZAi: "Z.AI",
  FakeProvider: "FakeProvider",
} as const;
export type OnlyEnum = ClosedEnum<typeof OnlyEnum>;

export type Only = OnlyEnum | string;

export const IgnoreEnum = {
  AnyScale: "AnyScale",
  CentML: "Cent-ML",
  HuggingFace: "HuggingFace",
  Hyperbolic2: "Hyperbolic 2",
  Lepton: "Lepton",
  Lynn2: "Lynn 2",
  Lynn: "Lynn",
  Mancer: "Mancer",
  Modal: "Modal",
  OctoAI: "OctoAI",
  Recursal: "Recursal",
  Reflection: "Reflection",
  Replicate: "Replicate",
  SambaNova2: "SambaNova 2",
  SFCompute: "SF Compute",
  Together2: "Together 2",
  OneDotAI: "01.AI",
  Ai21: "AI21",
  AionLabs: "AionLabs",
  Alibaba: "Alibaba",
  AmazonBedrock: "Amazon Bedrock",
  Anthropic: "Anthropic",
  AtlasCloud: "AtlasCloud",
  Atoma: "Atoma",
  Avian: "Avian",
  Azure: "Azure",
  BaseTen: "BaseTen",
  Cerebras: "Cerebras",
  Chutes: "Chutes",
  Cloudflare: "Cloudflare",
  Cohere: "Cohere",
  CrofAI: "CrofAI",
  Crusoe: "Crusoe",
  DeepInfra: "DeepInfra",
  DeepSeek: "DeepSeek",
  Enfer: "Enfer",
  Featherless: "Featherless",
  Fireworks: "Fireworks",
  Friendli: "Friendli",
  GMICloud: "GMICloud",
  Google: "Google",
  GoogleAIStudio: "Google AI Studio",
  Groq: "Groq",
  Hyperbolic: "Hyperbolic",
  Inception: "Inception",
  InferenceNet: "InferenceNet",
  Infermatic: "Infermatic",
  Inflection: "Inflection",
  InoCloud: "InoCloud",
  Kluster: "Kluster",
  Lambda: "Lambda",
  Liquid: "Liquid",
  Mancer2: "Mancer 2",
  Meta: "Meta",
  Minimax: "Minimax",
  Mistral: "Mistral",
  MoonshotAI: "Moonshot AI",
  Morph: "Morph",
  NCompass: "NCompass",
  Nebius: "Nebius",
  NextBit: "NextBit",
  Nineteen: "Nineteen",
  Novita: "Novita",
  Nvidia: "Nvidia",
  OpenAI: "OpenAI",
  OpenInference: "OpenInference",
  Parasail: "Parasail",
  Perplexity: "Perplexity",
  Phala: "Phala",
  Relace: "Relace",
  SambaNova: "SambaNova",
  SiliconFlow: "SiliconFlow",
  Stealth: "Stealth",
  Switchpoint: "Switchpoint",
  Targon: "Targon",
  Together: "Together",
  Ubicloud: "Ubicloud",
  Venice: "Venice",
  WandB: "WandB",
  XAI: "xAI",
  ZAi: "Z.AI",
  FakeProvider: "FakeProvider",
} as const;
export type IgnoreEnum = ClosedEnum<typeof IgnoreEnum>;

export type Ignore = IgnoreEnum | string;

export const Quantization = {
  Int4: "int4",
  Int8: "int8",
  Fp4: "fp4",
  Fp6: "fp6",
  Fp8: "fp8",
  Fp16: "fp16",
  Bf16: "bf16",
  Fp32: "fp32",
  Unknown: "unknown",
} as const;
export type Quantization = ClosedEnum<typeof Quantization>;

/**
 * The sorting strategy to use for this request, if "order" is not specified. When set, no load balancing is performed.
 */
export const Sort = {
  Price: "price",
  Throughput: "throughput",
  Latency: "latency",
} as const;
/**
 * The sorting strategy to use for this request, if "order" is not specified. When set, no load balancing is performed.
 */
export type Sort = ClosedEnum<typeof Sort>;

export type OpenAIResponsesRequestPrompt = number | string | any;

export type Completion = number | string | any;

export type Image = number | string | any;

export type Audio = number | string | any;

export type RequestT = number | string | any;

/**
 * The object specifying the maximum price you want to pay for this request. USD price per million tokens, for prompt and completion.
 */
export type MaxPrice = {
  prompt?: number | string | any | undefined;
  completion?: number | string | any | undefined;
  image?: number | string | any | undefined;
  audio?: number | string | any | undefined;
  request?: number | string | any | undefined;
};

export type Experimental = {};

/**
 * When multiple model providers are available, optionally indicate your routing preference.
 */
export type Provider = {
  /**
   * Whether to allow backup providers to serve requests
   *
   * @remarks
   * - true: (default) when the primary provider (or your custom providers in "order") is unavailable, use the next best provider.
   * - false: use only the primary/custom provider, and return the upstream error if it's unavailable.
   */
  allowFallbacks?: boolean | null | undefined;
  /**
   * Whether to filter providers to only those that support the parameters you've provided. If this setting is omitted or set to false, then providers will receive only the parameters they support, and ignore the rest.
   */
  requireParameters?: boolean | null | undefined;
  /**
   * Data collection setting. If no available model provider meets the requirement, your request will return an error.
   *
   * @remarks
   * - allow: (default) allow providers which store user data non-transiently and may train on it
   * - deny: use only providers which do not collect user data.
   */
  dataCollection?: DataCollection | null | undefined;
  /**
   * Whether to restrict routing to only ZDR (Zero Data Retention) endpoints. When true, only endpoints that do not retain prompts will be used.
   */
  zdr?: boolean | null | undefined;
  /**
   * An ordered list of provider slugs. The router will attempt to use the first provider in the subset of this list that supports your requested model, and fall back to the next if it is unavailable. If no providers are available, the request will fail with an error message.
   */
  order?: Array<OrderEnum | string> | null | undefined;
  /**
   * List of provider slugs to allow. If provided, this list is merged with your account-wide allowed provider settings for this request.
   */
  only?: Array<OnlyEnum | string> | null | undefined;
  /**
   * List of provider slugs to ignore. If provided, this list is merged with your account-wide ignored provider settings for this request.
   */
  ignore?: Array<IgnoreEnum | string> | null | undefined;
  /**
   * A list of quantization levels to filter the provider by.
   */
  quantizations?: Array<Quantization> | null | undefined;
  /**
   * The sorting strategy to use for this request, if "order" is not specified. When set, no load balancing is performed.
   */
  sort?: Sort | null | undefined;
  /**
   * The object specifying the maximum price you want to pay for this request. USD price per million tokens, for prompt and completion.
   */
  maxPrice?: MaxPrice | undefined;
  experimental?: Experimental | null | undefined;
};

export const IdFileParser = {
  FileParser: "file-parser",
} as const;
export type IdFileParser = ClosedEnum<typeof IdFileParser>;

export const PdfEngine = {
  MistralOcr: "mistral-ocr",
  PdfText: "pdf-text",
  Native: "native",
} as const;
export type PdfEngine = ClosedEnum<typeof PdfEngine>;

export type Pdf = {
  engine?: PdfEngine | undefined;
};

export type PluginFileParser = {
  id: IdFileParser;
  maxFiles?: number | undefined;
  pdf?: Pdf | undefined;
};

export const IdChainOfThought = {
  ChainOfThought: "chain-of-thought",
} as const;
export type IdChainOfThought = ClosedEnum<typeof IdChainOfThought>;

export type PluginChainOfThought = {
  id: IdChainOfThought;
};

export const IdWeb = {
  Web: "web",
} as const;
export type IdWeb = ClosedEnum<typeof IdWeb>;

export const Engine = {
  Native: "native",
  Exa: "exa",
} as const;
export type Engine = ClosedEnum<typeof Engine>;

export type PluginWeb = {
  id: IdWeb;
  maxResults?: number | undefined;
  searchPrompt?: string | undefined;
  engine?: Engine | undefined;
};

export const IdModeration = {
  Moderation: "moderation",
} as const;
export type IdModeration = ClosedEnum<typeof IdModeration>;

export type PluginModeration = {
  id: IdModeration;
};

export type Plugin =
  | PluginModeration
  | PluginWeb
  | PluginChainOfThought
  | PluginFileParser;

/**
 * Request schema for OpenAI-compatible Responses API
 */
export type OpenAIResponsesRequest = {
  /**
   * Input for Responses API (can be a string or array of input items)
   */
  input?: ResponseInput | undefined;
  instructions?: string | null | undefined;
  /**
   * Metadata for Responses API requests (max 16 pairs, keys ≤64 chars, values ≤512 chars)
   */
  metadata?: { [k: string]: string } | null | undefined;
  tools?: Array<Tool> | undefined;
  /**
   * Tool choice configuration
   */
  toolChoice?: ToolChoice | undefined;
  parallelToolCalls?: boolean | null | undefined;
  model?: string | undefined;
  models?: Array<string> | undefined;
  /**
   * Text configuration for Responses API
   */
  text?: ResponseTextConfig | undefined;
  /**
   * Reasoning configuration for Responses API
   */
  reasoning?: ResponseReasoningConfig | null | undefined;
  maxOutputTokens?: number | null | undefined;
  temperature?: number | null | undefined;
  topP?: number | null | undefined;
  topK?: number | undefined;
  promptCacheKey?: string | undefined;
  previousResponseId?: string | null | undefined;
  /**
   * Prompt configuration with variables
   */
  prompt?: ResponsePrompt | null | undefined;
  include?: Array<ResponseIncludable> | null | undefined;
  background?: boolean | null | undefined;
  safetyIdentifier?: string | undefined;
  store?: boolean | null | undefined;
  serviceTier?: OpenAIResponsesRequestServiceTier | null | undefined;
  truncation?: OpenAIResponsesRequestTruncation | null | undefined;
  stream?: boolean | null | undefined;
  /**
   * When multiple model providers are available, optionally indicate your routing preference.
   */
  provider?: Provider | null | undefined;
  /**
   * Plugins you want to enable for this request, including their settings.
   */
  plugins?:
    | Array<
      PluginModeration | PluginWeb | PluginChainOfThought | PluginFileParser
    >
    | undefined;
  /**
   * A unique identifier representing your end-user, which helps distinguish between different users of your app. This allows your app to identify specific users in case of abuse reports, preventing your entire app from being affected by the actions of individual users. Maximum of 128 characters.
   */
  user?: string | undefined;
};

/** @internal */
export const OpenAIResponsesRequestServiceTier$inboundSchema: z.ZodNativeEnum<
  typeof OpenAIResponsesRequestServiceTier
> = z.nativeEnum(OpenAIResponsesRequestServiceTier);

/** @internal */
export const OpenAIResponsesRequestServiceTier$outboundSchema: z.ZodNativeEnum<
  typeof OpenAIResponsesRequestServiceTier
> = OpenAIResponsesRequestServiceTier$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenAIResponsesRequestServiceTier$ {
  /** @deprecated use `OpenAIResponsesRequestServiceTier$inboundSchema` instead. */
  export const inboundSchema = OpenAIResponsesRequestServiceTier$inboundSchema;
  /** @deprecated use `OpenAIResponsesRequestServiceTier$outboundSchema` instead. */
  export const outboundSchema =
    OpenAIResponsesRequestServiceTier$outboundSchema;
}

/** @internal */
export const OpenAIResponsesRequestTruncation$inboundSchema: z.ZodNativeEnum<
  typeof OpenAIResponsesRequestTruncation
> = z.nativeEnum(OpenAIResponsesRequestTruncation);

/** @internal */
export const OpenAIResponsesRequestTruncation$outboundSchema: z.ZodNativeEnum<
  typeof OpenAIResponsesRequestTruncation
> = OpenAIResponsesRequestTruncation$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenAIResponsesRequestTruncation$ {
  /** @deprecated use `OpenAIResponsesRequestTruncation$inboundSchema` instead. */
  export const inboundSchema = OpenAIResponsesRequestTruncation$inboundSchema;
  /** @deprecated use `OpenAIResponsesRequestTruncation$outboundSchema` instead. */
  export const outboundSchema = OpenAIResponsesRequestTruncation$outboundSchema;
}

/** @internal */
export const DataCollection$inboundSchema: z.ZodNativeEnum<
  typeof DataCollection
> = z.nativeEnum(DataCollection);

/** @internal */
export const DataCollection$outboundSchema: z.ZodNativeEnum<
  typeof DataCollection
> = DataCollection$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DataCollection$ {
  /** @deprecated use `DataCollection$inboundSchema` instead. */
  export const inboundSchema = DataCollection$inboundSchema;
  /** @deprecated use `DataCollection$outboundSchema` instead. */
  export const outboundSchema = DataCollection$outboundSchema;
}

/** @internal */
export const OrderEnum$inboundSchema: z.ZodNativeEnum<typeof OrderEnum> = z
  .nativeEnum(OrderEnum);

/** @internal */
export const OrderEnum$outboundSchema: z.ZodNativeEnum<typeof OrderEnum> =
  OrderEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderEnum$ {
  /** @deprecated use `OrderEnum$inboundSchema` instead. */
  export const inboundSchema = OrderEnum$inboundSchema;
  /** @deprecated use `OrderEnum$outboundSchema` instead. */
  export const outboundSchema = OrderEnum$outboundSchema;
}

/** @internal */
export const Order$inboundSchema: z.ZodType<Order, z.ZodTypeDef, unknown> = z
  .union([OrderEnum$inboundSchema, z.string()]);

/** @internal */
export type Order$Outbound = string | string;

/** @internal */
export const Order$outboundSchema: z.ZodType<
  Order$Outbound,
  z.ZodTypeDef,
  Order
> = z.union([OrderEnum$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Order$ {
  /** @deprecated use `Order$inboundSchema` instead. */
  export const inboundSchema = Order$inboundSchema;
  /** @deprecated use `Order$outboundSchema` instead. */
  export const outboundSchema = Order$outboundSchema;
  /** @deprecated use `Order$Outbound` instead. */
  export type Outbound = Order$Outbound;
}

export function orderToJSON(order: Order): string {
  return JSON.stringify(Order$outboundSchema.parse(order));
}

export function orderFromJSON(
  jsonString: string,
): SafeParseResult<Order, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Order$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Order' from JSON`,
  );
}

/** @internal */
export const OnlyEnum$inboundSchema: z.ZodNativeEnum<typeof OnlyEnum> = z
  .nativeEnum(OnlyEnum);

/** @internal */
export const OnlyEnum$outboundSchema: z.ZodNativeEnum<typeof OnlyEnum> =
  OnlyEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OnlyEnum$ {
  /** @deprecated use `OnlyEnum$inboundSchema` instead. */
  export const inboundSchema = OnlyEnum$inboundSchema;
  /** @deprecated use `OnlyEnum$outboundSchema` instead. */
  export const outboundSchema = OnlyEnum$outboundSchema;
}

/** @internal */
export const Only$inboundSchema: z.ZodType<Only, z.ZodTypeDef, unknown> = z
  .union([OnlyEnum$inboundSchema, z.string()]);

/** @internal */
export type Only$Outbound = string | string;

/** @internal */
export const Only$outboundSchema: z.ZodType<Only$Outbound, z.ZodTypeDef, Only> =
  z.union([OnlyEnum$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Only$ {
  /** @deprecated use `Only$inboundSchema` instead. */
  export const inboundSchema = Only$inboundSchema;
  /** @deprecated use `Only$outboundSchema` instead. */
  export const outboundSchema = Only$outboundSchema;
  /** @deprecated use `Only$Outbound` instead. */
  export type Outbound = Only$Outbound;
}

export function onlyToJSON(only: Only): string {
  return JSON.stringify(Only$outboundSchema.parse(only));
}

export function onlyFromJSON(
  jsonString: string,
): SafeParseResult<Only, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Only$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Only' from JSON`,
  );
}

/** @internal */
export const IgnoreEnum$inboundSchema: z.ZodNativeEnum<typeof IgnoreEnum> = z
  .nativeEnum(IgnoreEnum);

/** @internal */
export const IgnoreEnum$outboundSchema: z.ZodNativeEnum<typeof IgnoreEnum> =
  IgnoreEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IgnoreEnum$ {
  /** @deprecated use `IgnoreEnum$inboundSchema` instead. */
  export const inboundSchema = IgnoreEnum$inboundSchema;
  /** @deprecated use `IgnoreEnum$outboundSchema` instead. */
  export const outboundSchema = IgnoreEnum$outboundSchema;
}

/** @internal */
export const Ignore$inboundSchema: z.ZodType<Ignore, z.ZodTypeDef, unknown> = z
  .union([IgnoreEnum$inboundSchema, z.string()]);

/** @internal */
export type Ignore$Outbound = string | string;

/** @internal */
export const Ignore$outboundSchema: z.ZodType<
  Ignore$Outbound,
  z.ZodTypeDef,
  Ignore
> = z.union([IgnoreEnum$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Ignore$ {
  /** @deprecated use `Ignore$inboundSchema` instead. */
  export const inboundSchema = Ignore$inboundSchema;
  /** @deprecated use `Ignore$outboundSchema` instead. */
  export const outboundSchema = Ignore$outboundSchema;
  /** @deprecated use `Ignore$Outbound` instead. */
  export type Outbound = Ignore$Outbound;
}

export function ignoreToJSON(ignore: Ignore): string {
  return JSON.stringify(Ignore$outboundSchema.parse(ignore));
}

export function ignoreFromJSON(
  jsonString: string,
): SafeParseResult<Ignore, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Ignore$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Ignore' from JSON`,
  );
}

/** @internal */
export const Quantization$inboundSchema: z.ZodNativeEnum<typeof Quantization> =
  z.nativeEnum(Quantization);

/** @internal */
export const Quantization$outboundSchema: z.ZodNativeEnum<typeof Quantization> =
  Quantization$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Quantization$ {
  /** @deprecated use `Quantization$inboundSchema` instead. */
  export const inboundSchema = Quantization$inboundSchema;
  /** @deprecated use `Quantization$outboundSchema` instead. */
  export const outboundSchema = Quantization$outboundSchema;
}

/** @internal */
export const Sort$inboundSchema: z.ZodNativeEnum<typeof Sort> = z.nativeEnum(
  Sort,
);

/** @internal */
export const Sort$outboundSchema: z.ZodNativeEnum<typeof Sort> =
  Sort$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Sort$ {
  /** @deprecated use `Sort$inboundSchema` instead. */
  export const inboundSchema = Sort$inboundSchema;
  /** @deprecated use `Sort$outboundSchema` instead. */
  export const outboundSchema = Sort$outboundSchema;
}

/** @internal */
export const OpenAIResponsesRequestPrompt$inboundSchema: z.ZodType<
  OpenAIResponsesRequestPrompt,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type OpenAIResponsesRequestPrompt$Outbound = number | string | any;

/** @internal */
export const OpenAIResponsesRequestPrompt$outboundSchema: z.ZodType<
  OpenAIResponsesRequestPrompt$Outbound,
  z.ZodTypeDef,
  OpenAIResponsesRequestPrompt
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenAIResponsesRequestPrompt$ {
  /** @deprecated use `OpenAIResponsesRequestPrompt$inboundSchema` instead. */
  export const inboundSchema = OpenAIResponsesRequestPrompt$inboundSchema;
  /** @deprecated use `OpenAIResponsesRequestPrompt$outboundSchema` instead. */
  export const outboundSchema = OpenAIResponsesRequestPrompt$outboundSchema;
  /** @deprecated use `OpenAIResponsesRequestPrompt$Outbound` instead. */
  export type Outbound = OpenAIResponsesRequestPrompt$Outbound;
}

export function openAIResponsesRequestPromptToJSON(
  openAIResponsesRequestPrompt: OpenAIResponsesRequestPrompt,
): string {
  return JSON.stringify(
    OpenAIResponsesRequestPrompt$outboundSchema.parse(
      openAIResponsesRequestPrompt,
    ),
  );
}

export function openAIResponsesRequestPromptFromJSON(
  jsonString: string,
): SafeParseResult<OpenAIResponsesRequestPrompt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenAIResponsesRequestPrompt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenAIResponsesRequestPrompt' from JSON`,
  );
}

/** @internal */
export const Completion$inboundSchema: z.ZodType<
  Completion,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type Completion$Outbound = number | string | any;

/** @internal */
export const Completion$outboundSchema: z.ZodType<
  Completion$Outbound,
  z.ZodTypeDef,
  Completion
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Completion$ {
  /** @deprecated use `Completion$inboundSchema` instead. */
  export const inboundSchema = Completion$inboundSchema;
  /** @deprecated use `Completion$outboundSchema` instead. */
  export const outboundSchema = Completion$outboundSchema;
  /** @deprecated use `Completion$Outbound` instead. */
  export type Outbound = Completion$Outbound;
}

export function completionToJSON(completion: Completion): string {
  return JSON.stringify(Completion$outboundSchema.parse(completion));
}

export function completionFromJSON(
  jsonString: string,
): SafeParseResult<Completion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Completion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Completion' from JSON`,
  );
}

/** @internal */
export const Image$inboundSchema: z.ZodType<Image, z.ZodTypeDef, unknown> = z
  .union([z.number(), z.string(), z.any()]);

/** @internal */
export type Image$Outbound = number | string | any;

/** @internal */
export const Image$outboundSchema: z.ZodType<
  Image$Outbound,
  z.ZodTypeDef,
  Image
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Image$ {
  /** @deprecated use `Image$inboundSchema` instead. */
  export const inboundSchema = Image$inboundSchema;
  /** @deprecated use `Image$outboundSchema` instead. */
  export const outboundSchema = Image$outboundSchema;
  /** @deprecated use `Image$Outbound` instead. */
  export type Outbound = Image$Outbound;
}

export function imageToJSON(image: Image): string {
  return JSON.stringify(Image$outboundSchema.parse(image));
}

export function imageFromJSON(
  jsonString: string,
): SafeParseResult<Image, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Image$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Image' from JSON`,
  );
}

/** @internal */
export const Audio$inboundSchema: z.ZodType<Audio, z.ZodTypeDef, unknown> = z
  .union([z.number(), z.string(), z.any()]);

/** @internal */
export type Audio$Outbound = number | string | any;

/** @internal */
export const Audio$outboundSchema: z.ZodType<
  Audio$Outbound,
  z.ZodTypeDef,
  Audio
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Audio$ {
  /** @deprecated use `Audio$inboundSchema` instead. */
  export const inboundSchema = Audio$inboundSchema;
  /** @deprecated use `Audio$outboundSchema` instead. */
  export const outboundSchema = Audio$outboundSchema;
  /** @deprecated use `Audio$Outbound` instead. */
  export type Outbound = Audio$Outbound;
}

export function audioToJSON(audio: Audio): string {
  return JSON.stringify(Audio$outboundSchema.parse(audio));
}

export function audioFromJSON(
  jsonString: string,
): SafeParseResult<Audio, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Audio$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Audio' from JSON`,
  );
}

/** @internal */
export const RequestT$inboundSchema: z.ZodType<
  RequestT,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type RequestT$Outbound = number | string | any;

/** @internal */
export const RequestT$outboundSchema: z.ZodType<
  RequestT$Outbound,
  z.ZodTypeDef,
  RequestT
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestT$ {
  /** @deprecated use `RequestT$inboundSchema` instead. */
  export const inboundSchema = RequestT$inboundSchema;
  /** @deprecated use `RequestT$outboundSchema` instead. */
  export const outboundSchema = RequestT$outboundSchema;
  /** @deprecated use `RequestT$Outbound` instead. */
  export type Outbound = RequestT$Outbound;
}

export function requestToJSON(requestT: RequestT): string {
  return JSON.stringify(RequestT$outboundSchema.parse(requestT));
}

export function requestFromJSON(
  jsonString: string,
): SafeParseResult<RequestT, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RequestT$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RequestT' from JSON`,
  );
}

/** @internal */
export const MaxPrice$inboundSchema: z.ZodType<
  MaxPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  prompt: z.union([z.number(), z.string(), z.any()]).optional(),
  completion: z.union([z.number(), z.string(), z.any()]).optional(),
  image: z.union([z.number(), z.string(), z.any()]).optional(),
  audio: z.union([z.number(), z.string(), z.any()]).optional(),
  request: z.union([z.number(), z.string(), z.any()]).optional(),
});

/** @internal */
export type MaxPrice$Outbound = {
  prompt?: number | string | any | undefined;
  completion?: number | string | any | undefined;
  image?: number | string | any | undefined;
  audio?: number | string | any | undefined;
  request?: number | string | any | undefined;
};

/** @internal */
export const MaxPrice$outboundSchema: z.ZodType<
  MaxPrice$Outbound,
  z.ZodTypeDef,
  MaxPrice
> = z.object({
  prompt: z.union([z.number(), z.string(), z.any()]).optional(),
  completion: z.union([z.number(), z.string(), z.any()]).optional(),
  image: z.union([z.number(), z.string(), z.any()]).optional(),
  audio: z.union([z.number(), z.string(), z.any()]).optional(),
  request: z.union([z.number(), z.string(), z.any()]).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MaxPrice$ {
  /** @deprecated use `MaxPrice$inboundSchema` instead. */
  export const inboundSchema = MaxPrice$inboundSchema;
  /** @deprecated use `MaxPrice$outboundSchema` instead. */
  export const outboundSchema = MaxPrice$outboundSchema;
  /** @deprecated use `MaxPrice$Outbound` instead. */
  export type Outbound = MaxPrice$Outbound;
}

export function maxPriceToJSON(maxPrice: MaxPrice): string {
  return JSON.stringify(MaxPrice$outboundSchema.parse(maxPrice));
}

export function maxPriceFromJSON(
  jsonString: string,
): SafeParseResult<MaxPrice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MaxPrice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MaxPrice' from JSON`,
  );
}

/** @internal */
export const Experimental$inboundSchema: z.ZodType<
  Experimental,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Experimental$Outbound = {};

/** @internal */
export const Experimental$outboundSchema: z.ZodType<
  Experimental$Outbound,
  z.ZodTypeDef,
  Experimental
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Experimental$ {
  /** @deprecated use `Experimental$inboundSchema` instead. */
  export const inboundSchema = Experimental$inboundSchema;
  /** @deprecated use `Experimental$outboundSchema` instead. */
  export const outboundSchema = Experimental$outboundSchema;
  /** @deprecated use `Experimental$Outbound` instead. */
  export type Outbound = Experimental$Outbound;
}

export function experimentalToJSON(experimental: Experimental): string {
  return JSON.stringify(Experimental$outboundSchema.parse(experimental));
}

export function experimentalFromJSON(
  jsonString: string,
): SafeParseResult<Experimental, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Experimental$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Experimental' from JSON`,
  );
}

/** @internal */
export const Provider$inboundSchema: z.ZodType<
  Provider,
  z.ZodTypeDef,
  unknown
> = z.object({
  allow_fallbacks: z.nullable(z.boolean()).optional(),
  require_parameters: z.nullable(z.boolean()).optional(),
  data_collection: z.nullable(DataCollection$inboundSchema).optional(),
  zdr: z.nullable(z.boolean()).optional(),
  order: z.nullable(z.array(z.union([OrderEnum$inboundSchema, z.string()])))
    .optional(),
  only: z.nullable(z.array(z.union([OnlyEnum$inboundSchema, z.string()])))
    .optional(),
  ignore: z.nullable(z.array(z.union([IgnoreEnum$inboundSchema, z.string()])))
    .optional(),
  quantizations: z.nullable(z.array(Quantization$inboundSchema)).optional(),
  sort: z.nullable(Sort$inboundSchema).optional(),
  max_price: z.lazy(() => MaxPrice$inboundSchema).optional(),
  experimental: z.nullable(z.lazy(() => Experimental$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "allow_fallbacks": "allowFallbacks",
    "require_parameters": "requireParameters",
    "data_collection": "dataCollection",
    "max_price": "maxPrice",
  });
});

/** @internal */
export type Provider$Outbound = {
  allow_fallbacks?: boolean | null | undefined;
  require_parameters?: boolean | null | undefined;
  data_collection?: string | null | undefined;
  zdr?: boolean | null | undefined;
  order?: Array<string | string> | null | undefined;
  only?: Array<string | string> | null | undefined;
  ignore?: Array<string | string> | null | undefined;
  quantizations?: Array<string> | null | undefined;
  sort?: string | null | undefined;
  max_price?: MaxPrice$Outbound | undefined;
  experimental?: Experimental$Outbound | null | undefined;
};

/** @internal */
export const Provider$outboundSchema: z.ZodType<
  Provider$Outbound,
  z.ZodTypeDef,
  Provider
> = z.object({
  allowFallbacks: z.nullable(z.boolean()).optional(),
  requireParameters: z.nullable(z.boolean()).optional(),
  dataCollection: z.nullable(DataCollection$outboundSchema).optional(),
  zdr: z.nullable(z.boolean()).optional(),
  order: z.nullable(z.array(z.union([OrderEnum$outboundSchema, z.string()])))
    .optional(),
  only: z.nullable(z.array(z.union([OnlyEnum$outboundSchema, z.string()])))
    .optional(),
  ignore: z.nullable(z.array(z.union([IgnoreEnum$outboundSchema, z.string()])))
    .optional(),
  quantizations: z.nullable(z.array(Quantization$outboundSchema)).optional(),
  sort: z.nullable(Sort$outboundSchema).optional(),
  maxPrice: z.lazy(() => MaxPrice$outboundSchema).optional(),
  experimental: z.nullable(z.lazy(() => Experimental$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    allowFallbacks: "allow_fallbacks",
    requireParameters: "require_parameters",
    dataCollection: "data_collection",
    maxPrice: "max_price",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Provider$ {
  /** @deprecated use `Provider$inboundSchema` instead. */
  export const inboundSchema = Provider$inboundSchema;
  /** @deprecated use `Provider$outboundSchema` instead. */
  export const outboundSchema = Provider$outboundSchema;
  /** @deprecated use `Provider$Outbound` instead. */
  export type Outbound = Provider$Outbound;
}

export function providerToJSON(provider: Provider): string {
  return JSON.stringify(Provider$outboundSchema.parse(provider));
}

export function providerFromJSON(
  jsonString: string,
): SafeParseResult<Provider, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Provider$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Provider' from JSON`,
  );
}

/** @internal */
export const IdFileParser$inboundSchema: z.ZodNativeEnum<typeof IdFileParser> =
  z.nativeEnum(IdFileParser);

/** @internal */
export const IdFileParser$outboundSchema: z.ZodNativeEnum<typeof IdFileParser> =
  IdFileParser$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IdFileParser$ {
  /** @deprecated use `IdFileParser$inboundSchema` instead. */
  export const inboundSchema = IdFileParser$inboundSchema;
  /** @deprecated use `IdFileParser$outboundSchema` instead. */
  export const outboundSchema = IdFileParser$outboundSchema;
}

/** @internal */
export const PdfEngine$inboundSchema: z.ZodNativeEnum<typeof PdfEngine> = z
  .nativeEnum(PdfEngine);

/** @internal */
export const PdfEngine$outboundSchema: z.ZodNativeEnum<typeof PdfEngine> =
  PdfEngine$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PdfEngine$ {
  /** @deprecated use `PdfEngine$inboundSchema` instead. */
  export const inboundSchema = PdfEngine$inboundSchema;
  /** @deprecated use `PdfEngine$outboundSchema` instead. */
  export const outboundSchema = PdfEngine$outboundSchema;
}

/** @internal */
export const Pdf$inboundSchema: z.ZodType<Pdf, z.ZodTypeDef, unknown> = z
  .object({
    engine: PdfEngine$inboundSchema.optional(),
  });

/** @internal */
export type Pdf$Outbound = {
  engine?: string | undefined;
};

/** @internal */
export const Pdf$outboundSchema: z.ZodType<Pdf$Outbound, z.ZodTypeDef, Pdf> = z
  .object({
    engine: PdfEngine$outboundSchema.optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Pdf$ {
  /** @deprecated use `Pdf$inboundSchema` instead. */
  export const inboundSchema = Pdf$inboundSchema;
  /** @deprecated use `Pdf$outboundSchema` instead. */
  export const outboundSchema = Pdf$outboundSchema;
  /** @deprecated use `Pdf$Outbound` instead. */
  export type Outbound = Pdf$Outbound;
}

export function pdfToJSON(pdf: Pdf): string {
  return JSON.stringify(Pdf$outboundSchema.parse(pdf));
}

export function pdfFromJSON(
  jsonString: string,
): SafeParseResult<Pdf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Pdf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Pdf' from JSON`,
  );
}

/** @internal */
export const PluginFileParser$inboundSchema: z.ZodType<
  PluginFileParser,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: IdFileParser$inboundSchema,
  max_files: z.number().optional(),
  pdf: z.lazy(() => Pdf$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "max_files": "maxFiles",
  });
});

/** @internal */
export type PluginFileParser$Outbound = {
  id: string;
  max_files?: number | undefined;
  pdf?: Pdf$Outbound | undefined;
};

/** @internal */
export const PluginFileParser$outboundSchema: z.ZodType<
  PluginFileParser$Outbound,
  z.ZodTypeDef,
  PluginFileParser
> = z.object({
  id: IdFileParser$outboundSchema,
  maxFiles: z.number().optional(),
  pdf: z.lazy(() => Pdf$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    maxFiles: "max_files",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PluginFileParser$ {
  /** @deprecated use `PluginFileParser$inboundSchema` instead. */
  export const inboundSchema = PluginFileParser$inboundSchema;
  /** @deprecated use `PluginFileParser$outboundSchema` instead. */
  export const outboundSchema = PluginFileParser$outboundSchema;
  /** @deprecated use `PluginFileParser$Outbound` instead. */
  export type Outbound = PluginFileParser$Outbound;
}

export function pluginFileParserToJSON(
  pluginFileParser: PluginFileParser,
): string {
  return JSON.stringify(
    PluginFileParser$outboundSchema.parse(pluginFileParser),
  );
}

export function pluginFileParserFromJSON(
  jsonString: string,
): SafeParseResult<PluginFileParser, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PluginFileParser$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PluginFileParser' from JSON`,
  );
}

/** @internal */
export const IdChainOfThought$inboundSchema: z.ZodNativeEnum<
  typeof IdChainOfThought
> = z.nativeEnum(IdChainOfThought);

/** @internal */
export const IdChainOfThought$outboundSchema: z.ZodNativeEnum<
  typeof IdChainOfThought
> = IdChainOfThought$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IdChainOfThought$ {
  /** @deprecated use `IdChainOfThought$inboundSchema` instead. */
  export const inboundSchema = IdChainOfThought$inboundSchema;
  /** @deprecated use `IdChainOfThought$outboundSchema` instead. */
  export const outboundSchema = IdChainOfThought$outboundSchema;
}

/** @internal */
export const PluginChainOfThought$inboundSchema: z.ZodType<
  PluginChainOfThought,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: IdChainOfThought$inboundSchema,
});

/** @internal */
export type PluginChainOfThought$Outbound = {
  id: string;
};

/** @internal */
export const PluginChainOfThought$outboundSchema: z.ZodType<
  PluginChainOfThought$Outbound,
  z.ZodTypeDef,
  PluginChainOfThought
> = z.object({
  id: IdChainOfThought$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PluginChainOfThought$ {
  /** @deprecated use `PluginChainOfThought$inboundSchema` instead. */
  export const inboundSchema = PluginChainOfThought$inboundSchema;
  /** @deprecated use `PluginChainOfThought$outboundSchema` instead. */
  export const outboundSchema = PluginChainOfThought$outboundSchema;
  /** @deprecated use `PluginChainOfThought$Outbound` instead. */
  export type Outbound = PluginChainOfThought$Outbound;
}

export function pluginChainOfThoughtToJSON(
  pluginChainOfThought: PluginChainOfThought,
): string {
  return JSON.stringify(
    PluginChainOfThought$outboundSchema.parse(pluginChainOfThought),
  );
}

export function pluginChainOfThoughtFromJSON(
  jsonString: string,
): SafeParseResult<PluginChainOfThought, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PluginChainOfThought$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PluginChainOfThought' from JSON`,
  );
}

/** @internal */
export const IdWeb$inboundSchema: z.ZodNativeEnum<typeof IdWeb> = z.nativeEnum(
  IdWeb,
);

/** @internal */
export const IdWeb$outboundSchema: z.ZodNativeEnum<typeof IdWeb> =
  IdWeb$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IdWeb$ {
  /** @deprecated use `IdWeb$inboundSchema` instead. */
  export const inboundSchema = IdWeb$inboundSchema;
  /** @deprecated use `IdWeb$outboundSchema` instead. */
  export const outboundSchema = IdWeb$outboundSchema;
}

/** @internal */
export const Engine$inboundSchema: z.ZodNativeEnum<typeof Engine> = z
  .nativeEnum(Engine);

/** @internal */
export const Engine$outboundSchema: z.ZodNativeEnum<typeof Engine> =
  Engine$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Engine$ {
  /** @deprecated use `Engine$inboundSchema` instead. */
  export const inboundSchema = Engine$inboundSchema;
  /** @deprecated use `Engine$outboundSchema` instead. */
  export const outboundSchema = Engine$outboundSchema;
}

/** @internal */
export const PluginWeb$inboundSchema: z.ZodType<
  PluginWeb,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: IdWeb$inboundSchema,
  max_results: z.number().optional(),
  search_prompt: z.string().optional(),
  engine: Engine$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "max_results": "maxResults",
    "search_prompt": "searchPrompt",
  });
});

/** @internal */
export type PluginWeb$Outbound = {
  id: string;
  max_results?: number | undefined;
  search_prompt?: string | undefined;
  engine?: string | undefined;
};

/** @internal */
export const PluginWeb$outboundSchema: z.ZodType<
  PluginWeb$Outbound,
  z.ZodTypeDef,
  PluginWeb
> = z.object({
  id: IdWeb$outboundSchema,
  maxResults: z.number().optional(),
  searchPrompt: z.string().optional(),
  engine: Engine$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    maxResults: "max_results",
    searchPrompt: "search_prompt",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PluginWeb$ {
  /** @deprecated use `PluginWeb$inboundSchema` instead. */
  export const inboundSchema = PluginWeb$inboundSchema;
  /** @deprecated use `PluginWeb$outboundSchema` instead. */
  export const outboundSchema = PluginWeb$outboundSchema;
  /** @deprecated use `PluginWeb$Outbound` instead. */
  export type Outbound = PluginWeb$Outbound;
}

export function pluginWebToJSON(pluginWeb: PluginWeb): string {
  return JSON.stringify(PluginWeb$outboundSchema.parse(pluginWeb));
}

export function pluginWebFromJSON(
  jsonString: string,
): SafeParseResult<PluginWeb, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PluginWeb$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PluginWeb' from JSON`,
  );
}

/** @internal */
export const IdModeration$inboundSchema: z.ZodNativeEnum<typeof IdModeration> =
  z.nativeEnum(IdModeration);

/** @internal */
export const IdModeration$outboundSchema: z.ZodNativeEnum<typeof IdModeration> =
  IdModeration$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IdModeration$ {
  /** @deprecated use `IdModeration$inboundSchema` instead. */
  export const inboundSchema = IdModeration$inboundSchema;
  /** @deprecated use `IdModeration$outboundSchema` instead. */
  export const outboundSchema = IdModeration$outboundSchema;
}

/** @internal */
export const PluginModeration$inboundSchema: z.ZodType<
  PluginModeration,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: IdModeration$inboundSchema,
});

/** @internal */
export type PluginModeration$Outbound = {
  id: string;
};

/** @internal */
export const PluginModeration$outboundSchema: z.ZodType<
  PluginModeration$Outbound,
  z.ZodTypeDef,
  PluginModeration
> = z.object({
  id: IdModeration$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PluginModeration$ {
  /** @deprecated use `PluginModeration$inboundSchema` instead. */
  export const inboundSchema = PluginModeration$inboundSchema;
  /** @deprecated use `PluginModeration$outboundSchema` instead. */
  export const outboundSchema = PluginModeration$outboundSchema;
  /** @deprecated use `PluginModeration$Outbound` instead. */
  export type Outbound = PluginModeration$Outbound;
}

export function pluginModerationToJSON(
  pluginModeration: PluginModeration,
): string {
  return JSON.stringify(
    PluginModeration$outboundSchema.parse(pluginModeration),
  );
}

export function pluginModerationFromJSON(
  jsonString: string,
): SafeParseResult<PluginModeration, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PluginModeration$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PluginModeration' from JSON`,
  );
}

/** @internal */
export const Plugin$inboundSchema: z.ZodType<Plugin, z.ZodTypeDef, unknown> = z
  .union([
    z.lazy(() => PluginModeration$inboundSchema),
    z.lazy(() => PluginWeb$inboundSchema),
    z.lazy(() => PluginChainOfThought$inboundSchema),
    z.lazy(() => PluginFileParser$inboundSchema),
  ]);

/** @internal */
export type Plugin$Outbound =
  | PluginModeration$Outbound
  | PluginWeb$Outbound
  | PluginChainOfThought$Outbound
  | PluginFileParser$Outbound;

/** @internal */
export const Plugin$outboundSchema: z.ZodType<
  Plugin$Outbound,
  z.ZodTypeDef,
  Plugin
> = z.union([
  z.lazy(() => PluginModeration$outboundSchema),
  z.lazy(() => PluginWeb$outboundSchema),
  z.lazy(() => PluginChainOfThought$outboundSchema),
  z.lazy(() => PluginFileParser$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Plugin$ {
  /** @deprecated use `Plugin$inboundSchema` instead. */
  export const inboundSchema = Plugin$inboundSchema;
  /** @deprecated use `Plugin$outboundSchema` instead. */
  export const outboundSchema = Plugin$outboundSchema;
  /** @deprecated use `Plugin$Outbound` instead. */
  export type Outbound = Plugin$Outbound;
}

export function pluginToJSON(plugin: Plugin): string {
  return JSON.stringify(Plugin$outboundSchema.parse(plugin));
}

export function pluginFromJSON(
  jsonString: string,
): SafeParseResult<Plugin, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Plugin$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Plugin' from JSON`,
  );
}

/** @internal */
export const OpenAIResponsesRequest$inboundSchema: z.ZodType<
  OpenAIResponsesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  input: ResponseInput$inboundSchema.optional(),
  instructions: z.nullable(z.string()).optional(),
  metadata: z.nullable(z.record(z.string())).optional(),
  tools: z.array(Tool$inboundSchema).optional(),
  tool_choice: ToolChoice$inboundSchema.optional(),
  parallel_tool_calls: z.nullable(z.boolean()).optional(),
  model: z.string().optional(),
  models: z.array(z.string()).optional(),
  text: ResponseTextConfig$inboundSchema.optional(),
  reasoning: z.nullable(ResponseReasoningConfig$inboundSchema).optional(),
  max_output_tokens: z.nullable(z.number()).optional(),
  temperature: z.nullable(z.number()).optional(),
  top_p: z.nullable(z.number()).optional(),
  top_k: z.number().optional(),
  prompt_cache_key: z.string().optional(),
  previous_response_id: z.nullable(z.string()).optional(),
  prompt: z.nullable(ResponsePrompt$inboundSchema).optional(),
  include: z.nullable(z.array(ResponseIncludable$inboundSchema)).optional(),
  background: z.nullable(z.boolean()).optional(),
  safety_identifier: z.string().optional(),
  store: z.nullable(z.boolean()).optional(),
  service_tier: z.nullable(OpenAIResponsesRequestServiceTier$inboundSchema)
    .optional(),
  truncation: z.nullable(OpenAIResponsesRequestTruncation$inboundSchema)
    .optional(),
  stream: z.nullable(z.boolean()).optional(),
  provider: z.nullable(z.lazy(() => Provider$inboundSchema)).optional(),
  plugins: z.array(
    z.union([
      z.lazy(() => PluginModeration$inboundSchema),
      z.lazy(() => PluginWeb$inboundSchema),
      z.lazy(() => PluginChainOfThought$inboundSchema),
      z.lazy(() => PluginFileParser$inboundSchema),
    ]),
  ).optional(),
  user: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_choice": "toolChoice",
    "parallel_tool_calls": "parallelToolCalls",
    "max_output_tokens": "maxOutputTokens",
    "top_p": "topP",
    "top_k": "topK",
    "prompt_cache_key": "promptCacheKey",
    "previous_response_id": "previousResponseId",
    "safety_identifier": "safetyIdentifier",
    "service_tier": "serviceTier",
  });
});

/** @internal */
export type OpenAIResponsesRequest$Outbound = {
  input?: ResponseInput$Outbound | undefined;
  instructions?: string | null | undefined;
  metadata?: { [k: string]: string } | null | undefined;
  tools?: Array<Tool$Outbound> | undefined;
  tool_choice?: ToolChoice$Outbound | undefined;
  parallel_tool_calls?: boolean | null | undefined;
  model?: string | undefined;
  models?: Array<string> | undefined;
  text?: ResponseTextConfig$Outbound | undefined;
  reasoning?: ResponseReasoningConfig$Outbound | null | undefined;
  max_output_tokens?: number | null | undefined;
  temperature?: number | null | undefined;
  top_p?: number | null | undefined;
  top_k?: number | undefined;
  prompt_cache_key?: string | undefined;
  previous_response_id?: string | null | undefined;
  prompt?: ResponsePrompt$Outbound | null | undefined;
  include?: Array<string> | null | undefined;
  background?: boolean | null | undefined;
  safety_identifier?: string | undefined;
  store?: boolean | null | undefined;
  service_tier?: string | null | undefined;
  truncation?: string | null | undefined;
  stream?: boolean | null | undefined;
  provider?: Provider$Outbound | null | undefined;
  plugins?:
    | Array<
      | PluginModeration$Outbound
      | PluginWeb$Outbound
      | PluginChainOfThought$Outbound
      | PluginFileParser$Outbound
    >
    | undefined;
  user?: string | undefined;
};

/** @internal */
export const OpenAIResponsesRequest$outboundSchema: z.ZodType<
  OpenAIResponsesRequest$Outbound,
  z.ZodTypeDef,
  OpenAIResponsesRequest
> = z.object({
  input: ResponseInput$outboundSchema.optional(),
  instructions: z.nullable(z.string()).optional(),
  metadata: z.nullable(z.record(z.string())).optional(),
  tools: z.array(Tool$outboundSchema).optional(),
  toolChoice: ToolChoice$outboundSchema.optional(),
  parallelToolCalls: z.nullable(z.boolean()).optional(),
  model: z.string().optional(),
  models: z.array(z.string()).optional(),
  text: ResponseTextConfig$outboundSchema.optional(),
  reasoning: z.nullable(ResponseReasoningConfig$outboundSchema).optional(),
  maxOutputTokens: z.nullable(z.number()).optional(),
  temperature: z.nullable(z.number()).optional(),
  topP: z.nullable(z.number()).optional(),
  topK: z.number().optional(),
  promptCacheKey: z.string().optional(),
  previousResponseId: z.nullable(z.string()).optional(),
  prompt: z.nullable(ResponsePrompt$outboundSchema).optional(),
  include: z.nullable(z.array(ResponseIncludable$outboundSchema)).optional(),
  background: z.nullable(z.boolean()).optional(),
  safetyIdentifier: z.string().optional(),
  store: z.nullable(z.boolean()).optional(),
  serviceTier: z.nullable(OpenAIResponsesRequestServiceTier$outboundSchema)
    .optional(),
  truncation: z.nullable(OpenAIResponsesRequestTruncation$outboundSchema)
    .optional(),
  stream: z.nullable(z.boolean()).optional(),
  provider: z.nullable(z.lazy(() => Provider$outboundSchema)).optional(),
  plugins: z.array(
    z.union([
      z.lazy(() => PluginModeration$outboundSchema),
      z.lazy(() => PluginWeb$outboundSchema),
      z.lazy(() => PluginChainOfThought$outboundSchema),
      z.lazy(() => PluginFileParser$outboundSchema),
    ]),
  ).optional(),
  user: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    toolChoice: "tool_choice",
    parallelToolCalls: "parallel_tool_calls",
    maxOutputTokens: "max_output_tokens",
    topP: "top_p",
    topK: "top_k",
    promptCacheKey: "prompt_cache_key",
    previousResponseId: "previous_response_id",
    safetyIdentifier: "safety_identifier",
    serviceTier: "service_tier",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenAIResponsesRequest$ {
  /** @deprecated use `OpenAIResponsesRequest$inboundSchema` instead. */
  export const inboundSchema = OpenAIResponsesRequest$inboundSchema;
  /** @deprecated use `OpenAIResponsesRequest$outboundSchema` instead. */
  export const outboundSchema = OpenAIResponsesRequest$outboundSchema;
  /** @deprecated use `OpenAIResponsesRequest$Outbound` instead. */
  export type Outbound = OpenAIResponsesRequest$Outbound;
}

export function openAIResponsesRequestToJSON(
  openAIResponsesRequest: OpenAIResponsesRequest,
): string {
  return JSON.stringify(
    OpenAIResponsesRequest$outboundSchema.parse(openAIResponsesRequest),
  );
}

export function openAIResponsesRequestFromJSON(
  jsonString: string,
): SafeParseResult<OpenAIResponsesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenAIResponsesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenAIResponsesRequest' from JSON`,
  );
}
