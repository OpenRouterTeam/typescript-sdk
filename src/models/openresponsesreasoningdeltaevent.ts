/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const OpenResponsesReasoningDeltaEventType = {
  ResponseReasoningTextDelta: "response.reasoning_text.delta",
} as const;
export type OpenResponsesReasoningDeltaEventType = ClosedEnum<
  typeof OpenResponsesReasoningDeltaEventType
>;

/**
 * Event emitted when reasoning text delta is streamed
 */
export type OpenResponsesReasoningDeltaEvent = {
  type: OpenResponsesReasoningDeltaEventType;
  outputIndex: number;
  itemId: string;
  contentIndex: number;
  delta: string;
  sequenceNumber: number;
};

/** @internal */
export const OpenResponsesReasoningDeltaEventType$inboundSchema:
  z.ZodNativeEnum<typeof OpenResponsesReasoningDeltaEventType> = z.nativeEnum(
    OpenResponsesReasoningDeltaEventType,
  );

/** @internal */
export const OpenResponsesReasoningDeltaEventType$outboundSchema:
  z.ZodNativeEnum<typeof OpenResponsesReasoningDeltaEventType> =
    OpenResponsesReasoningDeltaEventType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesReasoningDeltaEventType$ {
  /** @deprecated use `OpenResponsesReasoningDeltaEventType$inboundSchema` instead. */
  export const inboundSchema =
    OpenResponsesReasoningDeltaEventType$inboundSchema;
  /** @deprecated use `OpenResponsesReasoningDeltaEventType$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesReasoningDeltaEventType$outboundSchema;
}

/** @internal */
export const OpenResponsesReasoningDeltaEvent$inboundSchema: z.ZodType<
  OpenResponsesReasoningDeltaEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: OpenResponsesReasoningDeltaEventType$inboundSchema,
  output_index: z.number(),
  item_id: z.string(),
  content_index: z.number(),
  delta: z.string(),
  sequence_number: z.number(),
}).transform((v) => {
  return remap$(v, {
    "output_index": "outputIndex",
    "item_id": "itemId",
    "content_index": "contentIndex",
    "sequence_number": "sequenceNumber",
  });
});

/** @internal */
export type OpenResponsesReasoningDeltaEvent$Outbound = {
  type: string;
  output_index: number;
  item_id: string;
  content_index: number;
  delta: string;
  sequence_number: number;
};

/** @internal */
export const OpenResponsesReasoningDeltaEvent$outboundSchema: z.ZodType<
  OpenResponsesReasoningDeltaEvent$Outbound,
  z.ZodTypeDef,
  OpenResponsesReasoningDeltaEvent
> = z.object({
  type: OpenResponsesReasoningDeltaEventType$outboundSchema,
  outputIndex: z.number(),
  itemId: z.string(),
  contentIndex: z.number(),
  delta: z.string(),
  sequenceNumber: z.number(),
}).transform((v) => {
  return remap$(v, {
    outputIndex: "output_index",
    itemId: "item_id",
    contentIndex: "content_index",
    sequenceNumber: "sequence_number",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesReasoningDeltaEvent$ {
  /** @deprecated use `OpenResponsesReasoningDeltaEvent$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesReasoningDeltaEvent$inboundSchema;
  /** @deprecated use `OpenResponsesReasoningDeltaEvent$outboundSchema` instead. */
  export const outboundSchema = OpenResponsesReasoningDeltaEvent$outboundSchema;
  /** @deprecated use `OpenResponsesReasoningDeltaEvent$Outbound` instead. */
  export type Outbound = OpenResponsesReasoningDeltaEvent$Outbound;
}

export function openResponsesReasoningDeltaEventToJSON(
  openResponsesReasoningDeltaEvent: OpenResponsesReasoningDeltaEvent,
): string {
  return JSON.stringify(
    OpenResponsesReasoningDeltaEvent$outboundSchema.parse(
      openResponsesReasoningDeltaEvent,
    ),
  );
}

export function openResponsesReasoningDeltaEventFromJSON(
  jsonString: string,
): SafeParseResult<OpenResponsesReasoningDeltaEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenResponsesReasoningDeltaEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenResponsesReasoningDeltaEvent' from JSON`,
  );
}
