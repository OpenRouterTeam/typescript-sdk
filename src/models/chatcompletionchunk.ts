/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ChatCompletionChunkChoice,
  ChatCompletionChunkChoice$inboundSchema,
  ChatCompletionChunkChoice$Outbound,
  ChatCompletionChunkChoice$outboundSchema,
} from "./chatcompletionchunkchoice.js";
import {
  CompletionUsage,
  CompletionUsage$inboundSchema,
  CompletionUsage$Outbound,
  CompletionUsage$outboundSchema,
} from "./completionusage.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const ChatCompletionChunkObject = {
  ChatCompletionChunk: "chat.completion.chunk",
} as const;
export type ChatCompletionChunkObject = ClosedEnum<
  typeof ChatCompletionChunkObject
>;

/**
 * Streaming chat completion chunk
 */
export type ChatCompletionChunk = {
  id: string;
  choices: Array<ChatCompletionChunkChoice>;
  created: number;
  model: string;
  object: ChatCompletionChunkObject;
  systemFingerprint?: string | null | undefined;
  /**
   * Token usage statistics
   */
  usage?: CompletionUsage | undefined;
};

/** @internal */
export const ChatCompletionChunkObject$inboundSchema: z.ZodNativeEnum<
  typeof ChatCompletionChunkObject
> = z.nativeEnum(ChatCompletionChunkObject);

/** @internal */
export const ChatCompletionChunkObject$outboundSchema: z.ZodNativeEnum<
  typeof ChatCompletionChunkObject
> = ChatCompletionChunkObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionChunkObject$ {
  /** @deprecated use `ChatCompletionChunkObject$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionChunkObject$inboundSchema;
  /** @deprecated use `ChatCompletionChunkObject$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionChunkObject$outboundSchema;
}

/** @internal */
export const ChatCompletionChunk$inboundSchema: z.ZodType<
  ChatCompletionChunk,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  choices: z.array(ChatCompletionChunkChoice$inboundSchema),
  created: z.number(),
  model: z.string(),
  object: ChatCompletionChunkObject$inboundSchema,
  system_fingerprint: z.nullable(z.string()).optional(),
  usage: CompletionUsage$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "system_fingerprint": "systemFingerprint",
  });
});

/** @internal */
export type ChatCompletionChunk$Outbound = {
  id: string;
  choices: Array<ChatCompletionChunkChoice$Outbound>;
  created: number;
  model: string;
  object: string;
  system_fingerprint?: string | null | undefined;
  usage?: CompletionUsage$Outbound | undefined;
};

/** @internal */
export const ChatCompletionChunk$outboundSchema: z.ZodType<
  ChatCompletionChunk$Outbound,
  z.ZodTypeDef,
  ChatCompletionChunk
> = z.object({
  id: z.string(),
  choices: z.array(ChatCompletionChunkChoice$outboundSchema),
  created: z.number(),
  model: z.string(),
  object: ChatCompletionChunkObject$outboundSchema,
  systemFingerprint: z.nullable(z.string()).optional(),
  usage: CompletionUsage$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    systemFingerprint: "system_fingerprint",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionChunk$ {
  /** @deprecated use `ChatCompletionChunk$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionChunk$inboundSchema;
  /** @deprecated use `ChatCompletionChunk$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionChunk$outboundSchema;
  /** @deprecated use `ChatCompletionChunk$Outbound` instead. */
  export type Outbound = ChatCompletionChunk$Outbound;
}

export function chatCompletionChunkToJSON(
  chatCompletionChunk: ChatCompletionChunk,
): string {
  return JSON.stringify(
    ChatCompletionChunk$outboundSchema.parse(chatCompletionChunk),
  );
}

export function chatCompletionChunkFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionChunk, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionChunk$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionChunk' from JSON`,
  );
}
