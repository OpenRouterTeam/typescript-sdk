/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ChatCompletionChunkChoice,
  ChatCompletionChunkChoice$inboundSchema,
  ChatCompletionChunkChoice$Outbound,
  ChatCompletionChunkChoice$outboundSchema,
} from "./chatcompletionchunkchoice.js";
import {
  CompletionUsage,
  CompletionUsage$inboundSchema,
  CompletionUsage$Outbound,
  CompletionUsage$outboundSchema,
} from "./completionusage.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type Data = {
  id: string;
  choices: Array<ChatCompletionChunkChoice>;
  created: number;
  model: string;
  object: "chat.completion.chunk";
  systemFingerprint?: string | undefined;
  usage?: CompletionUsage | undefined;
};

export type ChatCompletionChunk = {
  data: Data;
};

/** @internal */
export const Data$inboundSchema: z.ZodType<Data, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string(),
    choices: z.array(ChatCompletionChunkChoice$inboundSchema),
    created: z.number(),
    model: z.string(),
    object: z.literal("chat.completion.chunk"),
    system_fingerprint: z.string().optional(),
    usage: CompletionUsage$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "system_fingerprint": "systemFingerprint",
    });
  });

/** @internal */
export type Data$Outbound = {
  id: string;
  choices: Array<ChatCompletionChunkChoice$Outbound>;
  created: number;
  model: string;
  object: "chat.completion.chunk";
  system_fingerprint?: string | undefined;
  usage?: CompletionUsage$Outbound | undefined;
};

/** @internal */
export const Data$outboundSchema: z.ZodType<Data$Outbound, z.ZodTypeDef, Data> =
  z.object({
    id: z.string(),
    choices: z.array(ChatCompletionChunkChoice$outboundSchema),
    created: z.number(),
    model: z.string(),
    object: z.literal("chat.completion.chunk"),
    systemFingerprint: z.string().optional(),
    usage: CompletionUsage$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      systemFingerprint: "system_fingerprint",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Data$ {
  /** @deprecated use `Data$inboundSchema` instead. */
  export const inboundSchema = Data$inboundSchema;
  /** @deprecated use `Data$outboundSchema` instead. */
  export const outboundSchema = Data$outboundSchema;
  /** @deprecated use `Data$Outbound` instead. */
  export type Outbound = Data$Outbound;
}

export function dataToJSON(data: Data): string {
  return JSON.stringify(Data$outboundSchema.parse(data));
}

export function dataFromJSON(
  jsonString: string,
): SafeParseResult<Data, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Data$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Data' from JSON`,
  );
}

/** @internal */
export const ChatCompletionChunk$inboundSchema: z.ZodType<
  ChatCompletionChunk,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.string().transform((v, ctx) => {
    try {
      return JSON.parse(v);
    } catch (err) {
      ctx.addIssue({
        code: z.ZodIssueCode.custom,
        message: `malformed json: ${err}`,
      });
      return z.NEVER;
    }
  }).pipe(z.lazy(() => Data$inboundSchema)),
});

/** @internal */
export type ChatCompletionChunk$Outbound = {
  data: Data$Outbound;
};

/** @internal */
export const ChatCompletionChunk$outboundSchema: z.ZodType<
  ChatCompletionChunk$Outbound,
  z.ZodTypeDef,
  ChatCompletionChunk
> = z.object({
  data: z.lazy(() => Data$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionChunk$ {
  /** @deprecated use `ChatCompletionChunk$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionChunk$inboundSchema;
  /** @deprecated use `ChatCompletionChunk$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionChunk$outboundSchema;
  /** @deprecated use `ChatCompletionChunk$Outbound` instead. */
  export type Outbound = ChatCompletionChunk$Outbound;
}

export function chatCompletionChunkToJSON(
  chatCompletionChunk: ChatCompletionChunk,
): string {
  return JSON.stringify(
    ChatCompletionChunk$outboundSchema.parse(chatCompletionChunk),
  );
}

export function chatCompletionChunkFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionChunk, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionChunk$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionChunk' from JSON`,
  );
}
