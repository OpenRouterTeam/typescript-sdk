/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ResponseInputItem,
  ResponseInputItem$inboundSchema,
  ResponseInputItem$Outbound,
  ResponseInputItem$outboundSchema,
} from "./responseinputitem.js";

/**
 * Input for Responses API (can be a string or array of input items)
 */
export type ResponseInput = string | Array<ResponseInputItem>;

/** @internal */
export const ResponseInput$inboundSchema: z.ZodType<
  ResponseInput,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(ResponseInputItem$inboundSchema)]);

/** @internal */
export type ResponseInput$Outbound = string | Array<ResponseInputItem$Outbound>;

/** @internal */
export const ResponseInput$outboundSchema: z.ZodType<
  ResponseInput$Outbound,
  z.ZodTypeDef,
  ResponseInput
> = z.union([z.string(), z.array(ResponseInputItem$outboundSchema)]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseInput$ {
  /** @deprecated use `ResponseInput$inboundSchema` instead. */
  export const inboundSchema = ResponseInput$inboundSchema;
  /** @deprecated use `ResponseInput$outboundSchema` instead. */
  export const outboundSchema = ResponseInput$outboundSchema;
  /** @deprecated use `ResponseInput$Outbound` instead. */
  export type Outbound = ResponseInput$Outbound;
}

export function responseInputToJSON(responseInput: ResponseInput): string {
  return JSON.stringify(ResponseInput$outboundSchema.parse(responseInput));
}

export function responseInputFromJSON(
  jsonString: string,
): SafeParseResult<ResponseInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseInput' from JSON`,
  );
}
