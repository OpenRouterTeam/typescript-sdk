/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  ClosedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ResponsesReasoningSummaryText,
  ResponsesReasoningSummaryText$inboundSchema,
  ResponsesReasoningSummaryText$Outbound,
  ResponsesReasoningSummaryText$outboundSchema,
} from "./responsesreasoningsummarytext.js";
import {
  ResponsesReasoningTextContent,
  ResponsesReasoningTextContent$inboundSchema,
  ResponsesReasoningTextContent$Outbound,
  ResponsesReasoningTextContent$outboundSchema,
} from "./responsesreasoningtextcontent.js";

export const ResponsesOutputItemReasoningType = {
  Reasoning: "reasoning",
} as const;
export type ResponsesOutputItemReasoningType = ClosedEnum<
  typeof ResponsesOutputItemReasoningType
>;

export const ResponsesOutputItemReasoningFormat = {
  Unknown: "unknown",
  OpenaiResponsesV1: "openai-responses-v1",
  XaiResponsesV1: "xai-responses-v1",
  AnthropicClaudeV1: "anthropic-claude-v1",
} as const;
export type ResponsesOutputItemReasoningFormat = OpenEnum<
  typeof ResponsesOutputItemReasoningFormat
>;

/**
 * Reasoning output item
 */
export type ResponsesOutputItemReasoning = {
  type: ResponsesOutputItemReasoningType;
  id: string;
  content?: Array<ResponsesReasoningTextContent> | undefined;
  summary: Array<ResponsesReasoningSummaryText>;
  encryptedContent?: string | null | undefined;
  signature?: string | null | undefined;
  format?: ResponsesOutputItemReasoningFormat | null | undefined;
};

/** @internal */
export const ResponsesOutputItemReasoningType$inboundSchema: z.ZodNativeEnum<
  typeof ResponsesOutputItemReasoningType
> = z.nativeEnum(ResponsesOutputItemReasoningType);

/** @internal */
export const ResponsesOutputItemReasoningType$outboundSchema: z.ZodNativeEnum<
  typeof ResponsesOutputItemReasoningType
> = ResponsesOutputItemReasoningType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesOutputItemReasoningType$ {
  /** @deprecated use `ResponsesOutputItemReasoningType$inboundSchema` instead. */
  export const inboundSchema = ResponsesOutputItemReasoningType$inboundSchema;
  /** @deprecated use `ResponsesOutputItemReasoningType$outboundSchema` instead. */
  export const outboundSchema = ResponsesOutputItemReasoningType$outboundSchema;
}

/** @internal */
export const ResponsesOutputItemReasoningFormat$inboundSchema: z.ZodType<
  ResponsesOutputItemReasoningFormat,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ResponsesOutputItemReasoningFormat),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ResponsesOutputItemReasoningFormat$outboundSchema: z.ZodType<
  ResponsesOutputItemReasoningFormat,
  z.ZodTypeDef,
  ResponsesOutputItemReasoningFormat
> = z.union([
  z.nativeEnum(ResponsesOutputItemReasoningFormat),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesOutputItemReasoningFormat$ {
  /** @deprecated use `ResponsesOutputItemReasoningFormat$inboundSchema` instead. */
  export const inboundSchema = ResponsesOutputItemReasoningFormat$inboundSchema;
  /** @deprecated use `ResponsesOutputItemReasoningFormat$outboundSchema` instead. */
  export const outboundSchema =
    ResponsesOutputItemReasoningFormat$outboundSchema;
}

/** @internal */
export const ResponsesOutputItemReasoning$inboundSchema: z.ZodType<
  ResponsesOutputItemReasoning,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ResponsesOutputItemReasoningType$inboundSchema,
  id: z.string(),
  content: z.array(ResponsesReasoningTextContent$inboundSchema).optional(),
  summary: z.array(ResponsesReasoningSummaryText$inboundSchema),
  encrypted_content: z.nullable(z.string()).optional(),
  signature: z.nullable(z.string()).optional(),
  format: z.nullable(ResponsesOutputItemReasoningFormat$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "encrypted_content": "encryptedContent",
  });
});

/** @internal */
export type ResponsesOutputItemReasoning$Outbound = {
  type: string;
  id: string;
  content?: Array<ResponsesReasoningTextContent$Outbound> | undefined;
  summary: Array<ResponsesReasoningSummaryText$Outbound>;
  encrypted_content?: string | null | undefined;
  signature?: string | null | undefined;
  format?: string | null | undefined;
};

/** @internal */
export const ResponsesOutputItemReasoning$outboundSchema: z.ZodType<
  ResponsesOutputItemReasoning$Outbound,
  z.ZodTypeDef,
  ResponsesOutputItemReasoning
> = z.object({
  type: ResponsesOutputItemReasoningType$outboundSchema,
  id: z.string(),
  content: z.array(ResponsesReasoningTextContent$outboundSchema).optional(),
  summary: z.array(ResponsesReasoningSummaryText$outboundSchema),
  encryptedContent: z.nullable(z.string()).optional(),
  signature: z.nullable(z.string()).optional(),
  format: z.nullable(ResponsesOutputItemReasoningFormat$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    encryptedContent: "encrypted_content",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesOutputItemReasoning$ {
  /** @deprecated use `ResponsesOutputItemReasoning$inboundSchema` instead. */
  export const inboundSchema = ResponsesOutputItemReasoning$inboundSchema;
  /** @deprecated use `ResponsesOutputItemReasoning$outboundSchema` instead. */
  export const outboundSchema = ResponsesOutputItemReasoning$outboundSchema;
  /** @deprecated use `ResponsesOutputItemReasoning$Outbound` instead. */
  export type Outbound = ResponsesOutputItemReasoning$Outbound;
}

export function responsesOutputItemReasoningToJSON(
  responsesOutputItemReasoning: ResponsesOutputItemReasoning,
): string {
  return JSON.stringify(
    ResponsesOutputItemReasoning$outboundSchema.parse(
      responsesOutputItemReasoning,
    ),
  );
}

export function responsesOutputItemReasoningFromJSON(
  jsonString: string,
): SafeParseResult<ResponsesOutputItemReasoning, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponsesOutputItemReasoning$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponsesOutputItemReasoning' from JSON`,
  );
}
