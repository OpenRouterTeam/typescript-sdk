/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ChatCompletionMessage,
  ChatCompletionMessage$inboundSchema,
  ChatCompletionMessage$Outbound,
  ChatCompletionMessage$outboundSchema,
} from "./chatcompletionmessage.js";
import {
  ChatCompletionTokenLogprobs,
  ChatCompletionTokenLogprobs$inboundSchema,
  ChatCompletionTokenLogprobs$Outbound,
  ChatCompletionTokenLogprobs$outboundSchema,
} from "./chatcompletiontokenlogprobs.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Reason the completion finished
 */
export const ChatCompletionChoiceFinishReason = {
  ToolCalls: "tool_calls",
  Stop: "stop",
  Length: "length",
  ContentFilter: "content_filter",
  Error: "error",
} as const;
/**
 * Reason the completion finished
 */
export type ChatCompletionChoiceFinishReason = ClosedEnum<
  typeof ChatCompletionChoiceFinishReason
>;

/**
 * Chat completion choice
 */
export type ChatCompletionChoice = {
  /**
   * Reason the completion finished
   */
  finishReason: ChatCompletionChoiceFinishReason | null;
  /**
   * Choice index
   */
  index: number;
  /**
   * Assistant message in completion response
   */
  message: ChatCompletionMessage;
  /**
   * Log probabilities for the completion
   */
  logprobs?: ChatCompletionTokenLogprobs | null | undefined;
};

/** @internal */
export const ChatCompletionChoiceFinishReason$inboundSchema: z.ZodNativeEnum<
  typeof ChatCompletionChoiceFinishReason
> = z.nativeEnum(ChatCompletionChoiceFinishReason);

/** @internal */
export const ChatCompletionChoiceFinishReason$outboundSchema: z.ZodNativeEnum<
  typeof ChatCompletionChoiceFinishReason
> = ChatCompletionChoiceFinishReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionChoiceFinishReason$ {
  /** @deprecated use `ChatCompletionChoiceFinishReason$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionChoiceFinishReason$inboundSchema;
  /** @deprecated use `ChatCompletionChoiceFinishReason$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionChoiceFinishReason$outboundSchema;
}

/** @internal */
export const ChatCompletionChoice$inboundSchema: z.ZodType<
  ChatCompletionChoice,
  z.ZodTypeDef,
  unknown
> = z.object({
  finish_reason: z.nullable(ChatCompletionChoiceFinishReason$inboundSchema),
  index: z.number(),
  message: ChatCompletionMessage$inboundSchema,
  logprobs: z.nullable(ChatCompletionTokenLogprobs$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "finish_reason": "finishReason",
  });
});

/** @internal */
export type ChatCompletionChoice$Outbound = {
  finish_reason: string | null;
  index: number;
  message: ChatCompletionMessage$Outbound;
  logprobs?: ChatCompletionTokenLogprobs$Outbound | null | undefined;
};

/** @internal */
export const ChatCompletionChoice$outboundSchema: z.ZodType<
  ChatCompletionChoice$Outbound,
  z.ZodTypeDef,
  ChatCompletionChoice
> = z.object({
  finishReason: z.nullable(ChatCompletionChoiceFinishReason$outboundSchema),
  index: z.number(),
  message: ChatCompletionMessage$outboundSchema,
  logprobs: z.nullable(ChatCompletionTokenLogprobs$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    finishReason: "finish_reason",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionChoice$ {
  /** @deprecated use `ChatCompletionChoice$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionChoice$inboundSchema;
  /** @deprecated use `ChatCompletionChoice$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionChoice$outboundSchema;
  /** @deprecated use `ChatCompletionChoice$Outbound` instead. */
  export type Outbound = ChatCompletionChoice$Outbound;
}

export function chatCompletionChoiceToJSON(
  chatCompletionChoice: ChatCompletionChoice,
): string {
  return JSON.stringify(
    ChatCompletionChoice$outboundSchema.parse(chatCompletionChoice),
  );
}

export function chatCompletionChoiceFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionChoice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionChoice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionChoice' from JSON`,
  );
}
