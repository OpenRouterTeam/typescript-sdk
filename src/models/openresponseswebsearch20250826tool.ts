/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ResponsesSearchContextSize,
  ResponsesSearchContextSize$inboundSchema,
  ResponsesSearchContextSize$outboundSchema,
} from "./responsessearchcontextsize.js";
import {
  ResponsesWebSearchUserLocation,
  ResponsesWebSearchUserLocation$inboundSchema,
  ResponsesWebSearchUserLocation$Outbound,
  ResponsesWebSearchUserLocation$outboundSchema,
} from "./responseswebsearchuserlocation.js";

export const OpenResponsesWebSearch20250826ToolType = {
  WebSearch20250826: "web_search_2025_08_26",
} as const;
export type OpenResponsesWebSearch20250826ToolType = ClosedEnum<
  typeof OpenResponsesWebSearch20250826ToolType
>;

export type OpenResponsesWebSearch20250826ToolFilters = {
  allowedDomains?: Array<string> | null | undefined;
};

/**
 * Web search tool configuration (2025-08-26 version)
 */
export type OpenResponsesWebSearch20250826Tool = {
  type: OpenResponsesWebSearch20250826ToolType;
  filters?: OpenResponsesWebSearch20250826ToolFilters | null | undefined;
  /**
   * Size of the search context for web search tools
   */
  searchContextSize?: ResponsesSearchContextSize | undefined;
  /**
   * User location information for web search
   */
  userLocation?: ResponsesWebSearchUserLocation | null | undefined;
};

/** @internal */
export const OpenResponsesWebSearch20250826ToolType$inboundSchema:
  z.ZodNativeEnum<typeof OpenResponsesWebSearch20250826ToolType> = z.nativeEnum(
    OpenResponsesWebSearch20250826ToolType,
  );

/** @internal */
export const OpenResponsesWebSearch20250826ToolType$outboundSchema:
  z.ZodNativeEnum<typeof OpenResponsesWebSearch20250826ToolType> =
    OpenResponsesWebSearch20250826ToolType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesWebSearch20250826ToolType$ {
  /** @deprecated use `OpenResponsesWebSearch20250826ToolType$inboundSchema` instead. */
  export const inboundSchema =
    OpenResponsesWebSearch20250826ToolType$inboundSchema;
  /** @deprecated use `OpenResponsesWebSearch20250826ToolType$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesWebSearch20250826ToolType$outboundSchema;
}

/** @internal */
export const OpenResponsesWebSearch20250826ToolFilters$inboundSchema: z.ZodType<
  OpenResponsesWebSearch20250826ToolFilters,
  z.ZodTypeDef,
  unknown
> = z.object({
  allowed_domains: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    "allowed_domains": "allowedDomains",
  });
});

/** @internal */
export type OpenResponsesWebSearch20250826ToolFilters$Outbound = {
  allowed_domains?: Array<string> | null | undefined;
};

/** @internal */
export const OpenResponsesWebSearch20250826ToolFilters$outboundSchema:
  z.ZodType<
    OpenResponsesWebSearch20250826ToolFilters$Outbound,
    z.ZodTypeDef,
    OpenResponsesWebSearch20250826ToolFilters
  > = z.object({
    allowedDomains: z.nullable(z.array(z.string())).optional(),
  }).transform((v) => {
    return remap$(v, {
      allowedDomains: "allowed_domains",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesWebSearch20250826ToolFilters$ {
  /** @deprecated use `OpenResponsesWebSearch20250826ToolFilters$inboundSchema` instead. */
  export const inboundSchema =
    OpenResponsesWebSearch20250826ToolFilters$inboundSchema;
  /** @deprecated use `OpenResponsesWebSearch20250826ToolFilters$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesWebSearch20250826ToolFilters$outboundSchema;
  /** @deprecated use `OpenResponsesWebSearch20250826ToolFilters$Outbound` instead. */
  export type Outbound = OpenResponsesWebSearch20250826ToolFilters$Outbound;
}

export function openResponsesWebSearch20250826ToolFiltersToJSON(
  openResponsesWebSearch20250826ToolFilters:
    OpenResponsesWebSearch20250826ToolFilters,
): string {
  return JSON.stringify(
    OpenResponsesWebSearch20250826ToolFilters$outboundSchema.parse(
      openResponsesWebSearch20250826ToolFilters,
    ),
  );
}

export function openResponsesWebSearch20250826ToolFiltersFromJSON(
  jsonString: string,
): SafeParseResult<
  OpenResponsesWebSearch20250826ToolFilters,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      OpenResponsesWebSearch20250826ToolFilters$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'OpenResponsesWebSearch20250826ToolFilters' from JSON`,
  );
}

/** @internal */
export const OpenResponsesWebSearch20250826Tool$inboundSchema: z.ZodType<
  OpenResponsesWebSearch20250826Tool,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: OpenResponsesWebSearch20250826ToolType$inboundSchema,
  filters: z.nullable(
    z.lazy(() => OpenResponsesWebSearch20250826ToolFilters$inboundSchema),
  ).optional(),
  search_context_size: ResponsesSearchContextSize$inboundSchema.optional(),
  user_location: z.nullable(ResponsesWebSearchUserLocation$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "search_context_size": "searchContextSize",
    "user_location": "userLocation",
  });
});

/** @internal */
export type OpenResponsesWebSearch20250826Tool$Outbound = {
  type: string;
  filters?:
    | OpenResponsesWebSearch20250826ToolFilters$Outbound
    | null
    | undefined;
  search_context_size?: string | undefined;
  user_location?: ResponsesWebSearchUserLocation$Outbound | null | undefined;
};

/** @internal */
export const OpenResponsesWebSearch20250826Tool$outboundSchema: z.ZodType<
  OpenResponsesWebSearch20250826Tool$Outbound,
  z.ZodTypeDef,
  OpenResponsesWebSearch20250826Tool
> = z.object({
  type: OpenResponsesWebSearch20250826ToolType$outboundSchema,
  filters: z.nullable(
    z.lazy(() => OpenResponsesWebSearch20250826ToolFilters$outboundSchema),
  ).optional(),
  searchContextSize: ResponsesSearchContextSize$outboundSchema.optional(),
  userLocation: z.nullable(ResponsesWebSearchUserLocation$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    searchContextSize: "search_context_size",
    userLocation: "user_location",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesWebSearch20250826Tool$ {
  /** @deprecated use `OpenResponsesWebSearch20250826Tool$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesWebSearch20250826Tool$inboundSchema;
  /** @deprecated use `OpenResponsesWebSearch20250826Tool$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesWebSearch20250826Tool$outboundSchema;
  /** @deprecated use `OpenResponsesWebSearch20250826Tool$Outbound` instead. */
  export type Outbound = OpenResponsesWebSearch20250826Tool$Outbound;
}

export function openResponsesWebSearch20250826ToolToJSON(
  openResponsesWebSearch20250826Tool: OpenResponsesWebSearch20250826Tool,
): string {
  return JSON.stringify(
    OpenResponsesWebSearch20250826Tool$outboundSchema.parse(
      openResponsesWebSearch20250826Tool,
    ),
  );
}

export function openResponsesWebSearch20250826ToolFromJSON(
  jsonString: string,
): SafeParseResult<OpenResponsesWebSearch20250826Tool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OpenResponsesWebSearch20250826Tool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenResponsesWebSearch20250826Tool' from JSON`,
  );
}
