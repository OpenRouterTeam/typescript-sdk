/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  FileAnnotationDetail,
  FileAnnotationDetail$inboundSchema,
  FileAnnotationDetail$Outbound,
  FileAnnotationDetail$outboundSchema,
} from "./fileannotationdetail.js";
import {
  URLCitationAnnotationDetail,
  URLCitationAnnotationDetail$inboundSchema,
  URLCitationAnnotationDetail$Outbound,
  URLCitationAnnotationDetail$outboundSchema,
} from "./urlcitationannotationdetail.js";

/**
 * Annotation information
 */
export type AnnotationDetail =
  | (FileAnnotationDetail & { type: "file" })
  | (URLCitationAnnotationDetail & { type: "url_citation" });

/** @internal */
export const AnnotationDetail$inboundSchema: z.ZodType<
  AnnotationDetail,
  z.ZodTypeDef,
  unknown
> = z.union([
  FileAnnotationDetail$inboundSchema.and(
    z.object({ type: z.literal("file") }).transform((v) => ({ type: v.type })),
  ),
  URLCitationAnnotationDetail$inboundSchema.and(
    z.object({ type: z.literal("url_citation") }).transform((v) => ({
      type: v.type,
    })),
  ),
]);

/** @internal */
export type AnnotationDetail$Outbound =
  | (FileAnnotationDetail$Outbound & { type: "file" })
  | (URLCitationAnnotationDetail$Outbound & { type: "url_citation" });

/** @internal */
export const AnnotationDetail$outboundSchema: z.ZodType<
  AnnotationDetail$Outbound,
  z.ZodTypeDef,
  AnnotationDetail
> = z.union([
  FileAnnotationDetail$outboundSchema.and(
    z.object({ type: z.literal("file") }).transform((v) => ({ type: v.type })),
  ),
  URLCitationAnnotationDetail$outboundSchema.and(
    z.object({ type: z.literal("url_citation") }).transform((v) => ({
      type: v.type,
    })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnnotationDetail$ {
  /** @deprecated use `AnnotationDetail$inboundSchema` instead. */
  export const inboundSchema = AnnotationDetail$inboundSchema;
  /** @deprecated use `AnnotationDetail$outboundSchema` instead. */
  export const outboundSchema = AnnotationDetail$outboundSchema;
  /** @deprecated use `AnnotationDetail$Outbound` instead. */
  export type Outbound = AnnotationDetail$Outbound;
}

export function annotationDetailToJSON(
  annotationDetail: AnnotationDetail,
): string {
  return JSON.stringify(
    AnnotationDetail$outboundSchema.parse(annotationDetail),
  );
}

export function annotationDetailFromJSON(
  jsonString: string,
): SafeParseResult<AnnotationDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnnotationDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnnotationDetail' from JSON`,
  );
}
