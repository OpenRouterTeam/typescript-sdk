/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  OpenAIResponsesAnnotation,
  OpenAIResponsesAnnotation$inboundSchema,
  OpenAIResponsesAnnotation$Outbound,
  OpenAIResponsesAnnotation$outboundSchema,
} from "./openairesponsesannotation.js";
import {
  OpenAIResponsesRefusalContent,
  OpenAIResponsesRefusalContent$inboundSchema,
  OpenAIResponsesRefusalContent$Outbound,
  OpenAIResponsesRefusalContent$outboundSchema,
} from "./openairesponsesrefusalcontent.js";
import {
  OpenResponsesErrorEvent,
  OpenResponsesErrorEvent$inboundSchema,
  OpenResponsesErrorEvent$Outbound,
  OpenResponsesErrorEvent$outboundSchema,
} from "./openresponseserrorevent.js";
import {
  OpenResponsesImageGenCallCompleted,
  OpenResponsesImageGenCallCompleted$inboundSchema,
  OpenResponsesImageGenCallCompleted$Outbound,
  OpenResponsesImageGenCallCompleted$outboundSchema,
} from "./openresponsesimagegencallcompleted.js";
import {
  OpenResponsesImageGenCallGenerating,
  OpenResponsesImageGenCallGenerating$inboundSchema,
  OpenResponsesImageGenCallGenerating$Outbound,
  OpenResponsesImageGenCallGenerating$outboundSchema,
} from "./openresponsesimagegencallgenerating.js";
import {
  OpenResponsesImageGenCallInProgress,
  OpenResponsesImageGenCallInProgress$inboundSchema,
  OpenResponsesImageGenCallInProgress$Outbound,
  OpenResponsesImageGenCallInProgress$outboundSchema,
} from "./openresponsesimagegencallinprogress.js";
import {
  OpenResponsesImageGenCallPartialImage,
  OpenResponsesImageGenCallPartialImage$inboundSchema,
  OpenResponsesImageGenCallPartialImage$Outbound,
  OpenResponsesImageGenCallPartialImage$outboundSchema,
} from "./openresponsesimagegencallpartialimage.js";
import {
  OpenResponsesLogProbs,
  OpenResponsesLogProbs$inboundSchema,
  OpenResponsesLogProbs$Outbound,
  OpenResponsesLogProbs$outboundSchema,
} from "./openresponseslogprobs.js";
import {
  OpenResponsesNonStreamingResponse,
  OpenResponsesNonStreamingResponse$inboundSchema,
  OpenResponsesNonStreamingResponse$Outbound,
  OpenResponsesNonStreamingResponse$outboundSchema,
} from "./openresponsesnonstreamingresponse.js";
import {
  OpenResponsesReasoningDeltaEvent,
  OpenResponsesReasoningDeltaEvent$inboundSchema,
  OpenResponsesReasoningDeltaEvent$Outbound,
  OpenResponsesReasoningDeltaEvent$outboundSchema,
} from "./openresponsesreasoningdeltaevent.js";
import {
  OpenResponsesReasoningDoneEvent,
  OpenResponsesReasoningDoneEvent$inboundSchema,
  OpenResponsesReasoningDoneEvent$Outbound,
  OpenResponsesReasoningDoneEvent$outboundSchema,
} from "./openresponsesreasoningdoneevent.js";
import {
  OpenResponsesReasoningSummaryPartAddedEvent,
  OpenResponsesReasoningSummaryPartAddedEvent$inboundSchema,
  OpenResponsesReasoningSummaryPartAddedEvent$Outbound,
  OpenResponsesReasoningSummaryPartAddedEvent$outboundSchema,
} from "./openresponsesreasoningsummarypartaddedevent.js";
import {
  OpenResponsesReasoningSummaryTextDeltaEvent,
  OpenResponsesReasoningSummaryTextDeltaEvent$inboundSchema,
  OpenResponsesReasoningSummaryTextDeltaEvent$Outbound,
  OpenResponsesReasoningSummaryTextDeltaEvent$outboundSchema,
} from "./openresponsesreasoningsummarytextdeltaevent.js";
import {
  OpenResponsesReasoningSummaryTextDoneEvent,
  OpenResponsesReasoningSummaryTextDoneEvent$inboundSchema,
  OpenResponsesReasoningSummaryTextDoneEvent$Outbound,
  OpenResponsesReasoningSummaryTextDoneEvent$outboundSchema,
} from "./openresponsesreasoningsummarytextdoneevent.js";
import {
  ReasoningSummaryText,
  ReasoningSummaryText$inboundSchema,
  ReasoningSummaryText$Outbound,
  ReasoningSummaryText$outboundSchema,
} from "./reasoningsummarytext.js";
import {
  ReasoningTextContent,
  ReasoningTextContent$inboundSchema,
  ReasoningTextContent$Outbound,
  ReasoningTextContent$outboundSchema,
} from "./reasoningtextcontent.js";
import {
  ResponseOutputText,
  ResponseOutputText$inboundSchema,
  ResponseOutputText$Outbound,
  ResponseOutputText$outboundSchema,
} from "./responseoutputtext.js";
import {
  ResponsesOutputItem,
  ResponsesOutputItem$inboundSchema,
  ResponsesOutputItem$Outbound,
  ResponsesOutputItem$outboundSchema,
} from "./responsesoutputitem.js";

export const TypeResponseReasoningSummaryPartDone = {
  ResponseReasoningSummaryPartDone: "response.reasoning_summary_part.done",
} as const;
export type TypeResponseReasoningSummaryPartDone = ClosedEnum<
  typeof TypeResponseReasoningSummaryPartDone
>;

/**
 * Event emitted when a reasoning summary part is complete
 */
export type OpenResponsesStreamEventResponseReasoningSummaryPartDone = {
  type: TypeResponseReasoningSummaryPartDone;
  outputIndex: number;
  itemId: string;
  summaryIndex: number;
  part: ReasoningSummaryText;
  sequenceNumber: number;
};

export const TypeResponseFunctionCallArgumentsDone = {
  ResponseFunctionCallArgumentsDone: "response.function_call_arguments.done",
} as const;
export type TypeResponseFunctionCallArgumentsDone = ClosedEnum<
  typeof TypeResponseFunctionCallArgumentsDone
>;

/**
 * Event emitted when function call arguments streaming is complete
 */
export type OpenResponsesStreamEventResponseFunctionCallArgumentsDone = {
  type: TypeResponseFunctionCallArgumentsDone;
  itemId: string;
  outputIndex: number;
  name: string;
  arguments: string;
  sequenceNumber: number;
};

export const TypeResponseFunctionCallArgumentsDelta = {
  ResponseFunctionCallArgumentsDelta: "response.function_call_arguments.delta",
} as const;
export type TypeResponseFunctionCallArgumentsDelta = ClosedEnum<
  typeof TypeResponseFunctionCallArgumentsDelta
>;

/**
 * Event emitted when function call arguments are being streamed
 */
export type OpenResponsesStreamEventResponseFunctionCallArgumentsDelta = {
  type: TypeResponseFunctionCallArgumentsDelta;
  itemId: string;
  outputIndex: number;
  delta: string;
  sequenceNumber: number;
};

export const TypeResponseOutputTextAnnotationAdded = {
  ResponseOutputTextAnnotationAdded: "response.output_text.annotation.added",
} as const;
export type TypeResponseOutputTextAnnotationAdded = ClosedEnum<
  typeof TypeResponseOutputTextAnnotationAdded
>;

/**
 * Event emitted when a text annotation is added to output
 */
export type OpenResponsesStreamEventResponseOutputTextAnnotationAdded = {
  type: TypeResponseOutputTextAnnotationAdded;
  outputIndex: number;
  itemId: string;
  contentIndex: number;
  sequenceNumber: number;
  annotationIndex: number;
  annotation: OpenAIResponsesAnnotation;
};

export const TypeResponseRefusalDone = {
  ResponseRefusalDone: "response.refusal.done",
} as const;
export type TypeResponseRefusalDone = ClosedEnum<
  typeof TypeResponseRefusalDone
>;

/**
 * Event emitted when refusal streaming is complete
 */
export type OpenResponsesStreamEventResponseRefusalDone = {
  type: TypeResponseRefusalDone;
  outputIndex: number;
  itemId: string;
  contentIndex: number;
  refusal: string;
  sequenceNumber: number;
};

export const TypeResponseRefusalDelta = {
  ResponseRefusalDelta: "response.refusal.delta",
} as const;
export type TypeResponseRefusalDelta = ClosedEnum<
  typeof TypeResponseRefusalDelta
>;

/**
 * Event emitted when a refusal delta is streamed
 */
export type OpenResponsesStreamEventResponseRefusalDelta = {
  type: TypeResponseRefusalDelta;
  outputIndex: number;
  itemId: string;
  contentIndex: number;
  delta: string;
  sequenceNumber: number;
};

export const TypeResponseOutputTextDone = {
  ResponseOutputTextDone: "response.output_text.done",
} as const;
export type TypeResponseOutputTextDone = ClosedEnum<
  typeof TypeResponseOutputTextDone
>;

/**
 * Event emitted when text streaming is complete
 */
export type OpenResponsesStreamEventResponseOutputTextDone = {
  type: TypeResponseOutputTextDone;
  outputIndex: number;
  itemId: string;
  contentIndex: number;
  text: string;
  sequenceNumber: number;
  logprobs: Array<OpenResponsesLogProbs>;
};

export const TypeResponseOutputTextDelta = {
  ResponseOutputTextDelta: "response.output_text.delta",
} as const;
export type TypeResponseOutputTextDelta = ClosedEnum<
  typeof TypeResponseOutputTextDelta
>;

/**
 * Event emitted when a text delta is streamed
 */
export type OpenResponsesStreamEventResponseOutputTextDelta = {
  type: TypeResponseOutputTextDelta;
  logprobs: Array<OpenResponsesLogProbs>;
  outputIndex: number;
  itemId: string;
  contentIndex: number;
  delta: string;
  sequenceNumber: number;
};

export const TypeResponseContentPartDone = {
  ResponseContentPartDone: "response.content_part.done",
} as const;
export type TypeResponseContentPartDone = ClosedEnum<
  typeof TypeResponseContentPartDone
>;

export type Part2 =
  | ResponseOutputText
  | ReasoningTextContent
  | OpenAIResponsesRefusalContent;

/**
 * Event emitted when a content part is complete
 */
export type OpenResponsesStreamEventResponseContentPartDone = {
  type: TypeResponseContentPartDone;
  outputIndex: number;
  itemId: string;
  contentIndex: number;
  part:
    | ResponseOutputText
    | ReasoningTextContent
    | OpenAIResponsesRefusalContent;
  sequenceNumber: number;
};

export const TypeResponseContentPartAdded = {
  ResponseContentPartAdded: "response.content_part.added",
} as const;
export type TypeResponseContentPartAdded = ClosedEnum<
  typeof TypeResponseContentPartAdded
>;

export type Part1 =
  | ResponseOutputText
  | ReasoningTextContent
  | OpenAIResponsesRefusalContent;

/**
 * Event emitted when a new content part is added to an output item
 */
export type OpenResponsesStreamEventResponseContentPartAdded = {
  type: TypeResponseContentPartAdded;
  outputIndex: number;
  itemId: string;
  contentIndex: number;
  part:
    | ResponseOutputText
    | ReasoningTextContent
    | OpenAIResponsesRefusalContent;
  sequenceNumber: number;
};

export const TypeResponseOutputItemDone = {
  ResponseOutputItemDone: "response.output_item.done",
} as const;
export type TypeResponseOutputItemDone = ClosedEnum<
  typeof TypeResponseOutputItemDone
>;

/**
 * Event emitted when an output item is complete
 */
export type OpenResponsesStreamEventResponseOutputItemDone = {
  type: TypeResponseOutputItemDone;
  outputIndex: number;
  /**
   * An output item from the response
   */
  item: ResponsesOutputItem;
  sequenceNumber: number;
};

export const TypeResponseOutputItemAdded = {
  ResponseOutputItemAdded: "response.output_item.added",
} as const;
export type TypeResponseOutputItemAdded = ClosedEnum<
  typeof TypeResponseOutputItemAdded
>;

/**
 * Event emitted when a new output item is added to the response
 */
export type OpenResponsesStreamEventResponseOutputItemAdded = {
  type: TypeResponseOutputItemAdded;
  outputIndex: number;
  /**
   * An output item from the response
   */
  item: ResponsesOutputItem;
  sequenceNumber: number;
};

export const TypeResponseFailed = {
  ResponseFailed: "response.failed",
} as const;
export type TypeResponseFailed = ClosedEnum<typeof TypeResponseFailed>;

/**
 * Event emitted when a response has failed
 */
export type OpenResponsesStreamEventResponseFailed = {
  type: TypeResponseFailed;
  /**
   * Complete non-streaming response from the Responses API
   */
  response: OpenResponsesNonStreamingResponse;
  sequenceNumber: number;
};

export const TypeResponseIncomplete = {
  ResponseIncomplete: "response.incomplete",
} as const;
export type TypeResponseIncomplete = ClosedEnum<typeof TypeResponseIncomplete>;

/**
 * Event emitted when a response is incomplete
 */
export type OpenResponsesStreamEventResponseIncomplete = {
  type: TypeResponseIncomplete;
  /**
   * Complete non-streaming response from the Responses API
   */
  response: OpenResponsesNonStreamingResponse;
  sequenceNumber: number;
};

export const TypeResponseCompleted = {
  ResponseCompleted: "response.completed",
} as const;
export type TypeResponseCompleted = ClosedEnum<typeof TypeResponseCompleted>;

/**
 * Event emitted when a response has completed successfully
 */
export type OpenResponsesStreamEventResponseCompleted = {
  type: TypeResponseCompleted;
  /**
   * Complete non-streaming response from the Responses API
   */
  response: OpenResponsesNonStreamingResponse;
  sequenceNumber: number;
};

export const TypeResponseInProgress = {
  ResponseInProgress: "response.in_progress",
} as const;
export type TypeResponseInProgress = ClosedEnum<typeof TypeResponseInProgress>;

/**
 * Event emitted when a response is in progress
 */
export type OpenResponsesStreamEventResponseInProgress = {
  type: TypeResponseInProgress;
  /**
   * Complete non-streaming response from the Responses API
   */
  response: OpenResponsesNonStreamingResponse;
  sequenceNumber: number;
};

export const TypeResponseCreated = {
  ResponseCreated: "response.created",
} as const;
export type TypeResponseCreated = ClosedEnum<typeof TypeResponseCreated>;

/**
 * Event emitted when a response is created
 */
export type OpenResponsesStreamEventResponseCreated = {
  type: TypeResponseCreated;
  /**
   * Complete non-streaming response from the Responses API
   */
  response: OpenResponsesNonStreamingResponse;
  sequenceNumber: number;
};

/**
 * Union of all possible event types emitted during response streaming
 */
export type OpenResponsesStreamEvent =
  | OpenResponsesStreamEventResponseOutputTextDelta
  | OpenResponsesStreamEventResponseOutputTextDone
  | OpenResponsesStreamEventResponseOutputTextAnnotationAdded
  | OpenResponsesStreamEventResponseContentPartAdded
  | OpenResponsesStreamEventResponseContentPartDone
  | OpenResponsesStreamEventResponseRefusalDelta
  | OpenResponsesStreamEventResponseRefusalDone
  | OpenResponsesStreamEventResponseFunctionCallArgumentsDone
  | OpenResponsesReasoningDeltaEvent
  | OpenResponsesReasoningDoneEvent
  | OpenResponsesReasoningSummaryPartAddedEvent
  | OpenResponsesStreamEventResponseReasoningSummaryPartDone
  | OpenResponsesReasoningSummaryTextDeltaEvent
  | OpenResponsesReasoningSummaryTextDoneEvent
  | OpenResponsesImageGenCallPartialImage
  | OpenResponsesErrorEvent
  | OpenResponsesStreamEventResponseFunctionCallArgumentsDelta
  | OpenResponsesStreamEventResponseOutputItemAdded
  | OpenResponsesStreamEventResponseOutputItemDone
  | OpenResponsesImageGenCallInProgress
  | OpenResponsesImageGenCallGenerating
  | OpenResponsesImageGenCallCompleted
  | OpenResponsesStreamEventResponseCreated
  | OpenResponsesStreamEventResponseInProgress
  | OpenResponsesStreamEventResponseCompleted
  | OpenResponsesStreamEventResponseIncomplete
  | OpenResponsesStreamEventResponseFailed;

/** @internal */
export const TypeResponseReasoningSummaryPartDone$inboundSchema:
  z.ZodNativeEnum<typeof TypeResponseReasoningSummaryPartDone> = z.nativeEnum(
    TypeResponseReasoningSummaryPartDone,
  );

/** @internal */
export const TypeResponseReasoningSummaryPartDone$outboundSchema:
  z.ZodNativeEnum<typeof TypeResponseReasoningSummaryPartDone> =
    TypeResponseReasoningSummaryPartDone$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeResponseReasoningSummaryPartDone$ {
  /** @deprecated use `TypeResponseReasoningSummaryPartDone$inboundSchema` instead. */
  export const inboundSchema =
    TypeResponseReasoningSummaryPartDone$inboundSchema;
  /** @deprecated use `TypeResponseReasoningSummaryPartDone$outboundSchema` instead. */
  export const outboundSchema =
    TypeResponseReasoningSummaryPartDone$outboundSchema;
}

/** @internal */
export const OpenResponsesStreamEventResponseReasoningSummaryPartDone$inboundSchema:
  z.ZodType<
    OpenResponsesStreamEventResponseReasoningSummaryPartDone,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: TypeResponseReasoningSummaryPartDone$inboundSchema,
    output_index: z.number(),
    item_id: z.string(),
    summary_index: z.number(),
    part: ReasoningSummaryText$inboundSchema,
    sequence_number: z.number(),
  }).transform((v) => {
    return remap$(v, {
      "output_index": "outputIndex",
      "item_id": "itemId",
      "summary_index": "summaryIndex",
      "sequence_number": "sequenceNumber",
    });
  });

/** @internal */
export type OpenResponsesStreamEventResponseReasoningSummaryPartDone$Outbound =
  {
    type: string;
    output_index: number;
    item_id: string;
    summary_index: number;
    part: ReasoningSummaryText$Outbound;
    sequence_number: number;
  };

/** @internal */
export const OpenResponsesStreamEventResponseReasoningSummaryPartDone$outboundSchema:
  z.ZodType<
    OpenResponsesStreamEventResponseReasoningSummaryPartDone$Outbound,
    z.ZodTypeDef,
    OpenResponsesStreamEventResponseReasoningSummaryPartDone
  > = z.object({
    type: TypeResponseReasoningSummaryPartDone$outboundSchema,
    outputIndex: z.number(),
    itemId: z.string(),
    summaryIndex: z.number(),
    part: ReasoningSummaryText$outboundSchema,
    sequenceNumber: z.number(),
  }).transform((v) => {
    return remap$(v, {
      outputIndex: "output_index",
      itemId: "item_id",
      summaryIndex: "summary_index",
      sequenceNumber: "sequence_number",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesStreamEventResponseReasoningSummaryPartDone$ {
  /** @deprecated use `OpenResponsesStreamEventResponseReasoningSummaryPartDone$inboundSchema` instead. */
  export const inboundSchema =
    OpenResponsesStreamEventResponseReasoningSummaryPartDone$inboundSchema;
  /** @deprecated use `OpenResponsesStreamEventResponseReasoningSummaryPartDone$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesStreamEventResponseReasoningSummaryPartDone$outboundSchema;
  /** @deprecated use `OpenResponsesStreamEventResponseReasoningSummaryPartDone$Outbound` instead. */
  export type Outbound =
    OpenResponsesStreamEventResponseReasoningSummaryPartDone$Outbound;
}

export function openResponsesStreamEventResponseReasoningSummaryPartDoneToJSON(
  openResponsesStreamEventResponseReasoningSummaryPartDone:
    OpenResponsesStreamEventResponseReasoningSummaryPartDone,
): string {
  return JSON.stringify(
    OpenResponsesStreamEventResponseReasoningSummaryPartDone$outboundSchema
      .parse(openResponsesStreamEventResponseReasoningSummaryPartDone),
  );
}

export function openResponsesStreamEventResponseReasoningSummaryPartDoneFromJSON(
  jsonString: string,
): SafeParseResult<
  OpenResponsesStreamEventResponseReasoningSummaryPartDone,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      OpenResponsesStreamEventResponseReasoningSummaryPartDone$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'OpenResponsesStreamEventResponseReasoningSummaryPartDone' from JSON`,
  );
}

/** @internal */
export const TypeResponseFunctionCallArgumentsDone$inboundSchema:
  z.ZodNativeEnum<typeof TypeResponseFunctionCallArgumentsDone> = z.nativeEnum(
    TypeResponseFunctionCallArgumentsDone,
  );

/** @internal */
export const TypeResponseFunctionCallArgumentsDone$outboundSchema:
  z.ZodNativeEnum<typeof TypeResponseFunctionCallArgumentsDone> =
    TypeResponseFunctionCallArgumentsDone$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeResponseFunctionCallArgumentsDone$ {
  /** @deprecated use `TypeResponseFunctionCallArgumentsDone$inboundSchema` instead. */
  export const inboundSchema =
    TypeResponseFunctionCallArgumentsDone$inboundSchema;
  /** @deprecated use `TypeResponseFunctionCallArgumentsDone$outboundSchema` instead. */
  export const outboundSchema =
    TypeResponseFunctionCallArgumentsDone$outboundSchema;
}

/** @internal */
export const OpenResponsesStreamEventResponseFunctionCallArgumentsDone$inboundSchema:
  z.ZodType<
    OpenResponsesStreamEventResponseFunctionCallArgumentsDone,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: TypeResponseFunctionCallArgumentsDone$inboundSchema,
    item_id: z.string(),
    output_index: z.number(),
    name: z.string(),
    arguments: z.string(),
    sequence_number: z.number(),
  }).transform((v) => {
    return remap$(v, {
      "item_id": "itemId",
      "output_index": "outputIndex",
      "sequence_number": "sequenceNumber",
    });
  });

/** @internal */
export type OpenResponsesStreamEventResponseFunctionCallArgumentsDone$Outbound =
  {
    type: string;
    item_id: string;
    output_index: number;
    name: string;
    arguments: string;
    sequence_number: number;
  };

/** @internal */
export const OpenResponsesStreamEventResponseFunctionCallArgumentsDone$outboundSchema:
  z.ZodType<
    OpenResponsesStreamEventResponseFunctionCallArgumentsDone$Outbound,
    z.ZodTypeDef,
    OpenResponsesStreamEventResponseFunctionCallArgumentsDone
  > = z.object({
    type: TypeResponseFunctionCallArgumentsDone$outboundSchema,
    itemId: z.string(),
    outputIndex: z.number(),
    name: z.string(),
    arguments: z.string(),
    sequenceNumber: z.number(),
  }).transform((v) => {
    return remap$(v, {
      itemId: "item_id",
      outputIndex: "output_index",
      sequenceNumber: "sequence_number",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesStreamEventResponseFunctionCallArgumentsDone$ {
  /** @deprecated use `OpenResponsesStreamEventResponseFunctionCallArgumentsDone$inboundSchema` instead. */
  export const inboundSchema =
    OpenResponsesStreamEventResponseFunctionCallArgumentsDone$inboundSchema;
  /** @deprecated use `OpenResponsesStreamEventResponseFunctionCallArgumentsDone$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesStreamEventResponseFunctionCallArgumentsDone$outboundSchema;
  /** @deprecated use `OpenResponsesStreamEventResponseFunctionCallArgumentsDone$Outbound` instead. */
  export type Outbound =
    OpenResponsesStreamEventResponseFunctionCallArgumentsDone$Outbound;
}

export function openResponsesStreamEventResponseFunctionCallArgumentsDoneToJSON(
  openResponsesStreamEventResponseFunctionCallArgumentsDone:
    OpenResponsesStreamEventResponseFunctionCallArgumentsDone,
): string {
  return JSON.stringify(
    OpenResponsesStreamEventResponseFunctionCallArgumentsDone$outboundSchema
      .parse(openResponsesStreamEventResponseFunctionCallArgumentsDone),
  );
}

export function openResponsesStreamEventResponseFunctionCallArgumentsDoneFromJSON(
  jsonString: string,
): SafeParseResult<
  OpenResponsesStreamEventResponseFunctionCallArgumentsDone,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      OpenResponsesStreamEventResponseFunctionCallArgumentsDone$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'OpenResponsesStreamEventResponseFunctionCallArgumentsDone' from JSON`,
  );
}

/** @internal */
export const TypeResponseFunctionCallArgumentsDelta$inboundSchema:
  z.ZodNativeEnum<typeof TypeResponseFunctionCallArgumentsDelta> = z.nativeEnum(
    TypeResponseFunctionCallArgumentsDelta,
  );

/** @internal */
export const TypeResponseFunctionCallArgumentsDelta$outboundSchema:
  z.ZodNativeEnum<typeof TypeResponseFunctionCallArgumentsDelta> =
    TypeResponseFunctionCallArgumentsDelta$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeResponseFunctionCallArgumentsDelta$ {
  /** @deprecated use `TypeResponseFunctionCallArgumentsDelta$inboundSchema` instead. */
  export const inboundSchema =
    TypeResponseFunctionCallArgumentsDelta$inboundSchema;
  /** @deprecated use `TypeResponseFunctionCallArgumentsDelta$outboundSchema` instead. */
  export const outboundSchema =
    TypeResponseFunctionCallArgumentsDelta$outboundSchema;
}

/** @internal */
export const OpenResponsesStreamEventResponseFunctionCallArgumentsDelta$inboundSchema:
  z.ZodType<
    OpenResponsesStreamEventResponseFunctionCallArgumentsDelta,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: TypeResponseFunctionCallArgumentsDelta$inboundSchema,
    item_id: z.string(),
    output_index: z.number(),
    delta: z.string(),
    sequence_number: z.number(),
  }).transform((v) => {
    return remap$(v, {
      "item_id": "itemId",
      "output_index": "outputIndex",
      "sequence_number": "sequenceNumber",
    });
  });

/** @internal */
export type OpenResponsesStreamEventResponseFunctionCallArgumentsDelta$Outbound =
  {
    type: string;
    item_id: string;
    output_index: number;
    delta: string;
    sequence_number: number;
  };

/** @internal */
export const OpenResponsesStreamEventResponseFunctionCallArgumentsDelta$outboundSchema:
  z.ZodType<
    OpenResponsesStreamEventResponseFunctionCallArgumentsDelta$Outbound,
    z.ZodTypeDef,
    OpenResponsesStreamEventResponseFunctionCallArgumentsDelta
  > = z.object({
    type: TypeResponseFunctionCallArgumentsDelta$outboundSchema,
    itemId: z.string(),
    outputIndex: z.number(),
    delta: z.string(),
    sequenceNumber: z.number(),
  }).transform((v) => {
    return remap$(v, {
      itemId: "item_id",
      outputIndex: "output_index",
      sequenceNumber: "sequence_number",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesStreamEventResponseFunctionCallArgumentsDelta$ {
  /** @deprecated use `OpenResponsesStreamEventResponseFunctionCallArgumentsDelta$inboundSchema` instead. */
  export const inboundSchema =
    OpenResponsesStreamEventResponseFunctionCallArgumentsDelta$inboundSchema;
  /** @deprecated use `OpenResponsesStreamEventResponseFunctionCallArgumentsDelta$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesStreamEventResponseFunctionCallArgumentsDelta$outboundSchema;
  /** @deprecated use `OpenResponsesStreamEventResponseFunctionCallArgumentsDelta$Outbound` instead. */
  export type Outbound =
    OpenResponsesStreamEventResponseFunctionCallArgumentsDelta$Outbound;
}

export function openResponsesStreamEventResponseFunctionCallArgumentsDeltaToJSON(
  openResponsesStreamEventResponseFunctionCallArgumentsDelta:
    OpenResponsesStreamEventResponseFunctionCallArgumentsDelta,
): string {
  return JSON.stringify(
    OpenResponsesStreamEventResponseFunctionCallArgumentsDelta$outboundSchema
      .parse(openResponsesStreamEventResponseFunctionCallArgumentsDelta),
  );
}

export function openResponsesStreamEventResponseFunctionCallArgumentsDeltaFromJSON(
  jsonString: string,
): SafeParseResult<
  OpenResponsesStreamEventResponseFunctionCallArgumentsDelta,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      OpenResponsesStreamEventResponseFunctionCallArgumentsDelta$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'OpenResponsesStreamEventResponseFunctionCallArgumentsDelta' from JSON`,
  );
}

/** @internal */
export const TypeResponseOutputTextAnnotationAdded$inboundSchema:
  z.ZodNativeEnum<typeof TypeResponseOutputTextAnnotationAdded> = z.nativeEnum(
    TypeResponseOutputTextAnnotationAdded,
  );

/** @internal */
export const TypeResponseOutputTextAnnotationAdded$outboundSchema:
  z.ZodNativeEnum<typeof TypeResponseOutputTextAnnotationAdded> =
    TypeResponseOutputTextAnnotationAdded$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeResponseOutputTextAnnotationAdded$ {
  /** @deprecated use `TypeResponseOutputTextAnnotationAdded$inboundSchema` instead. */
  export const inboundSchema =
    TypeResponseOutputTextAnnotationAdded$inboundSchema;
  /** @deprecated use `TypeResponseOutputTextAnnotationAdded$outboundSchema` instead. */
  export const outboundSchema =
    TypeResponseOutputTextAnnotationAdded$outboundSchema;
}

/** @internal */
export const OpenResponsesStreamEventResponseOutputTextAnnotationAdded$inboundSchema:
  z.ZodType<
    OpenResponsesStreamEventResponseOutputTextAnnotationAdded,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: TypeResponseOutputTextAnnotationAdded$inboundSchema,
    output_index: z.number(),
    item_id: z.string(),
    content_index: z.number(),
    sequence_number: z.number(),
    annotation_index: z.number(),
    annotation: OpenAIResponsesAnnotation$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "output_index": "outputIndex",
      "item_id": "itemId",
      "content_index": "contentIndex",
      "sequence_number": "sequenceNumber",
      "annotation_index": "annotationIndex",
    });
  });

/** @internal */
export type OpenResponsesStreamEventResponseOutputTextAnnotationAdded$Outbound =
  {
    type: string;
    output_index: number;
    item_id: string;
    content_index: number;
    sequence_number: number;
    annotation_index: number;
    annotation: OpenAIResponsesAnnotation$Outbound;
  };

/** @internal */
export const OpenResponsesStreamEventResponseOutputTextAnnotationAdded$outboundSchema:
  z.ZodType<
    OpenResponsesStreamEventResponseOutputTextAnnotationAdded$Outbound,
    z.ZodTypeDef,
    OpenResponsesStreamEventResponseOutputTextAnnotationAdded
  > = z.object({
    type: TypeResponseOutputTextAnnotationAdded$outboundSchema,
    outputIndex: z.number(),
    itemId: z.string(),
    contentIndex: z.number(),
    sequenceNumber: z.number(),
    annotationIndex: z.number(),
    annotation: OpenAIResponsesAnnotation$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      outputIndex: "output_index",
      itemId: "item_id",
      contentIndex: "content_index",
      sequenceNumber: "sequence_number",
      annotationIndex: "annotation_index",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesStreamEventResponseOutputTextAnnotationAdded$ {
  /** @deprecated use `OpenResponsesStreamEventResponseOutputTextAnnotationAdded$inboundSchema` instead. */
  export const inboundSchema =
    OpenResponsesStreamEventResponseOutputTextAnnotationAdded$inboundSchema;
  /** @deprecated use `OpenResponsesStreamEventResponseOutputTextAnnotationAdded$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesStreamEventResponseOutputTextAnnotationAdded$outboundSchema;
  /** @deprecated use `OpenResponsesStreamEventResponseOutputTextAnnotationAdded$Outbound` instead. */
  export type Outbound =
    OpenResponsesStreamEventResponseOutputTextAnnotationAdded$Outbound;
}

export function openResponsesStreamEventResponseOutputTextAnnotationAddedToJSON(
  openResponsesStreamEventResponseOutputTextAnnotationAdded:
    OpenResponsesStreamEventResponseOutputTextAnnotationAdded,
): string {
  return JSON.stringify(
    OpenResponsesStreamEventResponseOutputTextAnnotationAdded$outboundSchema
      .parse(openResponsesStreamEventResponseOutputTextAnnotationAdded),
  );
}

export function openResponsesStreamEventResponseOutputTextAnnotationAddedFromJSON(
  jsonString: string,
): SafeParseResult<
  OpenResponsesStreamEventResponseOutputTextAnnotationAdded,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      OpenResponsesStreamEventResponseOutputTextAnnotationAdded$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'OpenResponsesStreamEventResponseOutputTextAnnotationAdded' from JSON`,
  );
}

/** @internal */
export const TypeResponseRefusalDone$inboundSchema: z.ZodNativeEnum<
  typeof TypeResponseRefusalDone
> = z.nativeEnum(TypeResponseRefusalDone);

/** @internal */
export const TypeResponseRefusalDone$outboundSchema: z.ZodNativeEnum<
  typeof TypeResponseRefusalDone
> = TypeResponseRefusalDone$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeResponseRefusalDone$ {
  /** @deprecated use `TypeResponseRefusalDone$inboundSchema` instead. */
  export const inboundSchema = TypeResponseRefusalDone$inboundSchema;
  /** @deprecated use `TypeResponseRefusalDone$outboundSchema` instead. */
  export const outboundSchema = TypeResponseRefusalDone$outboundSchema;
}

/** @internal */
export const OpenResponsesStreamEventResponseRefusalDone$inboundSchema:
  z.ZodType<
    OpenResponsesStreamEventResponseRefusalDone,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: TypeResponseRefusalDone$inboundSchema,
    output_index: z.number(),
    item_id: z.string(),
    content_index: z.number(),
    refusal: z.string(),
    sequence_number: z.number(),
  }).transform((v) => {
    return remap$(v, {
      "output_index": "outputIndex",
      "item_id": "itemId",
      "content_index": "contentIndex",
      "sequence_number": "sequenceNumber",
    });
  });

/** @internal */
export type OpenResponsesStreamEventResponseRefusalDone$Outbound = {
  type: string;
  output_index: number;
  item_id: string;
  content_index: number;
  refusal: string;
  sequence_number: number;
};

/** @internal */
export const OpenResponsesStreamEventResponseRefusalDone$outboundSchema:
  z.ZodType<
    OpenResponsesStreamEventResponseRefusalDone$Outbound,
    z.ZodTypeDef,
    OpenResponsesStreamEventResponseRefusalDone
  > = z.object({
    type: TypeResponseRefusalDone$outboundSchema,
    outputIndex: z.number(),
    itemId: z.string(),
    contentIndex: z.number(),
    refusal: z.string(),
    sequenceNumber: z.number(),
  }).transform((v) => {
    return remap$(v, {
      outputIndex: "output_index",
      itemId: "item_id",
      contentIndex: "content_index",
      sequenceNumber: "sequence_number",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesStreamEventResponseRefusalDone$ {
  /** @deprecated use `OpenResponsesStreamEventResponseRefusalDone$inboundSchema` instead. */
  export const inboundSchema =
    OpenResponsesStreamEventResponseRefusalDone$inboundSchema;
  /** @deprecated use `OpenResponsesStreamEventResponseRefusalDone$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesStreamEventResponseRefusalDone$outboundSchema;
  /** @deprecated use `OpenResponsesStreamEventResponseRefusalDone$Outbound` instead. */
  export type Outbound = OpenResponsesStreamEventResponseRefusalDone$Outbound;
}

export function openResponsesStreamEventResponseRefusalDoneToJSON(
  openResponsesStreamEventResponseRefusalDone:
    OpenResponsesStreamEventResponseRefusalDone,
): string {
  return JSON.stringify(
    OpenResponsesStreamEventResponseRefusalDone$outboundSchema.parse(
      openResponsesStreamEventResponseRefusalDone,
    ),
  );
}

export function openResponsesStreamEventResponseRefusalDoneFromJSON(
  jsonString: string,
): SafeParseResult<
  OpenResponsesStreamEventResponseRefusalDone,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      OpenResponsesStreamEventResponseRefusalDone$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'OpenResponsesStreamEventResponseRefusalDone' from JSON`,
  );
}

/** @internal */
export const TypeResponseRefusalDelta$inboundSchema: z.ZodNativeEnum<
  typeof TypeResponseRefusalDelta
> = z.nativeEnum(TypeResponseRefusalDelta);

/** @internal */
export const TypeResponseRefusalDelta$outboundSchema: z.ZodNativeEnum<
  typeof TypeResponseRefusalDelta
> = TypeResponseRefusalDelta$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeResponseRefusalDelta$ {
  /** @deprecated use `TypeResponseRefusalDelta$inboundSchema` instead. */
  export const inboundSchema = TypeResponseRefusalDelta$inboundSchema;
  /** @deprecated use `TypeResponseRefusalDelta$outboundSchema` instead. */
  export const outboundSchema = TypeResponseRefusalDelta$outboundSchema;
}

/** @internal */
export const OpenResponsesStreamEventResponseRefusalDelta$inboundSchema:
  z.ZodType<
    OpenResponsesStreamEventResponseRefusalDelta,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: TypeResponseRefusalDelta$inboundSchema,
    output_index: z.number(),
    item_id: z.string(),
    content_index: z.number(),
    delta: z.string(),
    sequence_number: z.number(),
  }).transform((v) => {
    return remap$(v, {
      "output_index": "outputIndex",
      "item_id": "itemId",
      "content_index": "contentIndex",
      "sequence_number": "sequenceNumber",
    });
  });

/** @internal */
export type OpenResponsesStreamEventResponseRefusalDelta$Outbound = {
  type: string;
  output_index: number;
  item_id: string;
  content_index: number;
  delta: string;
  sequence_number: number;
};

/** @internal */
export const OpenResponsesStreamEventResponseRefusalDelta$outboundSchema:
  z.ZodType<
    OpenResponsesStreamEventResponseRefusalDelta$Outbound,
    z.ZodTypeDef,
    OpenResponsesStreamEventResponseRefusalDelta
  > = z.object({
    type: TypeResponseRefusalDelta$outboundSchema,
    outputIndex: z.number(),
    itemId: z.string(),
    contentIndex: z.number(),
    delta: z.string(),
    sequenceNumber: z.number(),
  }).transform((v) => {
    return remap$(v, {
      outputIndex: "output_index",
      itemId: "item_id",
      contentIndex: "content_index",
      sequenceNumber: "sequence_number",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesStreamEventResponseRefusalDelta$ {
  /** @deprecated use `OpenResponsesStreamEventResponseRefusalDelta$inboundSchema` instead. */
  export const inboundSchema =
    OpenResponsesStreamEventResponseRefusalDelta$inboundSchema;
  /** @deprecated use `OpenResponsesStreamEventResponseRefusalDelta$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesStreamEventResponseRefusalDelta$outboundSchema;
  /** @deprecated use `OpenResponsesStreamEventResponseRefusalDelta$Outbound` instead. */
  export type Outbound = OpenResponsesStreamEventResponseRefusalDelta$Outbound;
}

export function openResponsesStreamEventResponseRefusalDeltaToJSON(
  openResponsesStreamEventResponseRefusalDelta:
    OpenResponsesStreamEventResponseRefusalDelta,
): string {
  return JSON.stringify(
    OpenResponsesStreamEventResponseRefusalDelta$outboundSchema.parse(
      openResponsesStreamEventResponseRefusalDelta,
    ),
  );
}

export function openResponsesStreamEventResponseRefusalDeltaFromJSON(
  jsonString: string,
): SafeParseResult<
  OpenResponsesStreamEventResponseRefusalDelta,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      OpenResponsesStreamEventResponseRefusalDelta$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'OpenResponsesStreamEventResponseRefusalDelta' from JSON`,
  );
}

/** @internal */
export const TypeResponseOutputTextDone$inboundSchema: z.ZodNativeEnum<
  typeof TypeResponseOutputTextDone
> = z.nativeEnum(TypeResponseOutputTextDone);

/** @internal */
export const TypeResponseOutputTextDone$outboundSchema: z.ZodNativeEnum<
  typeof TypeResponseOutputTextDone
> = TypeResponseOutputTextDone$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeResponseOutputTextDone$ {
  /** @deprecated use `TypeResponseOutputTextDone$inboundSchema` instead. */
  export const inboundSchema = TypeResponseOutputTextDone$inboundSchema;
  /** @deprecated use `TypeResponseOutputTextDone$outboundSchema` instead. */
  export const outboundSchema = TypeResponseOutputTextDone$outboundSchema;
}

/** @internal */
export const OpenResponsesStreamEventResponseOutputTextDone$inboundSchema:
  z.ZodType<
    OpenResponsesStreamEventResponseOutputTextDone,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: TypeResponseOutputTextDone$inboundSchema,
    output_index: z.number(),
    item_id: z.string(),
    content_index: z.number(),
    text: z.string(),
    sequence_number: z.number(),
    logprobs: z.array(OpenResponsesLogProbs$inboundSchema),
  }).transform((v) => {
    return remap$(v, {
      "output_index": "outputIndex",
      "item_id": "itemId",
      "content_index": "contentIndex",
      "sequence_number": "sequenceNumber",
    });
  });

/** @internal */
export type OpenResponsesStreamEventResponseOutputTextDone$Outbound = {
  type: string;
  output_index: number;
  item_id: string;
  content_index: number;
  text: string;
  sequence_number: number;
  logprobs: Array<OpenResponsesLogProbs$Outbound>;
};

/** @internal */
export const OpenResponsesStreamEventResponseOutputTextDone$outboundSchema:
  z.ZodType<
    OpenResponsesStreamEventResponseOutputTextDone$Outbound,
    z.ZodTypeDef,
    OpenResponsesStreamEventResponseOutputTextDone
  > = z.object({
    type: TypeResponseOutputTextDone$outboundSchema,
    outputIndex: z.number(),
    itemId: z.string(),
    contentIndex: z.number(),
    text: z.string(),
    sequenceNumber: z.number(),
    logprobs: z.array(OpenResponsesLogProbs$outboundSchema),
  }).transform((v) => {
    return remap$(v, {
      outputIndex: "output_index",
      itemId: "item_id",
      contentIndex: "content_index",
      sequenceNumber: "sequence_number",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesStreamEventResponseOutputTextDone$ {
  /** @deprecated use `OpenResponsesStreamEventResponseOutputTextDone$inboundSchema` instead. */
  export const inboundSchema =
    OpenResponsesStreamEventResponseOutputTextDone$inboundSchema;
  /** @deprecated use `OpenResponsesStreamEventResponseOutputTextDone$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesStreamEventResponseOutputTextDone$outboundSchema;
  /** @deprecated use `OpenResponsesStreamEventResponseOutputTextDone$Outbound` instead. */
  export type Outbound =
    OpenResponsesStreamEventResponseOutputTextDone$Outbound;
}

export function openResponsesStreamEventResponseOutputTextDoneToJSON(
  openResponsesStreamEventResponseOutputTextDone:
    OpenResponsesStreamEventResponseOutputTextDone,
): string {
  return JSON.stringify(
    OpenResponsesStreamEventResponseOutputTextDone$outboundSchema.parse(
      openResponsesStreamEventResponseOutputTextDone,
    ),
  );
}

export function openResponsesStreamEventResponseOutputTextDoneFromJSON(
  jsonString: string,
): SafeParseResult<
  OpenResponsesStreamEventResponseOutputTextDone,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      OpenResponsesStreamEventResponseOutputTextDone$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'OpenResponsesStreamEventResponseOutputTextDone' from JSON`,
  );
}

/** @internal */
export const TypeResponseOutputTextDelta$inboundSchema: z.ZodNativeEnum<
  typeof TypeResponseOutputTextDelta
> = z.nativeEnum(TypeResponseOutputTextDelta);

/** @internal */
export const TypeResponseOutputTextDelta$outboundSchema: z.ZodNativeEnum<
  typeof TypeResponseOutputTextDelta
> = TypeResponseOutputTextDelta$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeResponseOutputTextDelta$ {
  /** @deprecated use `TypeResponseOutputTextDelta$inboundSchema` instead. */
  export const inboundSchema = TypeResponseOutputTextDelta$inboundSchema;
  /** @deprecated use `TypeResponseOutputTextDelta$outboundSchema` instead. */
  export const outboundSchema = TypeResponseOutputTextDelta$outboundSchema;
}

/** @internal */
export const OpenResponsesStreamEventResponseOutputTextDelta$inboundSchema:
  z.ZodType<
    OpenResponsesStreamEventResponseOutputTextDelta,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: TypeResponseOutputTextDelta$inboundSchema,
    logprobs: z.array(OpenResponsesLogProbs$inboundSchema),
    output_index: z.number(),
    item_id: z.string(),
    content_index: z.number(),
    delta: z.string(),
    sequence_number: z.number(),
  }).transform((v) => {
    return remap$(v, {
      "output_index": "outputIndex",
      "item_id": "itemId",
      "content_index": "contentIndex",
      "sequence_number": "sequenceNumber",
    });
  });

/** @internal */
export type OpenResponsesStreamEventResponseOutputTextDelta$Outbound = {
  type: string;
  logprobs: Array<OpenResponsesLogProbs$Outbound>;
  output_index: number;
  item_id: string;
  content_index: number;
  delta: string;
  sequence_number: number;
};

/** @internal */
export const OpenResponsesStreamEventResponseOutputTextDelta$outboundSchema:
  z.ZodType<
    OpenResponsesStreamEventResponseOutputTextDelta$Outbound,
    z.ZodTypeDef,
    OpenResponsesStreamEventResponseOutputTextDelta
  > = z.object({
    type: TypeResponseOutputTextDelta$outboundSchema,
    logprobs: z.array(OpenResponsesLogProbs$outboundSchema),
    outputIndex: z.number(),
    itemId: z.string(),
    contentIndex: z.number(),
    delta: z.string(),
    sequenceNumber: z.number(),
  }).transform((v) => {
    return remap$(v, {
      outputIndex: "output_index",
      itemId: "item_id",
      contentIndex: "content_index",
      sequenceNumber: "sequence_number",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesStreamEventResponseOutputTextDelta$ {
  /** @deprecated use `OpenResponsesStreamEventResponseOutputTextDelta$inboundSchema` instead. */
  export const inboundSchema =
    OpenResponsesStreamEventResponseOutputTextDelta$inboundSchema;
  /** @deprecated use `OpenResponsesStreamEventResponseOutputTextDelta$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesStreamEventResponseOutputTextDelta$outboundSchema;
  /** @deprecated use `OpenResponsesStreamEventResponseOutputTextDelta$Outbound` instead. */
  export type Outbound =
    OpenResponsesStreamEventResponseOutputTextDelta$Outbound;
}

export function openResponsesStreamEventResponseOutputTextDeltaToJSON(
  openResponsesStreamEventResponseOutputTextDelta:
    OpenResponsesStreamEventResponseOutputTextDelta,
): string {
  return JSON.stringify(
    OpenResponsesStreamEventResponseOutputTextDelta$outboundSchema.parse(
      openResponsesStreamEventResponseOutputTextDelta,
    ),
  );
}

export function openResponsesStreamEventResponseOutputTextDeltaFromJSON(
  jsonString: string,
): SafeParseResult<
  OpenResponsesStreamEventResponseOutputTextDelta,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      OpenResponsesStreamEventResponseOutputTextDelta$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'OpenResponsesStreamEventResponseOutputTextDelta' from JSON`,
  );
}

/** @internal */
export const TypeResponseContentPartDone$inboundSchema: z.ZodNativeEnum<
  typeof TypeResponseContentPartDone
> = z.nativeEnum(TypeResponseContentPartDone);

/** @internal */
export const TypeResponseContentPartDone$outboundSchema: z.ZodNativeEnum<
  typeof TypeResponseContentPartDone
> = TypeResponseContentPartDone$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeResponseContentPartDone$ {
  /** @deprecated use `TypeResponseContentPartDone$inboundSchema` instead. */
  export const inboundSchema = TypeResponseContentPartDone$inboundSchema;
  /** @deprecated use `TypeResponseContentPartDone$outboundSchema` instead. */
  export const outboundSchema = TypeResponseContentPartDone$outboundSchema;
}

/** @internal */
export const Part2$inboundSchema: z.ZodType<Part2, z.ZodTypeDef, unknown> = z
  .union([
    ResponseOutputText$inboundSchema,
    ReasoningTextContent$inboundSchema,
    OpenAIResponsesRefusalContent$inboundSchema,
  ]);

/** @internal */
export type Part2$Outbound =
  | ResponseOutputText$Outbound
  | ReasoningTextContent$Outbound
  | OpenAIResponsesRefusalContent$Outbound;

/** @internal */
export const Part2$outboundSchema: z.ZodType<
  Part2$Outbound,
  z.ZodTypeDef,
  Part2
> = z.union([
  ResponseOutputText$outboundSchema,
  ReasoningTextContent$outboundSchema,
  OpenAIResponsesRefusalContent$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Part2$ {
  /** @deprecated use `Part2$inboundSchema` instead. */
  export const inboundSchema = Part2$inboundSchema;
  /** @deprecated use `Part2$outboundSchema` instead. */
  export const outboundSchema = Part2$outboundSchema;
  /** @deprecated use `Part2$Outbound` instead. */
  export type Outbound = Part2$Outbound;
}

export function part2ToJSON(part2: Part2): string {
  return JSON.stringify(Part2$outboundSchema.parse(part2));
}

export function part2FromJSON(
  jsonString: string,
): SafeParseResult<Part2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Part2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Part2' from JSON`,
  );
}

/** @internal */
export const OpenResponsesStreamEventResponseContentPartDone$inboundSchema:
  z.ZodType<
    OpenResponsesStreamEventResponseContentPartDone,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: TypeResponseContentPartDone$inboundSchema,
    output_index: z.number(),
    item_id: z.string(),
    content_index: z.number(),
    part: z.union([
      ResponseOutputText$inboundSchema,
      ReasoningTextContent$inboundSchema,
      OpenAIResponsesRefusalContent$inboundSchema,
    ]),
    sequence_number: z.number(),
  }).transform((v) => {
    return remap$(v, {
      "output_index": "outputIndex",
      "item_id": "itemId",
      "content_index": "contentIndex",
      "sequence_number": "sequenceNumber",
    });
  });

/** @internal */
export type OpenResponsesStreamEventResponseContentPartDone$Outbound = {
  type: string;
  output_index: number;
  item_id: string;
  content_index: number;
  part:
    | ResponseOutputText$Outbound
    | ReasoningTextContent$Outbound
    | OpenAIResponsesRefusalContent$Outbound;
  sequence_number: number;
};

/** @internal */
export const OpenResponsesStreamEventResponseContentPartDone$outboundSchema:
  z.ZodType<
    OpenResponsesStreamEventResponseContentPartDone$Outbound,
    z.ZodTypeDef,
    OpenResponsesStreamEventResponseContentPartDone
  > = z.object({
    type: TypeResponseContentPartDone$outboundSchema,
    outputIndex: z.number(),
    itemId: z.string(),
    contentIndex: z.number(),
    part: z.union([
      ResponseOutputText$outboundSchema,
      ReasoningTextContent$outboundSchema,
      OpenAIResponsesRefusalContent$outboundSchema,
    ]),
    sequenceNumber: z.number(),
  }).transform((v) => {
    return remap$(v, {
      outputIndex: "output_index",
      itemId: "item_id",
      contentIndex: "content_index",
      sequenceNumber: "sequence_number",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesStreamEventResponseContentPartDone$ {
  /** @deprecated use `OpenResponsesStreamEventResponseContentPartDone$inboundSchema` instead. */
  export const inboundSchema =
    OpenResponsesStreamEventResponseContentPartDone$inboundSchema;
  /** @deprecated use `OpenResponsesStreamEventResponseContentPartDone$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesStreamEventResponseContentPartDone$outboundSchema;
  /** @deprecated use `OpenResponsesStreamEventResponseContentPartDone$Outbound` instead. */
  export type Outbound =
    OpenResponsesStreamEventResponseContentPartDone$Outbound;
}

export function openResponsesStreamEventResponseContentPartDoneToJSON(
  openResponsesStreamEventResponseContentPartDone:
    OpenResponsesStreamEventResponseContentPartDone,
): string {
  return JSON.stringify(
    OpenResponsesStreamEventResponseContentPartDone$outboundSchema.parse(
      openResponsesStreamEventResponseContentPartDone,
    ),
  );
}

export function openResponsesStreamEventResponseContentPartDoneFromJSON(
  jsonString: string,
): SafeParseResult<
  OpenResponsesStreamEventResponseContentPartDone,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      OpenResponsesStreamEventResponseContentPartDone$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'OpenResponsesStreamEventResponseContentPartDone' from JSON`,
  );
}

/** @internal */
export const TypeResponseContentPartAdded$inboundSchema: z.ZodNativeEnum<
  typeof TypeResponseContentPartAdded
> = z.nativeEnum(TypeResponseContentPartAdded);

/** @internal */
export const TypeResponseContentPartAdded$outboundSchema: z.ZodNativeEnum<
  typeof TypeResponseContentPartAdded
> = TypeResponseContentPartAdded$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeResponseContentPartAdded$ {
  /** @deprecated use `TypeResponseContentPartAdded$inboundSchema` instead. */
  export const inboundSchema = TypeResponseContentPartAdded$inboundSchema;
  /** @deprecated use `TypeResponseContentPartAdded$outboundSchema` instead. */
  export const outboundSchema = TypeResponseContentPartAdded$outboundSchema;
}

/** @internal */
export const Part1$inboundSchema: z.ZodType<Part1, z.ZodTypeDef, unknown> = z
  .union([
    ResponseOutputText$inboundSchema,
    ReasoningTextContent$inboundSchema,
    OpenAIResponsesRefusalContent$inboundSchema,
  ]);

/** @internal */
export type Part1$Outbound =
  | ResponseOutputText$Outbound
  | ReasoningTextContent$Outbound
  | OpenAIResponsesRefusalContent$Outbound;

/** @internal */
export const Part1$outboundSchema: z.ZodType<
  Part1$Outbound,
  z.ZodTypeDef,
  Part1
> = z.union([
  ResponseOutputText$outboundSchema,
  ReasoningTextContent$outboundSchema,
  OpenAIResponsesRefusalContent$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Part1$ {
  /** @deprecated use `Part1$inboundSchema` instead. */
  export const inboundSchema = Part1$inboundSchema;
  /** @deprecated use `Part1$outboundSchema` instead. */
  export const outboundSchema = Part1$outboundSchema;
  /** @deprecated use `Part1$Outbound` instead. */
  export type Outbound = Part1$Outbound;
}

export function part1ToJSON(part1: Part1): string {
  return JSON.stringify(Part1$outboundSchema.parse(part1));
}

export function part1FromJSON(
  jsonString: string,
): SafeParseResult<Part1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Part1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Part1' from JSON`,
  );
}

/** @internal */
export const OpenResponsesStreamEventResponseContentPartAdded$inboundSchema:
  z.ZodType<
    OpenResponsesStreamEventResponseContentPartAdded,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: TypeResponseContentPartAdded$inboundSchema,
    output_index: z.number(),
    item_id: z.string(),
    content_index: z.number(),
    part: z.union([
      ResponseOutputText$inboundSchema,
      ReasoningTextContent$inboundSchema,
      OpenAIResponsesRefusalContent$inboundSchema,
    ]),
    sequence_number: z.number(),
  }).transform((v) => {
    return remap$(v, {
      "output_index": "outputIndex",
      "item_id": "itemId",
      "content_index": "contentIndex",
      "sequence_number": "sequenceNumber",
    });
  });

/** @internal */
export type OpenResponsesStreamEventResponseContentPartAdded$Outbound = {
  type: string;
  output_index: number;
  item_id: string;
  content_index: number;
  part:
    | ResponseOutputText$Outbound
    | ReasoningTextContent$Outbound
    | OpenAIResponsesRefusalContent$Outbound;
  sequence_number: number;
};

/** @internal */
export const OpenResponsesStreamEventResponseContentPartAdded$outboundSchema:
  z.ZodType<
    OpenResponsesStreamEventResponseContentPartAdded$Outbound,
    z.ZodTypeDef,
    OpenResponsesStreamEventResponseContentPartAdded
  > = z.object({
    type: TypeResponseContentPartAdded$outboundSchema,
    outputIndex: z.number(),
    itemId: z.string(),
    contentIndex: z.number(),
    part: z.union([
      ResponseOutputText$outboundSchema,
      ReasoningTextContent$outboundSchema,
      OpenAIResponsesRefusalContent$outboundSchema,
    ]),
    sequenceNumber: z.number(),
  }).transform((v) => {
    return remap$(v, {
      outputIndex: "output_index",
      itemId: "item_id",
      contentIndex: "content_index",
      sequenceNumber: "sequence_number",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesStreamEventResponseContentPartAdded$ {
  /** @deprecated use `OpenResponsesStreamEventResponseContentPartAdded$inboundSchema` instead. */
  export const inboundSchema =
    OpenResponsesStreamEventResponseContentPartAdded$inboundSchema;
  /** @deprecated use `OpenResponsesStreamEventResponseContentPartAdded$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesStreamEventResponseContentPartAdded$outboundSchema;
  /** @deprecated use `OpenResponsesStreamEventResponseContentPartAdded$Outbound` instead. */
  export type Outbound =
    OpenResponsesStreamEventResponseContentPartAdded$Outbound;
}

export function openResponsesStreamEventResponseContentPartAddedToJSON(
  openResponsesStreamEventResponseContentPartAdded:
    OpenResponsesStreamEventResponseContentPartAdded,
): string {
  return JSON.stringify(
    OpenResponsesStreamEventResponseContentPartAdded$outboundSchema.parse(
      openResponsesStreamEventResponseContentPartAdded,
    ),
  );
}

export function openResponsesStreamEventResponseContentPartAddedFromJSON(
  jsonString: string,
): SafeParseResult<
  OpenResponsesStreamEventResponseContentPartAdded,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      OpenResponsesStreamEventResponseContentPartAdded$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'OpenResponsesStreamEventResponseContentPartAdded' from JSON`,
  );
}

/** @internal */
export const TypeResponseOutputItemDone$inboundSchema: z.ZodNativeEnum<
  typeof TypeResponseOutputItemDone
> = z.nativeEnum(TypeResponseOutputItemDone);

/** @internal */
export const TypeResponseOutputItemDone$outboundSchema: z.ZodNativeEnum<
  typeof TypeResponseOutputItemDone
> = TypeResponseOutputItemDone$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeResponseOutputItemDone$ {
  /** @deprecated use `TypeResponseOutputItemDone$inboundSchema` instead. */
  export const inboundSchema = TypeResponseOutputItemDone$inboundSchema;
  /** @deprecated use `TypeResponseOutputItemDone$outboundSchema` instead. */
  export const outboundSchema = TypeResponseOutputItemDone$outboundSchema;
}

/** @internal */
export const OpenResponsesStreamEventResponseOutputItemDone$inboundSchema:
  z.ZodType<
    OpenResponsesStreamEventResponseOutputItemDone,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: TypeResponseOutputItemDone$inboundSchema,
    output_index: z.number(),
    item: ResponsesOutputItem$inboundSchema,
    sequence_number: z.number(),
  }).transform((v) => {
    return remap$(v, {
      "output_index": "outputIndex",
      "sequence_number": "sequenceNumber",
    });
  });

/** @internal */
export type OpenResponsesStreamEventResponseOutputItemDone$Outbound = {
  type: string;
  output_index: number;
  item: ResponsesOutputItem$Outbound;
  sequence_number: number;
};

/** @internal */
export const OpenResponsesStreamEventResponseOutputItemDone$outboundSchema:
  z.ZodType<
    OpenResponsesStreamEventResponseOutputItemDone$Outbound,
    z.ZodTypeDef,
    OpenResponsesStreamEventResponseOutputItemDone
  > = z.object({
    type: TypeResponseOutputItemDone$outboundSchema,
    outputIndex: z.number(),
    item: ResponsesOutputItem$outboundSchema,
    sequenceNumber: z.number(),
  }).transform((v) => {
    return remap$(v, {
      outputIndex: "output_index",
      sequenceNumber: "sequence_number",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesStreamEventResponseOutputItemDone$ {
  /** @deprecated use `OpenResponsesStreamEventResponseOutputItemDone$inboundSchema` instead. */
  export const inboundSchema =
    OpenResponsesStreamEventResponseOutputItemDone$inboundSchema;
  /** @deprecated use `OpenResponsesStreamEventResponseOutputItemDone$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesStreamEventResponseOutputItemDone$outboundSchema;
  /** @deprecated use `OpenResponsesStreamEventResponseOutputItemDone$Outbound` instead. */
  export type Outbound =
    OpenResponsesStreamEventResponseOutputItemDone$Outbound;
}

export function openResponsesStreamEventResponseOutputItemDoneToJSON(
  openResponsesStreamEventResponseOutputItemDone:
    OpenResponsesStreamEventResponseOutputItemDone,
): string {
  return JSON.stringify(
    OpenResponsesStreamEventResponseOutputItemDone$outboundSchema.parse(
      openResponsesStreamEventResponseOutputItemDone,
    ),
  );
}

export function openResponsesStreamEventResponseOutputItemDoneFromJSON(
  jsonString: string,
): SafeParseResult<
  OpenResponsesStreamEventResponseOutputItemDone,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      OpenResponsesStreamEventResponseOutputItemDone$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'OpenResponsesStreamEventResponseOutputItemDone' from JSON`,
  );
}

/** @internal */
export const TypeResponseOutputItemAdded$inboundSchema: z.ZodNativeEnum<
  typeof TypeResponseOutputItemAdded
> = z.nativeEnum(TypeResponseOutputItemAdded);

/** @internal */
export const TypeResponseOutputItemAdded$outboundSchema: z.ZodNativeEnum<
  typeof TypeResponseOutputItemAdded
> = TypeResponseOutputItemAdded$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeResponseOutputItemAdded$ {
  /** @deprecated use `TypeResponseOutputItemAdded$inboundSchema` instead. */
  export const inboundSchema = TypeResponseOutputItemAdded$inboundSchema;
  /** @deprecated use `TypeResponseOutputItemAdded$outboundSchema` instead. */
  export const outboundSchema = TypeResponseOutputItemAdded$outboundSchema;
}

/** @internal */
export const OpenResponsesStreamEventResponseOutputItemAdded$inboundSchema:
  z.ZodType<
    OpenResponsesStreamEventResponseOutputItemAdded,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: TypeResponseOutputItemAdded$inboundSchema,
    output_index: z.number(),
    item: ResponsesOutputItem$inboundSchema,
    sequence_number: z.number(),
  }).transform((v) => {
    return remap$(v, {
      "output_index": "outputIndex",
      "sequence_number": "sequenceNumber",
    });
  });

/** @internal */
export type OpenResponsesStreamEventResponseOutputItemAdded$Outbound = {
  type: string;
  output_index: number;
  item: ResponsesOutputItem$Outbound;
  sequence_number: number;
};

/** @internal */
export const OpenResponsesStreamEventResponseOutputItemAdded$outboundSchema:
  z.ZodType<
    OpenResponsesStreamEventResponseOutputItemAdded$Outbound,
    z.ZodTypeDef,
    OpenResponsesStreamEventResponseOutputItemAdded
  > = z.object({
    type: TypeResponseOutputItemAdded$outboundSchema,
    outputIndex: z.number(),
    item: ResponsesOutputItem$outboundSchema,
    sequenceNumber: z.number(),
  }).transform((v) => {
    return remap$(v, {
      outputIndex: "output_index",
      sequenceNumber: "sequence_number",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesStreamEventResponseOutputItemAdded$ {
  /** @deprecated use `OpenResponsesStreamEventResponseOutputItemAdded$inboundSchema` instead. */
  export const inboundSchema =
    OpenResponsesStreamEventResponseOutputItemAdded$inboundSchema;
  /** @deprecated use `OpenResponsesStreamEventResponseOutputItemAdded$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesStreamEventResponseOutputItemAdded$outboundSchema;
  /** @deprecated use `OpenResponsesStreamEventResponseOutputItemAdded$Outbound` instead. */
  export type Outbound =
    OpenResponsesStreamEventResponseOutputItemAdded$Outbound;
}

export function openResponsesStreamEventResponseOutputItemAddedToJSON(
  openResponsesStreamEventResponseOutputItemAdded:
    OpenResponsesStreamEventResponseOutputItemAdded,
): string {
  return JSON.stringify(
    OpenResponsesStreamEventResponseOutputItemAdded$outboundSchema.parse(
      openResponsesStreamEventResponseOutputItemAdded,
    ),
  );
}

export function openResponsesStreamEventResponseOutputItemAddedFromJSON(
  jsonString: string,
): SafeParseResult<
  OpenResponsesStreamEventResponseOutputItemAdded,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      OpenResponsesStreamEventResponseOutputItemAdded$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'OpenResponsesStreamEventResponseOutputItemAdded' from JSON`,
  );
}

/** @internal */
export const TypeResponseFailed$inboundSchema: z.ZodNativeEnum<
  typeof TypeResponseFailed
> = z.nativeEnum(TypeResponseFailed);

/** @internal */
export const TypeResponseFailed$outboundSchema: z.ZodNativeEnum<
  typeof TypeResponseFailed
> = TypeResponseFailed$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeResponseFailed$ {
  /** @deprecated use `TypeResponseFailed$inboundSchema` instead. */
  export const inboundSchema = TypeResponseFailed$inboundSchema;
  /** @deprecated use `TypeResponseFailed$outboundSchema` instead. */
  export const outboundSchema = TypeResponseFailed$outboundSchema;
}

/** @internal */
export const OpenResponsesStreamEventResponseFailed$inboundSchema: z.ZodType<
  OpenResponsesStreamEventResponseFailed,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TypeResponseFailed$inboundSchema,
  response: OpenResponsesNonStreamingResponse$inboundSchema,
  sequence_number: z.number(),
}).transform((v) => {
  return remap$(v, {
    "sequence_number": "sequenceNumber",
  });
});

/** @internal */
export type OpenResponsesStreamEventResponseFailed$Outbound = {
  type: string;
  response: OpenResponsesNonStreamingResponse$Outbound;
  sequence_number: number;
};

/** @internal */
export const OpenResponsesStreamEventResponseFailed$outboundSchema: z.ZodType<
  OpenResponsesStreamEventResponseFailed$Outbound,
  z.ZodTypeDef,
  OpenResponsesStreamEventResponseFailed
> = z.object({
  type: TypeResponseFailed$outboundSchema,
  response: OpenResponsesNonStreamingResponse$outboundSchema,
  sequenceNumber: z.number(),
}).transform((v) => {
  return remap$(v, {
    sequenceNumber: "sequence_number",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesStreamEventResponseFailed$ {
  /** @deprecated use `OpenResponsesStreamEventResponseFailed$inboundSchema` instead. */
  export const inboundSchema =
    OpenResponsesStreamEventResponseFailed$inboundSchema;
  /** @deprecated use `OpenResponsesStreamEventResponseFailed$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesStreamEventResponseFailed$outboundSchema;
  /** @deprecated use `OpenResponsesStreamEventResponseFailed$Outbound` instead. */
  export type Outbound = OpenResponsesStreamEventResponseFailed$Outbound;
}

export function openResponsesStreamEventResponseFailedToJSON(
  openResponsesStreamEventResponseFailed:
    OpenResponsesStreamEventResponseFailed,
): string {
  return JSON.stringify(
    OpenResponsesStreamEventResponseFailed$outboundSchema.parse(
      openResponsesStreamEventResponseFailed,
    ),
  );
}

export function openResponsesStreamEventResponseFailedFromJSON(
  jsonString: string,
): SafeParseResult<OpenResponsesStreamEventResponseFailed, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OpenResponsesStreamEventResponseFailed$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenResponsesStreamEventResponseFailed' from JSON`,
  );
}

/** @internal */
export const TypeResponseIncomplete$inboundSchema: z.ZodNativeEnum<
  typeof TypeResponseIncomplete
> = z.nativeEnum(TypeResponseIncomplete);

/** @internal */
export const TypeResponseIncomplete$outboundSchema: z.ZodNativeEnum<
  typeof TypeResponseIncomplete
> = TypeResponseIncomplete$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeResponseIncomplete$ {
  /** @deprecated use `TypeResponseIncomplete$inboundSchema` instead. */
  export const inboundSchema = TypeResponseIncomplete$inboundSchema;
  /** @deprecated use `TypeResponseIncomplete$outboundSchema` instead. */
  export const outboundSchema = TypeResponseIncomplete$outboundSchema;
}

/** @internal */
export const OpenResponsesStreamEventResponseIncomplete$inboundSchema:
  z.ZodType<OpenResponsesStreamEventResponseIncomplete, z.ZodTypeDef, unknown> =
    z.object({
      type: TypeResponseIncomplete$inboundSchema,
      response: OpenResponsesNonStreamingResponse$inboundSchema,
      sequence_number: z.number(),
    }).transform((v) => {
      return remap$(v, {
        "sequence_number": "sequenceNumber",
      });
    });

/** @internal */
export type OpenResponsesStreamEventResponseIncomplete$Outbound = {
  type: string;
  response: OpenResponsesNonStreamingResponse$Outbound;
  sequence_number: number;
};

/** @internal */
export const OpenResponsesStreamEventResponseIncomplete$outboundSchema:
  z.ZodType<
    OpenResponsesStreamEventResponseIncomplete$Outbound,
    z.ZodTypeDef,
    OpenResponsesStreamEventResponseIncomplete
  > = z.object({
    type: TypeResponseIncomplete$outboundSchema,
    response: OpenResponsesNonStreamingResponse$outboundSchema,
    sequenceNumber: z.number(),
  }).transform((v) => {
    return remap$(v, {
      sequenceNumber: "sequence_number",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesStreamEventResponseIncomplete$ {
  /** @deprecated use `OpenResponsesStreamEventResponseIncomplete$inboundSchema` instead. */
  export const inboundSchema =
    OpenResponsesStreamEventResponseIncomplete$inboundSchema;
  /** @deprecated use `OpenResponsesStreamEventResponseIncomplete$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesStreamEventResponseIncomplete$outboundSchema;
  /** @deprecated use `OpenResponsesStreamEventResponseIncomplete$Outbound` instead. */
  export type Outbound = OpenResponsesStreamEventResponseIncomplete$Outbound;
}

export function openResponsesStreamEventResponseIncompleteToJSON(
  openResponsesStreamEventResponseIncomplete:
    OpenResponsesStreamEventResponseIncomplete,
): string {
  return JSON.stringify(
    OpenResponsesStreamEventResponseIncomplete$outboundSchema.parse(
      openResponsesStreamEventResponseIncomplete,
    ),
  );
}

export function openResponsesStreamEventResponseIncompleteFromJSON(
  jsonString: string,
): SafeParseResult<
  OpenResponsesStreamEventResponseIncomplete,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      OpenResponsesStreamEventResponseIncomplete$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'OpenResponsesStreamEventResponseIncomplete' from JSON`,
  );
}

/** @internal */
export const TypeResponseCompleted$inboundSchema: z.ZodNativeEnum<
  typeof TypeResponseCompleted
> = z.nativeEnum(TypeResponseCompleted);

/** @internal */
export const TypeResponseCompleted$outboundSchema: z.ZodNativeEnum<
  typeof TypeResponseCompleted
> = TypeResponseCompleted$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeResponseCompleted$ {
  /** @deprecated use `TypeResponseCompleted$inboundSchema` instead. */
  export const inboundSchema = TypeResponseCompleted$inboundSchema;
  /** @deprecated use `TypeResponseCompleted$outboundSchema` instead. */
  export const outboundSchema = TypeResponseCompleted$outboundSchema;
}

/** @internal */
export const OpenResponsesStreamEventResponseCompleted$inboundSchema: z.ZodType<
  OpenResponsesStreamEventResponseCompleted,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TypeResponseCompleted$inboundSchema,
  response: OpenResponsesNonStreamingResponse$inboundSchema,
  sequence_number: z.number(),
}).transform((v) => {
  return remap$(v, {
    "sequence_number": "sequenceNumber",
  });
});

/** @internal */
export type OpenResponsesStreamEventResponseCompleted$Outbound = {
  type: string;
  response: OpenResponsesNonStreamingResponse$Outbound;
  sequence_number: number;
};

/** @internal */
export const OpenResponsesStreamEventResponseCompleted$outboundSchema:
  z.ZodType<
    OpenResponsesStreamEventResponseCompleted$Outbound,
    z.ZodTypeDef,
    OpenResponsesStreamEventResponseCompleted
  > = z.object({
    type: TypeResponseCompleted$outboundSchema,
    response: OpenResponsesNonStreamingResponse$outboundSchema,
    sequenceNumber: z.number(),
  }).transform((v) => {
    return remap$(v, {
      sequenceNumber: "sequence_number",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesStreamEventResponseCompleted$ {
  /** @deprecated use `OpenResponsesStreamEventResponseCompleted$inboundSchema` instead. */
  export const inboundSchema =
    OpenResponsesStreamEventResponseCompleted$inboundSchema;
  /** @deprecated use `OpenResponsesStreamEventResponseCompleted$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesStreamEventResponseCompleted$outboundSchema;
  /** @deprecated use `OpenResponsesStreamEventResponseCompleted$Outbound` instead. */
  export type Outbound = OpenResponsesStreamEventResponseCompleted$Outbound;
}

export function openResponsesStreamEventResponseCompletedToJSON(
  openResponsesStreamEventResponseCompleted:
    OpenResponsesStreamEventResponseCompleted,
): string {
  return JSON.stringify(
    OpenResponsesStreamEventResponseCompleted$outboundSchema.parse(
      openResponsesStreamEventResponseCompleted,
    ),
  );
}

export function openResponsesStreamEventResponseCompletedFromJSON(
  jsonString: string,
): SafeParseResult<
  OpenResponsesStreamEventResponseCompleted,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      OpenResponsesStreamEventResponseCompleted$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'OpenResponsesStreamEventResponseCompleted' from JSON`,
  );
}

/** @internal */
export const TypeResponseInProgress$inboundSchema: z.ZodNativeEnum<
  typeof TypeResponseInProgress
> = z.nativeEnum(TypeResponseInProgress);

/** @internal */
export const TypeResponseInProgress$outboundSchema: z.ZodNativeEnum<
  typeof TypeResponseInProgress
> = TypeResponseInProgress$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeResponseInProgress$ {
  /** @deprecated use `TypeResponseInProgress$inboundSchema` instead. */
  export const inboundSchema = TypeResponseInProgress$inboundSchema;
  /** @deprecated use `TypeResponseInProgress$outboundSchema` instead. */
  export const outboundSchema = TypeResponseInProgress$outboundSchema;
}

/** @internal */
export const OpenResponsesStreamEventResponseInProgress$inboundSchema:
  z.ZodType<OpenResponsesStreamEventResponseInProgress, z.ZodTypeDef, unknown> =
    z.object({
      type: TypeResponseInProgress$inboundSchema,
      response: OpenResponsesNonStreamingResponse$inboundSchema,
      sequence_number: z.number(),
    }).transform((v) => {
      return remap$(v, {
        "sequence_number": "sequenceNumber",
      });
    });

/** @internal */
export type OpenResponsesStreamEventResponseInProgress$Outbound = {
  type: string;
  response: OpenResponsesNonStreamingResponse$Outbound;
  sequence_number: number;
};

/** @internal */
export const OpenResponsesStreamEventResponseInProgress$outboundSchema:
  z.ZodType<
    OpenResponsesStreamEventResponseInProgress$Outbound,
    z.ZodTypeDef,
    OpenResponsesStreamEventResponseInProgress
  > = z.object({
    type: TypeResponseInProgress$outboundSchema,
    response: OpenResponsesNonStreamingResponse$outboundSchema,
    sequenceNumber: z.number(),
  }).transform((v) => {
    return remap$(v, {
      sequenceNumber: "sequence_number",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesStreamEventResponseInProgress$ {
  /** @deprecated use `OpenResponsesStreamEventResponseInProgress$inboundSchema` instead. */
  export const inboundSchema =
    OpenResponsesStreamEventResponseInProgress$inboundSchema;
  /** @deprecated use `OpenResponsesStreamEventResponseInProgress$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesStreamEventResponseInProgress$outboundSchema;
  /** @deprecated use `OpenResponsesStreamEventResponseInProgress$Outbound` instead. */
  export type Outbound = OpenResponsesStreamEventResponseInProgress$Outbound;
}

export function openResponsesStreamEventResponseInProgressToJSON(
  openResponsesStreamEventResponseInProgress:
    OpenResponsesStreamEventResponseInProgress,
): string {
  return JSON.stringify(
    OpenResponsesStreamEventResponseInProgress$outboundSchema.parse(
      openResponsesStreamEventResponseInProgress,
    ),
  );
}

export function openResponsesStreamEventResponseInProgressFromJSON(
  jsonString: string,
): SafeParseResult<
  OpenResponsesStreamEventResponseInProgress,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      OpenResponsesStreamEventResponseInProgress$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'OpenResponsesStreamEventResponseInProgress' from JSON`,
  );
}

/** @internal */
export const TypeResponseCreated$inboundSchema: z.ZodNativeEnum<
  typeof TypeResponseCreated
> = z.nativeEnum(TypeResponseCreated);

/** @internal */
export const TypeResponseCreated$outboundSchema: z.ZodNativeEnum<
  typeof TypeResponseCreated
> = TypeResponseCreated$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeResponseCreated$ {
  /** @deprecated use `TypeResponseCreated$inboundSchema` instead. */
  export const inboundSchema = TypeResponseCreated$inboundSchema;
  /** @deprecated use `TypeResponseCreated$outboundSchema` instead. */
  export const outboundSchema = TypeResponseCreated$outboundSchema;
}

/** @internal */
export const OpenResponsesStreamEventResponseCreated$inboundSchema: z.ZodType<
  OpenResponsesStreamEventResponseCreated,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TypeResponseCreated$inboundSchema,
  response: OpenResponsesNonStreamingResponse$inboundSchema,
  sequence_number: z.number(),
}).transform((v) => {
  return remap$(v, {
    "sequence_number": "sequenceNumber",
  });
});

/** @internal */
export type OpenResponsesStreamEventResponseCreated$Outbound = {
  type: string;
  response: OpenResponsesNonStreamingResponse$Outbound;
  sequence_number: number;
};

/** @internal */
export const OpenResponsesStreamEventResponseCreated$outboundSchema: z.ZodType<
  OpenResponsesStreamEventResponseCreated$Outbound,
  z.ZodTypeDef,
  OpenResponsesStreamEventResponseCreated
> = z.object({
  type: TypeResponseCreated$outboundSchema,
  response: OpenResponsesNonStreamingResponse$outboundSchema,
  sequenceNumber: z.number(),
}).transform((v) => {
  return remap$(v, {
    sequenceNumber: "sequence_number",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesStreamEventResponseCreated$ {
  /** @deprecated use `OpenResponsesStreamEventResponseCreated$inboundSchema` instead. */
  export const inboundSchema =
    OpenResponsesStreamEventResponseCreated$inboundSchema;
  /** @deprecated use `OpenResponsesStreamEventResponseCreated$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesStreamEventResponseCreated$outboundSchema;
  /** @deprecated use `OpenResponsesStreamEventResponseCreated$Outbound` instead. */
  export type Outbound = OpenResponsesStreamEventResponseCreated$Outbound;
}

export function openResponsesStreamEventResponseCreatedToJSON(
  openResponsesStreamEventResponseCreated:
    OpenResponsesStreamEventResponseCreated,
): string {
  return JSON.stringify(
    OpenResponsesStreamEventResponseCreated$outboundSchema.parse(
      openResponsesStreamEventResponseCreated,
    ),
  );
}

export function openResponsesStreamEventResponseCreatedFromJSON(
  jsonString: string,
): SafeParseResult<
  OpenResponsesStreamEventResponseCreated,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      OpenResponsesStreamEventResponseCreated$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'OpenResponsesStreamEventResponseCreated' from JSON`,
  );
}

/** @internal */
export const OpenResponsesStreamEvent$inboundSchema: z.ZodType<
  OpenResponsesStreamEvent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => OpenResponsesStreamEventResponseOutputTextDelta$inboundSchema),
  z.lazy(() => OpenResponsesStreamEventResponseOutputTextDone$inboundSchema),
  z.lazy(() =>
    OpenResponsesStreamEventResponseOutputTextAnnotationAdded$inboundSchema
  ),
  z.lazy(() => OpenResponsesStreamEventResponseContentPartAdded$inboundSchema),
  z.lazy(() => OpenResponsesStreamEventResponseContentPartDone$inboundSchema),
  z.lazy(() => OpenResponsesStreamEventResponseRefusalDelta$inboundSchema),
  z.lazy(() => OpenResponsesStreamEventResponseRefusalDone$inboundSchema),
  z.lazy(() =>
    OpenResponsesStreamEventResponseFunctionCallArgumentsDone$inboundSchema
  ),
  OpenResponsesReasoningDeltaEvent$inboundSchema,
  OpenResponsesReasoningDoneEvent$inboundSchema,
  OpenResponsesReasoningSummaryPartAddedEvent$inboundSchema,
  z.lazy(() =>
    OpenResponsesStreamEventResponseReasoningSummaryPartDone$inboundSchema
  ),
  OpenResponsesReasoningSummaryTextDeltaEvent$inboundSchema,
  OpenResponsesReasoningSummaryTextDoneEvent$inboundSchema,
  OpenResponsesImageGenCallPartialImage$inboundSchema,
  OpenResponsesErrorEvent$inboundSchema,
  z.lazy(() =>
    OpenResponsesStreamEventResponseFunctionCallArgumentsDelta$inboundSchema
  ),
  z.lazy(() => OpenResponsesStreamEventResponseOutputItemAdded$inboundSchema),
  z.lazy(() => OpenResponsesStreamEventResponseOutputItemDone$inboundSchema),
  OpenResponsesImageGenCallInProgress$inboundSchema,
  OpenResponsesImageGenCallGenerating$inboundSchema,
  OpenResponsesImageGenCallCompleted$inboundSchema,
  z.lazy(() => OpenResponsesStreamEventResponseCreated$inboundSchema),
  z.lazy(() => OpenResponsesStreamEventResponseInProgress$inboundSchema),
  z.lazy(() => OpenResponsesStreamEventResponseCompleted$inboundSchema),
  z.lazy(() => OpenResponsesStreamEventResponseIncomplete$inboundSchema),
  z.lazy(() => OpenResponsesStreamEventResponseFailed$inboundSchema),
]);

/** @internal */
export type OpenResponsesStreamEvent$Outbound =
  | OpenResponsesStreamEventResponseOutputTextDelta$Outbound
  | OpenResponsesStreamEventResponseOutputTextDone$Outbound
  | OpenResponsesStreamEventResponseOutputTextAnnotationAdded$Outbound
  | OpenResponsesStreamEventResponseContentPartAdded$Outbound
  | OpenResponsesStreamEventResponseContentPartDone$Outbound
  | OpenResponsesStreamEventResponseRefusalDelta$Outbound
  | OpenResponsesStreamEventResponseRefusalDone$Outbound
  | OpenResponsesStreamEventResponseFunctionCallArgumentsDone$Outbound
  | OpenResponsesReasoningDeltaEvent$Outbound
  | OpenResponsesReasoningDoneEvent$Outbound
  | OpenResponsesReasoningSummaryPartAddedEvent$Outbound
  | OpenResponsesStreamEventResponseReasoningSummaryPartDone$Outbound
  | OpenResponsesReasoningSummaryTextDeltaEvent$Outbound
  | OpenResponsesReasoningSummaryTextDoneEvent$Outbound
  | OpenResponsesImageGenCallPartialImage$Outbound
  | OpenResponsesErrorEvent$Outbound
  | OpenResponsesStreamEventResponseFunctionCallArgumentsDelta$Outbound
  | OpenResponsesStreamEventResponseOutputItemAdded$Outbound
  | OpenResponsesStreamEventResponseOutputItemDone$Outbound
  | OpenResponsesImageGenCallInProgress$Outbound
  | OpenResponsesImageGenCallGenerating$Outbound
  | OpenResponsesImageGenCallCompleted$Outbound
  | OpenResponsesStreamEventResponseCreated$Outbound
  | OpenResponsesStreamEventResponseInProgress$Outbound
  | OpenResponsesStreamEventResponseCompleted$Outbound
  | OpenResponsesStreamEventResponseIncomplete$Outbound
  | OpenResponsesStreamEventResponseFailed$Outbound;

/** @internal */
export const OpenResponsesStreamEvent$outboundSchema: z.ZodType<
  OpenResponsesStreamEvent$Outbound,
  z.ZodTypeDef,
  OpenResponsesStreamEvent
> = z.union([
  z.lazy(() => OpenResponsesStreamEventResponseOutputTextDelta$outboundSchema),
  z.lazy(() => OpenResponsesStreamEventResponseOutputTextDone$outboundSchema),
  z.lazy(() =>
    OpenResponsesStreamEventResponseOutputTextAnnotationAdded$outboundSchema
  ),
  z.lazy(() => OpenResponsesStreamEventResponseContentPartAdded$outboundSchema),
  z.lazy(() => OpenResponsesStreamEventResponseContentPartDone$outboundSchema),
  z.lazy(() => OpenResponsesStreamEventResponseRefusalDelta$outboundSchema),
  z.lazy(() => OpenResponsesStreamEventResponseRefusalDone$outboundSchema),
  z.lazy(() =>
    OpenResponsesStreamEventResponseFunctionCallArgumentsDone$outboundSchema
  ),
  OpenResponsesReasoningDeltaEvent$outboundSchema,
  OpenResponsesReasoningDoneEvent$outboundSchema,
  OpenResponsesReasoningSummaryPartAddedEvent$outboundSchema,
  z.lazy(() =>
    OpenResponsesStreamEventResponseReasoningSummaryPartDone$outboundSchema
  ),
  OpenResponsesReasoningSummaryTextDeltaEvent$outboundSchema,
  OpenResponsesReasoningSummaryTextDoneEvent$outboundSchema,
  OpenResponsesImageGenCallPartialImage$outboundSchema,
  OpenResponsesErrorEvent$outboundSchema,
  z.lazy(() =>
    OpenResponsesStreamEventResponseFunctionCallArgumentsDelta$outboundSchema
  ),
  z.lazy(() => OpenResponsesStreamEventResponseOutputItemAdded$outboundSchema),
  z.lazy(() => OpenResponsesStreamEventResponseOutputItemDone$outboundSchema),
  OpenResponsesImageGenCallInProgress$outboundSchema,
  OpenResponsesImageGenCallGenerating$outboundSchema,
  OpenResponsesImageGenCallCompleted$outboundSchema,
  z.lazy(() => OpenResponsesStreamEventResponseCreated$outboundSchema),
  z.lazy(() => OpenResponsesStreamEventResponseInProgress$outboundSchema),
  z.lazy(() => OpenResponsesStreamEventResponseCompleted$outboundSchema),
  z.lazy(() => OpenResponsesStreamEventResponseIncomplete$outboundSchema),
  z.lazy(() => OpenResponsesStreamEventResponseFailed$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesStreamEvent$ {
  /** @deprecated use `OpenResponsesStreamEvent$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesStreamEvent$inboundSchema;
  /** @deprecated use `OpenResponsesStreamEvent$outboundSchema` instead. */
  export const outboundSchema = OpenResponsesStreamEvent$outboundSchema;
  /** @deprecated use `OpenResponsesStreamEvent$Outbound` instead. */
  export type Outbound = OpenResponsesStreamEvent$Outbound;
}

export function openResponsesStreamEventToJSON(
  openResponsesStreamEvent: OpenResponsesStreamEvent,
): string {
  return JSON.stringify(
    OpenResponsesStreamEvent$outboundSchema.parse(openResponsesStreamEvent),
  );
}

export function openResponsesStreamEventFromJSON(
  jsonString: string,
): SafeParseResult<OpenResponsesStreamEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenResponsesStreamEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenResponsesStreamEvent' from JSON`,
  );
}
