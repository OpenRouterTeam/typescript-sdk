/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ChatCompletionMessageParam,
  ChatCompletionMessageParam$inboundSchema,
  ChatCompletionMessageParam$Outbound,
  ChatCompletionMessageParam$outboundSchema,
} from "./chatcompletionmessageparam.js";
import {
  ChatCompletionTool,
  ChatCompletionTool$inboundSchema,
  ChatCompletionTool$Outbound,
  ChatCompletionTool$outboundSchema,
} from "./chatcompletiontool.js";
import {
  ChatCompletionToolChoiceOption,
  ChatCompletionToolChoiceOption$inboundSchema,
  ChatCompletionToolChoiceOption$Outbound,
  ChatCompletionToolChoiceOption$outboundSchema,
} from "./chatcompletiontoolchoiceoption.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ResponseFormatJsonSchemaSchema,
  ResponseFormatJsonSchemaSchema$inboundSchema,
  ResponseFormatJsonSchemaSchema$Outbound,
  ResponseFormatJsonSchemaSchema$outboundSchema,
} from "./responseformatjsonschemaschema.js";

/**
 * OpenAI-style reasoning effort setting
 */
export const ChatCompletionCreateParamsEffort = {
  High: "high",
  Medium: "medium",
  Low: "low",
  Minimal: "minimal",
} as const;
/**
 * OpenAI-style reasoning effort setting
 */
export type ChatCompletionCreateParamsEffort = ClosedEnum<
  typeof ChatCompletionCreateParamsEffort
>;

/**
 * Reasoning configuration
 */
export type ChatCompletionCreateParamsReasoning = {
  /**
   * Enables reasoning with default settings. Only work for some models.
   */
  enabled?: boolean | undefined;
  /**
   * OpenAI-style reasoning effort setting
   */
  effort?: ChatCompletionCreateParamsEffort | null | undefined;
  /**
   * non-OpenAI-style reasoning effort setting
   */
  maxTokens?: number | null | undefined;
  exclude?: boolean | undefined;
};

export const ChatCompletionCreateParamsTypePython = {
  Python: "python",
} as const;
export type ChatCompletionCreateParamsTypePython = ClosedEnum<
  typeof ChatCompletionCreateParamsTypePython
>;

/**
 * Python code response format
 */
export type ChatCompletionCreateParamsResponseFormatPython = {
  type: ChatCompletionCreateParamsTypePython;
};

export const ChatCompletionCreateParamsTypeGrammar = {
  Grammar: "grammar",
} as const;
export type ChatCompletionCreateParamsTypeGrammar = ClosedEnum<
  typeof ChatCompletionCreateParamsTypeGrammar
>;

/**
 * Custom grammar response format
 */
export type ChatCompletionCreateParamsResponseFormatGrammar = {
  type: ChatCompletionCreateParamsTypeGrammar;
  /**
   * Custom grammar for text generation
   */
  grammar: string;
};

export const ChatCompletionCreateParamsTypeJSONSchema = {
  JsonSchema: "json_schema",
} as const;
export type ChatCompletionCreateParamsTypeJSONSchema = ClosedEnum<
  typeof ChatCompletionCreateParamsTypeJSONSchema
>;

export type ChatCompletionCreateParamsJsonSchema = {
  /**
   * Schema name (a-z, A-Z, 0-9, underscores, dashes, max 64 chars)
   */
  name: string;
  /**
   * Schema description for the model
   */
  description?: string | undefined;
  /**
   * The schema for the response format, described as a JSON Schema object
   */
  schema?: ResponseFormatJsonSchemaSchema | undefined;
  /**
   * Enable strict schema adherence
   */
  strict?: boolean | null | undefined;
};

/**
 * JSON Schema response format for structured outputs
 */
export type ChatCompletionCreateParamsResponseFormatJSONSchema = {
  type: ChatCompletionCreateParamsTypeJSONSchema;
  jsonSchema: ChatCompletionCreateParamsJsonSchema;
};

export const ChatCompletionCreateParamsTypeJSONObject = {
  JsonObject: "json_object",
} as const;
export type ChatCompletionCreateParamsTypeJSONObject = ClosedEnum<
  typeof ChatCompletionCreateParamsTypeJSONObject
>;

/**
 * JSON object response format
 */
export type ChatCompletionCreateParamsResponseFormatJSONObject = {
  type: ChatCompletionCreateParamsTypeJSONObject;
};

export const ChatCompletionCreateParamsTypeText = {
  Text: "text",
} as const;
export type ChatCompletionCreateParamsTypeText = ClosedEnum<
  typeof ChatCompletionCreateParamsTypeText
>;

/**
 * Default text response format
 */
export type ChatCompletionCreateParamsResponseFormatText = {
  type: ChatCompletionCreateParamsTypeText;
};

/**
 * Response format configuration
 */
export type ChatCompletionCreateParamsResponseFormatUnion =
  | ChatCompletionCreateParamsResponseFormatJSONSchema
  | ChatCompletionCreateParamsResponseFormatGrammar
  | ChatCompletionCreateParamsResponseFormatText
  | ChatCompletionCreateParamsResponseFormatJSONObject
  | ChatCompletionCreateParamsResponseFormatPython;

/**
 * Stop sequences (up to 4)
 */
export type ChatCompletionCreateParamsStop = string | Array<string> | any;

/**
 * Streaming configuration options
 */
export type ChatCompletionCreateParamsStreamOptions = {
  /**
   * Include usage information in streaming response
   */
  includeUsage?: boolean | undefined;
};

/**
 * Reasoning effort
 */
export const ChatCompletionCreateParamsReasoningEffort = {
  High: "high",
  Medium: "medium",
  Low: "low",
  Minimal: "minimal",
} as const;
/**
 * Reasoning effort
 */
export type ChatCompletionCreateParamsReasoningEffort = ClosedEnum<
  typeof ChatCompletionCreateParamsReasoningEffort
>;

/**
 * Data collection setting. If no available model provider meets the requirement, your request will return an error.
 *
 * @remarks
 * - allow: (default) allow providers which store user data non-transiently and may train on it
 * - deny: use only providers which do not collect user data.
 */
export const ChatCompletionCreateParamsDataCollection = {
  Deny: "deny",
  Allow: "allow",
} as const;
/**
 * Data collection setting. If no available model provider meets the requirement, your request will return an error.
 *
 * @remarks
 * - allow: (default) allow providers which store user data non-transiently and may train on it
 * - deny: use only providers which do not collect user data.
 */
export type ChatCompletionCreateParamsDataCollection = ClosedEnum<
  typeof ChatCompletionCreateParamsDataCollection
>;

export const ChatCompletionCreateParamsOrderEnum = {
  AnyScale: "AnyScale",
  CentML: "Cent-ML",
  HuggingFace: "HuggingFace",
  Hyperbolic2: "Hyperbolic 2",
  Lepton: "Lepton",
  Lynn2: "Lynn 2",
  Lynn: "Lynn",
  Mancer: "Mancer",
  Modal: "Modal",
  OctoAI: "OctoAI",
  Recursal: "Recursal",
  Reflection: "Reflection",
  Replicate: "Replicate",
  SambaNova2: "SambaNova 2",
  SFCompute: "SF Compute",
  Together2: "Together 2",
  OneDotAI: "01.AI",
  Ai21: "AI21",
  AionLabs: "AionLabs",
  Alibaba: "Alibaba",
  AmazonBedrock: "Amazon Bedrock",
  Anthropic: "Anthropic",
  AtlasCloud: "AtlasCloud",
  Atoma: "Atoma",
  Avian: "Avian",
  Azure: "Azure",
  BaseTen: "BaseTen",
  Cerebras: "Cerebras",
  Chutes: "Chutes",
  Cloudflare: "Cloudflare",
  Cohere: "Cohere",
  CrofAI: "CrofAI",
  Crusoe: "Crusoe",
  DeepInfra: "DeepInfra",
  DeepSeek: "DeepSeek",
  Enfer: "Enfer",
  Featherless: "Featherless",
  Fireworks: "Fireworks",
  Friendli: "Friendli",
  GMICloud: "GMICloud",
  Google: "Google",
  GoogleAIStudio: "Google AI Studio",
  Groq: "Groq",
  Hyperbolic: "Hyperbolic",
  Inception: "Inception",
  InferenceNet: "InferenceNet",
  Infermatic: "Infermatic",
  Inflection: "Inflection",
  InoCloud: "InoCloud",
  Kluster: "Kluster",
  Lambda: "Lambda",
  Liquid: "Liquid",
  Mancer2: "Mancer 2",
  Meta: "Meta",
  Minimax: "Minimax",
  Mistral: "Mistral",
  MoonshotAI: "Moonshot AI",
  Morph: "Morph",
  NCompass: "NCompass",
  Nebius: "Nebius",
  NextBit: "NextBit",
  Nineteen: "Nineteen",
  Novita: "Novita",
  OpenAI: "OpenAI",
  OpenInference: "OpenInference",
  Parasail: "Parasail",
  Perplexity: "Perplexity",
  Phala: "Phala",
  SambaNova: "SambaNova",
  Stealth: "Stealth",
  Switchpoint: "Switchpoint",
  Targon: "Targon",
  Together: "Together",
  Ubicloud: "Ubicloud",
  Venice: "Venice",
  WandB: "WandB",
  XAI: "xAI",
  ZAi: "Z.AI",
} as const;
export type ChatCompletionCreateParamsOrderEnum = ClosedEnum<
  typeof ChatCompletionCreateParamsOrderEnum
>;

export type ChatCompletionCreateParamsOrderUnion =
  | ChatCompletionCreateParamsOrderEnum
  | string;

export const ChatCompletionCreateParamsOnlyEnum = {
  AnyScale: "AnyScale",
  CentML: "Cent-ML",
  HuggingFace: "HuggingFace",
  Hyperbolic2: "Hyperbolic 2",
  Lepton: "Lepton",
  Lynn2: "Lynn 2",
  Lynn: "Lynn",
  Mancer: "Mancer",
  Modal: "Modal",
  OctoAI: "OctoAI",
  Recursal: "Recursal",
  Reflection: "Reflection",
  Replicate: "Replicate",
  SambaNova2: "SambaNova 2",
  SFCompute: "SF Compute",
  Together2: "Together 2",
  OneDotAI: "01.AI",
  Ai21: "AI21",
  AionLabs: "AionLabs",
  Alibaba: "Alibaba",
  AmazonBedrock: "Amazon Bedrock",
  Anthropic: "Anthropic",
  AtlasCloud: "AtlasCloud",
  Atoma: "Atoma",
  Avian: "Avian",
  Azure: "Azure",
  BaseTen: "BaseTen",
  Cerebras: "Cerebras",
  Chutes: "Chutes",
  Cloudflare: "Cloudflare",
  Cohere: "Cohere",
  CrofAI: "CrofAI",
  Crusoe: "Crusoe",
  DeepInfra: "DeepInfra",
  DeepSeek: "DeepSeek",
  Enfer: "Enfer",
  Featherless: "Featherless",
  Fireworks: "Fireworks",
  Friendli: "Friendli",
  GMICloud: "GMICloud",
  Google: "Google",
  GoogleAIStudio: "Google AI Studio",
  Groq: "Groq",
  Hyperbolic: "Hyperbolic",
  Inception: "Inception",
  InferenceNet: "InferenceNet",
  Infermatic: "Infermatic",
  Inflection: "Inflection",
  InoCloud: "InoCloud",
  Kluster: "Kluster",
  Lambda: "Lambda",
  Liquid: "Liquid",
  Mancer2: "Mancer 2",
  Meta: "Meta",
  Minimax: "Minimax",
  Mistral: "Mistral",
  MoonshotAI: "Moonshot AI",
  Morph: "Morph",
  NCompass: "NCompass",
  Nebius: "Nebius",
  NextBit: "NextBit",
  Nineteen: "Nineteen",
  Novita: "Novita",
  OpenAI: "OpenAI",
  OpenInference: "OpenInference",
  Parasail: "Parasail",
  Perplexity: "Perplexity",
  Phala: "Phala",
  SambaNova: "SambaNova",
  Stealth: "Stealth",
  Switchpoint: "Switchpoint",
  Targon: "Targon",
  Together: "Together",
  Ubicloud: "Ubicloud",
  Venice: "Venice",
  WandB: "WandB",
  XAI: "xAI",
  ZAi: "Z.AI",
} as const;
export type ChatCompletionCreateParamsOnlyEnum = ClosedEnum<
  typeof ChatCompletionCreateParamsOnlyEnum
>;

export type ChatCompletionCreateParamsOnlyUnion =
  | ChatCompletionCreateParamsOnlyEnum
  | string;

export const ChatCompletionCreateParamsIgnoreEnum = {
  AnyScale: "AnyScale",
  CentML: "Cent-ML",
  HuggingFace: "HuggingFace",
  Hyperbolic2: "Hyperbolic 2",
  Lepton: "Lepton",
  Lynn2: "Lynn 2",
  Lynn: "Lynn",
  Mancer: "Mancer",
  Modal: "Modal",
  OctoAI: "OctoAI",
  Recursal: "Recursal",
  Reflection: "Reflection",
  Replicate: "Replicate",
  SambaNova2: "SambaNova 2",
  SFCompute: "SF Compute",
  Together2: "Together 2",
  OneDotAI: "01.AI",
  Ai21: "AI21",
  AionLabs: "AionLabs",
  Alibaba: "Alibaba",
  AmazonBedrock: "Amazon Bedrock",
  Anthropic: "Anthropic",
  AtlasCloud: "AtlasCloud",
  Atoma: "Atoma",
  Avian: "Avian",
  Azure: "Azure",
  BaseTen: "BaseTen",
  Cerebras: "Cerebras",
  Chutes: "Chutes",
  Cloudflare: "Cloudflare",
  Cohere: "Cohere",
  CrofAI: "CrofAI",
  Crusoe: "Crusoe",
  DeepInfra: "DeepInfra",
  DeepSeek: "DeepSeek",
  Enfer: "Enfer",
  Featherless: "Featherless",
  Fireworks: "Fireworks",
  Friendli: "Friendli",
  GMICloud: "GMICloud",
  Google: "Google",
  GoogleAIStudio: "Google AI Studio",
  Groq: "Groq",
  Hyperbolic: "Hyperbolic",
  Inception: "Inception",
  InferenceNet: "InferenceNet",
  Infermatic: "Infermatic",
  Inflection: "Inflection",
  InoCloud: "InoCloud",
  Kluster: "Kluster",
  Lambda: "Lambda",
  Liquid: "Liquid",
  Mancer2: "Mancer 2",
  Meta: "Meta",
  Minimax: "Minimax",
  Mistral: "Mistral",
  MoonshotAI: "Moonshot AI",
  Morph: "Morph",
  NCompass: "NCompass",
  Nebius: "Nebius",
  NextBit: "NextBit",
  Nineteen: "Nineteen",
  Novita: "Novita",
  OpenAI: "OpenAI",
  OpenInference: "OpenInference",
  Parasail: "Parasail",
  Perplexity: "Perplexity",
  Phala: "Phala",
  SambaNova: "SambaNova",
  Stealth: "Stealth",
  Switchpoint: "Switchpoint",
  Targon: "Targon",
  Together: "Together",
  Ubicloud: "Ubicloud",
  Venice: "Venice",
  WandB: "WandB",
  XAI: "xAI",
  ZAi: "Z.AI",
} as const;
export type ChatCompletionCreateParamsIgnoreEnum = ClosedEnum<
  typeof ChatCompletionCreateParamsIgnoreEnum
>;

export type ChatCompletionCreateParamsIgnoreUnion =
  | ChatCompletionCreateParamsIgnoreEnum
  | string;

export const ChatCompletionCreateParamsQuantization = {
  Int4: "int4",
  Int8: "int8",
  Fp4: "fp4",
  Fp6: "fp6",
  Fp8: "fp8",
  Fp16: "fp16",
  Bf16: "bf16",
  Fp32: "fp32",
  Unknown: "unknown",
} as const;
export type ChatCompletionCreateParamsQuantization = ClosedEnum<
  typeof ChatCompletionCreateParamsQuantization
>;

/**
 * The sorting strategy to use for this request, if "order" is not specified. When set, no load balancing is performed.
 */
export const ChatCompletionCreateParamsSort = {
  Price: "price",
  Throughput: "throughput",
  Latency: "latency",
} as const;
/**
 * The sorting strategy to use for this request, if "order" is not specified. When set, no load balancing is performed.
 */
export type ChatCompletionCreateParamsSort = ClosedEnum<
  typeof ChatCompletionCreateParamsSort
>;

export type ChatCompletionCreateParamsPrompt = number | string | any;

export type ChatCompletionCreateParamsCompletion = number | string | any;

export type ChatCompletionCreateParamsImage = number | string | any;

export type ChatCompletionCreateParamsAudio = number | string | any;

export type ChatCompletionCreateParamsRequest = number | string | any;

/**
 * The object specifying the maximum price you want to pay for this request. USD price per million tokens, for prompt and completion.
 */
export type ChatCompletionCreateParamsMaxPrice = {
  prompt?: number | string | any | undefined;
  completion?: number | string | any | undefined;
  image?: number | string | any | undefined;
  audio?: number | string | any | undefined;
  request?: number | string | any | undefined;
};

/**
 * When multiple model providers are available, optionally indicate your routing preference.
 */
export type ChatCompletionCreateParamsProvider = {
  /**
   * Whether to allow backup providers to serve requests
   *
   * @remarks
   * - true: (default) when the primary provider (or your custom providers in "order") is unavailable, use the next best provider.
   * - false: use only the primary/custom provider, and return the upstream error if it's unavailable.
   */
  allowFallbacks?: boolean | null | undefined;
  /**
   * Whether to filter providers to only those that support the parameters you've provided. If this setting is omitted or set to false, then providers will receive only the parameters they support, and ignore the rest.
   */
  requireParameters?: boolean | null | undefined;
  /**
   * Data collection setting. If no available model provider meets the requirement, your request will return an error.
   *
   * @remarks
   * - allow: (default) allow providers which store user data non-transiently and may train on it
   * - deny: use only providers which do not collect user data.
   */
  dataCollection?: ChatCompletionCreateParamsDataCollection | null | undefined;
  /**
   * An ordered list of provider slugs. The router will attempt to use the first provider in the subset of this list that supports your requested model, and fall back to the next if it is unavailable. If no providers are available, the request will fail with an error message.
   */
  order?:
    | Array<ChatCompletionCreateParamsOrderEnum | string>
    | null
    | undefined;
  /**
   * List of provider slugs to allow. If provided, this list is merged with your account-wide allowed provider settings for this request.
   */
  only?: Array<ChatCompletionCreateParamsOnlyEnum | string> | null | undefined;
  /**
   * List of provider slugs to ignore. If provided, this list is merged with your account-wide ignored provider settings for this request.
   */
  ignore?:
    | Array<ChatCompletionCreateParamsIgnoreEnum | string>
    | null
    | undefined;
  /**
   * A list of quantization levels to filter the provider by.
   */
  quantizations?:
    | Array<ChatCompletionCreateParamsQuantization>
    | null
    | undefined;
  /**
   * The sorting strategy to use for this request, if "order" is not specified. When set, no load balancing is performed.
   */
  sort?: ChatCompletionCreateParamsSort | null | undefined;
  /**
   * The object specifying the maximum price you want to pay for this request. USD price per million tokens, for prompt and completion.
   */
  maxPrice?: ChatCompletionCreateParamsMaxPrice | undefined;
};

export const ChatCompletionCreateParamsIdFileParser = {
  FileParser: "file-parser",
} as const;
export type ChatCompletionCreateParamsIdFileParser = ClosedEnum<
  typeof ChatCompletionCreateParamsIdFileParser
>;

export const ChatCompletionCreateParamsPdfEngine = {
  MistralOcr: "mistral-ocr",
  PdfText: "pdf-text",
  Native: "native",
} as const;
export type ChatCompletionCreateParamsPdfEngine = ClosedEnum<
  typeof ChatCompletionCreateParamsPdfEngine
>;

export type ChatCompletionCreateParamsPdf = {
  engine?: ChatCompletionCreateParamsPdfEngine | undefined;
};

export type ChatCompletionCreateParamsPluginFileParser = {
  id: ChatCompletionCreateParamsIdFileParser;
  maxFiles?: number | undefined;
  pdf?: ChatCompletionCreateParamsPdf | undefined;
};

export const ChatCompletionCreateParamsIdChainOfThought = {
  ChainOfThought: "chain-of-thought",
} as const;
export type ChatCompletionCreateParamsIdChainOfThought = ClosedEnum<
  typeof ChatCompletionCreateParamsIdChainOfThought
>;

export type ChatCompletionCreateParamsPluginChainOfThought = {
  id: ChatCompletionCreateParamsIdChainOfThought;
};

export const ChatCompletionCreateParamsIdWeb = {
  Web: "web",
} as const;
export type ChatCompletionCreateParamsIdWeb = ClosedEnum<
  typeof ChatCompletionCreateParamsIdWeb
>;

export const ChatCompletionCreateParamsEngine = {
  Native: "native",
  Exa: "exa",
} as const;
export type ChatCompletionCreateParamsEngine = ClosedEnum<
  typeof ChatCompletionCreateParamsEngine
>;

export type ChatCompletionCreateParamsPluginWeb = {
  id: ChatCompletionCreateParamsIdWeb;
  maxResults?: number | undefined;
  searchPrompt?: string | undefined;
  engine?: ChatCompletionCreateParamsEngine | undefined;
};

export const ChatCompletionCreateParamsIdModeration = {
  Moderation: "moderation",
} as const;
export type ChatCompletionCreateParamsIdModeration = ClosedEnum<
  typeof ChatCompletionCreateParamsIdModeration
>;

export type ChatCompletionCreateParamsPluginModeration = {
  id: ChatCompletionCreateParamsIdModeration;
};

export type ChatCompletionCreateParamsPluginUnion =
  | ChatCompletionCreateParamsPluginModeration
  | ChatCompletionCreateParamsPluginWeb
  | ChatCompletionCreateParamsPluginChainOfThought
  | ChatCompletionCreateParamsPluginFileParser;

/**
 * Chat completion request parameters
 */
export type ChatCompletionCreateParams = {
  /**
   * List of messages for the conversation
   */
  messages: Array<ChatCompletionMessageParam>;
  /**
   * Model to use for completion
   */
  model?: string | undefined;
  /**
   * Frequency penalty (-2.0 to 2.0)
   */
  frequencyPenalty?: number | null | undefined;
  /**
   * Token logit bias adjustments
   */
  logitBias?: { [k: string]: number } | null | undefined;
  /**
   * Return log probabilities
   */
  logprobs?: boolean | null | undefined;
  /**
   * Number of top log probabilities to return (0-20)
   */
  topLogprobs?: number | null | undefined;
  /**
   * Maximum tokens in completion
   */
  maxCompletionTokens?: number | null | undefined;
  /**
   * Maximum tokens (deprecated, use max_completion_tokens)
   */
  maxTokens?: number | null | undefined;
  /**
   * Key-value pairs for additional object information (max 16 pairs, 64 char keys, 512 char values)
   */
  metadata?: { [k: string]: string } | undefined;
  /**
   * Presence penalty (-2.0 to 2.0)
   */
  presencePenalty?: number | null | undefined;
  /**
   * Reasoning configuration
   */
  reasoning?: ChatCompletionCreateParamsReasoning | null | undefined;
  /**
   * Response format configuration
   */
  responseFormat?:
    | ChatCompletionCreateParamsResponseFormatJSONSchema
    | ChatCompletionCreateParamsResponseFormatGrammar
    | ChatCompletionCreateParamsResponseFormatText
    | ChatCompletionCreateParamsResponseFormatJSONObject
    | ChatCompletionCreateParamsResponseFormatPython
    | undefined;
  /**
   * Random seed for deterministic outputs
   */
  seed?: number | null | undefined;
  /**
   * Stop sequences (up to 4)
   */
  stop?: string | Array<string> | any | null | undefined;
  /**
   * Enable streaming response
   */
  stream?: boolean | null | undefined;
  streamOptions?: ChatCompletionCreateParamsStreamOptions | null | undefined;
  /**
   * Sampling temperature (0-2)
   */
  temperature?: number | null | undefined;
  /**
   * Tool choice configuration
   */
  toolChoice?: ChatCompletionToolChoiceOption | undefined;
  /**
   * Available tools for function calling
   */
  tools?: Array<ChatCompletionTool> | undefined;
  /**
   * Nucleus sampling parameter (0-1)
   */
  topP?: number | null | undefined;
  /**
   * Unique user identifier
   */
  user?: string | undefined;
  /**
   * Order of models to fallback to for this request
   */
  models?: Array<string> | null | undefined;
  /**
   * Reasoning effort
   */
  reasoningEffort?:
    | ChatCompletionCreateParamsReasoningEffort
    | null
    | undefined;
  /**
   * When multiple model providers are available, optionally indicate your routing preference.
   */
  provider?: ChatCompletionCreateParamsProvider | null | undefined;
  /**
   * Plugins you want to enable for this request, including their settings.
   */
  plugins?:
    | Array<
      | ChatCompletionCreateParamsPluginModeration
      | ChatCompletionCreateParamsPluginWeb
      | ChatCompletionCreateParamsPluginChainOfThought
      | ChatCompletionCreateParamsPluginFileParser
    >
    | undefined;
};

/** @internal */
export const ChatCompletionCreateParamsEffort$inboundSchema: z.ZodNativeEnum<
  typeof ChatCompletionCreateParamsEffort
> = z.nativeEnum(ChatCompletionCreateParamsEffort);

/** @internal */
export const ChatCompletionCreateParamsEffort$outboundSchema: z.ZodNativeEnum<
  typeof ChatCompletionCreateParamsEffort
> = ChatCompletionCreateParamsEffort$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionCreateParamsEffort$ {
  /** @deprecated use `ChatCompletionCreateParamsEffort$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionCreateParamsEffort$inboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsEffort$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionCreateParamsEffort$outboundSchema;
}

/** @internal */
export const ChatCompletionCreateParamsReasoning$inboundSchema: z.ZodType<
  ChatCompletionCreateParamsReasoning,
  z.ZodTypeDef,
  unknown
> = z.object({
  enabled: z.boolean().optional(),
  effort: z.nullable(ChatCompletionCreateParamsEffort$inboundSchema).optional(),
  max_tokens: z.nullable(z.number()).optional(),
  exclude: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "max_tokens": "maxTokens",
  });
});

/** @internal */
export type ChatCompletionCreateParamsReasoning$Outbound = {
  enabled?: boolean | undefined;
  effort?: string | null | undefined;
  max_tokens?: number | null | undefined;
  exclude: boolean;
};

/** @internal */
export const ChatCompletionCreateParamsReasoning$outboundSchema: z.ZodType<
  ChatCompletionCreateParamsReasoning$Outbound,
  z.ZodTypeDef,
  ChatCompletionCreateParamsReasoning
> = z.object({
  enabled: z.boolean().optional(),
  effort: z.nullable(ChatCompletionCreateParamsEffort$outboundSchema)
    .optional(),
  maxTokens: z.nullable(z.number()).optional(),
  exclude: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    maxTokens: "max_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionCreateParamsReasoning$ {
  /** @deprecated use `ChatCompletionCreateParamsReasoning$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionCreateParamsReasoning$inboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsReasoning$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionCreateParamsReasoning$outboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsReasoning$Outbound` instead. */
  export type Outbound = ChatCompletionCreateParamsReasoning$Outbound;
}

export function chatCompletionCreateParamsReasoningToJSON(
  chatCompletionCreateParamsReasoning: ChatCompletionCreateParamsReasoning,
): string {
  return JSON.stringify(
    ChatCompletionCreateParamsReasoning$outboundSchema.parse(
      chatCompletionCreateParamsReasoning,
    ),
  );
}

export function chatCompletionCreateParamsReasoningFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionCreateParamsReasoning, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ChatCompletionCreateParamsReasoning$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionCreateParamsReasoning' from JSON`,
  );
}

/** @internal */
export const ChatCompletionCreateParamsTypePython$inboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionCreateParamsTypePython> = z.nativeEnum(
    ChatCompletionCreateParamsTypePython,
  );

/** @internal */
export const ChatCompletionCreateParamsTypePython$outboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionCreateParamsTypePython> =
    ChatCompletionCreateParamsTypePython$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionCreateParamsTypePython$ {
  /** @deprecated use `ChatCompletionCreateParamsTypePython$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionCreateParamsTypePython$inboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsTypePython$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionCreateParamsTypePython$outboundSchema;
}

/** @internal */
export const ChatCompletionCreateParamsResponseFormatPython$inboundSchema:
  z.ZodType<
    ChatCompletionCreateParamsResponseFormatPython,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: ChatCompletionCreateParamsTypePython$inboundSchema,
  });

/** @internal */
export type ChatCompletionCreateParamsResponseFormatPython$Outbound = {
  type: string;
};

/** @internal */
export const ChatCompletionCreateParamsResponseFormatPython$outboundSchema:
  z.ZodType<
    ChatCompletionCreateParamsResponseFormatPython$Outbound,
    z.ZodTypeDef,
    ChatCompletionCreateParamsResponseFormatPython
  > = z.object({
    type: ChatCompletionCreateParamsTypePython$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionCreateParamsResponseFormatPython$ {
  /** @deprecated use `ChatCompletionCreateParamsResponseFormatPython$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionCreateParamsResponseFormatPython$inboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsResponseFormatPython$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionCreateParamsResponseFormatPython$outboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsResponseFormatPython$Outbound` instead. */
  export type Outbound =
    ChatCompletionCreateParamsResponseFormatPython$Outbound;
}

export function chatCompletionCreateParamsResponseFormatPythonToJSON(
  chatCompletionCreateParamsResponseFormatPython:
    ChatCompletionCreateParamsResponseFormatPython,
): string {
  return JSON.stringify(
    ChatCompletionCreateParamsResponseFormatPython$outboundSchema.parse(
      chatCompletionCreateParamsResponseFormatPython,
    ),
  );
}

export function chatCompletionCreateParamsResponseFormatPythonFromJSON(
  jsonString: string,
): SafeParseResult<
  ChatCompletionCreateParamsResponseFormatPython,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ChatCompletionCreateParamsResponseFormatPython$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ChatCompletionCreateParamsResponseFormatPython' from JSON`,
  );
}

/** @internal */
export const ChatCompletionCreateParamsTypeGrammar$inboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionCreateParamsTypeGrammar> = z.nativeEnum(
    ChatCompletionCreateParamsTypeGrammar,
  );

/** @internal */
export const ChatCompletionCreateParamsTypeGrammar$outboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionCreateParamsTypeGrammar> =
    ChatCompletionCreateParamsTypeGrammar$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionCreateParamsTypeGrammar$ {
  /** @deprecated use `ChatCompletionCreateParamsTypeGrammar$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionCreateParamsTypeGrammar$inboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsTypeGrammar$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionCreateParamsTypeGrammar$outboundSchema;
}

/** @internal */
export const ChatCompletionCreateParamsResponseFormatGrammar$inboundSchema:
  z.ZodType<
    ChatCompletionCreateParamsResponseFormatGrammar,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: ChatCompletionCreateParamsTypeGrammar$inboundSchema,
    grammar: z.string(),
  });

/** @internal */
export type ChatCompletionCreateParamsResponseFormatGrammar$Outbound = {
  type: string;
  grammar: string;
};

/** @internal */
export const ChatCompletionCreateParamsResponseFormatGrammar$outboundSchema:
  z.ZodType<
    ChatCompletionCreateParamsResponseFormatGrammar$Outbound,
    z.ZodTypeDef,
    ChatCompletionCreateParamsResponseFormatGrammar
  > = z.object({
    type: ChatCompletionCreateParamsTypeGrammar$outboundSchema,
    grammar: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionCreateParamsResponseFormatGrammar$ {
  /** @deprecated use `ChatCompletionCreateParamsResponseFormatGrammar$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionCreateParamsResponseFormatGrammar$inboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsResponseFormatGrammar$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionCreateParamsResponseFormatGrammar$outboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsResponseFormatGrammar$Outbound` instead. */
  export type Outbound =
    ChatCompletionCreateParamsResponseFormatGrammar$Outbound;
}

export function chatCompletionCreateParamsResponseFormatGrammarToJSON(
  chatCompletionCreateParamsResponseFormatGrammar:
    ChatCompletionCreateParamsResponseFormatGrammar,
): string {
  return JSON.stringify(
    ChatCompletionCreateParamsResponseFormatGrammar$outboundSchema.parse(
      chatCompletionCreateParamsResponseFormatGrammar,
    ),
  );
}

export function chatCompletionCreateParamsResponseFormatGrammarFromJSON(
  jsonString: string,
): SafeParseResult<
  ChatCompletionCreateParamsResponseFormatGrammar,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ChatCompletionCreateParamsResponseFormatGrammar$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ChatCompletionCreateParamsResponseFormatGrammar' from JSON`,
  );
}

/** @internal */
export const ChatCompletionCreateParamsTypeJSONSchema$inboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionCreateParamsTypeJSONSchema> = z
    .nativeEnum(ChatCompletionCreateParamsTypeJSONSchema);

/** @internal */
export const ChatCompletionCreateParamsTypeJSONSchema$outboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionCreateParamsTypeJSONSchema> =
    ChatCompletionCreateParamsTypeJSONSchema$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionCreateParamsTypeJSONSchema$ {
  /** @deprecated use `ChatCompletionCreateParamsTypeJSONSchema$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionCreateParamsTypeJSONSchema$inboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsTypeJSONSchema$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionCreateParamsTypeJSONSchema$outboundSchema;
}

/** @internal */
export const ChatCompletionCreateParamsJsonSchema$inboundSchema: z.ZodType<
  ChatCompletionCreateParamsJsonSchema,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  schema: ResponseFormatJsonSchemaSchema$inboundSchema.optional(),
  strict: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type ChatCompletionCreateParamsJsonSchema$Outbound = {
  name: string;
  description?: string | undefined;
  schema?: ResponseFormatJsonSchemaSchema$Outbound | undefined;
  strict?: boolean | null | undefined;
};

/** @internal */
export const ChatCompletionCreateParamsJsonSchema$outboundSchema: z.ZodType<
  ChatCompletionCreateParamsJsonSchema$Outbound,
  z.ZodTypeDef,
  ChatCompletionCreateParamsJsonSchema
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  schema: ResponseFormatJsonSchemaSchema$outboundSchema.optional(),
  strict: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionCreateParamsJsonSchema$ {
  /** @deprecated use `ChatCompletionCreateParamsJsonSchema$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionCreateParamsJsonSchema$inboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsJsonSchema$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionCreateParamsJsonSchema$outboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsJsonSchema$Outbound` instead. */
  export type Outbound = ChatCompletionCreateParamsJsonSchema$Outbound;
}

export function chatCompletionCreateParamsJsonSchemaToJSON(
  chatCompletionCreateParamsJsonSchema: ChatCompletionCreateParamsJsonSchema,
): string {
  return JSON.stringify(
    ChatCompletionCreateParamsJsonSchema$outboundSchema.parse(
      chatCompletionCreateParamsJsonSchema,
    ),
  );
}

export function chatCompletionCreateParamsJsonSchemaFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionCreateParamsJsonSchema, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ChatCompletionCreateParamsJsonSchema$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionCreateParamsJsonSchema' from JSON`,
  );
}

/** @internal */
export const ChatCompletionCreateParamsResponseFormatJSONSchema$inboundSchema:
  z.ZodType<
    ChatCompletionCreateParamsResponseFormatJSONSchema,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: ChatCompletionCreateParamsTypeJSONSchema$inboundSchema,
    json_schema: z.lazy(() =>
      ChatCompletionCreateParamsJsonSchema$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "json_schema": "jsonSchema",
    });
  });

/** @internal */
export type ChatCompletionCreateParamsResponseFormatJSONSchema$Outbound = {
  type: string;
  json_schema: ChatCompletionCreateParamsJsonSchema$Outbound;
};

/** @internal */
export const ChatCompletionCreateParamsResponseFormatJSONSchema$outboundSchema:
  z.ZodType<
    ChatCompletionCreateParamsResponseFormatJSONSchema$Outbound,
    z.ZodTypeDef,
    ChatCompletionCreateParamsResponseFormatJSONSchema
  > = z.object({
    type: ChatCompletionCreateParamsTypeJSONSchema$outboundSchema,
    jsonSchema: z.lazy(() =>
      ChatCompletionCreateParamsJsonSchema$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      jsonSchema: "json_schema",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionCreateParamsResponseFormatJSONSchema$ {
  /** @deprecated use `ChatCompletionCreateParamsResponseFormatJSONSchema$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionCreateParamsResponseFormatJSONSchema$inboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsResponseFormatJSONSchema$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionCreateParamsResponseFormatJSONSchema$outboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsResponseFormatJSONSchema$Outbound` instead. */
  export type Outbound =
    ChatCompletionCreateParamsResponseFormatJSONSchema$Outbound;
}

export function chatCompletionCreateParamsResponseFormatJSONSchemaToJSON(
  chatCompletionCreateParamsResponseFormatJSONSchema:
    ChatCompletionCreateParamsResponseFormatJSONSchema,
): string {
  return JSON.stringify(
    ChatCompletionCreateParamsResponseFormatJSONSchema$outboundSchema.parse(
      chatCompletionCreateParamsResponseFormatJSONSchema,
    ),
  );
}

export function chatCompletionCreateParamsResponseFormatJSONSchemaFromJSON(
  jsonString: string,
): SafeParseResult<
  ChatCompletionCreateParamsResponseFormatJSONSchema,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ChatCompletionCreateParamsResponseFormatJSONSchema$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ChatCompletionCreateParamsResponseFormatJSONSchema' from JSON`,
  );
}

/** @internal */
export const ChatCompletionCreateParamsTypeJSONObject$inboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionCreateParamsTypeJSONObject> = z
    .nativeEnum(ChatCompletionCreateParamsTypeJSONObject);

/** @internal */
export const ChatCompletionCreateParamsTypeJSONObject$outboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionCreateParamsTypeJSONObject> =
    ChatCompletionCreateParamsTypeJSONObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionCreateParamsTypeJSONObject$ {
  /** @deprecated use `ChatCompletionCreateParamsTypeJSONObject$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionCreateParamsTypeJSONObject$inboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsTypeJSONObject$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionCreateParamsTypeJSONObject$outboundSchema;
}

/** @internal */
export const ChatCompletionCreateParamsResponseFormatJSONObject$inboundSchema:
  z.ZodType<
    ChatCompletionCreateParamsResponseFormatJSONObject,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: ChatCompletionCreateParamsTypeJSONObject$inboundSchema,
  });

/** @internal */
export type ChatCompletionCreateParamsResponseFormatJSONObject$Outbound = {
  type: string;
};

/** @internal */
export const ChatCompletionCreateParamsResponseFormatJSONObject$outboundSchema:
  z.ZodType<
    ChatCompletionCreateParamsResponseFormatJSONObject$Outbound,
    z.ZodTypeDef,
    ChatCompletionCreateParamsResponseFormatJSONObject
  > = z.object({
    type: ChatCompletionCreateParamsTypeJSONObject$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionCreateParamsResponseFormatJSONObject$ {
  /** @deprecated use `ChatCompletionCreateParamsResponseFormatJSONObject$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionCreateParamsResponseFormatJSONObject$inboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsResponseFormatJSONObject$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionCreateParamsResponseFormatJSONObject$outboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsResponseFormatJSONObject$Outbound` instead. */
  export type Outbound =
    ChatCompletionCreateParamsResponseFormatJSONObject$Outbound;
}

export function chatCompletionCreateParamsResponseFormatJSONObjectToJSON(
  chatCompletionCreateParamsResponseFormatJSONObject:
    ChatCompletionCreateParamsResponseFormatJSONObject,
): string {
  return JSON.stringify(
    ChatCompletionCreateParamsResponseFormatJSONObject$outboundSchema.parse(
      chatCompletionCreateParamsResponseFormatJSONObject,
    ),
  );
}

export function chatCompletionCreateParamsResponseFormatJSONObjectFromJSON(
  jsonString: string,
): SafeParseResult<
  ChatCompletionCreateParamsResponseFormatJSONObject,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ChatCompletionCreateParamsResponseFormatJSONObject$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ChatCompletionCreateParamsResponseFormatJSONObject' from JSON`,
  );
}

/** @internal */
export const ChatCompletionCreateParamsTypeText$inboundSchema: z.ZodNativeEnum<
  typeof ChatCompletionCreateParamsTypeText
> = z.nativeEnum(ChatCompletionCreateParamsTypeText);

/** @internal */
export const ChatCompletionCreateParamsTypeText$outboundSchema: z.ZodNativeEnum<
  typeof ChatCompletionCreateParamsTypeText
> = ChatCompletionCreateParamsTypeText$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionCreateParamsTypeText$ {
  /** @deprecated use `ChatCompletionCreateParamsTypeText$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionCreateParamsTypeText$inboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsTypeText$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionCreateParamsTypeText$outboundSchema;
}

/** @internal */
export const ChatCompletionCreateParamsResponseFormatText$inboundSchema:
  z.ZodType<
    ChatCompletionCreateParamsResponseFormatText,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: ChatCompletionCreateParamsTypeText$inboundSchema,
  });

/** @internal */
export type ChatCompletionCreateParamsResponseFormatText$Outbound = {
  type: string;
};

/** @internal */
export const ChatCompletionCreateParamsResponseFormatText$outboundSchema:
  z.ZodType<
    ChatCompletionCreateParamsResponseFormatText$Outbound,
    z.ZodTypeDef,
    ChatCompletionCreateParamsResponseFormatText
  > = z.object({
    type: ChatCompletionCreateParamsTypeText$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionCreateParamsResponseFormatText$ {
  /** @deprecated use `ChatCompletionCreateParamsResponseFormatText$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionCreateParamsResponseFormatText$inboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsResponseFormatText$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionCreateParamsResponseFormatText$outboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsResponseFormatText$Outbound` instead. */
  export type Outbound = ChatCompletionCreateParamsResponseFormatText$Outbound;
}

export function chatCompletionCreateParamsResponseFormatTextToJSON(
  chatCompletionCreateParamsResponseFormatText:
    ChatCompletionCreateParamsResponseFormatText,
): string {
  return JSON.stringify(
    ChatCompletionCreateParamsResponseFormatText$outboundSchema.parse(
      chatCompletionCreateParamsResponseFormatText,
    ),
  );
}

export function chatCompletionCreateParamsResponseFormatTextFromJSON(
  jsonString: string,
): SafeParseResult<
  ChatCompletionCreateParamsResponseFormatText,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ChatCompletionCreateParamsResponseFormatText$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ChatCompletionCreateParamsResponseFormatText' from JSON`,
  );
}

/** @internal */
export const ChatCompletionCreateParamsResponseFormatUnion$inboundSchema:
  z.ZodType<
    ChatCompletionCreateParamsResponseFormatUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      ChatCompletionCreateParamsResponseFormatJSONSchema$inboundSchema
    ),
    z.lazy(() => ChatCompletionCreateParamsResponseFormatGrammar$inboundSchema),
    z.lazy(() => ChatCompletionCreateParamsResponseFormatText$inboundSchema),
    z.lazy(() =>
      ChatCompletionCreateParamsResponseFormatJSONObject$inboundSchema
    ),
    z.lazy(() => ChatCompletionCreateParamsResponseFormatPython$inboundSchema),
  ]);

/** @internal */
export type ChatCompletionCreateParamsResponseFormatUnion$Outbound =
  | ChatCompletionCreateParamsResponseFormatJSONSchema$Outbound
  | ChatCompletionCreateParamsResponseFormatGrammar$Outbound
  | ChatCompletionCreateParamsResponseFormatText$Outbound
  | ChatCompletionCreateParamsResponseFormatJSONObject$Outbound
  | ChatCompletionCreateParamsResponseFormatPython$Outbound;

/** @internal */
export const ChatCompletionCreateParamsResponseFormatUnion$outboundSchema:
  z.ZodType<
    ChatCompletionCreateParamsResponseFormatUnion$Outbound,
    z.ZodTypeDef,
    ChatCompletionCreateParamsResponseFormatUnion
  > = z.union([
    z.lazy(() =>
      ChatCompletionCreateParamsResponseFormatJSONSchema$outboundSchema
    ),
    z.lazy(() =>
      ChatCompletionCreateParamsResponseFormatGrammar$outboundSchema
    ),
    z.lazy(() => ChatCompletionCreateParamsResponseFormatText$outboundSchema),
    z.lazy(() =>
      ChatCompletionCreateParamsResponseFormatJSONObject$outboundSchema
    ),
    z.lazy(() => ChatCompletionCreateParamsResponseFormatPython$outboundSchema),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionCreateParamsResponseFormatUnion$ {
  /** @deprecated use `ChatCompletionCreateParamsResponseFormatUnion$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionCreateParamsResponseFormatUnion$inboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsResponseFormatUnion$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionCreateParamsResponseFormatUnion$outboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsResponseFormatUnion$Outbound` instead. */
  export type Outbound = ChatCompletionCreateParamsResponseFormatUnion$Outbound;
}

export function chatCompletionCreateParamsResponseFormatUnionToJSON(
  chatCompletionCreateParamsResponseFormatUnion:
    ChatCompletionCreateParamsResponseFormatUnion,
): string {
  return JSON.stringify(
    ChatCompletionCreateParamsResponseFormatUnion$outboundSchema.parse(
      chatCompletionCreateParamsResponseFormatUnion,
    ),
  );
}

export function chatCompletionCreateParamsResponseFormatUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  ChatCompletionCreateParamsResponseFormatUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ChatCompletionCreateParamsResponseFormatUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ChatCompletionCreateParamsResponseFormatUnion' from JSON`,
  );
}

/** @internal */
export const ChatCompletionCreateParamsStop$inboundSchema: z.ZodType<
  ChatCompletionCreateParamsStop,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string()), z.any()]);

/** @internal */
export type ChatCompletionCreateParamsStop$Outbound =
  | string
  | Array<string>
  | any;

/** @internal */
export const ChatCompletionCreateParamsStop$outboundSchema: z.ZodType<
  ChatCompletionCreateParamsStop$Outbound,
  z.ZodTypeDef,
  ChatCompletionCreateParamsStop
> = z.union([z.string(), z.array(z.string()), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionCreateParamsStop$ {
  /** @deprecated use `ChatCompletionCreateParamsStop$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionCreateParamsStop$inboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsStop$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionCreateParamsStop$outboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsStop$Outbound` instead. */
  export type Outbound = ChatCompletionCreateParamsStop$Outbound;
}

export function chatCompletionCreateParamsStopToJSON(
  chatCompletionCreateParamsStop: ChatCompletionCreateParamsStop,
): string {
  return JSON.stringify(
    ChatCompletionCreateParamsStop$outboundSchema.parse(
      chatCompletionCreateParamsStop,
    ),
  );
}

export function chatCompletionCreateParamsStopFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionCreateParamsStop, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionCreateParamsStop$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionCreateParamsStop' from JSON`,
  );
}

/** @internal */
export const ChatCompletionCreateParamsStreamOptions$inboundSchema: z.ZodType<
  ChatCompletionCreateParamsStreamOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  include_usage: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "include_usage": "includeUsage",
  });
});

/** @internal */
export type ChatCompletionCreateParamsStreamOptions$Outbound = {
  include_usage?: boolean | undefined;
};

/** @internal */
export const ChatCompletionCreateParamsStreamOptions$outboundSchema: z.ZodType<
  ChatCompletionCreateParamsStreamOptions$Outbound,
  z.ZodTypeDef,
  ChatCompletionCreateParamsStreamOptions
> = z.object({
  includeUsage: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    includeUsage: "include_usage",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionCreateParamsStreamOptions$ {
  /** @deprecated use `ChatCompletionCreateParamsStreamOptions$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionCreateParamsStreamOptions$inboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsStreamOptions$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionCreateParamsStreamOptions$outboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsStreamOptions$Outbound` instead. */
  export type Outbound = ChatCompletionCreateParamsStreamOptions$Outbound;
}

export function chatCompletionCreateParamsStreamOptionsToJSON(
  chatCompletionCreateParamsStreamOptions:
    ChatCompletionCreateParamsStreamOptions,
): string {
  return JSON.stringify(
    ChatCompletionCreateParamsStreamOptions$outboundSchema.parse(
      chatCompletionCreateParamsStreamOptions,
    ),
  );
}

export function chatCompletionCreateParamsStreamOptionsFromJSON(
  jsonString: string,
): SafeParseResult<
  ChatCompletionCreateParamsStreamOptions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ChatCompletionCreateParamsStreamOptions$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ChatCompletionCreateParamsStreamOptions' from JSON`,
  );
}

/** @internal */
export const ChatCompletionCreateParamsReasoningEffort$inboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionCreateParamsReasoningEffort> = z
    .nativeEnum(ChatCompletionCreateParamsReasoningEffort);

/** @internal */
export const ChatCompletionCreateParamsReasoningEffort$outboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionCreateParamsReasoningEffort> =
    ChatCompletionCreateParamsReasoningEffort$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionCreateParamsReasoningEffort$ {
  /** @deprecated use `ChatCompletionCreateParamsReasoningEffort$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionCreateParamsReasoningEffort$inboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsReasoningEffort$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionCreateParamsReasoningEffort$outboundSchema;
}

/** @internal */
export const ChatCompletionCreateParamsDataCollection$inboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionCreateParamsDataCollection> = z
    .nativeEnum(ChatCompletionCreateParamsDataCollection);

/** @internal */
export const ChatCompletionCreateParamsDataCollection$outboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionCreateParamsDataCollection> =
    ChatCompletionCreateParamsDataCollection$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionCreateParamsDataCollection$ {
  /** @deprecated use `ChatCompletionCreateParamsDataCollection$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionCreateParamsDataCollection$inboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsDataCollection$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionCreateParamsDataCollection$outboundSchema;
}

/** @internal */
export const ChatCompletionCreateParamsOrderEnum$inboundSchema: z.ZodNativeEnum<
  typeof ChatCompletionCreateParamsOrderEnum
> = z.nativeEnum(ChatCompletionCreateParamsOrderEnum);

/** @internal */
export const ChatCompletionCreateParamsOrderEnum$outboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionCreateParamsOrderEnum> =
    ChatCompletionCreateParamsOrderEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionCreateParamsOrderEnum$ {
  /** @deprecated use `ChatCompletionCreateParamsOrderEnum$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionCreateParamsOrderEnum$inboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsOrderEnum$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionCreateParamsOrderEnum$outboundSchema;
}

/** @internal */
export const ChatCompletionCreateParamsOrderUnion$inboundSchema: z.ZodType<
  ChatCompletionCreateParamsOrderUnion,
  z.ZodTypeDef,
  unknown
> = z.union([ChatCompletionCreateParamsOrderEnum$inboundSchema, z.string()]);

/** @internal */
export type ChatCompletionCreateParamsOrderUnion$Outbound = string | string;

/** @internal */
export const ChatCompletionCreateParamsOrderUnion$outboundSchema: z.ZodType<
  ChatCompletionCreateParamsOrderUnion$Outbound,
  z.ZodTypeDef,
  ChatCompletionCreateParamsOrderUnion
> = z.union([ChatCompletionCreateParamsOrderEnum$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionCreateParamsOrderUnion$ {
  /** @deprecated use `ChatCompletionCreateParamsOrderUnion$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionCreateParamsOrderUnion$inboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsOrderUnion$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionCreateParamsOrderUnion$outboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsOrderUnion$Outbound` instead. */
  export type Outbound = ChatCompletionCreateParamsOrderUnion$Outbound;
}

export function chatCompletionCreateParamsOrderUnionToJSON(
  chatCompletionCreateParamsOrderUnion: ChatCompletionCreateParamsOrderUnion,
): string {
  return JSON.stringify(
    ChatCompletionCreateParamsOrderUnion$outboundSchema.parse(
      chatCompletionCreateParamsOrderUnion,
    ),
  );
}

export function chatCompletionCreateParamsOrderUnionFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionCreateParamsOrderUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ChatCompletionCreateParamsOrderUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionCreateParamsOrderUnion' from JSON`,
  );
}

/** @internal */
export const ChatCompletionCreateParamsOnlyEnum$inboundSchema: z.ZodNativeEnum<
  typeof ChatCompletionCreateParamsOnlyEnum
> = z.nativeEnum(ChatCompletionCreateParamsOnlyEnum);

/** @internal */
export const ChatCompletionCreateParamsOnlyEnum$outboundSchema: z.ZodNativeEnum<
  typeof ChatCompletionCreateParamsOnlyEnum
> = ChatCompletionCreateParamsOnlyEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionCreateParamsOnlyEnum$ {
  /** @deprecated use `ChatCompletionCreateParamsOnlyEnum$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionCreateParamsOnlyEnum$inboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsOnlyEnum$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionCreateParamsOnlyEnum$outboundSchema;
}

/** @internal */
export const ChatCompletionCreateParamsOnlyUnion$inboundSchema: z.ZodType<
  ChatCompletionCreateParamsOnlyUnion,
  z.ZodTypeDef,
  unknown
> = z.union([ChatCompletionCreateParamsOnlyEnum$inboundSchema, z.string()]);

/** @internal */
export type ChatCompletionCreateParamsOnlyUnion$Outbound = string | string;

/** @internal */
export const ChatCompletionCreateParamsOnlyUnion$outboundSchema: z.ZodType<
  ChatCompletionCreateParamsOnlyUnion$Outbound,
  z.ZodTypeDef,
  ChatCompletionCreateParamsOnlyUnion
> = z.union([ChatCompletionCreateParamsOnlyEnum$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionCreateParamsOnlyUnion$ {
  /** @deprecated use `ChatCompletionCreateParamsOnlyUnion$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionCreateParamsOnlyUnion$inboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsOnlyUnion$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionCreateParamsOnlyUnion$outboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsOnlyUnion$Outbound` instead. */
  export type Outbound = ChatCompletionCreateParamsOnlyUnion$Outbound;
}

export function chatCompletionCreateParamsOnlyUnionToJSON(
  chatCompletionCreateParamsOnlyUnion: ChatCompletionCreateParamsOnlyUnion,
): string {
  return JSON.stringify(
    ChatCompletionCreateParamsOnlyUnion$outboundSchema.parse(
      chatCompletionCreateParamsOnlyUnion,
    ),
  );
}

export function chatCompletionCreateParamsOnlyUnionFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionCreateParamsOnlyUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ChatCompletionCreateParamsOnlyUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionCreateParamsOnlyUnion' from JSON`,
  );
}

/** @internal */
export const ChatCompletionCreateParamsIgnoreEnum$inboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionCreateParamsIgnoreEnum> = z.nativeEnum(
    ChatCompletionCreateParamsIgnoreEnum,
  );

/** @internal */
export const ChatCompletionCreateParamsIgnoreEnum$outboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionCreateParamsIgnoreEnum> =
    ChatCompletionCreateParamsIgnoreEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionCreateParamsIgnoreEnum$ {
  /** @deprecated use `ChatCompletionCreateParamsIgnoreEnum$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionCreateParamsIgnoreEnum$inboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsIgnoreEnum$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionCreateParamsIgnoreEnum$outboundSchema;
}

/** @internal */
export const ChatCompletionCreateParamsIgnoreUnion$inboundSchema: z.ZodType<
  ChatCompletionCreateParamsIgnoreUnion,
  z.ZodTypeDef,
  unknown
> = z.union([ChatCompletionCreateParamsIgnoreEnum$inboundSchema, z.string()]);

/** @internal */
export type ChatCompletionCreateParamsIgnoreUnion$Outbound = string | string;

/** @internal */
export const ChatCompletionCreateParamsIgnoreUnion$outboundSchema: z.ZodType<
  ChatCompletionCreateParamsIgnoreUnion$Outbound,
  z.ZodTypeDef,
  ChatCompletionCreateParamsIgnoreUnion
> = z.union([ChatCompletionCreateParamsIgnoreEnum$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionCreateParamsIgnoreUnion$ {
  /** @deprecated use `ChatCompletionCreateParamsIgnoreUnion$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionCreateParamsIgnoreUnion$inboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsIgnoreUnion$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionCreateParamsIgnoreUnion$outboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsIgnoreUnion$Outbound` instead. */
  export type Outbound = ChatCompletionCreateParamsIgnoreUnion$Outbound;
}

export function chatCompletionCreateParamsIgnoreUnionToJSON(
  chatCompletionCreateParamsIgnoreUnion: ChatCompletionCreateParamsIgnoreUnion,
): string {
  return JSON.stringify(
    ChatCompletionCreateParamsIgnoreUnion$outboundSchema.parse(
      chatCompletionCreateParamsIgnoreUnion,
    ),
  );
}

export function chatCompletionCreateParamsIgnoreUnionFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionCreateParamsIgnoreUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ChatCompletionCreateParamsIgnoreUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionCreateParamsIgnoreUnion' from JSON`,
  );
}

/** @internal */
export const ChatCompletionCreateParamsQuantization$inboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionCreateParamsQuantization> = z.nativeEnum(
    ChatCompletionCreateParamsQuantization,
  );

/** @internal */
export const ChatCompletionCreateParamsQuantization$outboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionCreateParamsQuantization> =
    ChatCompletionCreateParamsQuantization$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionCreateParamsQuantization$ {
  /** @deprecated use `ChatCompletionCreateParamsQuantization$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionCreateParamsQuantization$inboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsQuantization$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionCreateParamsQuantization$outboundSchema;
}

/** @internal */
export const ChatCompletionCreateParamsSort$inboundSchema: z.ZodNativeEnum<
  typeof ChatCompletionCreateParamsSort
> = z.nativeEnum(ChatCompletionCreateParamsSort);

/** @internal */
export const ChatCompletionCreateParamsSort$outboundSchema: z.ZodNativeEnum<
  typeof ChatCompletionCreateParamsSort
> = ChatCompletionCreateParamsSort$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionCreateParamsSort$ {
  /** @deprecated use `ChatCompletionCreateParamsSort$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionCreateParamsSort$inboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsSort$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionCreateParamsSort$outboundSchema;
}

/** @internal */
export const ChatCompletionCreateParamsPrompt$inboundSchema: z.ZodType<
  ChatCompletionCreateParamsPrompt,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type ChatCompletionCreateParamsPrompt$Outbound = number | string | any;

/** @internal */
export const ChatCompletionCreateParamsPrompt$outboundSchema: z.ZodType<
  ChatCompletionCreateParamsPrompt$Outbound,
  z.ZodTypeDef,
  ChatCompletionCreateParamsPrompt
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionCreateParamsPrompt$ {
  /** @deprecated use `ChatCompletionCreateParamsPrompt$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionCreateParamsPrompt$inboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsPrompt$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionCreateParamsPrompt$outboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsPrompt$Outbound` instead. */
  export type Outbound = ChatCompletionCreateParamsPrompt$Outbound;
}

export function chatCompletionCreateParamsPromptToJSON(
  chatCompletionCreateParamsPrompt: ChatCompletionCreateParamsPrompt,
): string {
  return JSON.stringify(
    ChatCompletionCreateParamsPrompt$outboundSchema.parse(
      chatCompletionCreateParamsPrompt,
    ),
  );
}

export function chatCompletionCreateParamsPromptFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionCreateParamsPrompt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionCreateParamsPrompt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionCreateParamsPrompt' from JSON`,
  );
}

/** @internal */
export const ChatCompletionCreateParamsCompletion$inboundSchema: z.ZodType<
  ChatCompletionCreateParamsCompletion,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type ChatCompletionCreateParamsCompletion$Outbound =
  | number
  | string
  | any;

/** @internal */
export const ChatCompletionCreateParamsCompletion$outboundSchema: z.ZodType<
  ChatCompletionCreateParamsCompletion$Outbound,
  z.ZodTypeDef,
  ChatCompletionCreateParamsCompletion
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionCreateParamsCompletion$ {
  /** @deprecated use `ChatCompletionCreateParamsCompletion$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionCreateParamsCompletion$inboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsCompletion$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionCreateParamsCompletion$outboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsCompletion$Outbound` instead. */
  export type Outbound = ChatCompletionCreateParamsCompletion$Outbound;
}

export function chatCompletionCreateParamsCompletionToJSON(
  chatCompletionCreateParamsCompletion: ChatCompletionCreateParamsCompletion,
): string {
  return JSON.stringify(
    ChatCompletionCreateParamsCompletion$outboundSchema.parse(
      chatCompletionCreateParamsCompletion,
    ),
  );
}

export function chatCompletionCreateParamsCompletionFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionCreateParamsCompletion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ChatCompletionCreateParamsCompletion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionCreateParamsCompletion' from JSON`,
  );
}

/** @internal */
export const ChatCompletionCreateParamsImage$inboundSchema: z.ZodType<
  ChatCompletionCreateParamsImage,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type ChatCompletionCreateParamsImage$Outbound = number | string | any;

/** @internal */
export const ChatCompletionCreateParamsImage$outboundSchema: z.ZodType<
  ChatCompletionCreateParamsImage$Outbound,
  z.ZodTypeDef,
  ChatCompletionCreateParamsImage
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionCreateParamsImage$ {
  /** @deprecated use `ChatCompletionCreateParamsImage$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionCreateParamsImage$inboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsImage$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionCreateParamsImage$outboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsImage$Outbound` instead. */
  export type Outbound = ChatCompletionCreateParamsImage$Outbound;
}

export function chatCompletionCreateParamsImageToJSON(
  chatCompletionCreateParamsImage: ChatCompletionCreateParamsImage,
): string {
  return JSON.stringify(
    ChatCompletionCreateParamsImage$outboundSchema.parse(
      chatCompletionCreateParamsImage,
    ),
  );
}

export function chatCompletionCreateParamsImageFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionCreateParamsImage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionCreateParamsImage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionCreateParamsImage' from JSON`,
  );
}

/** @internal */
export const ChatCompletionCreateParamsAudio$inboundSchema: z.ZodType<
  ChatCompletionCreateParamsAudio,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type ChatCompletionCreateParamsAudio$Outbound = number | string | any;

/** @internal */
export const ChatCompletionCreateParamsAudio$outboundSchema: z.ZodType<
  ChatCompletionCreateParamsAudio$Outbound,
  z.ZodTypeDef,
  ChatCompletionCreateParamsAudio
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionCreateParamsAudio$ {
  /** @deprecated use `ChatCompletionCreateParamsAudio$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionCreateParamsAudio$inboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsAudio$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionCreateParamsAudio$outboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsAudio$Outbound` instead. */
  export type Outbound = ChatCompletionCreateParamsAudio$Outbound;
}

export function chatCompletionCreateParamsAudioToJSON(
  chatCompletionCreateParamsAudio: ChatCompletionCreateParamsAudio,
): string {
  return JSON.stringify(
    ChatCompletionCreateParamsAudio$outboundSchema.parse(
      chatCompletionCreateParamsAudio,
    ),
  );
}

export function chatCompletionCreateParamsAudioFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionCreateParamsAudio, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionCreateParamsAudio$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionCreateParamsAudio' from JSON`,
  );
}

/** @internal */
export const ChatCompletionCreateParamsRequest$inboundSchema: z.ZodType<
  ChatCompletionCreateParamsRequest,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type ChatCompletionCreateParamsRequest$Outbound = number | string | any;

/** @internal */
export const ChatCompletionCreateParamsRequest$outboundSchema: z.ZodType<
  ChatCompletionCreateParamsRequest$Outbound,
  z.ZodTypeDef,
  ChatCompletionCreateParamsRequest
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionCreateParamsRequest$ {
  /** @deprecated use `ChatCompletionCreateParamsRequest$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionCreateParamsRequest$inboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsRequest$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionCreateParamsRequest$outboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsRequest$Outbound` instead. */
  export type Outbound = ChatCompletionCreateParamsRequest$Outbound;
}

export function chatCompletionCreateParamsRequestToJSON(
  chatCompletionCreateParamsRequest: ChatCompletionCreateParamsRequest,
): string {
  return JSON.stringify(
    ChatCompletionCreateParamsRequest$outboundSchema.parse(
      chatCompletionCreateParamsRequest,
    ),
  );
}

export function chatCompletionCreateParamsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionCreateParamsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionCreateParamsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionCreateParamsRequest' from JSON`,
  );
}

/** @internal */
export const ChatCompletionCreateParamsMaxPrice$inboundSchema: z.ZodType<
  ChatCompletionCreateParamsMaxPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  prompt: z.union([z.number(), z.string(), z.any()]).optional(),
  completion: z.union([z.number(), z.string(), z.any()]).optional(),
  image: z.union([z.number(), z.string(), z.any()]).optional(),
  audio: z.union([z.number(), z.string(), z.any()]).optional(),
  request: z.union([z.number(), z.string(), z.any()]).optional(),
});

/** @internal */
export type ChatCompletionCreateParamsMaxPrice$Outbound = {
  prompt?: number | string | any | undefined;
  completion?: number | string | any | undefined;
  image?: number | string | any | undefined;
  audio?: number | string | any | undefined;
  request?: number | string | any | undefined;
};

/** @internal */
export const ChatCompletionCreateParamsMaxPrice$outboundSchema: z.ZodType<
  ChatCompletionCreateParamsMaxPrice$Outbound,
  z.ZodTypeDef,
  ChatCompletionCreateParamsMaxPrice
> = z.object({
  prompt: z.union([z.number(), z.string(), z.any()]).optional(),
  completion: z.union([z.number(), z.string(), z.any()]).optional(),
  image: z.union([z.number(), z.string(), z.any()]).optional(),
  audio: z.union([z.number(), z.string(), z.any()]).optional(),
  request: z.union([z.number(), z.string(), z.any()]).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionCreateParamsMaxPrice$ {
  /** @deprecated use `ChatCompletionCreateParamsMaxPrice$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionCreateParamsMaxPrice$inboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsMaxPrice$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionCreateParamsMaxPrice$outboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsMaxPrice$Outbound` instead. */
  export type Outbound = ChatCompletionCreateParamsMaxPrice$Outbound;
}

export function chatCompletionCreateParamsMaxPriceToJSON(
  chatCompletionCreateParamsMaxPrice: ChatCompletionCreateParamsMaxPrice,
): string {
  return JSON.stringify(
    ChatCompletionCreateParamsMaxPrice$outboundSchema.parse(
      chatCompletionCreateParamsMaxPrice,
    ),
  );
}

export function chatCompletionCreateParamsMaxPriceFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionCreateParamsMaxPrice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ChatCompletionCreateParamsMaxPrice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionCreateParamsMaxPrice' from JSON`,
  );
}

/** @internal */
export const ChatCompletionCreateParamsProvider$inboundSchema: z.ZodType<
  ChatCompletionCreateParamsProvider,
  z.ZodTypeDef,
  unknown
> = z.object({
  allow_fallbacks: z.nullable(z.boolean()).optional(),
  require_parameters: z.nullable(z.boolean()).optional(),
  data_collection: z.nullable(
    ChatCompletionCreateParamsDataCollection$inboundSchema,
  ).optional(),
  order: z.nullable(
    z.array(
      z.union([ChatCompletionCreateParamsOrderEnum$inboundSchema, z.string()]),
    ),
  ).optional(),
  only: z.nullable(
    z.array(
      z.union([ChatCompletionCreateParamsOnlyEnum$inboundSchema, z.string()]),
    ),
  ).optional(),
  ignore: z.nullable(
    z.array(
      z.union([ChatCompletionCreateParamsIgnoreEnum$inboundSchema, z.string()]),
    ),
  ).optional(),
  quantizations: z.nullable(
    z.array(ChatCompletionCreateParamsQuantization$inboundSchema),
  ).optional(),
  sort: z.nullable(ChatCompletionCreateParamsSort$inboundSchema).optional(),
  max_price: z.lazy(() => ChatCompletionCreateParamsMaxPrice$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "allow_fallbacks": "allowFallbacks",
    "require_parameters": "requireParameters",
    "data_collection": "dataCollection",
    "max_price": "maxPrice",
  });
});

/** @internal */
export type ChatCompletionCreateParamsProvider$Outbound = {
  allow_fallbacks?: boolean | null | undefined;
  require_parameters?: boolean | null | undefined;
  data_collection?: string | null | undefined;
  order?: Array<string | string> | null | undefined;
  only?: Array<string | string> | null | undefined;
  ignore?: Array<string | string> | null | undefined;
  quantizations?: Array<string> | null | undefined;
  sort?: string | null | undefined;
  max_price?: ChatCompletionCreateParamsMaxPrice$Outbound | undefined;
};

/** @internal */
export const ChatCompletionCreateParamsProvider$outboundSchema: z.ZodType<
  ChatCompletionCreateParamsProvider$Outbound,
  z.ZodTypeDef,
  ChatCompletionCreateParamsProvider
> = z.object({
  allowFallbacks: z.nullable(z.boolean()).optional(),
  requireParameters: z.nullable(z.boolean()).optional(),
  dataCollection: z.nullable(
    ChatCompletionCreateParamsDataCollection$outboundSchema,
  ).optional(),
  order: z.nullable(
    z.array(
      z.union([ChatCompletionCreateParamsOrderEnum$outboundSchema, z.string()]),
    ),
  ).optional(),
  only: z.nullable(
    z.array(
      z.union([ChatCompletionCreateParamsOnlyEnum$outboundSchema, z.string()]),
    ),
  ).optional(),
  ignore: z.nullable(
    z.array(
      z.union([
        ChatCompletionCreateParamsIgnoreEnum$outboundSchema,
        z.string(),
      ]),
    ),
  ).optional(),
  quantizations: z.nullable(
    z.array(ChatCompletionCreateParamsQuantization$outboundSchema),
  ).optional(),
  sort: z.nullable(ChatCompletionCreateParamsSort$outboundSchema).optional(),
  maxPrice: z.lazy(() => ChatCompletionCreateParamsMaxPrice$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    allowFallbacks: "allow_fallbacks",
    requireParameters: "require_parameters",
    dataCollection: "data_collection",
    maxPrice: "max_price",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionCreateParamsProvider$ {
  /** @deprecated use `ChatCompletionCreateParamsProvider$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionCreateParamsProvider$inboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsProvider$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionCreateParamsProvider$outboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsProvider$Outbound` instead. */
  export type Outbound = ChatCompletionCreateParamsProvider$Outbound;
}

export function chatCompletionCreateParamsProviderToJSON(
  chatCompletionCreateParamsProvider: ChatCompletionCreateParamsProvider,
): string {
  return JSON.stringify(
    ChatCompletionCreateParamsProvider$outboundSchema.parse(
      chatCompletionCreateParamsProvider,
    ),
  );
}

export function chatCompletionCreateParamsProviderFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionCreateParamsProvider, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ChatCompletionCreateParamsProvider$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionCreateParamsProvider' from JSON`,
  );
}

/** @internal */
export const ChatCompletionCreateParamsIdFileParser$inboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionCreateParamsIdFileParser> = z.nativeEnum(
    ChatCompletionCreateParamsIdFileParser,
  );

/** @internal */
export const ChatCompletionCreateParamsIdFileParser$outboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionCreateParamsIdFileParser> =
    ChatCompletionCreateParamsIdFileParser$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionCreateParamsIdFileParser$ {
  /** @deprecated use `ChatCompletionCreateParamsIdFileParser$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionCreateParamsIdFileParser$inboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsIdFileParser$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionCreateParamsIdFileParser$outboundSchema;
}

/** @internal */
export const ChatCompletionCreateParamsPdfEngine$inboundSchema: z.ZodNativeEnum<
  typeof ChatCompletionCreateParamsPdfEngine
> = z.nativeEnum(ChatCompletionCreateParamsPdfEngine);

/** @internal */
export const ChatCompletionCreateParamsPdfEngine$outboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionCreateParamsPdfEngine> =
    ChatCompletionCreateParamsPdfEngine$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionCreateParamsPdfEngine$ {
  /** @deprecated use `ChatCompletionCreateParamsPdfEngine$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionCreateParamsPdfEngine$inboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsPdfEngine$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionCreateParamsPdfEngine$outboundSchema;
}

/** @internal */
export const ChatCompletionCreateParamsPdf$inboundSchema: z.ZodType<
  ChatCompletionCreateParamsPdf,
  z.ZodTypeDef,
  unknown
> = z.object({
  engine: ChatCompletionCreateParamsPdfEngine$inboundSchema.optional(),
});

/** @internal */
export type ChatCompletionCreateParamsPdf$Outbound = {
  engine?: string | undefined;
};

/** @internal */
export const ChatCompletionCreateParamsPdf$outboundSchema: z.ZodType<
  ChatCompletionCreateParamsPdf$Outbound,
  z.ZodTypeDef,
  ChatCompletionCreateParamsPdf
> = z.object({
  engine: ChatCompletionCreateParamsPdfEngine$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionCreateParamsPdf$ {
  /** @deprecated use `ChatCompletionCreateParamsPdf$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionCreateParamsPdf$inboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsPdf$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionCreateParamsPdf$outboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsPdf$Outbound` instead. */
  export type Outbound = ChatCompletionCreateParamsPdf$Outbound;
}

export function chatCompletionCreateParamsPdfToJSON(
  chatCompletionCreateParamsPdf: ChatCompletionCreateParamsPdf,
): string {
  return JSON.stringify(
    ChatCompletionCreateParamsPdf$outboundSchema.parse(
      chatCompletionCreateParamsPdf,
    ),
  );
}

export function chatCompletionCreateParamsPdfFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionCreateParamsPdf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionCreateParamsPdf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionCreateParamsPdf' from JSON`,
  );
}

/** @internal */
export const ChatCompletionCreateParamsPluginFileParser$inboundSchema:
  z.ZodType<ChatCompletionCreateParamsPluginFileParser, z.ZodTypeDef, unknown> =
    z.object({
      id: ChatCompletionCreateParamsIdFileParser$inboundSchema,
      max_files: z.number().optional(),
      pdf: z.lazy(() => ChatCompletionCreateParamsPdf$inboundSchema).optional(),
    }).transform((v) => {
      return remap$(v, {
        "max_files": "maxFiles",
      });
    });

/** @internal */
export type ChatCompletionCreateParamsPluginFileParser$Outbound = {
  id: string;
  max_files?: number | undefined;
  pdf?: ChatCompletionCreateParamsPdf$Outbound | undefined;
};

/** @internal */
export const ChatCompletionCreateParamsPluginFileParser$outboundSchema:
  z.ZodType<
    ChatCompletionCreateParamsPluginFileParser$Outbound,
    z.ZodTypeDef,
    ChatCompletionCreateParamsPluginFileParser
  > = z.object({
    id: ChatCompletionCreateParamsIdFileParser$outboundSchema,
    maxFiles: z.number().optional(),
    pdf: z.lazy(() => ChatCompletionCreateParamsPdf$outboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      maxFiles: "max_files",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionCreateParamsPluginFileParser$ {
  /** @deprecated use `ChatCompletionCreateParamsPluginFileParser$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionCreateParamsPluginFileParser$inboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsPluginFileParser$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionCreateParamsPluginFileParser$outboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsPluginFileParser$Outbound` instead. */
  export type Outbound = ChatCompletionCreateParamsPluginFileParser$Outbound;
}

export function chatCompletionCreateParamsPluginFileParserToJSON(
  chatCompletionCreateParamsPluginFileParser:
    ChatCompletionCreateParamsPluginFileParser,
): string {
  return JSON.stringify(
    ChatCompletionCreateParamsPluginFileParser$outboundSchema.parse(
      chatCompletionCreateParamsPluginFileParser,
    ),
  );
}

export function chatCompletionCreateParamsPluginFileParserFromJSON(
  jsonString: string,
): SafeParseResult<
  ChatCompletionCreateParamsPluginFileParser,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ChatCompletionCreateParamsPluginFileParser$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ChatCompletionCreateParamsPluginFileParser' from JSON`,
  );
}

/** @internal */
export const ChatCompletionCreateParamsIdChainOfThought$inboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionCreateParamsIdChainOfThought> = z
    .nativeEnum(ChatCompletionCreateParamsIdChainOfThought);

/** @internal */
export const ChatCompletionCreateParamsIdChainOfThought$outboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionCreateParamsIdChainOfThought> =
    ChatCompletionCreateParamsIdChainOfThought$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionCreateParamsIdChainOfThought$ {
  /** @deprecated use `ChatCompletionCreateParamsIdChainOfThought$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionCreateParamsIdChainOfThought$inboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsIdChainOfThought$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionCreateParamsIdChainOfThought$outboundSchema;
}

/** @internal */
export const ChatCompletionCreateParamsPluginChainOfThought$inboundSchema:
  z.ZodType<
    ChatCompletionCreateParamsPluginChainOfThought,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: ChatCompletionCreateParamsIdChainOfThought$inboundSchema,
  });

/** @internal */
export type ChatCompletionCreateParamsPluginChainOfThought$Outbound = {
  id: string;
};

/** @internal */
export const ChatCompletionCreateParamsPluginChainOfThought$outboundSchema:
  z.ZodType<
    ChatCompletionCreateParamsPluginChainOfThought$Outbound,
    z.ZodTypeDef,
    ChatCompletionCreateParamsPluginChainOfThought
  > = z.object({
    id: ChatCompletionCreateParamsIdChainOfThought$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionCreateParamsPluginChainOfThought$ {
  /** @deprecated use `ChatCompletionCreateParamsPluginChainOfThought$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionCreateParamsPluginChainOfThought$inboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsPluginChainOfThought$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionCreateParamsPluginChainOfThought$outboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsPluginChainOfThought$Outbound` instead. */
  export type Outbound =
    ChatCompletionCreateParamsPluginChainOfThought$Outbound;
}

export function chatCompletionCreateParamsPluginChainOfThoughtToJSON(
  chatCompletionCreateParamsPluginChainOfThought:
    ChatCompletionCreateParamsPluginChainOfThought,
): string {
  return JSON.stringify(
    ChatCompletionCreateParamsPluginChainOfThought$outboundSchema.parse(
      chatCompletionCreateParamsPluginChainOfThought,
    ),
  );
}

export function chatCompletionCreateParamsPluginChainOfThoughtFromJSON(
  jsonString: string,
): SafeParseResult<
  ChatCompletionCreateParamsPluginChainOfThought,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ChatCompletionCreateParamsPluginChainOfThought$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ChatCompletionCreateParamsPluginChainOfThought' from JSON`,
  );
}

/** @internal */
export const ChatCompletionCreateParamsIdWeb$inboundSchema: z.ZodNativeEnum<
  typeof ChatCompletionCreateParamsIdWeb
> = z.nativeEnum(ChatCompletionCreateParamsIdWeb);

/** @internal */
export const ChatCompletionCreateParamsIdWeb$outboundSchema: z.ZodNativeEnum<
  typeof ChatCompletionCreateParamsIdWeb
> = ChatCompletionCreateParamsIdWeb$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionCreateParamsIdWeb$ {
  /** @deprecated use `ChatCompletionCreateParamsIdWeb$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionCreateParamsIdWeb$inboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsIdWeb$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionCreateParamsIdWeb$outboundSchema;
}

/** @internal */
export const ChatCompletionCreateParamsEngine$inboundSchema: z.ZodNativeEnum<
  typeof ChatCompletionCreateParamsEngine
> = z.nativeEnum(ChatCompletionCreateParamsEngine);

/** @internal */
export const ChatCompletionCreateParamsEngine$outboundSchema: z.ZodNativeEnum<
  typeof ChatCompletionCreateParamsEngine
> = ChatCompletionCreateParamsEngine$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionCreateParamsEngine$ {
  /** @deprecated use `ChatCompletionCreateParamsEngine$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionCreateParamsEngine$inboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsEngine$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionCreateParamsEngine$outboundSchema;
}

/** @internal */
export const ChatCompletionCreateParamsPluginWeb$inboundSchema: z.ZodType<
  ChatCompletionCreateParamsPluginWeb,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: ChatCompletionCreateParamsIdWeb$inboundSchema,
  max_results: z.number().optional(),
  search_prompt: z.string().optional(),
  engine: ChatCompletionCreateParamsEngine$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "max_results": "maxResults",
    "search_prompt": "searchPrompt",
  });
});

/** @internal */
export type ChatCompletionCreateParamsPluginWeb$Outbound = {
  id: string;
  max_results?: number | undefined;
  search_prompt?: string | undefined;
  engine?: string | undefined;
};

/** @internal */
export const ChatCompletionCreateParamsPluginWeb$outboundSchema: z.ZodType<
  ChatCompletionCreateParamsPluginWeb$Outbound,
  z.ZodTypeDef,
  ChatCompletionCreateParamsPluginWeb
> = z.object({
  id: ChatCompletionCreateParamsIdWeb$outboundSchema,
  maxResults: z.number().optional(),
  searchPrompt: z.string().optional(),
  engine: ChatCompletionCreateParamsEngine$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    maxResults: "max_results",
    searchPrompt: "search_prompt",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionCreateParamsPluginWeb$ {
  /** @deprecated use `ChatCompletionCreateParamsPluginWeb$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionCreateParamsPluginWeb$inboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsPluginWeb$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionCreateParamsPluginWeb$outboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsPluginWeb$Outbound` instead. */
  export type Outbound = ChatCompletionCreateParamsPluginWeb$Outbound;
}

export function chatCompletionCreateParamsPluginWebToJSON(
  chatCompletionCreateParamsPluginWeb: ChatCompletionCreateParamsPluginWeb,
): string {
  return JSON.stringify(
    ChatCompletionCreateParamsPluginWeb$outboundSchema.parse(
      chatCompletionCreateParamsPluginWeb,
    ),
  );
}

export function chatCompletionCreateParamsPluginWebFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionCreateParamsPluginWeb, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ChatCompletionCreateParamsPluginWeb$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionCreateParamsPluginWeb' from JSON`,
  );
}

/** @internal */
export const ChatCompletionCreateParamsIdModeration$inboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionCreateParamsIdModeration> = z.nativeEnum(
    ChatCompletionCreateParamsIdModeration,
  );

/** @internal */
export const ChatCompletionCreateParamsIdModeration$outboundSchema:
  z.ZodNativeEnum<typeof ChatCompletionCreateParamsIdModeration> =
    ChatCompletionCreateParamsIdModeration$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionCreateParamsIdModeration$ {
  /** @deprecated use `ChatCompletionCreateParamsIdModeration$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionCreateParamsIdModeration$inboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsIdModeration$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionCreateParamsIdModeration$outboundSchema;
}

/** @internal */
export const ChatCompletionCreateParamsPluginModeration$inboundSchema:
  z.ZodType<ChatCompletionCreateParamsPluginModeration, z.ZodTypeDef, unknown> =
    z.object({
      id: ChatCompletionCreateParamsIdModeration$inboundSchema,
    });

/** @internal */
export type ChatCompletionCreateParamsPluginModeration$Outbound = {
  id: string;
};

/** @internal */
export const ChatCompletionCreateParamsPluginModeration$outboundSchema:
  z.ZodType<
    ChatCompletionCreateParamsPluginModeration$Outbound,
    z.ZodTypeDef,
    ChatCompletionCreateParamsPluginModeration
  > = z.object({
    id: ChatCompletionCreateParamsIdModeration$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionCreateParamsPluginModeration$ {
  /** @deprecated use `ChatCompletionCreateParamsPluginModeration$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionCreateParamsPluginModeration$inboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsPluginModeration$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionCreateParamsPluginModeration$outboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsPluginModeration$Outbound` instead. */
  export type Outbound = ChatCompletionCreateParamsPluginModeration$Outbound;
}

export function chatCompletionCreateParamsPluginModerationToJSON(
  chatCompletionCreateParamsPluginModeration:
    ChatCompletionCreateParamsPluginModeration,
): string {
  return JSON.stringify(
    ChatCompletionCreateParamsPluginModeration$outboundSchema.parse(
      chatCompletionCreateParamsPluginModeration,
    ),
  );
}

export function chatCompletionCreateParamsPluginModerationFromJSON(
  jsonString: string,
): SafeParseResult<
  ChatCompletionCreateParamsPluginModeration,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ChatCompletionCreateParamsPluginModeration$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ChatCompletionCreateParamsPluginModeration' from JSON`,
  );
}

/** @internal */
export const ChatCompletionCreateParamsPluginUnion$inboundSchema: z.ZodType<
  ChatCompletionCreateParamsPluginUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ChatCompletionCreateParamsPluginModeration$inboundSchema),
  z.lazy(() => ChatCompletionCreateParamsPluginWeb$inboundSchema),
  z.lazy(() => ChatCompletionCreateParamsPluginChainOfThought$inboundSchema),
  z.lazy(() => ChatCompletionCreateParamsPluginFileParser$inboundSchema),
]);

/** @internal */
export type ChatCompletionCreateParamsPluginUnion$Outbound =
  | ChatCompletionCreateParamsPluginModeration$Outbound
  | ChatCompletionCreateParamsPluginWeb$Outbound
  | ChatCompletionCreateParamsPluginChainOfThought$Outbound
  | ChatCompletionCreateParamsPluginFileParser$Outbound;

/** @internal */
export const ChatCompletionCreateParamsPluginUnion$outboundSchema: z.ZodType<
  ChatCompletionCreateParamsPluginUnion$Outbound,
  z.ZodTypeDef,
  ChatCompletionCreateParamsPluginUnion
> = z.union([
  z.lazy(() => ChatCompletionCreateParamsPluginModeration$outboundSchema),
  z.lazy(() => ChatCompletionCreateParamsPluginWeb$outboundSchema),
  z.lazy(() => ChatCompletionCreateParamsPluginChainOfThought$outboundSchema),
  z.lazy(() => ChatCompletionCreateParamsPluginFileParser$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionCreateParamsPluginUnion$ {
  /** @deprecated use `ChatCompletionCreateParamsPluginUnion$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionCreateParamsPluginUnion$inboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsPluginUnion$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionCreateParamsPluginUnion$outboundSchema;
  /** @deprecated use `ChatCompletionCreateParamsPluginUnion$Outbound` instead. */
  export type Outbound = ChatCompletionCreateParamsPluginUnion$Outbound;
}

export function chatCompletionCreateParamsPluginUnionToJSON(
  chatCompletionCreateParamsPluginUnion: ChatCompletionCreateParamsPluginUnion,
): string {
  return JSON.stringify(
    ChatCompletionCreateParamsPluginUnion$outboundSchema.parse(
      chatCompletionCreateParamsPluginUnion,
    ),
  );
}

export function chatCompletionCreateParamsPluginUnionFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionCreateParamsPluginUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ChatCompletionCreateParamsPluginUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionCreateParamsPluginUnion' from JSON`,
  );
}

/** @internal */
export const ChatCompletionCreateParams$inboundSchema: z.ZodType<
  ChatCompletionCreateParams,
  z.ZodTypeDef,
  unknown
> = z.object({
  messages: z.array(ChatCompletionMessageParam$inboundSchema),
  model: z.string().optional(),
  frequency_penalty: z.nullable(z.number()).optional(),
  logit_bias: z.nullable(z.record(z.number())).optional(),
  logprobs: z.nullable(z.boolean()).optional(),
  top_logprobs: z.nullable(z.number()).optional(),
  max_completion_tokens: z.nullable(z.number()).optional(),
  max_tokens: z.nullable(z.number()).optional(),
  metadata: z.record(z.string()).optional(),
  presence_penalty: z.nullable(z.number()).optional(),
  reasoning: z.nullable(
    z.lazy(() => ChatCompletionCreateParamsReasoning$inboundSchema),
  ).optional(),
  response_format: z.union([
    z.lazy(() =>
      ChatCompletionCreateParamsResponseFormatJSONSchema$inboundSchema
    ),
    z.lazy(() => ChatCompletionCreateParamsResponseFormatGrammar$inboundSchema),
    z.lazy(() => ChatCompletionCreateParamsResponseFormatText$inboundSchema),
    z.lazy(() =>
      ChatCompletionCreateParamsResponseFormatJSONObject$inboundSchema
    ),
    z.lazy(() => ChatCompletionCreateParamsResponseFormatPython$inboundSchema),
  ]).optional(),
  seed: z.nullable(z.number().int()).optional(),
  stop: z.nullable(z.union([z.string(), z.array(z.string()), z.any()]))
    .optional(),
  stream: z.nullable(z.boolean().default(false)),
  stream_options: z.nullable(
    z.lazy(() => ChatCompletionCreateParamsStreamOptions$inboundSchema),
  ).optional(),
  temperature: z.nullable(z.number().default(1)),
  tool_choice: ChatCompletionToolChoiceOption$inboundSchema.optional(),
  tools: z.array(ChatCompletionTool$inboundSchema).optional(),
  top_p: z.nullable(z.number().default(1)),
  user: z.string().optional(),
  models: z.nullable(z.array(z.string())).optional(),
  reasoning_effort: z.nullable(
    ChatCompletionCreateParamsReasoningEffort$inboundSchema,
  ).optional(),
  provider: z.nullable(
    z.lazy(() => ChatCompletionCreateParamsProvider$inboundSchema),
  ).optional(),
  plugins: z.array(
    z.union([
      z.lazy(() => ChatCompletionCreateParamsPluginModeration$inboundSchema),
      z.lazy(() => ChatCompletionCreateParamsPluginWeb$inboundSchema),
      z.lazy(() =>
        ChatCompletionCreateParamsPluginChainOfThought$inboundSchema
      ),
      z.lazy(() => ChatCompletionCreateParamsPluginFileParser$inboundSchema),
    ]),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "frequency_penalty": "frequencyPenalty",
    "logit_bias": "logitBias",
    "top_logprobs": "topLogprobs",
    "max_completion_tokens": "maxCompletionTokens",
    "max_tokens": "maxTokens",
    "presence_penalty": "presencePenalty",
    "response_format": "responseFormat",
    "stream_options": "streamOptions",
    "tool_choice": "toolChoice",
    "top_p": "topP",
    "reasoning_effort": "reasoningEffort",
  });
});

/** @internal */
export type ChatCompletionCreateParams$Outbound = {
  messages: Array<ChatCompletionMessageParam$Outbound>;
  model?: string | undefined;
  frequency_penalty?: number | null | undefined;
  logit_bias?: { [k: string]: number } | null | undefined;
  logprobs?: boolean | null | undefined;
  top_logprobs?: number | null | undefined;
  max_completion_tokens?: number | null | undefined;
  max_tokens?: number | null | undefined;
  metadata?: { [k: string]: string } | undefined;
  presence_penalty?: number | null | undefined;
  reasoning?: ChatCompletionCreateParamsReasoning$Outbound | null | undefined;
  response_format?:
    | ChatCompletionCreateParamsResponseFormatJSONSchema$Outbound
    | ChatCompletionCreateParamsResponseFormatGrammar$Outbound
    | ChatCompletionCreateParamsResponseFormatText$Outbound
    | ChatCompletionCreateParamsResponseFormatJSONObject$Outbound
    | ChatCompletionCreateParamsResponseFormatPython$Outbound
    | undefined;
  seed?: number | null | undefined;
  stop?: string | Array<string> | any | null | undefined;
  stream: boolean | null;
  stream_options?:
    | ChatCompletionCreateParamsStreamOptions$Outbound
    | null
    | undefined;
  temperature: number | null;
  tool_choice?: ChatCompletionToolChoiceOption$Outbound | undefined;
  tools?: Array<ChatCompletionTool$Outbound> | undefined;
  top_p: number | null;
  user?: string | undefined;
  models?: Array<string> | null | undefined;
  reasoning_effort?: string | null | undefined;
  provider?: ChatCompletionCreateParamsProvider$Outbound | null | undefined;
  plugins?:
    | Array<
      | ChatCompletionCreateParamsPluginModeration$Outbound
      | ChatCompletionCreateParamsPluginWeb$Outbound
      | ChatCompletionCreateParamsPluginChainOfThought$Outbound
      | ChatCompletionCreateParamsPluginFileParser$Outbound
    >
    | undefined;
};

/** @internal */
export const ChatCompletionCreateParams$outboundSchema: z.ZodType<
  ChatCompletionCreateParams$Outbound,
  z.ZodTypeDef,
  ChatCompletionCreateParams
> = z.object({
  messages: z.array(ChatCompletionMessageParam$outboundSchema),
  model: z.string().optional(),
  frequencyPenalty: z.nullable(z.number()).optional(),
  logitBias: z.nullable(z.record(z.number())).optional(),
  logprobs: z.nullable(z.boolean()).optional(),
  topLogprobs: z.nullable(z.number()).optional(),
  maxCompletionTokens: z.nullable(z.number()).optional(),
  maxTokens: z.nullable(z.number()).optional(),
  metadata: z.record(z.string()).optional(),
  presencePenalty: z.nullable(z.number()).optional(),
  reasoning: z.nullable(
    z.lazy(() => ChatCompletionCreateParamsReasoning$outboundSchema),
  ).optional(),
  responseFormat: z.union([
    z.lazy(() =>
      ChatCompletionCreateParamsResponseFormatJSONSchema$outboundSchema
    ),
    z.lazy(() =>
      ChatCompletionCreateParamsResponseFormatGrammar$outboundSchema
    ),
    z.lazy(() => ChatCompletionCreateParamsResponseFormatText$outboundSchema),
    z.lazy(() =>
      ChatCompletionCreateParamsResponseFormatJSONObject$outboundSchema
    ),
    z.lazy(() => ChatCompletionCreateParamsResponseFormatPython$outboundSchema),
  ]).optional(),
  seed: z.nullable(z.number().int()).optional(),
  stop: z.nullable(z.union([z.string(), z.array(z.string()), z.any()]))
    .optional(),
  stream: z.nullable(z.boolean().default(false)),
  streamOptions: z.nullable(
    z.lazy(() => ChatCompletionCreateParamsStreamOptions$outboundSchema),
  ).optional(),
  temperature: z.nullable(z.number().default(1)),
  toolChoice: ChatCompletionToolChoiceOption$outboundSchema.optional(),
  tools: z.array(ChatCompletionTool$outboundSchema).optional(),
  topP: z.nullable(z.number().default(1)),
  user: z.string().optional(),
  models: z.nullable(z.array(z.string())).optional(),
  reasoningEffort: z.nullable(
    ChatCompletionCreateParamsReasoningEffort$outboundSchema,
  ).optional(),
  provider: z.nullable(
    z.lazy(() => ChatCompletionCreateParamsProvider$outboundSchema),
  ).optional(),
  plugins: z.array(
    z.union([
      z.lazy(() => ChatCompletionCreateParamsPluginModeration$outboundSchema),
      z.lazy(() => ChatCompletionCreateParamsPluginWeb$outboundSchema),
      z.lazy(() =>
        ChatCompletionCreateParamsPluginChainOfThought$outboundSchema
      ),
      z.lazy(() => ChatCompletionCreateParamsPluginFileParser$outboundSchema),
    ]),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    frequencyPenalty: "frequency_penalty",
    logitBias: "logit_bias",
    topLogprobs: "top_logprobs",
    maxCompletionTokens: "max_completion_tokens",
    maxTokens: "max_tokens",
    presencePenalty: "presence_penalty",
    responseFormat: "response_format",
    streamOptions: "stream_options",
    toolChoice: "tool_choice",
    topP: "top_p",
    reasoningEffort: "reasoning_effort",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionCreateParams$ {
  /** @deprecated use `ChatCompletionCreateParams$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionCreateParams$inboundSchema;
  /** @deprecated use `ChatCompletionCreateParams$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionCreateParams$outboundSchema;
  /** @deprecated use `ChatCompletionCreateParams$Outbound` instead. */
  export type Outbound = ChatCompletionCreateParams$Outbound;
}

export function chatCompletionCreateParamsToJSON(
  chatCompletionCreateParams: ChatCompletionCreateParams,
): string {
  return JSON.stringify(
    ChatCompletionCreateParams$outboundSchema.parse(chatCompletionCreateParams),
  );
}

export function chatCompletionCreateParamsFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionCreateParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionCreateParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionCreateParams' from JSON`,
  );
}
