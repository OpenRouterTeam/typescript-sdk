/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const ResponsesWebSearchUserLocationType = {
  Approximate: "approximate",
} as const;
export type ResponsesWebSearchUserLocationType = ClosedEnum<
  typeof ResponsesWebSearchUserLocationType
>;

/**
 * User location information for web search
 */
export type ResponsesWebSearchUserLocation = {
  type?: ResponsesWebSearchUserLocationType | undefined;
  city?: string | null | undefined;
  country?: string | null | undefined;
  region?: string | null | undefined;
  timezone?: string | null | undefined;
};

/** @internal */
export const ResponsesWebSearchUserLocationType$inboundSchema: z.ZodNativeEnum<
  typeof ResponsesWebSearchUserLocationType
> = z.nativeEnum(ResponsesWebSearchUserLocationType);

/** @internal */
export const ResponsesWebSearchUserLocationType$outboundSchema: z.ZodNativeEnum<
  typeof ResponsesWebSearchUserLocationType
> = ResponsesWebSearchUserLocationType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesWebSearchUserLocationType$ {
  /** @deprecated use `ResponsesWebSearchUserLocationType$inboundSchema` instead. */
  export const inboundSchema = ResponsesWebSearchUserLocationType$inboundSchema;
  /** @deprecated use `ResponsesWebSearchUserLocationType$outboundSchema` instead. */
  export const outboundSchema =
    ResponsesWebSearchUserLocationType$outboundSchema;
}

/** @internal */
export const ResponsesWebSearchUserLocation$inboundSchema: z.ZodType<
  ResponsesWebSearchUserLocation,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ResponsesWebSearchUserLocationType$inboundSchema.optional(),
  city: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  region: z.nullable(z.string()).optional(),
  timezone: z.nullable(z.string()).optional(),
});

/** @internal */
export type ResponsesWebSearchUserLocation$Outbound = {
  type?: string | undefined;
  city?: string | null | undefined;
  country?: string | null | undefined;
  region?: string | null | undefined;
  timezone?: string | null | undefined;
};

/** @internal */
export const ResponsesWebSearchUserLocation$outboundSchema: z.ZodType<
  ResponsesWebSearchUserLocation$Outbound,
  z.ZodTypeDef,
  ResponsesWebSearchUserLocation
> = z.object({
  type: ResponsesWebSearchUserLocationType$outboundSchema.optional(),
  city: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  region: z.nullable(z.string()).optional(),
  timezone: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesWebSearchUserLocation$ {
  /** @deprecated use `ResponsesWebSearchUserLocation$inboundSchema` instead. */
  export const inboundSchema = ResponsesWebSearchUserLocation$inboundSchema;
  /** @deprecated use `ResponsesWebSearchUserLocation$outboundSchema` instead. */
  export const outboundSchema = ResponsesWebSearchUserLocation$outboundSchema;
  /** @deprecated use `ResponsesWebSearchUserLocation$Outbound` instead. */
  export type Outbound = ResponsesWebSearchUserLocation$Outbound;
}

export function responsesWebSearchUserLocationToJSON(
  responsesWebSearchUserLocation: ResponsesWebSearchUserLocation,
): string {
  return JSON.stringify(
    ResponsesWebSearchUserLocation$outboundSchema.parse(
      responsesWebSearchUserLocation,
    ),
  );
}

export function responsesWebSearchUserLocationFromJSON(
  jsonString: string,
): SafeParseResult<ResponsesWebSearchUserLocation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponsesWebSearchUserLocation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponsesWebSearchUserLocation' from JSON`,
  );
}
