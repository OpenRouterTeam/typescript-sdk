/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v4";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const URLCitationType = {
  UrlCitation: "url_citation",
} as const;
export type URLCitationType = ClosedEnum<typeof URLCitationType>;

export type URLCitation = {
  type: URLCitationType;
  url: string;
  title: string;
  startIndex: number;
  endIndex: number;
};

/** @internal */
export const URLCitationType$inboundSchema: z.ZodEnum<typeof URLCitationType> =
  z.enum(URLCitationType);

/** @internal */
export const URLCitationType$outboundSchema: z.ZodEnum<typeof URLCitationType> =
  URLCitationType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace URLCitationType$ {
  /** @deprecated use `URLCitationType$inboundSchema` instead. */
  export const inboundSchema = URLCitationType$inboundSchema;
  /** @deprecated use `URLCitationType$outboundSchema` instead. */
  export const outboundSchema = URLCitationType$outboundSchema;
}

/** @internal */
export const URLCitation$inboundSchema: z.ZodType<URLCitation, unknown> = z
  .object({
    type: URLCitationType$inboundSchema,
    url: z.string(),
    title: z.string(),
    start_index: z.number(),
    end_index: z.number(),
  }).transform((v) => {
    return remap$(v, {
      "start_index": "startIndex",
      "end_index": "endIndex",
    });
  });

/** @internal */
export type URLCitation$Outbound = {
  type: string;
  url: string;
  title: string;
  start_index: number;
  end_index: number;
};

/** @internal */
export const URLCitation$outboundSchema: z.ZodType<
  URLCitation$Outbound,
  URLCitation
> = z.object({
  type: URLCitationType$outboundSchema,
  url: z.string(),
  title: z.string(),
  startIndex: z.number(),
  endIndex: z.number(),
}).transform((v) => {
  return remap$(v, {
    startIndex: "start_index",
    endIndex: "end_index",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace URLCitation$ {
  /** @deprecated use `URLCitation$inboundSchema` instead. */
  export const inboundSchema = URLCitation$inboundSchema;
  /** @deprecated use `URLCitation$outboundSchema` instead. */
  export const outboundSchema = URLCitation$outboundSchema;
  /** @deprecated use `URLCitation$Outbound` instead. */
  export type Outbound = URLCitation$Outbound;
}

export function urlCitationToJSON(urlCitation: URLCitation): string {
  return JSON.stringify(URLCitation$outboundSchema.parse(urlCitation));
}

export function urlCitationFromJSON(
  jsonString: string,
): SafeParseResult<URLCitation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => URLCitation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'URLCitation' from JSON`,
  );
}
