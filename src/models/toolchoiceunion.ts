/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ToolChoiceTypeUnion,
  ToolChoiceTypeUnion$inboundSchema,
  ToolChoiceTypeUnion$Outbound,
  ToolChoiceTypeUnion$outboundSchema,
} from "./toolchoicetypeunion.js";

export const ToolChoiceType = {
  Function: "function",
} as const;
export type ToolChoiceType = ClosedEnum<typeof ToolChoiceType>;

/**
 * Specific function tool choice
 */
export type ToolChoiceFunction = {
  type: ToolChoiceType;
  name: string;
};

/**
 * Tool choice by type
 */
export type ToolChoice = {
  type: ToolChoiceTypeUnion;
};

export const ToolChoiceRequired = {
  Required: "required",
} as const;
export type ToolChoiceRequired = ClosedEnum<typeof ToolChoiceRequired>;

export const ToolChoiceNone = {
  None: "none",
} as const;
export type ToolChoiceNone = ClosedEnum<typeof ToolChoiceNone>;

export const ToolChoiceAuto = {
  Auto: "auto",
} as const;
export type ToolChoiceAuto = ClosedEnum<typeof ToolChoiceAuto>;

/**
 * Tool choice configuration
 */
export type ToolChoiceUnion =
  | ToolChoiceFunction
  | ToolChoice
  | ToolChoiceAuto
  | ToolChoiceNone
  | ToolChoiceRequired;

/** @internal */
export const ToolChoiceType$inboundSchema: z.ZodNativeEnum<
  typeof ToolChoiceType
> = z.nativeEnum(ToolChoiceType);

/** @internal */
export const ToolChoiceType$outboundSchema: z.ZodNativeEnum<
  typeof ToolChoiceType
> = ToolChoiceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolChoiceType$ {
  /** @deprecated use `ToolChoiceType$inboundSchema` instead. */
  export const inboundSchema = ToolChoiceType$inboundSchema;
  /** @deprecated use `ToolChoiceType$outboundSchema` instead. */
  export const outboundSchema = ToolChoiceType$outboundSchema;
}

/** @internal */
export const ToolChoiceFunction$inboundSchema: z.ZodType<
  ToolChoiceFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ToolChoiceType$inboundSchema,
  name: z.string(),
});

/** @internal */
export type ToolChoiceFunction$Outbound = {
  type: string;
  name: string;
};

/** @internal */
export const ToolChoiceFunction$outboundSchema: z.ZodType<
  ToolChoiceFunction$Outbound,
  z.ZodTypeDef,
  ToolChoiceFunction
> = z.object({
  type: ToolChoiceType$outboundSchema,
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolChoiceFunction$ {
  /** @deprecated use `ToolChoiceFunction$inboundSchema` instead. */
  export const inboundSchema = ToolChoiceFunction$inboundSchema;
  /** @deprecated use `ToolChoiceFunction$outboundSchema` instead. */
  export const outboundSchema = ToolChoiceFunction$outboundSchema;
  /** @deprecated use `ToolChoiceFunction$Outbound` instead. */
  export type Outbound = ToolChoiceFunction$Outbound;
}

export function toolChoiceFunctionToJSON(
  toolChoiceFunction: ToolChoiceFunction,
): string {
  return JSON.stringify(
    ToolChoiceFunction$outboundSchema.parse(toolChoiceFunction),
  );
}

export function toolChoiceFunctionFromJSON(
  jsonString: string,
): SafeParseResult<ToolChoiceFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolChoiceFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolChoiceFunction' from JSON`,
  );
}

/** @internal */
export const ToolChoice$inboundSchema: z.ZodType<
  ToolChoice,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ToolChoiceTypeUnion$inboundSchema,
});

/** @internal */
export type ToolChoice$Outbound = {
  type: ToolChoiceTypeUnion$Outbound;
};

/** @internal */
export const ToolChoice$outboundSchema: z.ZodType<
  ToolChoice$Outbound,
  z.ZodTypeDef,
  ToolChoice
> = z.object({
  type: ToolChoiceTypeUnion$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolChoice$ {
  /** @deprecated use `ToolChoice$inboundSchema` instead. */
  export const inboundSchema = ToolChoice$inboundSchema;
  /** @deprecated use `ToolChoice$outboundSchema` instead. */
  export const outboundSchema = ToolChoice$outboundSchema;
  /** @deprecated use `ToolChoice$Outbound` instead. */
  export type Outbound = ToolChoice$Outbound;
}

export function toolChoiceToJSON(toolChoice: ToolChoice): string {
  return JSON.stringify(ToolChoice$outboundSchema.parse(toolChoice));
}

export function toolChoiceFromJSON(
  jsonString: string,
): SafeParseResult<ToolChoice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolChoice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolChoice' from JSON`,
  );
}

/** @internal */
export const ToolChoiceRequired$inboundSchema: z.ZodNativeEnum<
  typeof ToolChoiceRequired
> = z.nativeEnum(ToolChoiceRequired);

/** @internal */
export const ToolChoiceRequired$outboundSchema: z.ZodNativeEnum<
  typeof ToolChoiceRequired
> = ToolChoiceRequired$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolChoiceRequired$ {
  /** @deprecated use `ToolChoiceRequired$inboundSchema` instead. */
  export const inboundSchema = ToolChoiceRequired$inboundSchema;
  /** @deprecated use `ToolChoiceRequired$outboundSchema` instead. */
  export const outboundSchema = ToolChoiceRequired$outboundSchema;
}

/** @internal */
export const ToolChoiceNone$inboundSchema: z.ZodNativeEnum<
  typeof ToolChoiceNone
> = z.nativeEnum(ToolChoiceNone);

/** @internal */
export const ToolChoiceNone$outboundSchema: z.ZodNativeEnum<
  typeof ToolChoiceNone
> = ToolChoiceNone$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolChoiceNone$ {
  /** @deprecated use `ToolChoiceNone$inboundSchema` instead. */
  export const inboundSchema = ToolChoiceNone$inboundSchema;
  /** @deprecated use `ToolChoiceNone$outboundSchema` instead. */
  export const outboundSchema = ToolChoiceNone$outboundSchema;
}

/** @internal */
export const ToolChoiceAuto$inboundSchema: z.ZodNativeEnum<
  typeof ToolChoiceAuto
> = z.nativeEnum(ToolChoiceAuto);

/** @internal */
export const ToolChoiceAuto$outboundSchema: z.ZodNativeEnum<
  typeof ToolChoiceAuto
> = ToolChoiceAuto$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolChoiceAuto$ {
  /** @deprecated use `ToolChoiceAuto$inboundSchema` instead. */
  export const inboundSchema = ToolChoiceAuto$inboundSchema;
  /** @deprecated use `ToolChoiceAuto$outboundSchema` instead. */
  export const outboundSchema = ToolChoiceAuto$outboundSchema;
}

/** @internal */
export const ToolChoiceUnion$inboundSchema: z.ZodType<
  ToolChoiceUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ToolChoiceFunction$inboundSchema),
  z.lazy(() => ToolChoice$inboundSchema),
  ToolChoiceAuto$inboundSchema,
  ToolChoiceNone$inboundSchema,
  ToolChoiceRequired$inboundSchema,
]);

/** @internal */
export type ToolChoiceUnion$Outbound =
  | ToolChoiceFunction$Outbound
  | ToolChoice$Outbound
  | string
  | string
  | string;

/** @internal */
export const ToolChoiceUnion$outboundSchema: z.ZodType<
  ToolChoiceUnion$Outbound,
  z.ZodTypeDef,
  ToolChoiceUnion
> = z.union([
  z.lazy(() => ToolChoiceFunction$outboundSchema),
  z.lazy(() => ToolChoice$outboundSchema),
  ToolChoiceAuto$outboundSchema,
  ToolChoiceNone$outboundSchema,
  ToolChoiceRequired$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolChoiceUnion$ {
  /** @deprecated use `ToolChoiceUnion$inboundSchema` instead. */
  export const inboundSchema = ToolChoiceUnion$inboundSchema;
  /** @deprecated use `ToolChoiceUnion$outboundSchema` instead. */
  export const outboundSchema = ToolChoiceUnion$outboundSchema;
  /** @deprecated use `ToolChoiceUnion$Outbound` instead. */
  export type Outbound = ToolChoiceUnion$Outbound;
}

export function toolChoiceUnionToJSON(
  toolChoiceUnion: ToolChoiceUnion,
): string {
  return JSON.stringify(ToolChoiceUnion$outboundSchema.parse(toolChoiceUnion));
}

export function toolChoiceUnionFromJSON(
  jsonString: string,
): SafeParseResult<ToolChoiceUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolChoiceUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolChoiceUnion' from JSON`,
  );
}
