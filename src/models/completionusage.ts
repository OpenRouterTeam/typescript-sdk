/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Detailed completion token usage
 */
export type CompletionTokensDetails = {
  /**
   * Tokens used for reasoning
   */
  reasoningTokens?: number | undefined;
  /**
   * Tokens used for audio output
   */
  audioTokens?: number | undefined;
  /**
   * Accepted prediction tokens
   */
  acceptedPredictionTokens?: number | undefined;
  /**
   * Rejected prediction tokens
   */
  rejectedPredictionTokens?: number | undefined;
};

/**
 * Detailed prompt token usage
 */
export type PromptTokensDetails = {
  /**
   * Cached prompt tokens
   */
  cachedTokens?: number | undefined;
  /**
   * Audio input tokens
   */
  audioTokens?: number | undefined;
};

/**
 * Token usage statistics
 */
export type CompletionUsage = {
  /**
   * Number of tokens in the completion
   */
  completionTokens: number;
  /**
   * Number of tokens in the prompt
   */
  promptTokens: number;
  /**
   * Total number of tokens
   */
  totalTokens: number;
  /**
   * Detailed completion token usage
   */
  completionTokensDetails?: CompletionTokensDetails | undefined;
  /**
   * Detailed prompt token usage
   */
  promptTokensDetails?: PromptTokensDetails | undefined;
};

/** @internal */
export const CompletionTokensDetails$inboundSchema: z.ZodType<
  CompletionTokensDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  reasoning_tokens: z.number().optional(),
  audio_tokens: z.number().optional(),
  accepted_prediction_tokens: z.number().optional(),
  rejected_prediction_tokens: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "reasoning_tokens": "reasoningTokens",
    "audio_tokens": "audioTokens",
    "accepted_prediction_tokens": "acceptedPredictionTokens",
    "rejected_prediction_tokens": "rejectedPredictionTokens",
  });
});

/** @internal */
export type CompletionTokensDetails$Outbound = {
  reasoning_tokens?: number | undefined;
  audio_tokens?: number | undefined;
  accepted_prediction_tokens?: number | undefined;
  rejected_prediction_tokens?: number | undefined;
};

/** @internal */
export const CompletionTokensDetails$outboundSchema: z.ZodType<
  CompletionTokensDetails$Outbound,
  z.ZodTypeDef,
  CompletionTokensDetails
> = z.object({
  reasoningTokens: z.number().optional(),
  audioTokens: z.number().optional(),
  acceptedPredictionTokens: z.number().optional(),
  rejectedPredictionTokens: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    reasoningTokens: "reasoning_tokens",
    audioTokens: "audio_tokens",
    acceptedPredictionTokens: "accepted_prediction_tokens",
    rejectedPredictionTokens: "rejected_prediction_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompletionTokensDetails$ {
  /** @deprecated use `CompletionTokensDetails$inboundSchema` instead. */
  export const inboundSchema = CompletionTokensDetails$inboundSchema;
  /** @deprecated use `CompletionTokensDetails$outboundSchema` instead. */
  export const outboundSchema = CompletionTokensDetails$outboundSchema;
  /** @deprecated use `CompletionTokensDetails$Outbound` instead. */
  export type Outbound = CompletionTokensDetails$Outbound;
}

export function completionTokensDetailsToJSON(
  completionTokensDetails: CompletionTokensDetails,
): string {
  return JSON.stringify(
    CompletionTokensDetails$outboundSchema.parse(completionTokensDetails),
  );
}

export function completionTokensDetailsFromJSON(
  jsonString: string,
): SafeParseResult<CompletionTokensDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompletionTokensDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompletionTokensDetails' from JSON`,
  );
}

/** @internal */
export const PromptTokensDetails$inboundSchema: z.ZodType<
  PromptTokensDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  cached_tokens: z.number().optional(),
  audio_tokens: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "cached_tokens": "cachedTokens",
    "audio_tokens": "audioTokens",
  });
});

/** @internal */
export type PromptTokensDetails$Outbound = {
  cached_tokens?: number | undefined;
  audio_tokens?: number | undefined;
};

/** @internal */
export const PromptTokensDetails$outboundSchema: z.ZodType<
  PromptTokensDetails$Outbound,
  z.ZodTypeDef,
  PromptTokensDetails
> = z.object({
  cachedTokens: z.number().optional(),
  audioTokens: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    cachedTokens: "cached_tokens",
    audioTokens: "audio_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PromptTokensDetails$ {
  /** @deprecated use `PromptTokensDetails$inboundSchema` instead. */
  export const inboundSchema = PromptTokensDetails$inboundSchema;
  /** @deprecated use `PromptTokensDetails$outboundSchema` instead. */
  export const outboundSchema = PromptTokensDetails$outboundSchema;
  /** @deprecated use `PromptTokensDetails$Outbound` instead. */
  export type Outbound = PromptTokensDetails$Outbound;
}

export function promptTokensDetailsToJSON(
  promptTokensDetails: PromptTokensDetails,
): string {
  return JSON.stringify(
    PromptTokensDetails$outboundSchema.parse(promptTokensDetails),
  );
}

export function promptTokensDetailsFromJSON(
  jsonString: string,
): SafeParseResult<PromptTokensDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PromptTokensDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PromptTokensDetails' from JSON`,
  );
}

/** @internal */
export const CompletionUsage$inboundSchema: z.ZodType<
  CompletionUsage,
  z.ZodTypeDef,
  unknown
> = z.object({
  completion_tokens: z.number(),
  prompt_tokens: z.number(),
  total_tokens: z.number(),
  completion_tokens_details: z.lazy(() => CompletionTokensDetails$inboundSchema)
    .optional(),
  prompt_tokens_details: z.lazy(() => PromptTokensDetails$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "completion_tokens": "completionTokens",
    "prompt_tokens": "promptTokens",
    "total_tokens": "totalTokens",
    "completion_tokens_details": "completionTokensDetails",
    "prompt_tokens_details": "promptTokensDetails",
  });
});

/** @internal */
export type CompletionUsage$Outbound = {
  completion_tokens: number;
  prompt_tokens: number;
  total_tokens: number;
  completion_tokens_details?: CompletionTokensDetails$Outbound | undefined;
  prompt_tokens_details?: PromptTokensDetails$Outbound | undefined;
};

/** @internal */
export const CompletionUsage$outboundSchema: z.ZodType<
  CompletionUsage$Outbound,
  z.ZodTypeDef,
  CompletionUsage
> = z.object({
  completionTokens: z.number(),
  promptTokens: z.number(),
  totalTokens: z.number(),
  completionTokensDetails: z.lazy(() => CompletionTokensDetails$outboundSchema)
    .optional(),
  promptTokensDetails: z.lazy(() => PromptTokensDetails$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    completionTokens: "completion_tokens",
    promptTokens: "prompt_tokens",
    totalTokens: "total_tokens",
    completionTokensDetails: "completion_tokens_details",
    promptTokensDetails: "prompt_tokens_details",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompletionUsage$ {
  /** @deprecated use `CompletionUsage$inboundSchema` instead. */
  export const inboundSchema = CompletionUsage$inboundSchema;
  /** @deprecated use `CompletionUsage$outboundSchema` instead. */
  export const outboundSchema = CompletionUsage$outboundSchema;
  /** @deprecated use `CompletionUsage$Outbound` instead. */
  export type Outbound = CompletionUsage$Outbound;
}

export function completionUsageToJSON(
  completionUsage: CompletionUsage,
): string {
  return JSON.stringify(CompletionUsage$outboundSchema.parse(completionUsage));
}

export function completionUsageFromJSON(
  jsonString: string,
): SafeParseResult<CompletionUsage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompletionUsage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompletionUsage' from JSON`,
  );
}
