/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ChatCompletionTokenLogprob,
  ChatCompletionTokenLogprob$inboundSchema,
  ChatCompletionTokenLogprob$Outbound,
  ChatCompletionTokenLogprob$outboundSchema,
} from "./chatcompletiontokenlogprob.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ChatCompletionTokenLogprobs = {
  content: Array<ChatCompletionTokenLogprob> | null;
  refusal: Array<ChatCompletionTokenLogprob> | null;
};

/** @internal */
export const ChatCompletionTokenLogprobs$inboundSchema: z.ZodType<
  ChatCompletionTokenLogprobs,
  z.ZodTypeDef,
  unknown
> = z.object({
  content: z.nullable(z.array(ChatCompletionTokenLogprob$inboundSchema)),
  refusal: z.nullable(z.array(ChatCompletionTokenLogprob$inboundSchema)),
});

/** @internal */
export type ChatCompletionTokenLogprobs$Outbound = {
  content: Array<ChatCompletionTokenLogprob$Outbound> | null;
  refusal: Array<ChatCompletionTokenLogprob$Outbound> | null;
};

/** @internal */
export const ChatCompletionTokenLogprobs$outboundSchema: z.ZodType<
  ChatCompletionTokenLogprobs$Outbound,
  z.ZodTypeDef,
  ChatCompletionTokenLogprobs
> = z.object({
  content: z.nullable(z.array(ChatCompletionTokenLogprob$outboundSchema)),
  refusal: z.nullable(z.array(ChatCompletionTokenLogprob$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionTokenLogprobs$ {
  /** @deprecated use `ChatCompletionTokenLogprobs$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionTokenLogprobs$inboundSchema;
  /** @deprecated use `ChatCompletionTokenLogprobs$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionTokenLogprobs$outboundSchema;
  /** @deprecated use `ChatCompletionTokenLogprobs$Outbound` instead. */
  export type Outbound = ChatCompletionTokenLogprobs$Outbound;
}

export function chatCompletionTokenLogprobsToJSON(
  chatCompletionTokenLogprobs: ChatCompletionTokenLogprobs,
): string {
  return JSON.stringify(
    ChatCompletionTokenLogprobs$outboundSchema.parse(
      chatCompletionTokenLogprobs,
    ),
  );
}

export function chatCompletionTokenLogprobsFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionTokenLogprobs, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionTokenLogprobs$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionTokenLogprobs' from JSON`,
  );
}
