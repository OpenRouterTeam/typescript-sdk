/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  FileCitationAnnotation,
  FileCitationAnnotation$inboundSchema,
  FileCitationAnnotation$Outbound,
  FileCitationAnnotation$outboundSchema,
} from "./filecitationannotation.js";
import {
  FilePathAnnotation,
  FilePathAnnotation$inboundSchema,
  FilePathAnnotation$Outbound,
  FilePathAnnotation$outboundSchema,
} from "./filepathannotation.js";
import {
  URLCitationAnnotation,
  URLCitationAnnotation$inboundSchema,
  URLCitationAnnotation$Outbound,
  URLCitationAnnotation$outboundSchema,
} from "./urlcitationannotation.js";

export const OutputTextContentType = {
  OutputText: "output_text",
} as const;
export type OutputTextContentType = ClosedEnum<typeof OutputTextContentType>;

export type OutputTextContentAnnotation =
  | URLCitationAnnotation
  | FileCitationAnnotation
  | FilePathAnnotation;

export type OutputTextContent = {
  type: OutputTextContentType;
  text: string;
  annotations?:
    | Array<URLCitationAnnotation | FileCitationAnnotation | FilePathAnnotation>
    | undefined;
};

/** @internal */
export const OutputTextContentType$inboundSchema: z.ZodNativeEnum<
  typeof OutputTextContentType
> = z.nativeEnum(OutputTextContentType);

/** @internal */
export const OutputTextContentType$outboundSchema: z.ZodNativeEnum<
  typeof OutputTextContentType
> = OutputTextContentType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputTextContentType$ {
  /** @deprecated use `OutputTextContentType$inboundSchema` instead. */
  export const inboundSchema = OutputTextContentType$inboundSchema;
  /** @deprecated use `OutputTextContentType$outboundSchema` instead. */
  export const outboundSchema = OutputTextContentType$outboundSchema;
}

/** @internal */
export const OutputTextContentAnnotation$inboundSchema: z.ZodType<
  OutputTextContentAnnotation,
  z.ZodTypeDef,
  unknown
> = z.union([
  URLCitationAnnotation$inboundSchema,
  FileCitationAnnotation$inboundSchema,
  FilePathAnnotation$inboundSchema,
]);

/** @internal */
export type OutputTextContentAnnotation$Outbound =
  | URLCitationAnnotation$Outbound
  | FileCitationAnnotation$Outbound
  | FilePathAnnotation$Outbound;

/** @internal */
export const OutputTextContentAnnotation$outboundSchema: z.ZodType<
  OutputTextContentAnnotation$Outbound,
  z.ZodTypeDef,
  OutputTextContentAnnotation
> = z.union([
  URLCitationAnnotation$outboundSchema,
  FileCitationAnnotation$outboundSchema,
  FilePathAnnotation$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputTextContentAnnotation$ {
  /** @deprecated use `OutputTextContentAnnotation$inboundSchema` instead. */
  export const inboundSchema = OutputTextContentAnnotation$inboundSchema;
  /** @deprecated use `OutputTextContentAnnotation$outboundSchema` instead. */
  export const outboundSchema = OutputTextContentAnnotation$outboundSchema;
  /** @deprecated use `OutputTextContentAnnotation$Outbound` instead. */
  export type Outbound = OutputTextContentAnnotation$Outbound;
}

export function outputTextContentAnnotationToJSON(
  outputTextContentAnnotation: OutputTextContentAnnotation,
): string {
  return JSON.stringify(
    OutputTextContentAnnotation$outboundSchema.parse(
      outputTextContentAnnotation,
    ),
  );
}

export function outputTextContentAnnotationFromJSON(
  jsonString: string,
): SafeParseResult<OutputTextContentAnnotation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputTextContentAnnotation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputTextContentAnnotation' from JSON`,
  );
}

/** @internal */
export const OutputTextContent$inboundSchema: z.ZodType<
  OutputTextContent,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: OutputTextContentType$inboundSchema,
  text: z.string(),
  annotations: z.array(
    z.union([
      URLCitationAnnotation$inboundSchema,
      FileCitationAnnotation$inboundSchema,
      FilePathAnnotation$inboundSchema,
    ]),
  ).optional(),
});

/** @internal */
export type OutputTextContent$Outbound = {
  type: string;
  text: string;
  annotations?:
    | Array<
      | URLCitationAnnotation$Outbound
      | FileCitationAnnotation$Outbound
      | FilePathAnnotation$Outbound
    >
    | undefined;
};

/** @internal */
export const OutputTextContent$outboundSchema: z.ZodType<
  OutputTextContent$Outbound,
  z.ZodTypeDef,
  OutputTextContent
> = z.object({
  type: OutputTextContentType$outboundSchema,
  text: z.string(),
  annotations: z.array(
    z.union([
      URLCitationAnnotation$outboundSchema,
      FileCitationAnnotation$outboundSchema,
      FilePathAnnotation$outboundSchema,
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputTextContent$ {
  /** @deprecated use `OutputTextContent$inboundSchema` instead. */
  export const inboundSchema = OutputTextContent$inboundSchema;
  /** @deprecated use `OutputTextContent$outboundSchema` instead. */
  export const outboundSchema = OutputTextContent$outboundSchema;
  /** @deprecated use `OutputTextContent$Outbound` instead. */
  export type Outbound = OutputTextContent$Outbound;
}

export function outputTextContentToJSON(
  outputTextContent: OutputTextContent,
): string {
  return JSON.stringify(
    OutputTextContent$outboundSchema.parse(outputTextContent),
  );
}

export function outputTextContentFromJSON(
  jsonString: string,
): SafeParseResult<OutputTextContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputTextContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputTextContent' from JSON`,
  );
}
