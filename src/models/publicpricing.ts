/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v4";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Pricing information for the model
 */
export type PublicPricing = {
  /**
   * A value in string or number format that is a large number
   */
  prompt?: any | undefined;
  /**
   * A value in string or number format that is a large number
   */
  completion?: any | undefined;
  /**
   * A value in string or number format that is a large number
   */
  request?: any | undefined;
  /**
   * A value in string or number format that is a large number
   */
  image?: any | undefined;
  /**
   * A value in string or number format that is a large number
   */
  imageOutput?: any | undefined;
  /**
   * A value in string or number format that is a large number
   */
  audio?: any | undefined;
  /**
   * A value in string or number format that is a large number
   */
  inputAudioCache?: any | undefined;
  /**
   * A value in string or number format that is a large number
   */
  webSearch?: any | undefined;
  /**
   * A value in string or number format that is a large number
   */
  internalReasoning?: any | undefined;
  /**
   * A value in string or number format that is a large number
   */
  inputCacheRead?: any | undefined;
  /**
   * A value in string or number format that is a large number
   */
  inputCacheWrite?: any | undefined;
  discount?: number | undefined;
};

/** @internal */
export const PublicPricing$inboundSchema: z.ZodType<PublicPricing, unknown> = z
  .object({
    prompt: z.any().optional(),
    completion: z.any().optional(),
    request: z.any().optional(),
    image: z.any().optional(),
    image_output: z.any().optional(),
    audio: z.any().optional(),
    input_audio_cache: z.any().optional(),
    web_search: z.any().optional(),
    internal_reasoning: z.any().optional(),
    input_cache_read: z.any().optional(),
    input_cache_write: z.any().optional(),
    discount: z.number().optional(),
  }).transform((v) => {
    return remap$(v, {
      "image_output": "imageOutput",
      "input_audio_cache": "inputAudioCache",
      "web_search": "webSearch",
      "internal_reasoning": "internalReasoning",
      "input_cache_read": "inputCacheRead",
      "input_cache_write": "inputCacheWrite",
    });
  });

/** @internal */
export type PublicPricing$Outbound = {
  prompt?: any | undefined;
  completion?: any | undefined;
  request?: any | undefined;
  image?: any | undefined;
  image_output?: any | undefined;
  audio?: any | undefined;
  input_audio_cache?: any | undefined;
  web_search?: any | undefined;
  internal_reasoning?: any | undefined;
  input_cache_read?: any | undefined;
  input_cache_write?: any | undefined;
  discount?: number | undefined;
};

/** @internal */
export const PublicPricing$outboundSchema: z.ZodType<
  PublicPricing$Outbound,
  PublicPricing
> = z.object({
  prompt: z.any().optional(),
  completion: z.any().optional(),
  request: z.any().optional(),
  image: z.any().optional(),
  imageOutput: z.any().optional(),
  audio: z.any().optional(),
  inputAudioCache: z.any().optional(),
  webSearch: z.any().optional(),
  internalReasoning: z.any().optional(),
  inputCacheRead: z.any().optional(),
  inputCacheWrite: z.any().optional(),
  discount: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    imageOutput: "image_output",
    inputAudioCache: "input_audio_cache",
    webSearch: "web_search",
    internalReasoning: "internal_reasoning",
    inputCacheRead: "input_cache_read",
    inputCacheWrite: "input_cache_write",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PublicPricing$ {
  /** @deprecated use `PublicPricing$inboundSchema` instead. */
  export const inboundSchema = PublicPricing$inboundSchema;
  /** @deprecated use `PublicPricing$outboundSchema` instead. */
  export const outboundSchema = PublicPricing$outboundSchema;
  /** @deprecated use `PublicPricing$Outbound` instead. */
  export type Outbound = PublicPricing$Outbound;
}

export function publicPricingToJSON(publicPricing: PublicPricing): string {
  return JSON.stringify(PublicPricing$outboundSchema.parse(publicPricing));
}

export function publicPricingFromJSON(
  jsonString: string,
): SafeParseResult<PublicPricing, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PublicPricing$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PublicPricing' from JSON`,
  );
}
