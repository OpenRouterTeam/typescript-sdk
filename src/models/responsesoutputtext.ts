/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ResponsesAnnotation,
  ResponsesAnnotation$inboundSchema,
  ResponsesAnnotation$Outbound,
  ResponsesAnnotation$outboundSchema,
} from "./responsesannotation.js";

export const ResponsesOutputTextType = {
  OutputText: "output_text",
} as const;
export type ResponsesOutputTextType = ClosedEnum<
  typeof ResponsesOutputTextType
>;

/**
 * Text output with annotations
 */
export type ResponsesOutputText = {
  type: ResponsesOutputTextType;
  text: string;
  annotations: Array<ResponsesAnnotation>;
};

/** @internal */
export const ResponsesOutputTextType$inboundSchema: z.ZodNativeEnum<
  typeof ResponsesOutputTextType
> = z.nativeEnum(ResponsesOutputTextType);

/** @internal */
export const ResponsesOutputTextType$outboundSchema: z.ZodNativeEnum<
  typeof ResponsesOutputTextType
> = ResponsesOutputTextType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesOutputTextType$ {
  /** @deprecated use `ResponsesOutputTextType$inboundSchema` instead. */
  export const inboundSchema = ResponsesOutputTextType$inboundSchema;
  /** @deprecated use `ResponsesOutputTextType$outboundSchema` instead. */
  export const outboundSchema = ResponsesOutputTextType$outboundSchema;
}

/** @internal */
export const ResponsesOutputText$inboundSchema: z.ZodType<
  ResponsesOutputText,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ResponsesOutputTextType$inboundSchema,
  text: z.string(),
  annotations: z.array(ResponsesAnnotation$inboundSchema),
});

/** @internal */
export type ResponsesOutputText$Outbound = {
  type: string;
  text: string;
  annotations: Array<ResponsesAnnotation$Outbound>;
};

/** @internal */
export const ResponsesOutputText$outboundSchema: z.ZodType<
  ResponsesOutputText$Outbound,
  z.ZodTypeDef,
  ResponsesOutputText
> = z.object({
  type: ResponsesOutputTextType$outboundSchema,
  text: z.string(),
  annotations: z.array(ResponsesAnnotation$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesOutputText$ {
  /** @deprecated use `ResponsesOutputText$inboundSchema` instead. */
  export const inboundSchema = ResponsesOutputText$inboundSchema;
  /** @deprecated use `ResponsesOutputText$outboundSchema` instead. */
  export const outboundSchema = ResponsesOutputText$outboundSchema;
  /** @deprecated use `ResponsesOutputText$Outbound` instead. */
  export type Outbound = ResponsesOutputText$Outbound;
}

export function responsesOutputTextToJSON(
  responsesOutputText: ResponsesOutputText,
): string {
  return JSON.stringify(
    ResponsesOutputText$outboundSchema.parse(responsesOutputText),
  );
}

export function responsesOutputTextFromJSON(
  jsonString: string,
): SafeParseResult<ResponsesOutputText, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponsesOutputText$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponsesOutputText' from JSON`,
  );
}
