/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";

export const EndpointStatus = {
  Zero: 0,
  Minus1: -1,
  Minus2: -2,
  Minus3: -3,
  Minus5: -5,
  Minus10: -10,
} as const;
export type EndpointStatus = OpenEnum<typeof EndpointStatus>;

/** @internal */
export const EndpointStatus$inboundSchema: z.ZodType<
  EndpointStatus,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(EndpointStatus),
    z.number().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const EndpointStatus$outboundSchema: z.ZodType<
  EndpointStatus,
  z.ZodTypeDef,
  EndpointStatus
> = z.union([
  z.nativeEnum(EndpointStatus),
  z.number().and(z.custom<Unrecognized<number>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EndpointStatus$ {
  /** @deprecated use `EndpointStatus$inboundSchema` instead. */
  export const inboundSchema = EndpointStatus$inboundSchema;
  /** @deprecated use `EndpointStatus$outboundSchema` instead. */
  export const outboundSchema = EndpointStatus$outboundSchema;
}
