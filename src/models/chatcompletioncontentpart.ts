/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ChatCompletionContentPartAudio,
  ChatCompletionContentPartAudio$inboundSchema,
  ChatCompletionContentPartAudio$Outbound,
  ChatCompletionContentPartAudio$outboundSchema,
} from "./chatcompletioncontentpartaudio.js";
import {
  ChatCompletionContentPartImage,
  ChatCompletionContentPartImage$inboundSchema,
  ChatCompletionContentPartImage$Outbound,
  ChatCompletionContentPartImage$outboundSchema,
} from "./chatcompletioncontentpartimage.js";
import {
  ChatCompletionContentPartText,
  ChatCompletionContentPartText$inboundSchema,
  ChatCompletionContentPartText$Outbound,
  ChatCompletionContentPartText$outboundSchema,
} from "./chatcompletioncontentparttext.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Content part for chat completion messages
 */
export type ChatCompletionContentPart =
  | (ChatCompletionContentPartText & { type: "text" })
  | (ChatCompletionContentPartImage & { type: "image_url" })
  | (ChatCompletionContentPartAudio & { type: "input_audio" });

/** @internal */
export const ChatCompletionContentPart$inboundSchema: z.ZodType<
  ChatCompletionContentPart,
  z.ZodTypeDef,
  unknown
> = z.union([
  ChatCompletionContentPartText$inboundSchema.and(
    z.object({ type: z.literal("text") }).transform((v) => ({ type: v.type })),
  ),
  ChatCompletionContentPartImage$inboundSchema.and(
    z.object({ type: z.literal("image_url") }).transform((v) => ({
      type: v.type,
    })),
  ),
  ChatCompletionContentPartAudio$inboundSchema.and(
    z.object({ type: z.literal("input_audio") }).transform((v) => ({
      type: v.type,
    })),
  ),
]);

/** @internal */
export type ChatCompletionContentPart$Outbound =
  | (ChatCompletionContentPartText$Outbound & { type: "text" })
  | (ChatCompletionContentPartImage$Outbound & { type: "image_url" })
  | (ChatCompletionContentPartAudio$Outbound & { type: "input_audio" });

/** @internal */
export const ChatCompletionContentPart$outboundSchema: z.ZodType<
  ChatCompletionContentPart$Outbound,
  z.ZodTypeDef,
  ChatCompletionContentPart
> = z.union([
  ChatCompletionContentPartText$outboundSchema.and(
    z.object({ type: z.literal("text") }).transform((v) => ({ type: v.type })),
  ),
  ChatCompletionContentPartImage$outboundSchema.and(
    z.object({ type: z.literal("image_url") }).transform((v) => ({
      type: v.type,
    })),
  ),
  ChatCompletionContentPartAudio$outboundSchema.and(
    z.object({ type: z.literal("input_audio") }).transform((v) => ({
      type: v.type,
    })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionContentPart$ {
  /** @deprecated use `ChatCompletionContentPart$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionContentPart$inboundSchema;
  /** @deprecated use `ChatCompletionContentPart$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionContentPart$outboundSchema;
  /** @deprecated use `ChatCompletionContentPart$Outbound` instead. */
  export type Outbound = ChatCompletionContentPart$Outbound;
}

export function chatCompletionContentPartToJSON(
  chatCompletionContentPart: ChatCompletionContentPart,
): string {
  return JSON.stringify(
    ChatCompletionContentPart$outboundSchema.parse(chatCompletionContentPart),
  );
}

export function chatCompletionContentPartFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionContentPart, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionContentPart$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionContentPart' from JSON`,
  );
}
