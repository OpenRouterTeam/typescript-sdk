/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ReasoningDetailEncrypted,
  ReasoningDetailEncrypted$inboundSchema,
  ReasoningDetailEncrypted$Outbound,
  ReasoningDetailEncrypted$outboundSchema,
} from "./reasoningdetailencrypted.js";
import {
  ReasoningDetailSummary,
  ReasoningDetailSummary$inboundSchema,
  ReasoningDetailSummary$Outbound,
  ReasoningDetailSummary$outboundSchema,
} from "./reasoningdetailsummary.js";
import {
  ReasoningDetailText,
  ReasoningDetailText$inboundSchema,
  ReasoningDetailText$Outbound,
  ReasoningDetailText$outboundSchema,
} from "./reasoningdetailtext.js";

/**
 * Reasoning detail information
 */
export type ReasoningDetail =
  | (ReasoningDetailSummary & { type: "reasoning.summary" })
  | (ReasoningDetailEncrypted & { type: "reasoning.encrypted" })
  | (ReasoningDetailText & { type: "reasoning.text" });

/** @internal */
export const ReasoningDetail$inboundSchema: z.ZodType<
  ReasoningDetail,
  z.ZodTypeDef,
  unknown
> = z.union([
  ReasoningDetailSummary$inboundSchema.and(
    z.object({ type: z.literal("reasoning.summary") }).transform((v) => ({
      type: v.type,
    })),
  ),
  ReasoningDetailEncrypted$inboundSchema.and(
    z.object({ type: z.literal("reasoning.encrypted") }).transform((v) => ({
      type: v.type,
    })),
  ),
  ReasoningDetailText$inboundSchema.and(
    z.object({ type: z.literal("reasoning.text") }).transform((v) => ({
      type: v.type,
    })),
  ),
]);

/** @internal */
export type ReasoningDetail$Outbound =
  | (ReasoningDetailSummary$Outbound & { type: "reasoning.summary" })
  | (ReasoningDetailEncrypted$Outbound & { type: "reasoning.encrypted" })
  | (ReasoningDetailText$Outbound & { type: "reasoning.text" });

/** @internal */
export const ReasoningDetail$outboundSchema: z.ZodType<
  ReasoningDetail$Outbound,
  z.ZodTypeDef,
  ReasoningDetail
> = z.union([
  ReasoningDetailSummary$outboundSchema.and(
    z.object({ type: z.literal("reasoning.summary") }).transform((v) => ({
      type: v.type,
    })),
  ),
  ReasoningDetailEncrypted$outboundSchema.and(
    z.object({ type: z.literal("reasoning.encrypted") }).transform((v) => ({
      type: v.type,
    })),
  ),
  ReasoningDetailText$outboundSchema.and(
    z.object({ type: z.literal("reasoning.text") }).transform((v) => ({
      type: v.type,
    })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReasoningDetail$ {
  /** @deprecated use `ReasoningDetail$inboundSchema` instead. */
  export const inboundSchema = ReasoningDetail$inboundSchema;
  /** @deprecated use `ReasoningDetail$outboundSchema` instead. */
  export const outboundSchema = ReasoningDetail$outboundSchema;
  /** @deprecated use `ReasoningDetail$Outbound` instead. */
  export type Outbound = ReasoningDetail$Outbound;
}

export function reasoningDetailToJSON(
  reasoningDetail: ReasoningDetail,
): string {
  return JSON.stringify(ReasoningDetail$outboundSchema.parse(reasoningDetail));
}

export function reasoningDetailFromJSON(
  jsonString: string,
): SafeParseResult<ReasoningDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReasoningDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReasoningDetail' from JSON`,
  );
}
