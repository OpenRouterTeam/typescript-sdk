/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ResponseInputMessageContentUnion,
  ResponseInputMessageContentUnion$inboundSchema,
  ResponseInputMessageContentUnion$Outbound,
  ResponseInputMessageContentUnion$outboundSchema,
} from "./responseinputmessagecontentunion.js";
import {
  ResponseInputMessageRole,
  ResponseInputMessageRole$inboundSchema,
  ResponseInputMessageRole$Outbound,
  ResponseInputMessageRole$outboundSchema,
} from "./responseinputmessagerole.js";

export const ResponseEasyInputMessageType = {
  Message: "message",
} as const;
export type ResponseEasyInputMessageType = ClosedEnum<
  typeof ResponseEasyInputMessageType
>;

/**
 * Simple input message format
 */
export type ResponseEasyInputMessage = {
  type?: ResponseEasyInputMessageType | undefined;
  role: ResponseInputMessageRole;
  content: ResponseInputMessageContentUnion;
};

/** @internal */
export const ResponseEasyInputMessageType$inboundSchema: z.ZodNativeEnum<
  typeof ResponseEasyInputMessageType
> = z.nativeEnum(ResponseEasyInputMessageType);

/** @internal */
export const ResponseEasyInputMessageType$outboundSchema: z.ZodNativeEnum<
  typeof ResponseEasyInputMessageType
> = ResponseEasyInputMessageType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseEasyInputMessageType$ {
  /** @deprecated use `ResponseEasyInputMessageType$inboundSchema` instead. */
  export const inboundSchema = ResponseEasyInputMessageType$inboundSchema;
  /** @deprecated use `ResponseEasyInputMessageType$outboundSchema` instead. */
  export const outboundSchema = ResponseEasyInputMessageType$outboundSchema;
}

/** @internal */
export const ResponseEasyInputMessage$inboundSchema: z.ZodType<
  ResponseEasyInputMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ResponseEasyInputMessageType$inboundSchema.optional(),
  role: ResponseInputMessageRole$inboundSchema,
  content: ResponseInputMessageContentUnion$inboundSchema,
});

/** @internal */
export type ResponseEasyInputMessage$Outbound = {
  type?: string | undefined;
  role: ResponseInputMessageRole$Outbound;
  content: ResponseInputMessageContentUnion$Outbound;
};

/** @internal */
export const ResponseEasyInputMessage$outboundSchema: z.ZodType<
  ResponseEasyInputMessage$Outbound,
  z.ZodTypeDef,
  ResponseEasyInputMessage
> = z.object({
  type: ResponseEasyInputMessageType$outboundSchema.optional(),
  role: ResponseInputMessageRole$outboundSchema,
  content: ResponseInputMessageContentUnion$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseEasyInputMessage$ {
  /** @deprecated use `ResponseEasyInputMessage$inboundSchema` instead. */
  export const inboundSchema = ResponseEasyInputMessage$inboundSchema;
  /** @deprecated use `ResponseEasyInputMessage$outboundSchema` instead. */
  export const outboundSchema = ResponseEasyInputMessage$outboundSchema;
  /** @deprecated use `ResponseEasyInputMessage$Outbound` instead. */
  export type Outbound = ResponseEasyInputMessage$Outbound;
}

export function responseEasyInputMessageToJSON(
  responseEasyInputMessage: ResponseEasyInputMessage,
): string {
  return JSON.stringify(
    ResponseEasyInputMessage$outboundSchema.parse(responseEasyInputMessage),
  );
}

export function responseEasyInputMessageFromJSON(
  jsonString: string,
): SafeParseResult<ResponseEasyInputMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseEasyInputMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseEasyInputMessage' from JSON`,
  );
}
