/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Error object structure
 */
export type OpenRouterInvalidRequestErrorError = {
  code: number | null;
  message: string;
  param?: string | null | undefined;
  type?: string | undefined;
};

/** @internal */
export const OpenRouterInvalidRequestErrorError$inboundSchema: z.ZodType<
  OpenRouterInvalidRequestErrorError,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.nullable(z.number()),
  message: z.string(),
  param: z.nullable(z.string()).optional(),
  type: z.string().optional(),
});

/** @internal */
export type OpenRouterInvalidRequestErrorError$Outbound = {
  code: number | null;
  message: string;
  param?: string | null | undefined;
  type?: string | undefined;
};

/** @internal */
export const OpenRouterInvalidRequestErrorError$outboundSchema: z.ZodType<
  OpenRouterInvalidRequestErrorError$Outbound,
  z.ZodTypeDef,
  OpenRouterInvalidRequestErrorError
> = z.object({
  code: z.nullable(z.number()),
  message: z.string(),
  param: z.nullable(z.string()).optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenRouterInvalidRequestErrorError$ {
  /** @deprecated use `OpenRouterInvalidRequestErrorError$inboundSchema` instead. */
  export const inboundSchema = OpenRouterInvalidRequestErrorError$inboundSchema;
  /** @deprecated use `OpenRouterInvalidRequestErrorError$outboundSchema` instead. */
  export const outboundSchema =
    OpenRouterInvalidRequestErrorError$outboundSchema;
  /** @deprecated use `OpenRouterInvalidRequestErrorError$Outbound` instead. */
  export type Outbound = OpenRouterInvalidRequestErrorError$Outbound;
}

export function openRouterInvalidRequestErrorErrorToJSON(
  openRouterInvalidRequestErrorError: OpenRouterInvalidRequestErrorError,
): string {
  return JSON.stringify(
    OpenRouterInvalidRequestErrorError$outboundSchema.parse(
      openRouterInvalidRequestErrorError,
    ),
  );
}

export function openRouterInvalidRequestErrorErrorFromJSON(
  jsonString: string,
): SafeParseResult<OpenRouterInvalidRequestErrorError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OpenRouterInvalidRequestErrorError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenRouterInvalidRequestErrorError' from JSON`,
  );
}
