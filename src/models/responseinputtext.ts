/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v4";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const ResponseInputTextType = {
  InputText: "input_text",
} as const;
export type ResponseInputTextType = ClosedEnum<typeof ResponseInputTextType>;

/**
 * Text input content item
 */
export type ResponseInputText = {
  type: ResponseInputTextType;
  text: string;
};

/** @internal */
export const ResponseInputTextType$inboundSchema: z.ZodEnum<
  typeof ResponseInputTextType
> = z.enum(ResponseInputTextType);

/** @internal */
export const ResponseInputTextType$outboundSchema: z.ZodEnum<
  typeof ResponseInputTextType
> = ResponseInputTextType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseInputTextType$ {
  /** @deprecated use `ResponseInputTextType$inboundSchema` instead. */
  export const inboundSchema = ResponseInputTextType$inboundSchema;
  /** @deprecated use `ResponseInputTextType$outboundSchema` instead. */
  export const outboundSchema = ResponseInputTextType$outboundSchema;
}

/** @internal */
export const ResponseInputText$inboundSchema: z.ZodType<
  ResponseInputText,
  unknown
> = z.object({
  type: ResponseInputTextType$inboundSchema,
  text: z.string(),
});

/** @internal */
export type ResponseInputText$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const ResponseInputText$outboundSchema: z.ZodType<
  ResponseInputText$Outbound,
  ResponseInputText
> = z.object({
  type: ResponseInputTextType$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseInputText$ {
  /** @deprecated use `ResponseInputText$inboundSchema` instead. */
  export const inboundSchema = ResponseInputText$inboundSchema;
  /** @deprecated use `ResponseInputText$outboundSchema` instead. */
  export const outboundSchema = ResponseInputText$outboundSchema;
  /** @deprecated use `ResponseInputText$Outbound` instead. */
  export type Outbound = ResponseInputText$Outbound;
}

export function responseInputTextToJSON(
  responseInputText: ResponseInputText,
): string {
  return JSON.stringify(
    ResponseInputText$outboundSchema.parse(responseInputText),
  );
}

export function responseInputTextFromJSON(
  jsonString: string,
): SafeParseResult<ResponseInputText, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseInputText$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseInputText' from JSON`,
  );
}
