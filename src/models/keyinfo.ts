/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Legacy rate limit information about a key. Will always return -1.
 *
 * @deprecated class: This will be removed in a future release, please migrate away from it as soon as possible.
 */
export type RateLimit = {
  /**
   * Number of requests allowed per interval
   */
  requests: number;
  /**
   * Rate limit interval
   */
  interval: string;
  /**
   * Note about the rate limit
   */
  note: string;
};

/**
 * Current API key information
 */
export type KeyInfo = {
  /**
   * Human-readable label for the API key
   */
  label: string;
  /**
   * Spending limit for the API key in USD
   */
  limit: number | null;
  /**
   * Current OpenRouter credit usage for the API key in USD
   */
  usage: number;
  /**
   * Current OpenRouter daily usage for the API key in USD
   */
  usageDaily: number;
  /**
   * Current OpenRouter weekly usage for the API key in USD
   */
  usageWeekly: number;
  /**
   * Current OpenRouter monthly usage for the API key in USD
   */
  usageMonthly: number;
  /**
   * Current external BYOK credit usage for the API key in USD
   */
  byokUsage: number;
  /**
   * Current external BYOK daily usage for the API key in USD
   */
  byokUsageDaily: number;
  /**
   * Current external BYOK weekly usage for the API key in USD
   */
  byokUsageWeekly: number;
  /**
   * Current external BYOK monthly usage for the API key in USD
   */
  byokUsageMonthly: number;
  /**
   * Whether this is a free tier API key
   */
  isFreeTier: boolean;
  /**
   * Whether this is a provisioning key
   */
  isProvisioningKey: boolean;
  /**
   * Remaining spending limit in USD
   */
  limitRemaining: number | null;
  /**
   * Type of limit reset for the API key
   */
  limitReset: string | null;
  /**
   * Whether to include external BYOK usage in the credit limit
   */
  includeByokInLimit: boolean;
  /**
   * Legacy rate limit information about a key. Will always return -1.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  rateLimit: RateLimit;
};

/** @internal */
export const RateLimit$inboundSchema: z.ZodType<
  RateLimit,
  z.ZodTypeDef,
  unknown
> = z.object({
  requests: z.number(),
  interval: z.string(),
  note: z.string(),
});

/** @internal */
export type RateLimit$Outbound = {
  requests: number;
  interval: string;
  note: string;
};

/** @internal */
export const RateLimit$outboundSchema: z.ZodType<
  RateLimit$Outbound,
  z.ZodTypeDef,
  RateLimit
> = z.object({
  requests: z.number(),
  interval: z.string(),
  note: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RateLimit$ {
  /** @deprecated use `RateLimit$inboundSchema` instead. */
  export const inboundSchema = RateLimit$inboundSchema;
  /** @deprecated use `RateLimit$outboundSchema` instead. */
  export const outboundSchema = RateLimit$outboundSchema;
  /** @deprecated use `RateLimit$Outbound` instead. */
  export type Outbound = RateLimit$Outbound;
}

export function rateLimitToJSON(rateLimit: RateLimit): string {
  return JSON.stringify(RateLimit$outboundSchema.parse(rateLimit));
}

export function rateLimitFromJSON(
  jsonString: string,
): SafeParseResult<RateLimit, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RateLimit$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RateLimit' from JSON`,
  );
}

/** @internal */
export const KeyInfo$inboundSchema: z.ZodType<KeyInfo, z.ZodTypeDef, unknown> =
  z.object({
    label: z.string(),
    limit: z.nullable(z.number()),
    usage: z.number(),
    usage_daily: z.number(),
    usage_weekly: z.number(),
    usage_monthly: z.number(),
    byok_usage: z.number(),
    byok_usage_daily: z.number(),
    byok_usage_weekly: z.number(),
    byok_usage_monthly: z.number(),
    is_free_tier: z.boolean(),
    is_provisioning_key: z.boolean(),
    limit_remaining: z.nullable(z.number()),
    limit_reset: z.nullable(z.string()),
    include_byok_in_limit: z.boolean(),
    rate_limit: z.lazy(() => RateLimit$inboundSchema),
  }).transform((v) => {
    return remap$(v, {
      "usage_daily": "usageDaily",
      "usage_weekly": "usageWeekly",
      "usage_monthly": "usageMonthly",
      "byok_usage": "byokUsage",
      "byok_usage_daily": "byokUsageDaily",
      "byok_usage_weekly": "byokUsageWeekly",
      "byok_usage_monthly": "byokUsageMonthly",
      "is_free_tier": "isFreeTier",
      "is_provisioning_key": "isProvisioningKey",
      "limit_remaining": "limitRemaining",
      "limit_reset": "limitReset",
      "include_byok_in_limit": "includeByokInLimit",
      "rate_limit": "rateLimit",
    });
  });

/** @internal */
export type KeyInfo$Outbound = {
  label: string;
  limit: number | null;
  usage: number;
  usage_daily: number;
  usage_weekly: number;
  usage_monthly: number;
  byok_usage: number;
  byok_usage_daily: number;
  byok_usage_weekly: number;
  byok_usage_monthly: number;
  is_free_tier: boolean;
  is_provisioning_key: boolean;
  limit_remaining: number | null;
  limit_reset: string | null;
  include_byok_in_limit: boolean;
  rate_limit: RateLimit$Outbound;
};

/** @internal */
export const KeyInfo$outboundSchema: z.ZodType<
  KeyInfo$Outbound,
  z.ZodTypeDef,
  KeyInfo
> = z.object({
  label: z.string(),
  limit: z.nullable(z.number()),
  usage: z.number(),
  usageDaily: z.number(),
  usageWeekly: z.number(),
  usageMonthly: z.number(),
  byokUsage: z.number(),
  byokUsageDaily: z.number(),
  byokUsageWeekly: z.number(),
  byokUsageMonthly: z.number(),
  isFreeTier: z.boolean(),
  isProvisioningKey: z.boolean(),
  limitRemaining: z.nullable(z.number()),
  limitReset: z.nullable(z.string()),
  includeByokInLimit: z.boolean(),
  rateLimit: z.lazy(() => RateLimit$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    usageDaily: "usage_daily",
    usageWeekly: "usage_weekly",
    usageMonthly: "usage_monthly",
    byokUsage: "byok_usage",
    byokUsageDaily: "byok_usage_daily",
    byokUsageWeekly: "byok_usage_weekly",
    byokUsageMonthly: "byok_usage_monthly",
    isFreeTier: "is_free_tier",
    isProvisioningKey: "is_provisioning_key",
    limitRemaining: "limit_remaining",
    limitReset: "limit_reset",
    includeByokInLimit: "include_byok_in_limit",
    rateLimit: "rate_limit",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace KeyInfo$ {
  /** @deprecated use `KeyInfo$inboundSchema` instead. */
  export const inboundSchema = KeyInfo$inboundSchema;
  /** @deprecated use `KeyInfo$outboundSchema` instead. */
  export const outboundSchema = KeyInfo$outboundSchema;
  /** @deprecated use `KeyInfo$Outbound` instead. */
  export type Outbound = KeyInfo$Outbound;
}

export function keyInfoToJSON(keyInfo: KeyInfo): string {
  return JSON.stringify(KeyInfo$outboundSchema.parse(keyInfo));
}

export function keyInfoFromJSON(
  jsonString: string,
): SafeParseResult<KeyInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => KeyInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'KeyInfo' from JSON`,
  );
}
