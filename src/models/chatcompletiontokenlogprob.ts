/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type TopLogprob = {
  token: string;
  logprob: number;
  bytes: Array<number> | null;
};

export type ChatCompletionTokenLogprob = {
  token: string;
  logprob: number;
  bytes: Array<number> | null;
  topLogprobs: Array<TopLogprob>;
};

/** @internal */
export const TopLogprob$inboundSchema: z.ZodType<
  TopLogprob,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string(),
  logprob: z.number(),
  bytes: z.nullable(z.array(z.number())),
});

/** @internal */
export type TopLogprob$Outbound = {
  token: string;
  logprob: number;
  bytes: Array<number> | null;
};

/** @internal */
export const TopLogprob$outboundSchema: z.ZodType<
  TopLogprob$Outbound,
  z.ZodTypeDef,
  TopLogprob
> = z.object({
  token: z.string(),
  logprob: z.number(),
  bytes: z.nullable(z.array(z.number())),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopLogprob$ {
  /** @deprecated use `TopLogprob$inboundSchema` instead. */
  export const inboundSchema = TopLogprob$inboundSchema;
  /** @deprecated use `TopLogprob$outboundSchema` instead. */
  export const outboundSchema = TopLogprob$outboundSchema;
  /** @deprecated use `TopLogprob$Outbound` instead. */
  export type Outbound = TopLogprob$Outbound;
}

export function topLogprobToJSON(topLogprob: TopLogprob): string {
  return JSON.stringify(TopLogprob$outboundSchema.parse(topLogprob));
}

export function topLogprobFromJSON(
  jsonString: string,
): SafeParseResult<TopLogprob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TopLogprob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TopLogprob' from JSON`,
  );
}

/** @internal */
export const ChatCompletionTokenLogprob$inboundSchema: z.ZodType<
  ChatCompletionTokenLogprob,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string(),
  logprob: z.number(),
  bytes: z.nullable(z.array(z.number())),
  top_logprobs: z.array(z.lazy(() => TopLogprob$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "top_logprobs": "topLogprobs",
  });
});

/** @internal */
export type ChatCompletionTokenLogprob$Outbound = {
  token: string;
  logprob: number;
  bytes: Array<number> | null;
  top_logprobs: Array<TopLogprob$Outbound>;
};

/** @internal */
export const ChatCompletionTokenLogprob$outboundSchema: z.ZodType<
  ChatCompletionTokenLogprob$Outbound,
  z.ZodTypeDef,
  ChatCompletionTokenLogprob
> = z.object({
  token: z.string(),
  logprob: z.number(),
  bytes: z.nullable(z.array(z.number())),
  topLogprobs: z.array(z.lazy(() => TopLogprob$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    topLogprobs: "top_logprobs",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionTokenLogprob$ {
  /** @deprecated use `ChatCompletionTokenLogprob$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionTokenLogprob$inboundSchema;
  /** @deprecated use `ChatCompletionTokenLogprob$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionTokenLogprob$outboundSchema;
  /** @deprecated use `ChatCompletionTokenLogprob$Outbound` instead. */
  export type Outbound = ChatCompletionTokenLogprob$Outbound;
}

export function chatCompletionTokenLogprobToJSON(
  chatCompletionTokenLogprob: ChatCompletionTokenLogprob,
): string {
  return JSON.stringify(
    ChatCompletionTokenLogprob$outboundSchema.parse(chatCompletionTokenLogprob),
  );
}

export function chatCompletionTokenLogprobFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionTokenLogprob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionTokenLogprob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionTokenLogprob' from JSON`,
  );
}
