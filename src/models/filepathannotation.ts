/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v4";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const FilePathAnnotationType = {
  FilePath: "file_path",
} as const;
export type FilePathAnnotationType = ClosedEnum<typeof FilePathAnnotationType>;

export type FilePathAnnotation = {
  type: FilePathAnnotationType;
  fileId: string;
  index: number;
};

/** @internal */
export const FilePathAnnotationType$inboundSchema: z.ZodEnum<
  typeof FilePathAnnotationType
> = z.enum(FilePathAnnotationType);

/** @internal */
export const FilePathAnnotationType$outboundSchema: z.ZodEnum<
  typeof FilePathAnnotationType
> = FilePathAnnotationType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilePathAnnotationType$ {
  /** @deprecated use `FilePathAnnotationType$inboundSchema` instead. */
  export const inboundSchema = FilePathAnnotationType$inboundSchema;
  /** @deprecated use `FilePathAnnotationType$outboundSchema` instead. */
  export const outboundSchema = FilePathAnnotationType$outboundSchema;
}

/** @internal */
export const FilePathAnnotation$inboundSchema: z.ZodType<
  FilePathAnnotation,
  unknown
> = z.object({
  type: FilePathAnnotationType$inboundSchema,
  file_id: z.string(),
  index: z.number(),
}).transform((v) => {
  return remap$(v, {
    "file_id": "fileId",
  });
});

/** @internal */
export type FilePathAnnotation$Outbound = {
  type: string;
  file_id: string;
  index: number;
};

/** @internal */
export const FilePathAnnotation$outboundSchema: z.ZodType<
  FilePathAnnotation$Outbound,
  FilePathAnnotation
> = z.object({
  type: FilePathAnnotationType$outboundSchema,
  fileId: z.string(),
  index: z.number(),
}).transform((v) => {
  return remap$(v, {
    fileId: "file_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilePathAnnotation$ {
  /** @deprecated use `FilePathAnnotation$inboundSchema` instead. */
  export const inboundSchema = FilePathAnnotation$inboundSchema;
  /** @deprecated use `FilePathAnnotation$outboundSchema` instead. */
  export const outboundSchema = FilePathAnnotation$outboundSchema;
  /** @deprecated use `FilePathAnnotation$Outbound` instead. */
  export type Outbound = FilePathAnnotation$Outbound;
}

export function filePathAnnotationToJSON(
  filePathAnnotation: FilePathAnnotation,
): string {
  return JSON.stringify(
    FilePathAnnotation$outboundSchema.parse(filePathAnnotation),
  );
}

export function filePathAnnotationFromJSON(
  jsonString: string,
): SafeParseResult<FilePathAnnotation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FilePathAnnotation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FilePathAnnotation' from JSON`,
  );
}
