/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ChatCompletionMessageToolCall,
  ChatCompletionMessageToolCall$inboundSchema,
  ChatCompletionMessageToolCall$Outbound,
  ChatCompletionMessageToolCall$outboundSchema,
} from "./chatcompletionmessagetoolcall.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ChatCompletionMessage = {
  role: "assistant";
  content: string | null;
  reasoning?: string | null | undefined;
  refusal: string | null;
  toolCalls?: Array<ChatCompletionMessageToolCall> | undefined;
};

/** @internal */
export const ChatCompletionMessage$inboundSchema: z.ZodType<
  ChatCompletionMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: z.literal("assistant"),
  content: z.nullable(z.string()),
  reasoning: z.nullable(z.string()).optional(),
  refusal: z.nullable(z.string()),
  tool_calls: z.array(ChatCompletionMessageToolCall$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type ChatCompletionMessage$Outbound = {
  role: "assistant";
  content: string | null;
  reasoning?: string | null | undefined;
  refusal: string | null;
  tool_calls?: Array<ChatCompletionMessageToolCall$Outbound> | undefined;
};

/** @internal */
export const ChatCompletionMessage$outboundSchema: z.ZodType<
  ChatCompletionMessage$Outbound,
  z.ZodTypeDef,
  ChatCompletionMessage
> = z.object({
  role: z.literal("assistant"),
  content: z.nullable(z.string()),
  reasoning: z.nullable(z.string()).optional(),
  refusal: z.nullable(z.string()),
  toolCalls: z.array(ChatCompletionMessageToolCall$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionMessage$ {
  /** @deprecated use `ChatCompletionMessage$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionMessage$inboundSchema;
  /** @deprecated use `ChatCompletionMessage$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionMessage$outboundSchema;
  /** @deprecated use `ChatCompletionMessage$Outbound` instead. */
  export type Outbound = ChatCompletionMessage$Outbound;
}

export function chatCompletionMessageToJSON(
  chatCompletionMessage: ChatCompletionMessage,
): string {
  return JSON.stringify(
    ChatCompletionMessage$outboundSchema.parse(chatCompletionMessage),
  );
}

export function chatCompletionMessageFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionMessage' from JSON`,
  );
}
