/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";

/**
 * Instruction format type
 */
export const InstructType = {
  None: "none",
  Airoboros: "airoboros",
  Alpaca: "alpaca",
  AlpacaModif: "alpaca-modif",
  Chatml: "chatml",
  Claude: "claude",
  CodeLlama: "code-llama",
  Gemma: "gemma",
  Llama2: "llama2",
  Llama3: "llama3",
  Mistral: "mistral",
  Nemotron: "nemotron",
  Neural: "neural",
  Openchat: "openchat",
  Phi3: "phi3",
  Rwkv: "rwkv",
  Vicuna: "vicuna",
  Zephyr: "zephyr",
  DeepseekR1: "deepseek-r1",
  DeepseekV31: "deepseek-v3.1",
  Qwq: "qwq",
  Qwen3: "qwen3",
} as const;
/**
 * Instruction format type
 */
export type InstructType = OpenEnum<typeof InstructType>;

/** @internal */
export const InstructType$inboundSchema: z.ZodType<
  InstructType,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(InstructType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const InstructType$outboundSchema: z.ZodType<
  InstructType,
  z.ZodTypeDef,
  InstructType
> = z.union([
  z.nativeEnum(InstructType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstructType$ {
  /** @deprecated use `InstructType$inboundSchema` instead. */
  export const inboundSchema = InstructType$inboundSchema;
  /** @deprecated use `InstructType$outboundSchema` instead. */
  export const outboundSchema = InstructType$outboundSchema;
}
