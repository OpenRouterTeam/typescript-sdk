/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const FilePathType = {
  FilePath: "file_path",
} as const;
export type FilePathType = ClosedEnum<typeof FilePathType>;

export type FilePath = {
  type: FilePathType;
  fileId: string;
  index: number;
};

/** @internal */
export const FilePathType$inboundSchema: z.ZodNativeEnum<typeof FilePathType> =
  z.nativeEnum(FilePathType);

/** @internal */
export const FilePathType$outboundSchema: z.ZodNativeEnum<typeof FilePathType> =
  FilePathType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilePathType$ {
  /** @deprecated use `FilePathType$inboundSchema` instead. */
  export const inboundSchema = FilePathType$inboundSchema;
  /** @deprecated use `FilePathType$outboundSchema` instead. */
  export const outboundSchema = FilePathType$outboundSchema;
}

/** @internal */
export const FilePath$inboundSchema: z.ZodType<
  FilePath,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FilePathType$inboundSchema,
  file_id: z.string(),
  index: z.number(),
}).transform((v) => {
  return remap$(v, {
    "file_id": "fileId",
  });
});

/** @internal */
export type FilePath$Outbound = {
  type: string;
  file_id: string;
  index: number;
};

/** @internal */
export const FilePath$outboundSchema: z.ZodType<
  FilePath$Outbound,
  z.ZodTypeDef,
  FilePath
> = z.object({
  type: FilePathType$outboundSchema,
  fileId: z.string(),
  index: z.number(),
}).transform((v) => {
  return remap$(v, {
    fileId: "file_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilePath$ {
  /** @deprecated use `FilePath$inboundSchema` instead. */
  export const inboundSchema = FilePath$inboundSchema;
  /** @deprecated use `FilePath$outboundSchema` instead. */
  export const outboundSchema = FilePath$outboundSchema;
  /** @deprecated use `FilePath$Outbound` instead. */
  export type Outbound = FilePath$Outbound;
}

export function filePathToJSON(filePath: FilePath): string {
  return JSON.stringify(FilePath$outboundSchema.parse(filePath));
}

export function filePathFromJSON(
  jsonString: string,
): SafeParseResult<FilePath, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FilePath$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FilePath' from JSON`,
  );
}
