/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";

export const Quantization = {
  Int4: "int4",
  Int8: "int8",
  Fp4: "fp4",
  Fp6: "fp6",
  Fp8: "fp8",
  Fp16: "fp16",
  Bf16: "bf16",
  Fp32: "fp32",
  Unknown: "unknown",
} as const;
export type Quantization = OpenEnum<typeof Quantization>;

/** @internal */
export const Quantization$inboundSchema: z.ZodType<
  Quantization,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(Quantization),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const Quantization$outboundSchema: z.ZodType<
  Quantization,
  z.ZodTypeDef,
  Quantization
> = z.union([
  z.nativeEnum(Quantization),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Quantization$ {
  /** @deprecated use `Quantization$inboundSchema` instead. */
  export const inboundSchema = Quantization$inboundSchema;
  /** @deprecated use `Quantization$outboundSchema` instead. */
  export const outboundSchema = Quantization$outboundSchema;
}
