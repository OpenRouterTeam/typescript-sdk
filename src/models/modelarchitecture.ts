/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v4";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  InputModality,
  InputModality$inboundSchema,
  InputModality$outboundSchema,
} from "./inputmodality.js";
import {
  ModelGroup,
  ModelGroup$inboundSchema,
  ModelGroup$outboundSchema,
} from "./modelgroup.js";
import {
  OutputModality,
  OutputModality$inboundSchema,
  OutputModality$outboundSchema,
} from "./outputmodality.js";

/**
 * Instruction format type
 */
export const ModelArchitectureInstructType = {
  None: "none",
  Airoboros: "airoboros",
  Alpaca: "alpaca",
  AlpacaModif: "alpaca-modif",
  Chatml: "chatml",
  Claude: "claude",
  CodeLlama: "code-llama",
  Gemma: "gemma",
  Llama2: "llama2",
  Llama3: "llama3",
  Mistral: "mistral",
  Nemotron: "nemotron",
  Neural: "neural",
  Openchat: "openchat",
  Phi3: "phi3",
  Rwkv: "rwkv",
  Vicuna: "vicuna",
  Zephyr: "zephyr",
  DeepseekR1: "deepseek-r1",
  DeepseekV31: "deepseek-v3.1",
  Qwq: "qwq",
  Qwen3: "qwen3",
} as const;
/**
 * Instruction format type
 */
export type ModelArchitectureInstructType = OpenEnum<
  typeof ModelArchitectureInstructType
>;

/**
 * Model architecture information
 */
export type ModelArchitecture = {
  /**
   * Tokenizer type used by the model
   */
  tokenizer?: ModelGroup | undefined;
  /**
   * Instruction format type
   */
  instructType?: ModelArchitectureInstructType | null | undefined;
  /**
   * Primary modality of the model
   */
  modality: string | null;
  /**
   * Supported input modalities
   */
  inputModalities: Array<InputModality>;
  /**
   * Supported output modalities
   */
  outputModalities: Array<OutputModality>;
};

/** @internal */
export const ModelArchitectureInstructType$inboundSchema: z.ZodType<
  ModelArchitectureInstructType,
  unknown
> = z
  .union([
    z.enum(ModelArchitectureInstructType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ModelArchitectureInstructType$outboundSchema: z.ZodType<
  ModelArchitectureInstructType,
  ModelArchitectureInstructType
> = z.union([
  z.enum(ModelArchitectureInstructType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModelArchitectureInstructType$ {
  /** @deprecated use `ModelArchitectureInstructType$inboundSchema` instead. */
  export const inboundSchema = ModelArchitectureInstructType$inboundSchema;
  /** @deprecated use `ModelArchitectureInstructType$outboundSchema` instead. */
  export const outboundSchema = ModelArchitectureInstructType$outboundSchema;
}

/** @internal */
export const ModelArchitecture$inboundSchema: z.ZodType<
  ModelArchitecture,
  unknown
> = z.object({
  tokenizer: ModelGroup$inboundSchema.optional(),
  instruct_type: z.nullable(ModelArchitectureInstructType$inboundSchema)
    .optional(),
  modality: z.nullable(z.string()),
  input_modalities: z.array(InputModality$inboundSchema),
  output_modalities: z.array(OutputModality$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "instruct_type": "instructType",
    "input_modalities": "inputModalities",
    "output_modalities": "outputModalities",
  });
});

/** @internal */
export type ModelArchitecture$Outbound = {
  tokenizer?: string | undefined;
  instruct_type?: string | null | undefined;
  modality: string | null;
  input_modalities: Array<string>;
  output_modalities: Array<string>;
};

/** @internal */
export const ModelArchitecture$outboundSchema: z.ZodType<
  ModelArchitecture$Outbound,
  ModelArchitecture
> = z.object({
  tokenizer: ModelGroup$outboundSchema.optional(),
  instructType: z.nullable(ModelArchitectureInstructType$outboundSchema)
    .optional(),
  modality: z.nullable(z.string()),
  inputModalities: z.array(InputModality$outboundSchema),
  outputModalities: z.array(OutputModality$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    instructType: "instruct_type",
    inputModalities: "input_modalities",
    outputModalities: "output_modalities",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModelArchitecture$ {
  /** @deprecated use `ModelArchitecture$inboundSchema` instead. */
  export const inboundSchema = ModelArchitecture$inboundSchema;
  /** @deprecated use `ModelArchitecture$outboundSchema` instead. */
  export const outboundSchema = ModelArchitecture$outboundSchema;
  /** @deprecated use `ModelArchitecture$Outbound` instead. */
  export type Outbound = ModelArchitecture$Outbound;
}

export function modelArchitectureToJSON(
  modelArchitecture: ModelArchitecture,
): string {
  return JSON.stringify(
    ModelArchitecture$outboundSchema.parse(modelArchitecture),
  );
}

export function modelArchitectureFromJSON(
  jsonString: string,
): SafeParseResult<ModelArchitecture, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ModelArchitecture$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ModelArchitecture' from JSON`,
  );
}
