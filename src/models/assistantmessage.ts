/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ChatMessageContentItem,
  ChatMessageContentItem$inboundSchema,
  ChatMessageContentItem$Outbound,
  ChatMessageContentItem$outboundSchema,
} from "./chatmessagecontentitem.js";
import {
  ChatMessageToolCall,
  ChatMessageToolCall$inboundSchema,
  ChatMessageToolCall$Outbound,
  ChatMessageToolCall$outboundSchema,
} from "./chatmessagetoolcall.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type AssistantMessageContent = string | Array<ChatMessageContentItem>;

export type AssistantMessage = {
  role: "assistant";
  content?: string | Array<ChatMessageContentItem> | null | undefined;
  name?: string | undefined;
  toolCalls?: Array<ChatMessageToolCall> | undefined;
  refusal?: string | null | undefined;
  reasoning?: string | null | undefined;
};

/** @internal */
export const AssistantMessageContent$inboundSchema: z.ZodType<
  AssistantMessageContent,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(ChatMessageContentItem$inboundSchema)]);

/** @internal */
export type AssistantMessageContent$Outbound =
  | string
  | Array<ChatMessageContentItem$Outbound>;

/** @internal */
export const AssistantMessageContent$outboundSchema: z.ZodType<
  AssistantMessageContent$Outbound,
  z.ZodTypeDef,
  AssistantMessageContent
> = z.union([z.string(), z.array(ChatMessageContentItem$outboundSchema)]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssistantMessageContent$ {
  /** @deprecated use `AssistantMessageContent$inboundSchema` instead. */
  export const inboundSchema = AssistantMessageContent$inboundSchema;
  /** @deprecated use `AssistantMessageContent$outboundSchema` instead. */
  export const outboundSchema = AssistantMessageContent$outboundSchema;
  /** @deprecated use `AssistantMessageContent$Outbound` instead. */
  export type Outbound = AssistantMessageContent$Outbound;
}

export function assistantMessageContentToJSON(
  assistantMessageContent: AssistantMessageContent,
): string {
  return JSON.stringify(
    AssistantMessageContent$outboundSchema.parse(assistantMessageContent),
  );
}

export function assistantMessageContentFromJSON(
  jsonString: string,
): SafeParseResult<AssistantMessageContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssistantMessageContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssistantMessageContent' from JSON`,
  );
}

/** @internal */
export const AssistantMessage$inboundSchema: z.ZodType<
  AssistantMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: z.literal("assistant"),
  content: z.nullable(
    z.union([z.string(), z.array(ChatMessageContentItem$inboundSchema)]),
  ).optional(),
  name: z.string().optional(),
  tool_calls: z.array(ChatMessageToolCall$inboundSchema).optional(),
  refusal: z.nullable(z.string()).optional(),
  reasoning: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type AssistantMessage$Outbound = {
  role: "assistant";
  content?: string | Array<ChatMessageContentItem$Outbound> | null | undefined;
  name?: string | undefined;
  tool_calls?: Array<ChatMessageToolCall$Outbound> | undefined;
  refusal?: string | null | undefined;
  reasoning?: string | null | undefined;
};

/** @internal */
export const AssistantMessage$outboundSchema: z.ZodType<
  AssistantMessage$Outbound,
  z.ZodTypeDef,
  AssistantMessage
> = z.object({
  role: z.literal("assistant"),
  content: z.nullable(
    z.union([z.string(), z.array(ChatMessageContentItem$outboundSchema)]),
  ).optional(),
  name: z.string().optional(),
  toolCalls: z.array(ChatMessageToolCall$outboundSchema).optional(),
  refusal: z.nullable(z.string()).optional(),
  reasoning: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssistantMessage$ {
  /** @deprecated use `AssistantMessage$inboundSchema` instead. */
  export const inboundSchema = AssistantMessage$inboundSchema;
  /** @deprecated use `AssistantMessage$outboundSchema` instead. */
  export const outboundSchema = AssistantMessage$outboundSchema;
  /** @deprecated use `AssistantMessage$Outbound` instead. */
  export type Outbound = AssistantMessage$Outbound;
}

export function assistantMessageToJSON(
  assistantMessage: AssistantMessage,
): string {
  return JSON.stringify(
    AssistantMessage$outboundSchema.parse(assistantMessage),
  );
}

export function assistantMessageFromJSON(
  jsonString: string,
): SafeParseResult<AssistantMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssistantMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssistantMessage' from JSON`,
  );
}
