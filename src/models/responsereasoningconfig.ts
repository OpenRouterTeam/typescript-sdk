/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ResponseReasoningSummaryMode,
  ResponseReasoningSummaryMode$inboundSchema,
  ResponseReasoningSummaryMode$outboundSchema,
} from "./responsereasoningsummarymode.js";

export const ResponseReasoningConfigEffort = {
  High: "high",
  Medium: "medium",
  Low: "low",
  Minimal: "minimal",
} as const;
export type ResponseReasoningConfigEffort = ClosedEnum<
  typeof ResponseReasoningConfigEffort
>;

/**
 * Reasoning configuration for Responses API
 */
export type ResponseReasoningConfig = {
  effort?: ResponseReasoningConfigEffort | null | undefined;
  summary?: ResponseReasoningSummaryMode | null | undefined;
};

/** @internal */
export const ResponseReasoningConfigEffort$inboundSchema: z.ZodNativeEnum<
  typeof ResponseReasoningConfigEffort
> = z.nativeEnum(ResponseReasoningConfigEffort);

/** @internal */
export const ResponseReasoningConfigEffort$outboundSchema: z.ZodNativeEnum<
  typeof ResponseReasoningConfigEffort
> = ResponseReasoningConfigEffort$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseReasoningConfigEffort$ {
  /** @deprecated use `ResponseReasoningConfigEffort$inboundSchema` instead. */
  export const inboundSchema = ResponseReasoningConfigEffort$inboundSchema;
  /** @deprecated use `ResponseReasoningConfigEffort$outboundSchema` instead. */
  export const outboundSchema = ResponseReasoningConfigEffort$outboundSchema;
}

/** @internal */
export const ResponseReasoningConfig$inboundSchema: z.ZodType<
  ResponseReasoningConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  effort: z.nullable(ResponseReasoningConfigEffort$inboundSchema).optional(),
  summary: z.nullable(ResponseReasoningSummaryMode$inboundSchema).optional(),
});

/** @internal */
export type ResponseReasoningConfig$Outbound = {
  effort?: string | null | undefined;
  summary?: string | null | undefined;
};

/** @internal */
export const ResponseReasoningConfig$outboundSchema: z.ZodType<
  ResponseReasoningConfig$Outbound,
  z.ZodTypeDef,
  ResponseReasoningConfig
> = z.object({
  effort: z.nullable(ResponseReasoningConfigEffort$outboundSchema).optional(),
  summary: z.nullable(ResponseReasoningSummaryMode$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseReasoningConfig$ {
  /** @deprecated use `ResponseReasoningConfig$inboundSchema` instead. */
  export const inboundSchema = ResponseReasoningConfig$inboundSchema;
  /** @deprecated use `ResponseReasoningConfig$outboundSchema` instead. */
  export const outboundSchema = ResponseReasoningConfig$outboundSchema;
  /** @deprecated use `ResponseReasoningConfig$Outbound` instead. */
  export type Outbound = ResponseReasoningConfig$Outbound;
}

export function responseReasoningConfigToJSON(
  responseReasoningConfig: ResponseReasoningConfig,
): string {
  return JSON.stringify(
    ResponseReasoningConfig$outboundSchema.parse(responseReasoningConfig),
  );
}

export function responseReasoningConfigFromJSON(
  jsonString: string,
): SafeParseResult<ResponseReasoningConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseReasoningConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseReasoningConfig' from JSON`,
  );
}
