/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const ResponsesAnnotationFileCitationType = {
  FileCitation: "file_citation",
} as const;
export type ResponsesAnnotationFileCitationType = ClosedEnum<
  typeof ResponsesAnnotationFileCitationType
>;

export type ResponsesAnnotationFileCitation = {
  type: ResponsesAnnotationFileCitationType;
  fileId: string;
  filename: string;
  index: number;
};

/** @internal */
export const ResponsesAnnotationFileCitationType$inboundSchema: z.ZodNativeEnum<
  typeof ResponsesAnnotationFileCitationType
> = z.nativeEnum(ResponsesAnnotationFileCitationType);

/** @internal */
export const ResponsesAnnotationFileCitationType$outboundSchema:
  z.ZodNativeEnum<typeof ResponsesAnnotationFileCitationType> =
    ResponsesAnnotationFileCitationType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesAnnotationFileCitationType$ {
  /** @deprecated use `ResponsesAnnotationFileCitationType$inboundSchema` instead. */
  export const inboundSchema =
    ResponsesAnnotationFileCitationType$inboundSchema;
  /** @deprecated use `ResponsesAnnotationFileCitationType$outboundSchema` instead. */
  export const outboundSchema =
    ResponsesAnnotationFileCitationType$outboundSchema;
}

/** @internal */
export const ResponsesAnnotationFileCitation$inboundSchema: z.ZodType<
  ResponsesAnnotationFileCitation,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ResponsesAnnotationFileCitationType$inboundSchema,
  file_id: z.string(),
  filename: z.string(),
  index: z.number(),
}).transform((v) => {
  return remap$(v, {
    "file_id": "fileId",
  });
});

/** @internal */
export type ResponsesAnnotationFileCitation$Outbound = {
  type: string;
  file_id: string;
  filename: string;
  index: number;
};

/** @internal */
export const ResponsesAnnotationFileCitation$outboundSchema: z.ZodType<
  ResponsesAnnotationFileCitation$Outbound,
  z.ZodTypeDef,
  ResponsesAnnotationFileCitation
> = z.object({
  type: ResponsesAnnotationFileCitationType$outboundSchema,
  fileId: z.string(),
  filename: z.string(),
  index: z.number(),
}).transform((v) => {
  return remap$(v, {
    fileId: "file_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesAnnotationFileCitation$ {
  /** @deprecated use `ResponsesAnnotationFileCitation$inboundSchema` instead. */
  export const inboundSchema = ResponsesAnnotationFileCitation$inboundSchema;
  /** @deprecated use `ResponsesAnnotationFileCitation$outboundSchema` instead. */
  export const outboundSchema = ResponsesAnnotationFileCitation$outboundSchema;
  /** @deprecated use `ResponsesAnnotationFileCitation$Outbound` instead. */
  export type Outbound = ResponsesAnnotationFileCitation$Outbound;
}

export function responsesAnnotationFileCitationToJSON(
  responsesAnnotationFileCitation: ResponsesAnnotationFileCitation,
): string {
  return JSON.stringify(
    ResponsesAnnotationFileCitation$outboundSchema.parse(
      responsesAnnotationFileCitation,
    ),
  );
}

export function responsesAnnotationFileCitationFromJSON(
  jsonString: string,
): SafeParseResult<ResponsesAnnotationFileCitation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponsesAnnotationFileCitation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponsesAnnotationFileCitation' from JSON`,
  );
}
