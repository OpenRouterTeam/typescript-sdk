/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ChatGenerationTokenUsage,
  ChatGenerationTokenUsage$inboundSchema,
  ChatGenerationTokenUsage$Outbound,
  ChatGenerationTokenUsage$outboundSchema,
} from "./chatgenerationtokenusage.js";
import {
  ChatResponseChoice,
  ChatResponseChoice$inboundSchema,
  ChatResponseChoice$Outbound,
  ChatResponseChoice$outboundSchema,
} from "./chatresponsechoice.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ChatResponse = {
  id: string;
  choices: Array<ChatResponseChoice>;
  created: number;
  model: string;
  object: "chat.completion";
  systemFingerprint?: string | null | undefined;
  usage?: ChatGenerationTokenUsage | undefined;
};

/** @internal */
export const ChatResponse$inboundSchema: z.ZodType<
  ChatResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  choices: z.array(ChatResponseChoice$inboundSchema),
  created: z.number(),
  model: z.string(),
  object: z.literal("chat.completion"),
  system_fingerprint: z.nullable(z.string()).optional(),
  usage: ChatGenerationTokenUsage$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "system_fingerprint": "systemFingerprint",
  });
});

/** @internal */
export type ChatResponse$Outbound = {
  id: string;
  choices: Array<ChatResponseChoice$Outbound>;
  created: number;
  model: string;
  object: "chat.completion";
  system_fingerprint?: string | null | undefined;
  usage?: ChatGenerationTokenUsage$Outbound | undefined;
};

/** @internal */
export const ChatResponse$outboundSchema: z.ZodType<
  ChatResponse$Outbound,
  z.ZodTypeDef,
  ChatResponse
> = z.object({
  id: z.string(),
  choices: z.array(ChatResponseChoice$outboundSchema),
  created: z.number(),
  model: z.string(),
  object: z.literal("chat.completion"),
  systemFingerprint: z.nullable(z.string()).optional(),
  usage: ChatGenerationTokenUsage$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    systemFingerprint: "system_fingerprint",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatResponse$ {
  /** @deprecated use `ChatResponse$inboundSchema` instead. */
  export const inboundSchema = ChatResponse$inboundSchema;
  /** @deprecated use `ChatResponse$outboundSchema` instead. */
  export const outboundSchema = ChatResponse$outboundSchema;
  /** @deprecated use `ChatResponse$Outbound` instead. */
  export type Outbound = ChatResponse$Outbound;
}

export function chatResponseToJSON(chatResponse: ChatResponse): string {
  return JSON.stringify(ChatResponse$outboundSchema.parse(chatResponse));
}

export function chatResponseFromJSON(
  jsonString: string,
): SafeParseResult<ChatResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatResponse' from JSON`,
  );
}
