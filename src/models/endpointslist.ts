/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type EndpointsListPrompt = number | string | any;

export type EndpointsListCompletion = number | string | any;

export type EndpointsListRequest = number | string | any;

export type EndpointsListImage = number | string | any;

export type EndpointsListImageOutput = number | string | any;

export type EndpointsListAudio = number | string | any;

export type EndpointsListInputAudioCache = number | string | any;

export type EndpointsListWebSearch = number | string | any;

export type EndpointsListInternalReasoning = number | string | any;

export type EndpointsListInputCacheRead = number | string | any;

export type EndpointsListInputCacheWrite = number | string | any;

export type EndpointsListPricing = {
  prompt?: number | string | any | undefined;
  completion?: number | string | any | undefined;
  request?: number | string | any | undefined;
  image?: number | string | any | undefined;
  imageOutput?: number | string | any | undefined;
  audio?: number | string | any | undefined;
  inputAudioCache?: number | string | any | undefined;
  webSearch?: number | string | any | undefined;
  internalReasoning?: number | string | any | undefined;
  inputCacheRead?: number | string | any | undefined;
  inputCacheWrite?: number | string | any | undefined;
  discount?: number | undefined;
};

export const ProviderName = {
  AnyScale: "AnyScale",
  CentML: "Cent-ML",
  HuggingFace: "HuggingFace",
  Hyperbolic2: "Hyperbolic 2",
  Lepton: "Lepton",
  Lynn2: "Lynn 2",
  Lynn: "Lynn",
  Mancer: "Mancer",
  Modal: "Modal",
  OctoAI: "OctoAI",
  Recursal: "Recursal",
  Reflection: "Reflection",
  Replicate: "Replicate",
  SambaNova2: "SambaNova 2",
  SFCompute: "SF Compute",
  Together2: "Together 2",
  OneDotAI: "01.AI",
  Ai21: "AI21",
  AionLabs: "AionLabs",
  Alibaba: "Alibaba",
  AmazonBedrock: "Amazon Bedrock",
  Anthropic: "Anthropic",
  AtlasCloud: "AtlasCloud",
  Atoma: "Atoma",
  Avian: "Avian",
  Azure: "Azure",
  BaseTen: "BaseTen",
  Cerebras: "Cerebras",
  Chutes: "Chutes",
  Cloudflare: "Cloudflare",
  Cohere: "Cohere",
  CrofAI: "CrofAI",
  Crusoe: "Crusoe",
  DeepInfra: "DeepInfra",
  DeepSeek: "DeepSeek",
  Enfer: "Enfer",
  Featherless: "Featherless",
  Fireworks: "Fireworks",
  Friendli: "Friendli",
  GMICloud: "GMICloud",
  Google: "Google",
  GoogleAIStudio: "Google AI Studio",
  Groq: "Groq",
  Hyperbolic: "Hyperbolic",
  Inception: "Inception",
  InferenceNet: "InferenceNet",
  Infermatic: "Infermatic",
  Inflection: "Inflection",
  InoCloud: "InoCloud",
  Kluster: "Kluster",
  Lambda: "Lambda",
  Liquid: "Liquid",
  Mancer2: "Mancer 2",
  Meta: "Meta",
  Minimax: "Minimax",
  Mistral: "Mistral",
  MoonshotAI: "Moonshot AI",
  Morph: "Morph",
  NCompass: "NCompass",
  Nebius: "Nebius",
  NextBit: "NextBit",
  Nineteen: "Nineteen",
  Novita: "Novita",
  Nvidia: "Nvidia",
  OpenAI: "OpenAI",
  OpenInference: "OpenInference",
  Parasail: "Parasail",
  Perplexity: "Perplexity",
  Phala: "Phala",
  Relace: "Relace",
  SambaNova: "SambaNova",
  SiliconFlow: "SiliconFlow",
  Stealth: "Stealth",
  Switchpoint: "Switchpoint",
  Targon: "Targon",
  Together: "Together",
  Ubicloud: "Ubicloud",
  Venice: "Venice",
  WandB: "WandB",
  XAI: "xAI",
  ZAi: "Z.AI",
  FakeProvider: "FakeProvider",
} as const;
export type ProviderName = ClosedEnum<typeof ProviderName>;

export const Quantization = {
  Int4: "int4",
  Int8: "int8",
  Fp4: "fp4",
  Fp6: "fp6",
  Fp8: "fp8",
  Fp16: "fp16",
  Bf16: "bf16",
  Fp32: "fp32",
  Unknown: "unknown",
} as const;
export type Quantization = ClosedEnum<typeof Quantization>;

export const EndpointsListSupportedParameter = {
  Temperature: "temperature",
  TopP: "top_p",
  TopK: "top_k",
  MinP: "min_p",
  TopA: "top_a",
  FrequencyPenalty: "frequency_penalty",
  PresencePenalty: "presence_penalty",
  RepetitionPenalty: "repetition_penalty",
  MaxTokens: "max_tokens",
  LogitBias: "logit_bias",
  Logprobs: "logprobs",
  TopLogprobs: "top_logprobs",
  Seed: "seed",
  ResponseFormat: "response_format",
  StructuredOutputs: "structured_outputs",
  Stop: "stop",
  Tools: "tools",
  ToolChoice: "tool_choice",
  ParallelToolCalls: "parallel_tool_calls",
  IncludeReasoning: "include_reasoning",
  Reasoning: "reasoning",
  WebSearchOptions: "web_search_options",
  Verbosity: "verbosity",
} as const;
export type EndpointsListSupportedParameter = ClosedEnum<
  typeof EndpointsListSupportedParameter
>;

export const EndpointsListStatus = {
  Zero: 0,
  Minus1: -1,
  Minus2: -2,
  Minus3: -3,
  Minus5: -5,
  Minus10: -10,
} as const;
export type EndpointsListStatus = ClosedEnum<typeof EndpointsListStatus>;

export type EndpointsList = {
  name: string;
  modelName: string;
  contextLength: number;
  pricing: EndpointsListPricing;
  providerName: ProviderName;
  tag: string;
  quantization: Quantization | null;
  maxCompletionTokens: number | null;
  maxPromptTokens: number | null;
  supportedParameters: Array<EndpointsListSupportedParameter>;
  status?: EndpointsListStatus | undefined;
  uptimeLast30m: number | null;
  supportsImplicitCaching: boolean;
};

/** @internal */
export const EndpointsListPrompt$inboundSchema: z.ZodType<
  EndpointsListPrompt,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type EndpointsListPrompt$Outbound = number | string | any;

/** @internal */
export const EndpointsListPrompt$outboundSchema: z.ZodType<
  EndpointsListPrompt$Outbound,
  z.ZodTypeDef,
  EndpointsListPrompt
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EndpointsListPrompt$ {
  /** @deprecated use `EndpointsListPrompt$inboundSchema` instead. */
  export const inboundSchema = EndpointsListPrompt$inboundSchema;
  /** @deprecated use `EndpointsListPrompt$outboundSchema` instead. */
  export const outboundSchema = EndpointsListPrompt$outboundSchema;
  /** @deprecated use `EndpointsListPrompt$Outbound` instead. */
  export type Outbound = EndpointsListPrompt$Outbound;
}

export function endpointsListPromptToJSON(
  endpointsListPrompt: EndpointsListPrompt,
): string {
  return JSON.stringify(
    EndpointsListPrompt$outboundSchema.parse(endpointsListPrompt),
  );
}

export function endpointsListPromptFromJSON(
  jsonString: string,
): SafeParseResult<EndpointsListPrompt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EndpointsListPrompt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EndpointsListPrompt' from JSON`,
  );
}

/** @internal */
export const EndpointsListCompletion$inboundSchema: z.ZodType<
  EndpointsListCompletion,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type EndpointsListCompletion$Outbound = number | string | any;

/** @internal */
export const EndpointsListCompletion$outboundSchema: z.ZodType<
  EndpointsListCompletion$Outbound,
  z.ZodTypeDef,
  EndpointsListCompletion
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EndpointsListCompletion$ {
  /** @deprecated use `EndpointsListCompletion$inboundSchema` instead. */
  export const inboundSchema = EndpointsListCompletion$inboundSchema;
  /** @deprecated use `EndpointsListCompletion$outboundSchema` instead. */
  export const outboundSchema = EndpointsListCompletion$outboundSchema;
  /** @deprecated use `EndpointsListCompletion$Outbound` instead. */
  export type Outbound = EndpointsListCompletion$Outbound;
}

export function endpointsListCompletionToJSON(
  endpointsListCompletion: EndpointsListCompletion,
): string {
  return JSON.stringify(
    EndpointsListCompletion$outboundSchema.parse(endpointsListCompletion),
  );
}

export function endpointsListCompletionFromJSON(
  jsonString: string,
): SafeParseResult<EndpointsListCompletion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EndpointsListCompletion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EndpointsListCompletion' from JSON`,
  );
}

/** @internal */
export const EndpointsListRequest$inboundSchema: z.ZodType<
  EndpointsListRequest,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type EndpointsListRequest$Outbound = number | string | any;

/** @internal */
export const EndpointsListRequest$outboundSchema: z.ZodType<
  EndpointsListRequest$Outbound,
  z.ZodTypeDef,
  EndpointsListRequest
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EndpointsListRequest$ {
  /** @deprecated use `EndpointsListRequest$inboundSchema` instead. */
  export const inboundSchema = EndpointsListRequest$inboundSchema;
  /** @deprecated use `EndpointsListRequest$outboundSchema` instead. */
  export const outboundSchema = EndpointsListRequest$outboundSchema;
  /** @deprecated use `EndpointsListRequest$Outbound` instead. */
  export type Outbound = EndpointsListRequest$Outbound;
}

export function endpointsListRequestToJSON(
  endpointsListRequest: EndpointsListRequest,
): string {
  return JSON.stringify(
    EndpointsListRequest$outboundSchema.parse(endpointsListRequest),
  );
}

export function endpointsListRequestFromJSON(
  jsonString: string,
): SafeParseResult<EndpointsListRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EndpointsListRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EndpointsListRequest' from JSON`,
  );
}

/** @internal */
export const EndpointsListImage$inboundSchema: z.ZodType<
  EndpointsListImage,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type EndpointsListImage$Outbound = number | string | any;

/** @internal */
export const EndpointsListImage$outboundSchema: z.ZodType<
  EndpointsListImage$Outbound,
  z.ZodTypeDef,
  EndpointsListImage
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EndpointsListImage$ {
  /** @deprecated use `EndpointsListImage$inboundSchema` instead. */
  export const inboundSchema = EndpointsListImage$inboundSchema;
  /** @deprecated use `EndpointsListImage$outboundSchema` instead. */
  export const outboundSchema = EndpointsListImage$outboundSchema;
  /** @deprecated use `EndpointsListImage$Outbound` instead. */
  export type Outbound = EndpointsListImage$Outbound;
}

export function endpointsListImageToJSON(
  endpointsListImage: EndpointsListImage,
): string {
  return JSON.stringify(
    EndpointsListImage$outboundSchema.parse(endpointsListImage),
  );
}

export function endpointsListImageFromJSON(
  jsonString: string,
): SafeParseResult<EndpointsListImage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EndpointsListImage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EndpointsListImage' from JSON`,
  );
}

/** @internal */
export const EndpointsListImageOutput$inboundSchema: z.ZodType<
  EndpointsListImageOutput,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type EndpointsListImageOutput$Outbound = number | string | any;

/** @internal */
export const EndpointsListImageOutput$outboundSchema: z.ZodType<
  EndpointsListImageOutput$Outbound,
  z.ZodTypeDef,
  EndpointsListImageOutput
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EndpointsListImageOutput$ {
  /** @deprecated use `EndpointsListImageOutput$inboundSchema` instead. */
  export const inboundSchema = EndpointsListImageOutput$inboundSchema;
  /** @deprecated use `EndpointsListImageOutput$outboundSchema` instead. */
  export const outboundSchema = EndpointsListImageOutput$outboundSchema;
  /** @deprecated use `EndpointsListImageOutput$Outbound` instead. */
  export type Outbound = EndpointsListImageOutput$Outbound;
}

export function endpointsListImageOutputToJSON(
  endpointsListImageOutput: EndpointsListImageOutput,
): string {
  return JSON.stringify(
    EndpointsListImageOutput$outboundSchema.parse(endpointsListImageOutput),
  );
}

export function endpointsListImageOutputFromJSON(
  jsonString: string,
): SafeParseResult<EndpointsListImageOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EndpointsListImageOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EndpointsListImageOutput' from JSON`,
  );
}

/** @internal */
export const EndpointsListAudio$inboundSchema: z.ZodType<
  EndpointsListAudio,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type EndpointsListAudio$Outbound = number | string | any;

/** @internal */
export const EndpointsListAudio$outboundSchema: z.ZodType<
  EndpointsListAudio$Outbound,
  z.ZodTypeDef,
  EndpointsListAudio
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EndpointsListAudio$ {
  /** @deprecated use `EndpointsListAudio$inboundSchema` instead. */
  export const inboundSchema = EndpointsListAudio$inboundSchema;
  /** @deprecated use `EndpointsListAudio$outboundSchema` instead. */
  export const outboundSchema = EndpointsListAudio$outboundSchema;
  /** @deprecated use `EndpointsListAudio$Outbound` instead. */
  export type Outbound = EndpointsListAudio$Outbound;
}

export function endpointsListAudioToJSON(
  endpointsListAudio: EndpointsListAudio,
): string {
  return JSON.stringify(
    EndpointsListAudio$outboundSchema.parse(endpointsListAudio),
  );
}

export function endpointsListAudioFromJSON(
  jsonString: string,
): SafeParseResult<EndpointsListAudio, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EndpointsListAudio$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EndpointsListAudio' from JSON`,
  );
}

/** @internal */
export const EndpointsListInputAudioCache$inboundSchema: z.ZodType<
  EndpointsListInputAudioCache,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type EndpointsListInputAudioCache$Outbound = number | string | any;

/** @internal */
export const EndpointsListInputAudioCache$outboundSchema: z.ZodType<
  EndpointsListInputAudioCache$Outbound,
  z.ZodTypeDef,
  EndpointsListInputAudioCache
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EndpointsListInputAudioCache$ {
  /** @deprecated use `EndpointsListInputAudioCache$inboundSchema` instead. */
  export const inboundSchema = EndpointsListInputAudioCache$inboundSchema;
  /** @deprecated use `EndpointsListInputAudioCache$outboundSchema` instead. */
  export const outboundSchema = EndpointsListInputAudioCache$outboundSchema;
  /** @deprecated use `EndpointsListInputAudioCache$Outbound` instead. */
  export type Outbound = EndpointsListInputAudioCache$Outbound;
}

export function endpointsListInputAudioCacheToJSON(
  endpointsListInputAudioCache: EndpointsListInputAudioCache,
): string {
  return JSON.stringify(
    EndpointsListInputAudioCache$outboundSchema.parse(
      endpointsListInputAudioCache,
    ),
  );
}

export function endpointsListInputAudioCacheFromJSON(
  jsonString: string,
): SafeParseResult<EndpointsListInputAudioCache, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EndpointsListInputAudioCache$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EndpointsListInputAudioCache' from JSON`,
  );
}

/** @internal */
export const EndpointsListWebSearch$inboundSchema: z.ZodType<
  EndpointsListWebSearch,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type EndpointsListWebSearch$Outbound = number | string | any;

/** @internal */
export const EndpointsListWebSearch$outboundSchema: z.ZodType<
  EndpointsListWebSearch$Outbound,
  z.ZodTypeDef,
  EndpointsListWebSearch
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EndpointsListWebSearch$ {
  /** @deprecated use `EndpointsListWebSearch$inboundSchema` instead. */
  export const inboundSchema = EndpointsListWebSearch$inboundSchema;
  /** @deprecated use `EndpointsListWebSearch$outboundSchema` instead. */
  export const outboundSchema = EndpointsListWebSearch$outboundSchema;
  /** @deprecated use `EndpointsListWebSearch$Outbound` instead. */
  export type Outbound = EndpointsListWebSearch$Outbound;
}

export function endpointsListWebSearchToJSON(
  endpointsListWebSearch: EndpointsListWebSearch,
): string {
  return JSON.stringify(
    EndpointsListWebSearch$outboundSchema.parse(endpointsListWebSearch),
  );
}

export function endpointsListWebSearchFromJSON(
  jsonString: string,
): SafeParseResult<EndpointsListWebSearch, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EndpointsListWebSearch$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EndpointsListWebSearch' from JSON`,
  );
}

/** @internal */
export const EndpointsListInternalReasoning$inboundSchema: z.ZodType<
  EndpointsListInternalReasoning,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type EndpointsListInternalReasoning$Outbound = number | string | any;

/** @internal */
export const EndpointsListInternalReasoning$outboundSchema: z.ZodType<
  EndpointsListInternalReasoning$Outbound,
  z.ZodTypeDef,
  EndpointsListInternalReasoning
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EndpointsListInternalReasoning$ {
  /** @deprecated use `EndpointsListInternalReasoning$inboundSchema` instead. */
  export const inboundSchema = EndpointsListInternalReasoning$inboundSchema;
  /** @deprecated use `EndpointsListInternalReasoning$outboundSchema` instead. */
  export const outboundSchema = EndpointsListInternalReasoning$outboundSchema;
  /** @deprecated use `EndpointsListInternalReasoning$Outbound` instead. */
  export type Outbound = EndpointsListInternalReasoning$Outbound;
}

export function endpointsListInternalReasoningToJSON(
  endpointsListInternalReasoning: EndpointsListInternalReasoning,
): string {
  return JSON.stringify(
    EndpointsListInternalReasoning$outboundSchema.parse(
      endpointsListInternalReasoning,
    ),
  );
}

export function endpointsListInternalReasoningFromJSON(
  jsonString: string,
): SafeParseResult<EndpointsListInternalReasoning, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EndpointsListInternalReasoning$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EndpointsListInternalReasoning' from JSON`,
  );
}

/** @internal */
export const EndpointsListInputCacheRead$inboundSchema: z.ZodType<
  EndpointsListInputCacheRead,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type EndpointsListInputCacheRead$Outbound = number | string | any;

/** @internal */
export const EndpointsListInputCacheRead$outboundSchema: z.ZodType<
  EndpointsListInputCacheRead$Outbound,
  z.ZodTypeDef,
  EndpointsListInputCacheRead
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EndpointsListInputCacheRead$ {
  /** @deprecated use `EndpointsListInputCacheRead$inboundSchema` instead. */
  export const inboundSchema = EndpointsListInputCacheRead$inboundSchema;
  /** @deprecated use `EndpointsListInputCacheRead$outboundSchema` instead. */
  export const outboundSchema = EndpointsListInputCacheRead$outboundSchema;
  /** @deprecated use `EndpointsListInputCacheRead$Outbound` instead. */
  export type Outbound = EndpointsListInputCacheRead$Outbound;
}

export function endpointsListInputCacheReadToJSON(
  endpointsListInputCacheRead: EndpointsListInputCacheRead,
): string {
  return JSON.stringify(
    EndpointsListInputCacheRead$outboundSchema.parse(
      endpointsListInputCacheRead,
    ),
  );
}

export function endpointsListInputCacheReadFromJSON(
  jsonString: string,
): SafeParseResult<EndpointsListInputCacheRead, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EndpointsListInputCacheRead$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EndpointsListInputCacheRead' from JSON`,
  );
}

/** @internal */
export const EndpointsListInputCacheWrite$inboundSchema: z.ZodType<
  EndpointsListInputCacheWrite,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string(), z.any()]);

/** @internal */
export type EndpointsListInputCacheWrite$Outbound = number | string | any;

/** @internal */
export const EndpointsListInputCacheWrite$outboundSchema: z.ZodType<
  EndpointsListInputCacheWrite$Outbound,
  z.ZodTypeDef,
  EndpointsListInputCacheWrite
> = z.union([z.number(), z.string(), z.any()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EndpointsListInputCacheWrite$ {
  /** @deprecated use `EndpointsListInputCacheWrite$inboundSchema` instead. */
  export const inboundSchema = EndpointsListInputCacheWrite$inboundSchema;
  /** @deprecated use `EndpointsListInputCacheWrite$outboundSchema` instead. */
  export const outboundSchema = EndpointsListInputCacheWrite$outboundSchema;
  /** @deprecated use `EndpointsListInputCacheWrite$Outbound` instead. */
  export type Outbound = EndpointsListInputCacheWrite$Outbound;
}

export function endpointsListInputCacheWriteToJSON(
  endpointsListInputCacheWrite: EndpointsListInputCacheWrite,
): string {
  return JSON.stringify(
    EndpointsListInputCacheWrite$outboundSchema.parse(
      endpointsListInputCacheWrite,
    ),
  );
}

export function endpointsListInputCacheWriteFromJSON(
  jsonString: string,
): SafeParseResult<EndpointsListInputCacheWrite, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EndpointsListInputCacheWrite$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EndpointsListInputCacheWrite' from JSON`,
  );
}

/** @internal */
export const EndpointsListPricing$inboundSchema: z.ZodType<
  EndpointsListPricing,
  z.ZodTypeDef,
  unknown
> = z.object({
  prompt: z.union([z.number(), z.string(), z.any()]).optional(),
  completion: z.union([z.number(), z.string(), z.any()]).optional(),
  request: z.union([z.number(), z.string(), z.any()]).optional(),
  image: z.union([z.number(), z.string(), z.any()]).optional(),
  image_output: z.union([z.number(), z.string(), z.any()]).optional(),
  audio: z.union([z.number(), z.string(), z.any()]).optional(),
  input_audio_cache: z.union([z.number(), z.string(), z.any()]).optional(),
  web_search: z.union([z.number(), z.string(), z.any()]).optional(),
  internal_reasoning: z.union([z.number(), z.string(), z.any()]).optional(),
  input_cache_read: z.union([z.number(), z.string(), z.any()]).optional(),
  input_cache_write: z.union([z.number(), z.string(), z.any()]).optional(),
  discount: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "image_output": "imageOutput",
    "input_audio_cache": "inputAudioCache",
    "web_search": "webSearch",
    "internal_reasoning": "internalReasoning",
    "input_cache_read": "inputCacheRead",
    "input_cache_write": "inputCacheWrite",
  });
});

/** @internal */
export type EndpointsListPricing$Outbound = {
  prompt?: number | string | any | undefined;
  completion?: number | string | any | undefined;
  request?: number | string | any | undefined;
  image?: number | string | any | undefined;
  image_output?: number | string | any | undefined;
  audio?: number | string | any | undefined;
  input_audio_cache?: number | string | any | undefined;
  web_search?: number | string | any | undefined;
  internal_reasoning?: number | string | any | undefined;
  input_cache_read?: number | string | any | undefined;
  input_cache_write?: number | string | any | undefined;
  discount?: number | undefined;
};

/** @internal */
export const EndpointsListPricing$outboundSchema: z.ZodType<
  EndpointsListPricing$Outbound,
  z.ZodTypeDef,
  EndpointsListPricing
> = z.object({
  prompt: z.union([z.number(), z.string(), z.any()]).optional(),
  completion: z.union([z.number(), z.string(), z.any()]).optional(),
  request: z.union([z.number(), z.string(), z.any()]).optional(),
  image: z.union([z.number(), z.string(), z.any()]).optional(),
  imageOutput: z.union([z.number(), z.string(), z.any()]).optional(),
  audio: z.union([z.number(), z.string(), z.any()]).optional(),
  inputAudioCache: z.union([z.number(), z.string(), z.any()]).optional(),
  webSearch: z.union([z.number(), z.string(), z.any()]).optional(),
  internalReasoning: z.union([z.number(), z.string(), z.any()]).optional(),
  inputCacheRead: z.union([z.number(), z.string(), z.any()]).optional(),
  inputCacheWrite: z.union([z.number(), z.string(), z.any()]).optional(),
  discount: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    imageOutput: "image_output",
    inputAudioCache: "input_audio_cache",
    webSearch: "web_search",
    internalReasoning: "internal_reasoning",
    inputCacheRead: "input_cache_read",
    inputCacheWrite: "input_cache_write",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EndpointsListPricing$ {
  /** @deprecated use `EndpointsListPricing$inboundSchema` instead. */
  export const inboundSchema = EndpointsListPricing$inboundSchema;
  /** @deprecated use `EndpointsListPricing$outboundSchema` instead. */
  export const outboundSchema = EndpointsListPricing$outboundSchema;
  /** @deprecated use `EndpointsListPricing$Outbound` instead. */
  export type Outbound = EndpointsListPricing$Outbound;
}

export function endpointsListPricingToJSON(
  endpointsListPricing: EndpointsListPricing,
): string {
  return JSON.stringify(
    EndpointsListPricing$outboundSchema.parse(endpointsListPricing),
  );
}

export function endpointsListPricingFromJSON(
  jsonString: string,
): SafeParseResult<EndpointsListPricing, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EndpointsListPricing$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EndpointsListPricing' from JSON`,
  );
}

/** @internal */
export const ProviderName$inboundSchema: z.ZodNativeEnum<typeof ProviderName> =
  z.nativeEnum(ProviderName);

/** @internal */
export const ProviderName$outboundSchema: z.ZodNativeEnum<typeof ProviderName> =
  ProviderName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProviderName$ {
  /** @deprecated use `ProviderName$inboundSchema` instead. */
  export const inboundSchema = ProviderName$inboundSchema;
  /** @deprecated use `ProviderName$outboundSchema` instead. */
  export const outboundSchema = ProviderName$outboundSchema;
}

/** @internal */
export const Quantization$inboundSchema: z.ZodNativeEnum<typeof Quantization> =
  z.nativeEnum(Quantization);

/** @internal */
export const Quantization$outboundSchema: z.ZodNativeEnum<typeof Quantization> =
  Quantization$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Quantization$ {
  /** @deprecated use `Quantization$inboundSchema` instead. */
  export const inboundSchema = Quantization$inboundSchema;
  /** @deprecated use `Quantization$outboundSchema` instead. */
  export const outboundSchema = Quantization$outboundSchema;
}

/** @internal */
export const EndpointsListSupportedParameter$inboundSchema: z.ZodNativeEnum<
  typeof EndpointsListSupportedParameter
> = z.nativeEnum(EndpointsListSupportedParameter);

/** @internal */
export const EndpointsListSupportedParameter$outboundSchema: z.ZodNativeEnum<
  typeof EndpointsListSupportedParameter
> = EndpointsListSupportedParameter$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EndpointsListSupportedParameter$ {
  /** @deprecated use `EndpointsListSupportedParameter$inboundSchema` instead. */
  export const inboundSchema = EndpointsListSupportedParameter$inboundSchema;
  /** @deprecated use `EndpointsListSupportedParameter$outboundSchema` instead. */
  export const outboundSchema = EndpointsListSupportedParameter$outboundSchema;
}

/** @internal */
export const EndpointsListStatus$inboundSchema: z.ZodNativeEnum<
  typeof EndpointsListStatus
> = z.nativeEnum(EndpointsListStatus);

/** @internal */
export const EndpointsListStatus$outboundSchema: z.ZodNativeEnum<
  typeof EndpointsListStatus
> = EndpointsListStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EndpointsListStatus$ {
  /** @deprecated use `EndpointsListStatus$inboundSchema` instead. */
  export const inboundSchema = EndpointsListStatus$inboundSchema;
  /** @deprecated use `EndpointsListStatus$outboundSchema` instead. */
  export const outboundSchema = EndpointsListStatus$outboundSchema;
}

/** @internal */
export const EndpointsList$inboundSchema: z.ZodType<
  EndpointsList,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  model_name: z.string(),
  context_length: z.number(),
  pricing: z.lazy(() => EndpointsListPricing$inboundSchema),
  provider_name: ProviderName$inboundSchema,
  tag: z.string(),
  quantization: z.nullable(Quantization$inboundSchema),
  max_completion_tokens: z.nullable(z.number()),
  max_prompt_tokens: z.nullable(z.number()),
  supported_parameters: z.array(EndpointsListSupportedParameter$inboundSchema),
  status: EndpointsListStatus$inboundSchema.optional(),
  uptime_last_30m: z.nullable(z.number()),
  supports_implicit_caching: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "model_name": "modelName",
    "context_length": "contextLength",
    "provider_name": "providerName",
    "max_completion_tokens": "maxCompletionTokens",
    "max_prompt_tokens": "maxPromptTokens",
    "supported_parameters": "supportedParameters",
    "uptime_last_30m": "uptimeLast30m",
    "supports_implicit_caching": "supportsImplicitCaching",
  });
});

/** @internal */
export type EndpointsList$Outbound = {
  name: string;
  model_name: string;
  context_length: number;
  pricing: EndpointsListPricing$Outbound;
  provider_name: string;
  tag: string;
  quantization: string | null;
  max_completion_tokens: number | null;
  max_prompt_tokens: number | null;
  supported_parameters: Array<string>;
  status?: number | undefined;
  uptime_last_30m: number | null;
  supports_implicit_caching: boolean;
};

/** @internal */
export const EndpointsList$outboundSchema: z.ZodType<
  EndpointsList$Outbound,
  z.ZodTypeDef,
  EndpointsList
> = z.object({
  name: z.string(),
  modelName: z.string(),
  contextLength: z.number(),
  pricing: z.lazy(() => EndpointsListPricing$outboundSchema),
  providerName: ProviderName$outboundSchema,
  tag: z.string(),
  quantization: z.nullable(Quantization$outboundSchema),
  maxCompletionTokens: z.nullable(z.number()),
  maxPromptTokens: z.nullable(z.number()),
  supportedParameters: z.array(EndpointsListSupportedParameter$outboundSchema),
  status: EndpointsListStatus$outboundSchema.optional(),
  uptimeLast30m: z.nullable(z.number()),
  supportsImplicitCaching: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    modelName: "model_name",
    contextLength: "context_length",
    providerName: "provider_name",
    maxCompletionTokens: "max_completion_tokens",
    maxPromptTokens: "max_prompt_tokens",
    supportedParameters: "supported_parameters",
    uptimeLast30m: "uptime_last_30m",
    supportsImplicitCaching: "supports_implicit_caching",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EndpointsList$ {
  /** @deprecated use `EndpointsList$inboundSchema` instead. */
  export const inboundSchema = EndpointsList$inboundSchema;
  /** @deprecated use `EndpointsList$outboundSchema` instead. */
  export const outboundSchema = EndpointsList$outboundSchema;
  /** @deprecated use `EndpointsList$Outbound` instead. */
  export type Outbound = EndpointsList$Outbound;
}

export function endpointsListToJSON(endpointsList: EndpointsList): string {
  return JSON.stringify(EndpointsList$outboundSchema.parse(endpointsList));
}

export function endpointsListFromJSON(
  jsonString: string,
): SafeParseResult<EndpointsList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EndpointsList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EndpointsList' from JSON`,
  );
}
