/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ChatCompletionChoice,
  ChatCompletionChoice$inboundSchema,
  ChatCompletionChoice$Outbound,
  ChatCompletionChoice$outboundSchema,
} from "./chatcompletionchoice.js";
import {
  CompletionUsage,
  CompletionUsage$inboundSchema,
  CompletionUsage$Outbound,
  CompletionUsage$outboundSchema,
} from "./completionusage.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const ChatCompletionObject = {
  ChatCompletion: "chat.completion",
} as const;
export type ChatCompletionObject = ClosedEnum<typeof ChatCompletionObject>;

/**
 * Chat completion response
 */
export type ChatCompletion = {
  /**
   * Unique completion identifier
   */
  id: string;
  /**
   * List of completion choices
   */
  choices: Array<ChatCompletionChoice>;
  /**
   * Unix timestamp of creation
   */
  created: number;
  /**
   * Model used for completion
   */
  model: string;
  object: ChatCompletionObject;
  /**
   * System fingerprint
   */
  systemFingerprint?: string | null | undefined;
  /**
   * Token usage statistics
   */
  usage?: CompletionUsage | undefined;
};

/** @internal */
export const ChatCompletionObject$inboundSchema: z.ZodNativeEnum<
  typeof ChatCompletionObject
> = z.nativeEnum(ChatCompletionObject);

/** @internal */
export const ChatCompletionObject$outboundSchema: z.ZodNativeEnum<
  typeof ChatCompletionObject
> = ChatCompletionObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionObject$ {
  /** @deprecated use `ChatCompletionObject$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionObject$inboundSchema;
  /** @deprecated use `ChatCompletionObject$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionObject$outboundSchema;
}

/** @internal */
export const ChatCompletion$inboundSchema: z.ZodType<
  ChatCompletion,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  choices: z.array(ChatCompletionChoice$inboundSchema),
  created: z.number(),
  model: z.string(),
  object: ChatCompletionObject$inboundSchema,
  system_fingerprint: z.nullable(z.string()).optional(),
  usage: CompletionUsage$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "system_fingerprint": "systemFingerprint",
  });
});

/** @internal */
export type ChatCompletion$Outbound = {
  id: string;
  choices: Array<ChatCompletionChoice$Outbound>;
  created: number;
  model: string;
  object: string;
  system_fingerprint?: string | null | undefined;
  usage?: CompletionUsage$Outbound | undefined;
};

/** @internal */
export const ChatCompletion$outboundSchema: z.ZodType<
  ChatCompletion$Outbound,
  z.ZodTypeDef,
  ChatCompletion
> = z.object({
  id: z.string(),
  choices: z.array(ChatCompletionChoice$outboundSchema),
  created: z.number(),
  model: z.string(),
  object: ChatCompletionObject$outboundSchema,
  systemFingerprint: z.nullable(z.string()).optional(),
  usage: CompletionUsage$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    systemFingerprint: "system_fingerprint",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletion$ {
  /** @deprecated use `ChatCompletion$inboundSchema` instead. */
  export const inboundSchema = ChatCompletion$inboundSchema;
  /** @deprecated use `ChatCompletion$outboundSchema` instead. */
  export const outboundSchema = ChatCompletion$outboundSchema;
  /** @deprecated use `ChatCompletion$Outbound` instead. */
  export type Outbound = ChatCompletion$Outbound;
}

export function chatCompletionToJSON(chatCompletion: ChatCompletion): string {
  return JSON.stringify(ChatCompletion$outboundSchema.parse(chatCompletion));
}

export function chatCompletionFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletion' from JSON`,
  );
}
