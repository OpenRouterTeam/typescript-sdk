/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v4";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  OpenAIResponsesReasoningEffort,
  OpenAIResponsesReasoningEffort$inboundSchema,
  OpenAIResponsesReasoningEffort$outboundSchema,
} from "./openairesponsesreasoningeffort.js";
import {
  ReasoningSummaryVerbosity,
  ReasoningSummaryVerbosity$inboundSchema,
  ReasoningSummaryVerbosity$outboundSchema,
} from "./reasoningsummaryverbosity.js";

/**
 * Configuration for reasoning mode in the response
 */
export type OpenResponsesReasoningConfig = {
  effort?: OpenAIResponsesReasoningEffort | null | undefined;
  summary?: ReasoningSummaryVerbosity | undefined;
  maxTokens?: number | null | undefined;
  enabled?: boolean | null | undefined;
};

/** @internal */
export const OpenResponsesReasoningConfig$inboundSchema: z.ZodType<
  OpenResponsesReasoningConfig,
  unknown
> = z.object({
  effort: z.nullable(OpenAIResponsesReasoningEffort$inboundSchema).optional(),
  summary: ReasoningSummaryVerbosity$inboundSchema.optional(),
  max_tokens: z.nullable(z.number()).optional(),
  enabled: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    "max_tokens": "maxTokens",
  });
});

/** @internal */
export type OpenResponsesReasoningConfig$Outbound = {
  effort?: string | null | undefined;
  summary?: string | undefined;
  max_tokens?: number | null | undefined;
  enabled?: boolean | null | undefined;
};

/** @internal */
export const OpenResponsesReasoningConfig$outboundSchema: z.ZodType<
  OpenResponsesReasoningConfig$Outbound,
  OpenResponsesReasoningConfig
> = z.object({
  effort: z.nullable(OpenAIResponsesReasoningEffort$outboundSchema).optional(),
  summary: ReasoningSummaryVerbosity$outboundSchema.optional(),
  maxTokens: z.nullable(z.number()).optional(),
  enabled: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    maxTokens: "max_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesReasoningConfig$ {
  /** @deprecated use `OpenResponsesReasoningConfig$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesReasoningConfig$inboundSchema;
  /** @deprecated use `OpenResponsesReasoningConfig$outboundSchema` instead. */
  export const outboundSchema = OpenResponsesReasoningConfig$outboundSchema;
  /** @deprecated use `OpenResponsesReasoningConfig$Outbound` instead. */
  export type Outbound = OpenResponsesReasoningConfig$Outbound;
}

export function openResponsesReasoningConfigToJSON(
  openResponsesReasoningConfig: OpenResponsesReasoningConfig,
): string {
  return JSON.stringify(
    OpenResponsesReasoningConfig$outboundSchema.parse(
      openResponsesReasoningConfig,
    ),
  );
}

export function openResponsesReasoningConfigFromJSON(
  jsonString: string,
): SafeParseResult<OpenResponsesReasoningConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenResponsesReasoningConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenResponsesReasoningConfig' from JSON`,
  );
}
