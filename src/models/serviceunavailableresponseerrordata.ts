/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v4";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Error data for ServiceUnavailableResponse
 */
export type ServiceUnavailableResponseErrorData = {
  code: number;
  message: string;
  metadata?: { [k: string]: any | null } | null | undefined;
};

/** @internal */
export const ServiceUnavailableResponseErrorData$inboundSchema: z.ZodType<
  ServiceUnavailableResponseErrorData,
  unknown
> = z.object({
  code: z.number().int(),
  message: z.string(),
  metadata: z.nullable(z.record(z.string(), z.nullable(z.any()))).optional(),
});

/** @internal */
export type ServiceUnavailableResponseErrorData$Outbound = {
  code: number;
  message: string;
  metadata?: { [k: string]: any | null } | null | undefined;
};

/** @internal */
export const ServiceUnavailableResponseErrorData$outboundSchema: z.ZodType<
  ServiceUnavailableResponseErrorData$Outbound,
  ServiceUnavailableResponseErrorData
> = z.object({
  code: z.number().int(),
  message: z.string(),
  metadata: z.nullable(z.record(z.string(), z.nullable(z.any()))).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceUnavailableResponseErrorData$ {
  /** @deprecated use `ServiceUnavailableResponseErrorData$inboundSchema` instead. */
  export const inboundSchema =
    ServiceUnavailableResponseErrorData$inboundSchema;
  /** @deprecated use `ServiceUnavailableResponseErrorData$outboundSchema` instead. */
  export const outboundSchema =
    ServiceUnavailableResponseErrorData$outboundSchema;
  /** @deprecated use `ServiceUnavailableResponseErrorData$Outbound` instead. */
  export type Outbound = ServiceUnavailableResponseErrorData$Outbound;
}

export function serviceUnavailableResponseErrorDataToJSON(
  serviceUnavailableResponseErrorData: ServiceUnavailableResponseErrorData,
): string {
  return JSON.stringify(
    ServiceUnavailableResponseErrorData$outboundSchema.parse(
      serviceUnavailableResponseErrorData,
    ),
  );
}

export function serviceUnavailableResponseErrorDataFromJSON(
  jsonString: string,
): SafeParseResult<ServiceUnavailableResponseErrorData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ServiceUnavailableResponseErrorData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServiceUnavailableResponseErrorData' from JSON`,
  );
}
