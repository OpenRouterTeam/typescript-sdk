/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ChatErrorError = {
  code: string | null;
  message: string;
  param: string | null;
  type: string;
};

/** @internal */
export const ChatErrorError$inboundSchema: z.ZodType<
  ChatErrorError,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.nullable(z.string()),
  message: z.string(),
  param: z.nullable(z.string()),
  type: z.string(),
});

/** @internal */
export type ChatErrorError$Outbound = {
  code: string | null;
  message: string;
  param: string | null;
  type: string;
};

/** @internal */
export const ChatErrorError$outboundSchema: z.ZodType<
  ChatErrorError$Outbound,
  z.ZodTypeDef,
  ChatErrorError
> = z.object({
  code: z.nullable(z.string()),
  message: z.string(),
  param: z.nullable(z.string()),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatErrorError$ {
  /** @deprecated use `ChatErrorError$inboundSchema` instead. */
  export const inboundSchema = ChatErrorError$inboundSchema;
  /** @deprecated use `ChatErrorError$outboundSchema` instead. */
  export const outboundSchema = ChatErrorError$outboundSchema;
  /** @deprecated use `ChatErrorError$Outbound` instead. */
  export type Outbound = ChatErrorError$Outbound;
}

export function chatErrorErrorToJSON(chatErrorError: ChatErrorError): string {
  return JSON.stringify(ChatErrorError$outboundSchema.parse(chatErrorError));
}

export function chatErrorErrorFromJSON(
  jsonString: string,
): SafeParseResult<ChatErrorError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatErrorError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatErrorError' from JSON`,
  );
}
