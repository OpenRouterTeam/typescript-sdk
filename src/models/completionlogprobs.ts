/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type CompletionLogprobs = {
  tokens: Array<string>;
  tokenLogprobs: Array<number>;
  topLogprobs: Array<{ [k: string]: number }> | null;
  textOffset: Array<number>;
};

/** @internal */
export const CompletionLogprobs$inboundSchema: z.ZodType<
  CompletionLogprobs,
  z.ZodTypeDef,
  unknown
> = z.object({
  tokens: z.array(z.string()),
  token_logprobs: z.array(z.number()),
  top_logprobs: z.nullable(z.array(z.record(z.number()))),
  text_offset: z.array(z.number()),
}).transform((v) => {
  return remap$(v, {
    "token_logprobs": "tokenLogprobs",
    "top_logprobs": "topLogprobs",
    "text_offset": "textOffset",
  });
});

/** @internal */
export type CompletionLogprobs$Outbound = {
  tokens: Array<string>;
  token_logprobs: Array<number>;
  top_logprobs: Array<{ [k: string]: number }> | null;
  text_offset: Array<number>;
};

/** @internal */
export const CompletionLogprobs$outboundSchema: z.ZodType<
  CompletionLogprobs$Outbound,
  z.ZodTypeDef,
  CompletionLogprobs
> = z.object({
  tokens: z.array(z.string()),
  tokenLogprobs: z.array(z.number()),
  topLogprobs: z.nullable(z.array(z.record(z.number()))),
  textOffset: z.array(z.number()),
}).transform((v) => {
  return remap$(v, {
    tokenLogprobs: "token_logprobs",
    topLogprobs: "top_logprobs",
    textOffset: "text_offset",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompletionLogprobs$ {
  /** @deprecated use `CompletionLogprobs$inboundSchema` instead. */
  export const inboundSchema = CompletionLogprobs$inboundSchema;
  /** @deprecated use `CompletionLogprobs$outboundSchema` instead. */
  export const outboundSchema = CompletionLogprobs$outboundSchema;
  /** @deprecated use `CompletionLogprobs$Outbound` instead. */
  export type Outbound = CompletionLogprobs$Outbound;
}

export function completionLogprobsToJSON(
  completionLogprobs: CompletionLogprobs,
): string {
  return JSON.stringify(
    CompletionLogprobs$outboundSchema.parse(completionLogprobs),
  );
}

export function completionLogprobsFromJSON(
  jsonString: string,
): SafeParseResult<CompletionLogprobs, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompletionLogprobs$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompletionLogprobs' from JSON`,
  );
}
