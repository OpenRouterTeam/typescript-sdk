/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const ResponsesErrorFieldCode = {
  ServerError: "server_error",
  RateLimitExceeded: "rate_limit_exceeded",
  InvalidPrompt: "invalid_prompt",
  VectorStoreTimeout: "vector_store_timeout",
  InvalidImage: "invalid_image",
  InvalidImageFormat: "invalid_image_format",
  InvalidBase64Image: "invalid_base64_image",
  InvalidImageUrl: "invalid_image_url",
  ImageTooLarge: "image_too_large",
  ImageTooSmall: "image_too_small",
  ImageParseError: "image_parse_error",
  ImageContentPolicyViolation: "image_content_policy_violation",
  InvalidImageMode: "invalid_image_mode",
  ImageFileTooLarge: "image_file_too_large",
  UnsupportedImageMediaType: "unsupported_image_media_type",
  EmptyImageFile: "empty_image_file",
  FailedToDownloadImage: "failed_to_download_image",
  ImageFileNotFound: "image_file_not_found",
} as const;
export type ResponsesErrorFieldCode = OpenEnum<typeof ResponsesErrorFieldCode>;

/**
 * Error information returned from the API
 */
export type ResponsesErrorField = {
  code: ResponsesErrorFieldCode;
  message: string;
};

/** @internal */
export const ResponsesErrorFieldCode$inboundSchema: z.ZodType<
  ResponsesErrorFieldCode,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ResponsesErrorFieldCode),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ResponsesErrorFieldCode$outboundSchema: z.ZodType<
  ResponsesErrorFieldCode,
  z.ZodTypeDef,
  ResponsesErrorFieldCode
> = z.union([
  z.nativeEnum(ResponsesErrorFieldCode),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesErrorFieldCode$ {
  /** @deprecated use `ResponsesErrorFieldCode$inboundSchema` instead. */
  export const inboundSchema = ResponsesErrorFieldCode$inboundSchema;
  /** @deprecated use `ResponsesErrorFieldCode$outboundSchema` instead. */
  export const outboundSchema = ResponsesErrorFieldCode$outboundSchema;
}

/** @internal */
export const ResponsesErrorField$inboundSchema: z.ZodType<
  ResponsesErrorField,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: ResponsesErrorFieldCode$inboundSchema,
  message: z.string(),
});

/** @internal */
export type ResponsesErrorField$Outbound = {
  code: string;
  message: string;
};

/** @internal */
export const ResponsesErrorField$outboundSchema: z.ZodType<
  ResponsesErrorField$Outbound,
  z.ZodTypeDef,
  ResponsesErrorField
> = z.object({
  code: ResponsesErrorFieldCode$outboundSchema,
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesErrorField$ {
  /** @deprecated use `ResponsesErrorField$inboundSchema` instead. */
  export const inboundSchema = ResponsesErrorField$inboundSchema;
  /** @deprecated use `ResponsesErrorField$outboundSchema` instead. */
  export const outboundSchema = ResponsesErrorField$outboundSchema;
  /** @deprecated use `ResponsesErrorField$Outbound` instead. */
  export type Outbound = ResponsesErrorField$Outbound;
}

export function responsesErrorFieldToJSON(
  responsesErrorField: ResponsesErrorField,
): string {
  return JSON.stringify(
    ResponsesErrorField$outboundSchema.parse(responsesErrorField),
  );
}

export function responsesErrorFieldFromJSON(
  jsonString: string,
): SafeParseResult<ResponsesErrorField, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponsesErrorField$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponsesErrorField' from JSON`,
  );
}
