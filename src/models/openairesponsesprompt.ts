/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ResponseInputFile,
  ResponseInputFile$inboundSchema,
  ResponseInputFile$Outbound,
  ResponseInputFile$outboundSchema,
} from "./responseinputfile.js";
import {
  ResponseInputImage,
  ResponseInputImage$inboundSchema,
  ResponseInputImage$Outbound,
  ResponseInputImage$outboundSchema,
} from "./responseinputimage.js";
import {
  ResponseInputText,
  ResponseInputText$inboundSchema,
  ResponseInputText$Outbound,
  ResponseInputText$outboundSchema,
} from "./responseinputtext.js";

export type Variables =
  | (ResponseInputText & { type: "input_text" })
  | (ResponseInputImage & { type: "input_image" })
  | (ResponseInputFile & { type: "input_file" });

export type OpenAIResponsesPrompt = {
  id: string;
  variables?:
    | {
      [k: string]:
        | (ResponseInputText & { type: "input_text" })
        | (ResponseInputImage & { type: "input_image" })
        | (ResponseInputFile & { type: "input_file" });
    }
    | null
    | undefined;
};

/** @internal */
export const Variables$inboundSchema: z.ZodType<
  Variables,
  z.ZodTypeDef,
  unknown
> = z.union([
  ResponseInputText$inboundSchema.and(
    z.object({ type: z.literal("input_text") }).transform((v) => ({
      type: v.type,
    })),
  ),
  ResponseInputImage$inboundSchema.and(
    z.object({ type: z.literal("input_image") }).transform((v) => ({
      type: v.type,
    })),
  ),
  ResponseInputFile$inboundSchema.and(
    z.object({ type: z.literal("input_file") }).transform((v) => ({
      type: v.type,
    })),
  ),
]);

/** @internal */
export type Variables$Outbound =
  | (ResponseInputText$Outbound & { type: "input_text" })
  | (ResponseInputImage$Outbound & { type: "input_image" })
  | (ResponseInputFile$Outbound & { type: "input_file" });

/** @internal */
export const Variables$outboundSchema: z.ZodType<
  Variables$Outbound,
  z.ZodTypeDef,
  Variables
> = z.union([
  ResponseInputText$outboundSchema.and(
    z.object({ type: z.literal("input_text") }).transform((v) => ({
      type: v.type,
    })),
  ),
  ResponseInputImage$outboundSchema.and(
    z.object({ type: z.literal("input_image") }).transform((v) => ({
      type: v.type,
    })),
  ),
  ResponseInputFile$outboundSchema.and(
    z.object({ type: z.literal("input_file") }).transform((v) => ({
      type: v.type,
    })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Variables$ {
  /** @deprecated use `Variables$inboundSchema` instead. */
  export const inboundSchema = Variables$inboundSchema;
  /** @deprecated use `Variables$outboundSchema` instead. */
  export const outboundSchema = Variables$outboundSchema;
  /** @deprecated use `Variables$Outbound` instead. */
  export type Outbound = Variables$Outbound;
}

export function variablesToJSON(variables: Variables): string {
  return JSON.stringify(Variables$outboundSchema.parse(variables));
}

export function variablesFromJSON(
  jsonString: string,
): SafeParseResult<Variables, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Variables$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Variables' from JSON`,
  );
}

/** @internal */
export const OpenAIResponsesPrompt$inboundSchema: z.ZodType<
  OpenAIResponsesPrompt,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  variables: z.nullable(
    z.record(
      z.union([
        ResponseInputText$inboundSchema.and(
          z.object({ type: z.literal("input_text") }).transform((v) => ({
            type: v.type,
          })),
        ),
        ResponseInputImage$inboundSchema.and(
          z.object({ type: z.literal("input_image") }).transform((v) => ({
            type: v.type,
          })),
        ),
        ResponseInputFile$inboundSchema.and(
          z.object({ type: z.literal("input_file") }).transform((v) => ({
            type: v.type,
          })),
        ),
      ]),
    ),
  ).optional(),
});

/** @internal */
export type OpenAIResponsesPrompt$Outbound = {
  id: string;
  variables?:
    | {
      [k: string]:
        | (ResponseInputText$Outbound & { type: "input_text" })
        | (ResponseInputImage$Outbound & { type: "input_image" })
        | (ResponseInputFile$Outbound & { type: "input_file" });
    }
    | null
    | undefined;
};

/** @internal */
export const OpenAIResponsesPrompt$outboundSchema: z.ZodType<
  OpenAIResponsesPrompt$Outbound,
  z.ZodTypeDef,
  OpenAIResponsesPrompt
> = z.object({
  id: z.string(),
  variables: z.nullable(
    z.record(
      z.union([
        ResponseInputText$outboundSchema.and(
          z.object({ type: z.literal("input_text") }).transform((v) => ({
            type: v.type,
          })),
        ),
        ResponseInputImage$outboundSchema.and(
          z.object({ type: z.literal("input_image") }).transform((v) => ({
            type: v.type,
          })),
        ),
        ResponseInputFile$outboundSchema.and(
          z.object({ type: z.literal("input_file") }).transform((v) => ({
            type: v.type,
          })),
        ),
      ]),
    ),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenAIResponsesPrompt$ {
  /** @deprecated use `OpenAIResponsesPrompt$inboundSchema` instead. */
  export const inboundSchema = OpenAIResponsesPrompt$inboundSchema;
  /** @deprecated use `OpenAIResponsesPrompt$outboundSchema` instead. */
  export const outboundSchema = OpenAIResponsesPrompt$outboundSchema;
  /** @deprecated use `OpenAIResponsesPrompt$Outbound` instead. */
  export type Outbound = OpenAIResponsesPrompt$Outbound;
}

export function openAIResponsesPromptToJSON(
  openAIResponsesPrompt: OpenAIResponsesPrompt,
): string {
  return JSON.stringify(
    OpenAIResponsesPrompt$outboundSchema.parse(openAIResponsesPrompt),
  );
}

export function openAIResponsesPromptFromJSON(
  jsonString: string,
): SafeParseResult<OpenAIResponsesPrompt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenAIResponsesPrompt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenAIResponsesPrompt' from JSON`,
  );
}
