/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ListAPIKeysData = {
  /**
   * Unique hash identifier for the API key
   */
  hash: string;
  /**
   * Name of the API key
   */
  name: string;
  /**
   * Human-readable label for the API key
   */
  label: string;
  /**
   * Whether the API key is disabled
   */
  disabled: boolean;
  /**
   * Spending limit for the API key in USD
   */
  limit: number | null;
  /**
   * Remaining spending limit in USD
   */
  limitRemaining: number | null;
  /**
   * Type of limit reset for the API key
   */
  limitReset: string | null;
  /**
   * Whether to include external BYOK usage in the credit limit
   */
  includeByokInLimit: boolean;
  /**
   * Total OpenRouter credit usage (in USD) for the API key
   */
  usage: number;
  /**
   * OpenRouter credit usage (in USD) for the current UTC day
   */
  usageDaily: number;
  /**
   * OpenRouter credit usage (in USD) for the current UTC week (Monday-Sunday)
   */
  usageWeekly: number;
  /**
   * OpenRouter credit usage (in USD) for the current UTC month
   */
  usageMonthly: number;
  /**
   * Total external BYOK usage (in USD) for the API key
   */
  byokUsage: number;
  /**
   * External BYOK usage (in USD) for the current UTC day
   */
  byokUsageDaily: number;
  /**
   * External BYOK usage (in USD) for the current UTC week (Monday-Sunday)
   */
  byokUsageWeekly: number;
  /**
   * External BYOK usage (in USD) for current UTC month
   */
  byokUsageMonthly: number;
  /**
   * ISO 8601 timestamp of when the API key was created
   */
  createdAt: string;
  /**
   * ISO 8601 timestamp of when the API key was last updated
   */
  updatedAt: string | null;
};

/** @internal */
export const ListAPIKeysData$inboundSchema: z.ZodType<
  ListAPIKeysData,
  z.ZodTypeDef,
  unknown
> = z.object({
  hash: z.string(),
  name: z.string(),
  label: z.string(),
  disabled: z.boolean(),
  limit: z.nullable(z.number()),
  limit_remaining: z.nullable(z.number()),
  limit_reset: z.nullable(z.string()),
  include_byok_in_limit: z.boolean(),
  usage: z.number(),
  usage_daily: z.number(),
  usage_weekly: z.number(),
  usage_monthly: z.number(),
  byok_usage: z.number(),
  byok_usage_daily: z.number(),
  byok_usage_weekly: z.number(),
  byok_usage_monthly: z.number(),
  created_at: z.string(),
  updated_at: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    "limit_remaining": "limitRemaining",
    "limit_reset": "limitReset",
    "include_byok_in_limit": "includeByokInLimit",
    "usage_daily": "usageDaily",
    "usage_weekly": "usageWeekly",
    "usage_monthly": "usageMonthly",
    "byok_usage": "byokUsage",
    "byok_usage_daily": "byokUsageDaily",
    "byok_usage_weekly": "byokUsageWeekly",
    "byok_usage_monthly": "byokUsageMonthly",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type ListAPIKeysData$Outbound = {
  hash: string;
  name: string;
  label: string;
  disabled: boolean;
  limit: number | null;
  limit_remaining: number | null;
  limit_reset: string | null;
  include_byok_in_limit: boolean;
  usage: number;
  usage_daily: number;
  usage_weekly: number;
  usage_monthly: number;
  byok_usage: number;
  byok_usage_daily: number;
  byok_usage_weekly: number;
  byok_usage_monthly: number;
  created_at: string;
  updated_at: string | null;
};

/** @internal */
export const ListAPIKeysData$outboundSchema: z.ZodType<
  ListAPIKeysData$Outbound,
  z.ZodTypeDef,
  ListAPIKeysData
> = z.object({
  hash: z.string(),
  name: z.string(),
  label: z.string(),
  disabled: z.boolean(),
  limit: z.nullable(z.number()),
  limitRemaining: z.nullable(z.number()),
  limitReset: z.nullable(z.string()),
  includeByokInLimit: z.boolean(),
  usage: z.number(),
  usageDaily: z.number(),
  usageWeekly: z.number(),
  usageMonthly: z.number(),
  byokUsage: z.number(),
  byokUsageDaily: z.number(),
  byokUsageWeekly: z.number(),
  byokUsageMonthly: z.number(),
  createdAt: z.string(),
  updatedAt: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    limitRemaining: "limit_remaining",
    limitReset: "limit_reset",
    includeByokInLimit: "include_byok_in_limit",
    usageDaily: "usage_daily",
    usageWeekly: "usage_weekly",
    usageMonthly: "usage_monthly",
    byokUsage: "byok_usage",
    byokUsageDaily: "byok_usage_daily",
    byokUsageWeekly: "byok_usage_weekly",
    byokUsageMonthly: "byok_usage_monthly",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAPIKeysData$ {
  /** @deprecated use `ListAPIKeysData$inboundSchema` instead. */
  export const inboundSchema = ListAPIKeysData$inboundSchema;
  /** @deprecated use `ListAPIKeysData$outboundSchema` instead. */
  export const outboundSchema = ListAPIKeysData$outboundSchema;
  /** @deprecated use `ListAPIKeysData$Outbound` instead. */
  export type Outbound = ListAPIKeysData$Outbound;
}

export function listAPIKeysDataToJSON(
  listAPIKeysData: ListAPIKeysData,
): string {
  return JSON.stringify(ListAPIKeysData$outboundSchema.parse(listAPIKeysData));
}

export function listAPIKeysDataFromJSON(
  jsonString: string,
): SafeParseResult<ListAPIKeysData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAPIKeysData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAPIKeysData' from JSON`,
  );
}
