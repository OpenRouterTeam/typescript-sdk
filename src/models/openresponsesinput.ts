/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  OpenResponsesInputItem,
  OpenResponsesInputItem$inboundSchema,
  OpenResponsesInputItem$Outbound,
  OpenResponsesInputItem$outboundSchema,
} from "./openresponsesinputitem.js";

/**
 * Input for a response request - can be a string or array of items
 */
export type OpenResponsesInput = string | Array<OpenResponsesInputItem> | any;

/** @internal */
export const OpenResponsesInput$inboundSchema: z.ZodType<
  OpenResponsesInput,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(OpenResponsesInputItem$inboundSchema),
  z.any(),
]);

/** @internal */
export type OpenResponsesInput$Outbound =
  | string
  | Array<OpenResponsesInputItem$Outbound>
  | any;

/** @internal */
export const OpenResponsesInput$outboundSchema: z.ZodType<
  OpenResponsesInput$Outbound,
  z.ZodTypeDef,
  OpenResponsesInput
> = z.union([
  z.string(),
  z.array(OpenResponsesInputItem$outboundSchema),
  z.any(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesInput$ {
  /** @deprecated use `OpenResponsesInput$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesInput$inboundSchema;
  /** @deprecated use `OpenResponsesInput$outboundSchema` instead. */
  export const outboundSchema = OpenResponsesInput$outboundSchema;
  /** @deprecated use `OpenResponsesInput$Outbound` instead. */
  export type Outbound = OpenResponsesInput$Outbound;
}

export function openResponsesInputToJSON(
  openResponsesInput: OpenResponsesInput,
): string {
  return JSON.stringify(
    OpenResponsesInput$outboundSchema.parse(openResponsesInput),
  );
}

export function openResponsesInputFromJSON(
  jsonString: string,
): SafeParseResult<OpenResponsesInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenResponsesInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenResponsesInput' from JSON`,
  );
}
