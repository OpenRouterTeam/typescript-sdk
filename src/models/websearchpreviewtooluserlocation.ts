/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v4";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const WebSearchPreviewToolUserLocationType = {
  Approximate: "approximate",
} as const;
export type WebSearchPreviewToolUserLocationType = ClosedEnum<
  typeof WebSearchPreviewToolUserLocationType
>;

export type WebSearchPreviewToolUserLocation = {
  type: WebSearchPreviewToolUserLocationType;
  city?: string | null | undefined;
  country?: string | null | undefined;
  region?: string | null | undefined;
  timezone?: string | null | undefined;
};

/** @internal */
export const WebSearchPreviewToolUserLocationType$inboundSchema: z.ZodEnum<
  typeof WebSearchPreviewToolUserLocationType
> = z.enum(WebSearchPreviewToolUserLocationType);

/** @internal */
export const WebSearchPreviewToolUserLocationType$outboundSchema: z.ZodEnum<
  typeof WebSearchPreviewToolUserLocationType
> = WebSearchPreviewToolUserLocationType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebSearchPreviewToolUserLocationType$ {
  /** @deprecated use `WebSearchPreviewToolUserLocationType$inboundSchema` instead. */
  export const inboundSchema =
    WebSearchPreviewToolUserLocationType$inboundSchema;
  /** @deprecated use `WebSearchPreviewToolUserLocationType$outboundSchema` instead. */
  export const outboundSchema =
    WebSearchPreviewToolUserLocationType$outboundSchema;
}

/** @internal */
export const WebSearchPreviewToolUserLocation$inboundSchema: z.ZodType<
  WebSearchPreviewToolUserLocation,
  unknown
> = z.object({
  type: WebSearchPreviewToolUserLocationType$inboundSchema,
  city: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  region: z.nullable(z.string()).optional(),
  timezone: z.nullable(z.string()).optional(),
});

/** @internal */
export type WebSearchPreviewToolUserLocation$Outbound = {
  type: string;
  city?: string | null | undefined;
  country?: string | null | undefined;
  region?: string | null | undefined;
  timezone?: string | null | undefined;
};

/** @internal */
export const WebSearchPreviewToolUserLocation$outboundSchema: z.ZodType<
  WebSearchPreviewToolUserLocation$Outbound,
  WebSearchPreviewToolUserLocation
> = z.object({
  type: WebSearchPreviewToolUserLocationType$outboundSchema,
  city: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  region: z.nullable(z.string()).optional(),
  timezone: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebSearchPreviewToolUserLocation$ {
  /** @deprecated use `WebSearchPreviewToolUserLocation$inboundSchema` instead. */
  export const inboundSchema = WebSearchPreviewToolUserLocation$inboundSchema;
  /** @deprecated use `WebSearchPreviewToolUserLocation$outboundSchema` instead. */
  export const outboundSchema = WebSearchPreviewToolUserLocation$outboundSchema;
  /** @deprecated use `WebSearchPreviewToolUserLocation$Outbound` instead. */
  export type Outbound = WebSearchPreviewToolUserLocation$Outbound;
}

export function webSearchPreviewToolUserLocationToJSON(
  webSearchPreviewToolUserLocation: WebSearchPreviewToolUserLocation,
): string {
  return JSON.stringify(
    WebSearchPreviewToolUserLocation$outboundSchema.parse(
      webSearchPreviewToolUserLocation,
    ),
  );
}

export function webSearchPreviewToolUserLocationFromJSON(
  jsonString: string,
): SafeParseResult<WebSearchPreviewToolUserLocation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WebSearchPreviewToolUserLocation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WebSearchPreviewToolUserLocation' from JSON`,
  );
}
