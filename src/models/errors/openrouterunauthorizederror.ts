/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as models from "../index.js";
import { OpenRouterError } from "./openroutererror.js";

/**
 * OpenRouter unauthorized error response
 */
export type OpenRouterUnauthorizedErrorData = {
  /**
   * Error object structure
   */
  error: models.OpenRouterUnauthorizedErrorError;
};

/**
 * OpenRouter unauthorized error response
 */
export class OpenRouterUnauthorizedError extends OpenRouterError {
  /**
   * Error object structure
   */
  error: models.OpenRouterUnauthorizedErrorError;

  /** The original data that was passed to this error instance. */
  data$: OpenRouterUnauthorizedErrorData;

  constructor(
    err: OpenRouterUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.error?.message
      || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "OpenRouterUnauthorizedError";
  }
}

/** @internal */
export const OpenRouterUnauthorizedError$inboundSchema: z.ZodType<
  OpenRouterUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.lazy(() => models.OpenRouterUnauthorizedErrorError$inboundSchema),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new OpenRouterUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type OpenRouterUnauthorizedError$Outbound = {
  error: models.OpenRouterUnauthorizedErrorError$Outbound;
};

/** @internal */
export const OpenRouterUnauthorizedError$outboundSchema: z.ZodType<
  OpenRouterUnauthorizedError$Outbound,
  z.ZodTypeDef,
  OpenRouterUnauthorizedError
> = z.instanceof(OpenRouterUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.lazy(() => models.OpenRouterUnauthorizedErrorError$outboundSchema),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenRouterUnauthorizedError$ {
  /** @deprecated use `OpenRouterUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema = OpenRouterUnauthorizedError$inboundSchema;
  /** @deprecated use `OpenRouterUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema = OpenRouterUnauthorizedError$outboundSchema;
  /** @deprecated use `OpenRouterUnauthorizedError$Outbound` instead. */
  export type Outbound = OpenRouterUnauthorizedError$Outbound;
}
