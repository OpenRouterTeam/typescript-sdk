/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import * as models from "../index.js";
import { OpenRouterError } from "./openroutererror.js";

export type ChatErrorData = {
  error: models.ChatErrorError;
};

export class ChatError extends OpenRouterError {
  error: models.ChatErrorError;

  /** The original data that was passed to this error instance. */
  data$: ChatErrorData;

  constructor(
    err: ChatErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.error?.message
      || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ChatError";
  }
}

/** @internal */
export const ChatError$inboundSchema: z.ZodType<
  ChatError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.lazy(() => models.ChatErrorError$inboundSchema),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ChatError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ChatError$Outbound = {
  error: models.ChatErrorError$Outbound;
};

/** @internal */
export const ChatError$outboundSchema: z.ZodType<
  ChatError$Outbound,
  z.ZodTypeDef,
  ChatError
> = z.instanceof(ChatError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.lazy(() => models.ChatErrorError$outboundSchema),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatError$ {
  /** @deprecated use `ChatError$inboundSchema` instead. */
  export const inboundSchema = ChatError$inboundSchema;
  /** @deprecated use `ChatError$outboundSchema` instead. */
  export const outboundSchema = ChatError$outboundSchema;
  /** @deprecated use `ChatError$Outbound` instead. */
  export type Outbound = ChatError$Outbound;
}
