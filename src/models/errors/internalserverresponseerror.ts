/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v4";
import { remap as remap$ } from "../../lib/primitives.js";
import * as models from "../index.js";
import { OpenRouterError } from "./openroutererror.js";

/**
 * Internal Server Error - Unexpected server error
 */
export type InternalServerResponseErrorData = {
  /**
   * Error data for InternalServerResponse
   */
  error: models.InternalServerResponseErrorData;
  userId?: string | null | undefined;
};

/**
 * Internal Server Error - Unexpected server error
 */
export class InternalServerResponseError extends OpenRouterError {
  /**
   * Error data for InternalServerResponse
   */
  error: models.InternalServerResponseErrorData;
  userId?: string | null | undefined;

  /** The original data that was passed to this error instance. */
  data$: InternalServerResponseErrorData;

  constructor(
    err: InternalServerResponseErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.error?.message
      || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;
    if (err.userId != null) this.userId = err.userId;

    this.name = "InternalServerResponseError";
  }
}

/** @internal */
export const InternalServerResponseError$inboundSchema: z.ZodType<
  InternalServerResponseError,
  unknown
> = z.object({
  error: models.InternalServerResponseErrorData$inboundSchema,
  user_id: z.nullable(z.string()).optional(),
  request$: z.custom<Request>(x => x instanceof Request),
  response$: z.custom<Response>(x => x instanceof Response),
  body$: z.string(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "user_id": "userId",
    });

    return new InternalServerResponseError(remapped, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type InternalServerResponseError$Outbound = {
  error: models.InternalServerResponseErrorData$Outbound;
  user_id?: string | null | undefined;
};

/** @internal */
export const InternalServerResponseError$outboundSchema: z.ZodType<
  InternalServerResponseError$Outbound,
  InternalServerResponseError
> = z.custom<InternalServerResponseError>(x =>
  x instanceof InternalServerResponseError
)
  .transform(v => v.data$)
  .pipe(
    z.object({
      error: models.InternalServerResponseErrorData$outboundSchema,
      userId: z.nullable(z.string()).optional(),
    }).transform((v) => {
      return remap$(v, {
        userId: "user_id",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InternalServerResponseError$ {
  /** @deprecated use `InternalServerResponseError$inboundSchema` instead. */
  export const inboundSchema = InternalServerResponseError$inboundSchema;
  /** @deprecated use `InternalServerResponseError$outboundSchema` instead. */
  export const outboundSchema = InternalServerResponseError$outboundSchema;
  /** @deprecated use `InternalServerResponseError$Outbound` instead. */
  export type Outbound = InternalServerResponseError$Outbound;
}
