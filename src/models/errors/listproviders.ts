/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v4";
import * as operations from "../operations/index.js";
import { OpenRouterError } from "./openroutererror.js";

/**
 * Internal Server Error
 */
export type InternalServerErrorData = {
  /**
   * Error details
   */
  error: operations.ErrorT;
};

/**
 * Internal Server Error
 */
export class InternalServerError extends OpenRouterError {
  /**
   * Error details
   */
  error: operations.ErrorT;

  /** The original data that was passed to this error instance. */
  data$: InternalServerErrorData;

  constructor(
    err: InternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.error?.message
      || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "InternalServerError";
  }
}

/** @internal */
export const InternalServerError$inboundSchema: z.ZodType<
  InternalServerError,
  unknown
> = z.object({
  error: z.lazy(() => operations.ErrorT$inboundSchema),
  request$: z.custom<Request>(x => x instanceof Request),
  response$: z.custom<Response>(x => x instanceof Response),
  body$: z.string(),
})
  .transform((v) => {
    return new InternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type InternalServerError$Outbound = {
  error: operations.ErrorT$Outbound;
};

/** @internal */
export const InternalServerError$outboundSchema: z.ZodType<
  InternalServerError$Outbound,
  InternalServerError
> = z.custom<InternalServerError>(x => x instanceof InternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.lazy(() => operations.ErrorT$outboundSchema),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InternalServerError$ {
  /** @deprecated use `InternalServerError$inboundSchema` instead. */
  export const inboundSchema = InternalServerError$inboundSchema;
  /** @deprecated use `InternalServerError$outboundSchema` instead. */
  export const outboundSchema = InternalServerError$outboundSchema;
  /** @deprecated use `InternalServerError$Outbound` instead. */
  export type Outbound = InternalServerError$Outbound;
}
