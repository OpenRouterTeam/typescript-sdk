/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ResponsesInputTokensDetails,
  ResponsesInputTokensDetails$inboundSchema,
  ResponsesInputTokensDetails$Outbound,
  ResponsesInputTokensDetails$outboundSchema,
} from "./responsesinputtokensdetails.js";
import {
  ResponsesOutputTokensDetails,
  ResponsesOutputTokensDetails$inboundSchema,
  ResponsesOutputTokensDetails$Outbound,
  ResponsesOutputTokensDetails$outboundSchema,
} from "./responsesoutputtokensdetails.js";

/**
 * Token usage statistics for Responses API
 */
export type ResponsesUsage = {
  inputTokens: number;
  /**
   * Details about input token usage
   */
  inputTokensDetails: ResponsesInputTokensDetails;
  outputTokens: number;
  /**
   * Details about output token usage
   */
  outputTokensDetails: ResponsesOutputTokensDetails;
  totalTokens: number;
};

/** @internal */
export const ResponsesUsage$inboundSchema: z.ZodType<
  ResponsesUsage,
  z.ZodTypeDef,
  unknown
> = z.object({
  input_tokens: z.number(),
  input_tokens_details: ResponsesInputTokensDetails$inboundSchema,
  output_tokens: z.number(),
  output_tokens_details: ResponsesOutputTokensDetails$inboundSchema,
  total_tokens: z.number(),
}).transform((v) => {
  return remap$(v, {
    "input_tokens": "inputTokens",
    "input_tokens_details": "inputTokensDetails",
    "output_tokens": "outputTokens",
    "output_tokens_details": "outputTokensDetails",
    "total_tokens": "totalTokens",
  });
});

/** @internal */
export type ResponsesUsage$Outbound = {
  input_tokens: number;
  input_tokens_details: ResponsesInputTokensDetails$Outbound;
  output_tokens: number;
  output_tokens_details: ResponsesOutputTokensDetails$Outbound;
  total_tokens: number;
};

/** @internal */
export const ResponsesUsage$outboundSchema: z.ZodType<
  ResponsesUsage$Outbound,
  z.ZodTypeDef,
  ResponsesUsage
> = z.object({
  inputTokens: z.number(),
  inputTokensDetails: ResponsesInputTokensDetails$outboundSchema,
  outputTokens: z.number(),
  outputTokensDetails: ResponsesOutputTokensDetails$outboundSchema,
  totalTokens: z.number(),
}).transform((v) => {
  return remap$(v, {
    inputTokens: "input_tokens",
    inputTokensDetails: "input_tokens_details",
    outputTokens: "output_tokens",
    outputTokensDetails: "output_tokens_details",
    totalTokens: "total_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesUsage$ {
  /** @deprecated use `ResponsesUsage$inboundSchema` instead. */
  export const inboundSchema = ResponsesUsage$inboundSchema;
  /** @deprecated use `ResponsesUsage$outboundSchema` instead. */
  export const outboundSchema = ResponsesUsage$outboundSchema;
  /** @deprecated use `ResponsesUsage$Outbound` instead. */
  export type Outbound = ResponsesUsage$Outbound;
}

export function responsesUsageToJSON(responsesUsage: ResponsesUsage): string {
  return JSON.stringify(ResponsesUsage$outboundSchema.parse(responsesUsage));
}

export function responsesUsageFromJSON(
  jsonString: string,
): SafeParseResult<ResponsesUsage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponsesUsage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponsesUsage' from JSON`,
  );
}
