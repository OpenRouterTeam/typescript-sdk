/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type InputTokensDetails = {
  cachedTokens: number;
};

export type OutputTokensDetails = {
  reasoningTokens: number;
};

export type CostDetails = {
  upstreamInferenceCost?: number | null | undefined;
  upstreamInferenceInputCost: number;
  upstreamInferenceOutputCost: number;
};

/**
 * Token usage information for the response
 */
export type ResponsesUsage = {
  inputTokens: number;
  inputTokensDetails: InputTokensDetails;
  outputTokens: number;
  outputTokensDetails: OutputTokensDetails;
  totalTokens: number;
  /**
   * Cost of the completion
   */
  cost?: number | null | undefined;
  /**
   * Whether a request was made using a Bring Your Own Key configuration
   */
  isByok?: boolean | undefined;
  costDetails?: CostDetails | undefined;
};

/** @internal */
export const InputTokensDetails$inboundSchema: z.ZodType<
  InputTokensDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  cached_tokens: z.number(),
}).transform((v) => {
  return remap$(v, {
    "cached_tokens": "cachedTokens",
  });
});

/** @internal */
export type InputTokensDetails$Outbound = {
  cached_tokens: number;
};

/** @internal */
export const InputTokensDetails$outboundSchema: z.ZodType<
  InputTokensDetails$Outbound,
  z.ZodTypeDef,
  InputTokensDetails
> = z.object({
  cachedTokens: z.number(),
}).transform((v) => {
  return remap$(v, {
    cachedTokens: "cached_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputTokensDetails$ {
  /** @deprecated use `InputTokensDetails$inboundSchema` instead. */
  export const inboundSchema = InputTokensDetails$inboundSchema;
  /** @deprecated use `InputTokensDetails$outboundSchema` instead. */
  export const outboundSchema = InputTokensDetails$outboundSchema;
  /** @deprecated use `InputTokensDetails$Outbound` instead. */
  export type Outbound = InputTokensDetails$Outbound;
}

export function inputTokensDetailsToJSON(
  inputTokensDetails: InputTokensDetails,
): string {
  return JSON.stringify(
    InputTokensDetails$outboundSchema.parse(inputTokensDetails),
  );
}

export function inputTokensDetailsFromJSON(
  jsonString: string,
): SafeParseResult<InputTokensDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputTokensDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputTokensDetails' from JSON`,
  );
}

/** @internal */
export const OutputTokensDetails$inboundSchema: z.ZodType<
  OutputTokensDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  reasoning_tokens: z.number(),
}).transform((v) => {
  return remap$(v, {
    "reasoning_tokens": "reasoningTokens",
  });
});

/** @internal */
export type OutputTokensDetails$Outbound = {
  reasoning_tokens: number;
};

/** @internal */
export const OutputTokensDetails$outboundSchema: z.ZodType<
  OutputTokensDetails$Outbound,
  z.ZodTypeDef,
  OutputTokensDetails
> = z.object({
  reasoningTokens: z.number(),
}).transform((v) => {
  return remap$(v, {
    reasoningTokens: "reasoning_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputTokensDetails$ {
  /** @deprecated use `OutputTokensDetails$inboundSchema` instead. */
  export const inboundSchema = OutputTokensDetails$inboundSchema;
  /** @deprecated use `OutputTokensDetails$outboundSchema` instead. */
  export const outboundSchema = OutputTokensDetails$outboundSchema;
  /** @deprecated use `OutputTokensDetails$Outbound` instead. */
  export type Outbound = OutputTokensDetails$Outbound;
}

export function outputTokensDetailsToJSON(
  outputTokensDetails: OutputTokensDetails,
): string {
  return JSON.stringify(
    OutputTokensDetails$outboundSchema.parse(outputTokensDetails),
  );
}

export function outputTokensDetailsFromJSON(
  jsonString: string,
): SafeParseResult<OutputTokensDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputTokensDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputTokensDetails' from JSON`,
  );
}

/** @internal */
export const CostDetails$inboundSchema: z.ZodType<
  CostDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  upstream_inference_cost: z.nullable(z.number()).optional(),
  upstream_inference_input_cost: z.number(),
  upstream_inference_output_cost: z.number(),
}).transform((v) => {
  return remap$(v, {
    "upstream_inference_cost": "upstreamInferenceCost",
    "upstream_inference_input_cost": "upstreamInferenceInputCost",
    "upstream_inference_output_cost": "upstreamInferenceOutputCost",
  });
});

/** @internal */
export type CostDetails$Outbound = {
  upstream_inference_cost?: number | null | undefined;
  upstream_inference_input_cost: number;
  upstream_inference_output_cost: number;
};

/** @internal */
export const CostDetails$outboundSchema: z.ZodType<
  CostDetails$Outbound,
  z.ZodTypeDef,
  CostDetails
> = z.object({
  upstreamInferenceCost: z.nullable(z.number()).optional(),
  upstreamInferenceInputCost: z.number(),
  upstreamInferenceOutputCost: z.number(),
}).transform((v) => {
  return remap$(v, {
    upstreamInferenceCost: "upstream_inference_cost",
    upstreamInferenceInputCost: "upstream_inference_input_cost",
    upstreamInferenceOutputCost: "upstream_inference_output_cost",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CostDetails$ {
  /** @deprecated use `CostDetails$inboundSchema` instead. */
  export const inboundSchema = CostDetails$inboundSchema;
  /** @deprecated use `CostDetails$outboundSchema` instead. */
  export const outboundSchema = CostDetails$outboundSchema;
  /** @deprecated use `CostDetails$Outbound` instead. */
  export type Outbound = CostDetails$Outbound;
}

export function costDetailsToJSON(costDetails: CostDetails): string {
  return JSON.stringify(CostDetails$outboundSchema.parse(costDetails));
}

export function costDetailsFromJSON(
  jsonString: string,
): SafeParseResult<CostDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CostDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CostDetails' from JSON`,
  );
}

/** @internal */
export const ResponsesUsage$inboundSchema: z.ZodType<
  ResponsesUsage,
  z.ZodTypeDef,
  unknown
> = z.object({
  input_tokens: z.number(),
  input_tokens_details: z.lazy(() => InputTokensDetails$inboundSchema),
  output_tokens: z.number(),
  output_tokens_details: z.lazy(() => OutputTokensDetails$inboundSchema),
  total_tokens: z.number(),
  cost: z.nullable(z.number()).optional(),
  is_byok: z.boolean().optional(),
  cost_details: z.lazy(() => CostDetails$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "input_tokens": "inputTokens",
    "input_tokens_details": "inputTokensDetails",
    "output_tokens": "outputTokens",
    "output_tokens_details": "outputTokensDetails",
    "total_tokens": "totalTokens",
    "is_byok": "isByok",
    "cost_details": "costDetails",
  });
});

/** @internal */
export type ResponsesUsage$Outbound = {
  input_tokens: number;
  input_tokens_details: InputTokensDetails$Outbound;
  output_tokens: number;
  output_tokens_details: OutputTokensDetails$Outbound;
  total_tokens: number;
  cost?: number | null | undefined;
  is_byok?: boolean | undefined;
  cost_details?: CostDetails$Outbound | undefined;
};

/** @internal */
export const ResponsesUsage$outboundSchema: z.ZodType<
  ResponsesUsage$Outbound,
  z.ZodTypeDef,
  ResponsesUsage
> = z.object({
  inputTokens: z.number(),
  inputTokensDetails: z.lazy(() => InputTokensDetails$outboundSchema),
  outputTokens: z.number(),
  outputTokensDetails: z.lazy(() => OutputTokensDetails$outboundSchema),
  totalTokens: z.number(),
  cost: z.nullable(z.number()).optional(),
  isByok: z.boolean().optional(),
  costDetails: z.lazy(() => CostDetails$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    inputTokens: "input_tokens",
    inputTokensDetails: "input_tokens_details",
    outputTokens: "output_tokens",
    outputTokensDetails: "output_tokens_details",
    totalTokens: "total_tokens",
    isByok: "is_byok",
    costDetails: "cost_details",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesUsage$ {
  /** @deprecated use `ResponsesUsage$inboundSchema` instead. */
  export const inboundSchema = ResponsesUsage$inboundSchema;
  /** @deprecated use `ResponsesUsage$outboundSchema` instead. */
  export const outboundSchema = ResponsesUsage$outboundSchema;
  /** @deprecated use `ResponsesUsage$Outbound` instead. */
  export type Outbound = ResponsesUsage$Outbound;
}

export function responsesUsageToJSON(responsesUsage: ResponsesUsage): string {
  return JSON.stringify(ResponsesUsage$outboundSchema.parse(responsesUsage));
}

export function responsesUsageFromJSON(
  jsonString: string,
): SafeParseResult<ResponsesUsage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponsesUsage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponsesUsage' from JSON`,
  );
}
