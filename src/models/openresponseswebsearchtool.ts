/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v4";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ResponsesSearchContextSize,
  ResponsesSearchContextSize$inboundSchema,
  ResponsesSearchContextSize$outboundSchema,
} from "./responsessearchcontextsize.js";
import {
  ResponsesWebSearchUserLocation,
  ResponsesWebSearchUserLocation$inboundSchema,
  ResponsesWebSearchUserLocation$Outbound,
  ResponsesWebSearchUserLocation$outboundSchema,
} from "./responseswebsearchuserlocation.js";

export const OpenResponsesWebSearchToolType = {
  WebSearch: "web_search",
} as const;
export type OpenResponsesWebSearchToolType = ClosedEnum<
  typeof OpenResponsesWebSearchToolType
>;

export type OpenResponsesWebSearchToolFilters = {
  allowedDomains?: Array<string> | null | undefined;
};

/**
 * Web search tool configuration
 */
export type OpenResponsesWebSearchTool = {
  type: OpenResponsesWebSearchToolType;
  filters?: OpenResponsesWebSearchToolFilters | null | undefined;
  /**
   * Size of the search context for web search tools
   */
  searchContextSize?: ResponsesSearchContextSize | undefined;
  /**
   * User location information for web search
   */
  userLocation?: ResponsesWebSearchUserLocation | null | undefined;
};

/** @internal */
export const OpenResponsesWebSearchToolType$inboundSchema: z.ZodEnum<
  typeof OpenResponsesWebSearchToolType
> = z.enum(OpenResponsesWebSearchToolType);

/** @internal */
export const OpenResponsesWebSearchToolType$outboundSchema: z.ZodEnum<
  typeof OpenResponsesWebSearchToolType
> = OpenResponsesWebSearchToolType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesWebSearchToolType$ {
  /** @deprecated use `OpenResponsesWebSearchToolType$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesWebSearchToolType$inboundSchema;
  /** @deprecated use `OpenResponsesWebSearchToolType$outboundSchema` instead. */
  export const outboundSchema = OpenResponsesWebSearchToolType$outboundSchema;
}

/** @internal */
export const OpenResponsesWebSearchToolFilters$inboundSchema: z.ZodType<
  OpenResponsesWebSearchToolFilters,
  unknown
> = z.object({
  allowed_domains: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    "allowed_domains": "allowedDomains",
  });
});

/** @internal */
export type OpenResponsesWebSearchToolFilters$Outbound = {
  allowed_domains?: Array<string> | null | undefined;
};

/** @internal */
export const OpenResponsesWebSearchToolFilters$outboundSchema: z.ZodType<
  OpenResponsesWebSearchToolFilters$Outbound,
  OpenResponsesWebSearchToolFilters
> = z.object({
  allowedDomains: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    allowedDomains: "allowed_domains",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesWebSearchToolFilters$ {
  /** @deprecated use `OpenResponsesWebSearchToolFilters$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesWebSearchToolFilters$inboundSchema;
  /** @deprecated use `OpenResponsesWebSearchToolFilters$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesWebSearchToolFilters$outboundSchema;
  /** @deprecated use `OpenResponsesWebSearchToolFilters$Outbound` instead. */
  export type Outbound = OpenResponsesWebSearchToolFilters$Outbound;
}

export function openResponsesWebSearchToolFiltersToJSON(
  openResponsesWebSearchToolFilters: OpenResponsesWebSearchToolFilters,
): string {
  return JSON.stringify(
    OpenResponsesWebSearchToolFilters$outboundSchema.parse(
      openResponsesWebSearchToolFilters,
    ),
  );
}

export function openResponsesWebSearchToolFiltersFromJSON(
  jsonString: string,
): SafeParseResult<OpenResponsesWebSearchToolFilters, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenResponsesWebSearchToolFilters$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenResponsesWebSearchToolFilters' from JSON`,
  );
}

/** @internal */
export const OpenResponsesWebSearchTool$inboundSchema: z.ZodType<
  OpenResponsesWebSearchTool,
  unknown
> = z.object({
  type: OpenResponsesWebSearchToolType$inboundSchema,
  filters: z.nullable(
    z.lazy(() => OpenResponsesWebSearchToolFilters$inboundSchema),
  ).optional(),
  search_context_size: ResponsesSearchContextSize$inboundSchema.optional(),
  user_location: z.nullable(ResponsesWebSearchUserLocation$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "search_context_size": "searchContextSize",
    "user_location": "userLocation",
  });
});

/** @internal */
export type OpenResponsesWebSearchTool$Outbound = {
  type: string;
  filters?: OpenResponsesWebSearchToolFilters$Outbound | null | undefined;
  search_context_size?: string | undefined;
  user_location?: ResponsesWebSearchUserLocation$Outbound | null | undefined;
};

/** @internal */
export const OpenResponsesWebSearchTool$outboundSchema: z.ZodType<
  OpenResponsesWebSearchTool$Outbound,
  OpenResponsesWebSearchTool
> = z.object({
  type: OpenResponsesWebSearchToolType$outboundSchema,
  filters: z.nullable(
    z.lazy(() => OpenResponsesWebSearchToolFilters$outboundSchema),
  ).optional(),
  searchContextSize: ResponsesSearchContextSize$outboundSchema.optional(),
  userLocation: z.nullable(ResponsesWebSearchUserLocation$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    searchContextSize: "search_context_size",
    userLocation: "user_location",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesWebSearchTool$ {
  /** @deprecated use `OpenResponsesWebSearchTool$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesWebSearchTool$inboundSchema;
  /** @deprecated use `OpenResponsesWebSearchTool$outboundSchema` instead. */
  export const outboundSchema = OpenResponsesWebSearchTool$outboundSchema;
  /** @deprecated use `OpenResponsesWebSearchTool$Outbound` instead. */
  export type Outbound = OpenResponsesWebSearchTool$Outbound;
}

export function openResponsesWebSearchToolToJSON(
  openResponsesWebSearchTool: OpenResponsesWebSearchTool,
): string {
  return JSON.stringify(
    OpenResponsesWebSearchTool$outboundSchema.parse(openResponsesWebSearchTool),
  );
}

export function openResponsesWebSearchToolFromJSON(
  jsonString: string,
): SafeParseResult<OpenResponsesWebSearchTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenResponsesWebSearchTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenResponsesWebSearchTool' from JSON`,
  );
}
