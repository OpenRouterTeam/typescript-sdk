/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Default parameters for this model
 */
export type DefaultParameters = {
  temperature?: number | null | undefined;
  topP?: number | null | undefined;
  frequencyPenalty?: number | null | undefined;
};

/** @internal */
export const DefaultParameters$inboundSchema: z.ZodType<
  DefaultParameters,
  z.ZodTypeDef,
  unknown
> = z.object({
  temperature: z.nullable(z.number()).optional(),
  top_p: z.nullable(z.number()).optional(),
  frequency_penalty: z.nullable(z.number()).optional(),
}).transform((v) => {
  return remap$(v, {
    "top_p": "topP",
    "frequency_penalty": "frequencyPenalty",
  });
});

/** @internal */
export type DefaultParameters$Outbound = {
  temperature?: number | null | undefined;
  top_p?: number | null | undefined;
  frequency_penalty?: number | null | undefined;
};

/** @internal */
export const DefaultParameters$outboundSchema: z.ZodType<
  DefaultParameters$Outbound,
  z.ZodTypeDef,
  DefaultParameters
> = z.object({
  temperature: z.nullable(z.number()).optional(),
  topP: z.nullable(z.number()).optional(),
  frequencyPenalty: z.nullable(z.number()).optional(),
}).transform((v) => {
  return remap$(v, {
    topP: "top_p",
    frequencyPenalty: "frequency_penalty",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DefaultParameters$ {
  /** @deprecated use `DefaultParameters$inboundSchema` instead. */
  export const inboundSchema = DefaultParameters$inboundSchema;
  /** @deprecated use `DefaultParameters$outboundSchema` instead. */
  export const outboundSchema = DefaultParameters$outboundSchema;
  /** @deprecated use `DefaultParameters$Outbound` instead. */
  export type Outbound = DefaultParameters$Outbound;
}

export function defaultParametersToJSON(
  defaultParameters: DefaultParameters,
): string {
  return JSON.stringify(
    DefaultParameters$outboundSchema.parse(defaultParameters),
  );
}

export function defaultParametersFromJSON(
  jsonString: string,
): SafeParseResult<DefaultParameters, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DefaultParameters$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DefaultParameters' from JSON`,
  );
}
