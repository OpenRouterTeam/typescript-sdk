/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";

/**
 * Tokenizer type used by the model
 */
export const ModelGroup = {
  Router: "Router",
  Media: "Media",
  Other: "Other",
  Gpt: "GPT",
  Claude: "Claude",
  Gemini: "Gemini",
  Grok: "Grok",
  Cohere: "Cohere",
  Nova: "Nova",
  Qwen: "Qwen",
  Yi: "Yi",
  DeepSeek: "DeepSeek",
  Mistral: "Mistral",
  Llama2: "Llama2",
  Llama3: "Llama3",
  Llama4: "Llama4",
  PaLM: "PaLM",
  Rwkv: "RWKV",
  Qwen3: "Qwen3",
} as const;
/**
 * Tokenizer type used by the model
 */
export type ModelGroup = OpenEnum<typeof ModelGroup>;

/** @internal */
export const ModelGroup$inboundSchema: z.ZodType<
  ModelGroup,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ModelGroup),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ModelGroup$outboundSchema: z.ZodType<
  ModelGroup,
  z.ZodTypeDef,
  ModelGroup
> = z.union([
  z.nativeEnum(ModelGroup),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModelGroup$ {
  /** @deprecated use `ModelGroup$inboundSchema` instead. */
  export const inboundSchema = ModelGroup$inboundSchema;
  /** @deprecated use `ModelGroup$outboundSchema` instead. */
  export const outboundSchema = ModelGroup$outboundSchema;
}
