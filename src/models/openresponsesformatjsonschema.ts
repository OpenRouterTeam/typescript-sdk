/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v4";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const OpenResponsesFormatJSONSchemaType = {
  JsonSchema: "json_schema",
} as const;
export type OpenResponsesFormatJSONSchemaType = ClosedEnum<
  typeof OpenResponsesFormatJSONSchemaType
>;

/**
 * JSON schema constrained response format
 */
export type OpenResponsesFormatJSONSchema = {
  type: OpenResponsesFormatJSONSchemaType;
  name: string;
  description?: string | undefined;
  strict?: boolean | null | undefined;
  schema: { [k: string]: any | null };
};

/** @internal */
export const OpenResponsesFormatJSONSchemaType$inboundSchema: z.ZodEnum<
  typeof OpenResponsesFormatJSONSchemaType
> = z.enum(OpenResponsesFormatJSONSchemaType);

/** @internal */
export const OpenResponsesFormatJSONSchemaType$outboundSchema: z.ZodEnum<
  typeof OpenResponsesFormatJSONSchemaType
> = OpenResponsesFormatJSONSchemaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesFormatJSONSchemaType$ {
  /** @deprecated use `OpenResponsesFormatJSONSchemaType$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesFormatJSONSchemaType$inboundSchema;
  /** @deprecated use `OpenResponsesFormatJSONSchemaType$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesFormatJSONSchemaType$outboundSchema;
}

/** @internal */
export const OpenResponsesFormatJSONSchema$inboundSchema: z.ZodType<
  OpenResponsesFormatJSONSchema,
  unknown
> = z.object({
  type: OpenResponsesFormatJSONSchemaType$inboundSchema,
  name: z.string(),
  description: z.string().optional(),
  strict: z.nullable(z.boolean()).optional(),
  schema: z.record(z.string(), z.nullable(z.any())),
});

/** @internal */
export type OpenResponsesFormatJSONSchema$Outbound = {
  type: string;
  name: string;
  description?: string | undefined;
  strict?: boolean | null | undefined;
  schema: { [k: string]: any | null };
};

/** @internal */
export const OpenResponsesFormatJSONSchema$outboundSchema: z.ZodType<
  OpenResponsesFormatJSONSchema$Outbound,
  OpenResponsesFormatJSONSchema
> = z.object({
  type: OpenResponsesFormatJSONSchemaType$outboundSchema,
  name: z.string(),
  description: z.string().optional(),
  strict: z.nullable(z.boolean()).optional(),
  schema: z.record(z.string(), z.nullable(z.any())),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesFormatJSONSchema$ {
  /** @deprecated use `OpenResponsesFormatJSONSchema$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesFormatJSONSchema$inboundSchema;
  /** @deprecated use `OpenResponsesFormatJSONSchema$outboundSchema` instead. */
  export const outboundSchema = OpenResponsesFormatJSONSchema$outboundSchema;
  /** @deprecated use `OpenResponsesFormatJSONSchema$Outbound` instead. */
  export type Outbound = OpenResponsesFormatJSONSchema$Outbound;
}

export function openResponsesFormatJSONSchemaToJSON(
  openResponsesFormatJSONSchema: OpenResponsesFormatJSONSchema,
): string {
  return JSON.stringify(
    OpenResponsesFormatJSONSchema$outboundSchema.parse(
      openResponsesFormatJSONSchema,
    ),
  );
}

export function openResponsesFormatJSONSchemaFromJSON(
  jsonString: string,
): SafeParseResult<OpenResponsesFormatJSONSchema, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenResponsesFormatJSONSchema$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenResponsesFormatJSONSchema' from JSON`,
  );
}
