/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  OpenAIResponsesRefusalContent,
  OpenAIResponsesRefusalContent$inboundSchema,
  OpenAIResponsesRefusalContent$Outbound,
  OpenAIResponsesRefusalContent$outboundSchema,
} from "./openairesponsesrefusalcontent.js";
import {
  ResponseOutputText,
  ResponseOutputText$inboundSchema,
  ResponseOutputText$Outbound,
  ResponseOutputText$outboundSchema,
} from "./responseoutputtext.js";

export const OpenResponsesOutputMessageRole = {
  Assistant: "assistant",
} as const;
export type OpenResponsesOutputMessageRole = ClosedEnum<
  typeof OpenResponsesOutputMessageRole
>;

export const OpenResponsesOutputMessageType = {
  Message: "message",
} as const;
export type OpenResponsesOutputMessageType = ClosedEnum<
  typeof OpenResponsesOutputMessageType
>;

export const OpenResponsesOutputMessageStatusInProgress = {
  InProgress: "in_progress",
} as const;
export type OpenResponsesOutputMessageStatusInProgress = ClosedEnum<
  typeof OpenResponsesOutputMessageStatusInProgress
>;

export const OpenResponsesOutputMessageStatusIncomplete = {
  Incomplete: "incomplete",
} as const;
export type OpenResponsesOutputMessageStatusIncomplete = ClosedEnum<
  typeof OpenResponsesOutputMessageStatusIncomplete
>;

export const OpenResponsesOutputMessageStatusCompleted = {
  Completed: "completed",
} as const;
export type OpenResponsesOutputMessageStatusCompleted = ClosedEnum<
  typeof OpenResponsesOutputMessageStatusCompleted
>;

export type OpenResponsesOutputMessageStatusUnion =
  | OpenResponsesOutputMessageStatusCompleted
  | OpenResponsesOutputMessageStatusIncomplete
  | OpenResponsesOutputMessageStatusInProgress;

export type OpenResponsesOutputMessageContent =
  | ResponseOutputText
  | OpenAIResponsesRefusalContent;

/**
 * An output message item
 */
export type OpenResponsesOutputMessage = {
  id: string;
  role: OpenResponsesOutputMessageRole;
  type: OpenResponsesOutputMessageType;
  status?:
    | OpenResponsesOutputMessageStatusCompleted
    | OpenResponsesOutputMessageStatusIncomplete
    | OpenResponsesOutputMessageStatusInProgress
    | undefined;
  content: Array<ResponseOutputText | OpenAIResponsesRefusalContent>;
};

/** @internal */
export const OpenResponsesOutputMessageRole$inboundSchema: z.ZodNativeEnum<
  typeof OpenResponsesOutputMessageRole
> = z.nativeEnum(OpenResponsesOutputMessageRole);

/** @internal */
export const OpenResponsesOutputMessageRole$outboundSchema: z.ZodNativeEnum<
  typeof OpenResponsesOutputMessageRole
> = OpenResponsesOutputMessageRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesOutputMessageRole$ {
  /** @deprecated use `OpenResponsesOutputMessageRole$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesOutputMessageRole$inboundSchema;
  /** @deprecated use `OpenResponsesOutputMessageRole$outboundSchema` instead. */
  export const outboundSchema = OpenResponsesOutputMessageRole$outboundSchema;
}

/** @internal */
export const OpenResponsesOutputMessageType$inboundSchema: z.ZodNativeEnum<
  typeof OpenResponsesOutputMessageType
> = z.nativeEnum(OpenResponsesOutputMessageType);

/** @internal */
export const OpenResponsesOutputMessageType$outboundSchema: z.ZodNativeEnum<
  typeof OpenResponsesOutputMessageType
> = OpenResponsesOutputMessageType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesOutputMessageType$ {
  /** @deprecated use `OpenResponsesOutputMessageType$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesOutputMessageType$inboundSchema;
  /** @deprecated use `OpenResponsesOutputMessageType$outboundSchema` instead. */
  export const outboundSchema = OpenResponsesOutputMessageType$outboundSchema;
}

/** @internal */
export const OpenResponsesOutputMessageStatusInProgress$inboundSchema:
  z.ZodNativeEnum<typeof OpenResponsesOutputMessageStatusInProgress> = z
    .nativeEnum(OpenResponsesOutputMessageStatusInProgress);

/** @internal */
export const OpenResponsesOutputMessageStatusInProgress$outboundSchema:
  z.ZodNativeEnum<typeof OpenResponsesOutputMessageStatusInProgress> =
    OpenResponsesOutputMessageStatusInProgress$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesOutputMessageStatusInProgress$ {
  /** @deprecated use `OpenResponsesOutputMessageStatusInProgress$inboundSchema` instead. */
  export const inboundSchema =
    OpenResponsesOutputMessageStatusInProgress$inboundSchema;
  /** @deprecated use `OpenResponsesOutputMessageStatusInProgress$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesOutputMessageStatusInProgress$outboundSchema;
}

/** @internal */
export const OpenResponsesOutputMessageStatusIncomplete$inboundSchema:
  z.ZodNativeEnum<typeof OpenResponsesOutputMessageStatusIncomplete> = z
    .nativeEnum(OpenResponsesOutputMessageStatusIncomplete);

/** @internal */
export const OpenResponsesOutputMessageStatusIncomplete$outboundSchema:
  z.ZodNativeEnum<typeof OpenResponsesOutputMessageStatusIncomplete> =
    OpenResponsesOutputMessageStatusIncomplete$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesOutputMessageStatusIncomplete$ {
  /** @deprecated use `OpenResponsesOutputMessageStatusIncomplete$inboundSchema` instead. */
  export const inboundSchema =
    OpenResponsesOutputMessageStatusIncomplete$inboundSchema;
  /** @deprecated use `OpenResponsesOutputMessageStatusIncomplete$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesOutputMessageStatusIncomplete$outboundSchema;
}

/** @internal */
export const OpenResponsesOutputMessageStatusCompleted$inboundSchema:
  z.ZodNativeEnum<typeof OpenResponsesOutputMessageStatusCompleted> = z
    .nativeEnum(OpenResponsesOutputMessageStatusCompleted);

/** @internal */
export const OpenResponsesOutputMessageStatusCompleted$outboundSchema:
  z.ZodNativeEnum<typeof OpenResponsesOutputMessageStatusCompleted> =
    OpenResponsesOutputMessageStatusCompleted$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesOutputMessageStatusCompleted$ {
  /** @deprecated use `OpenResponsesOutputMessageStatusCompleted$inboundSchema` instead. */
  export const inboundSchema =
    OpenResponsesOutputMessageStatusCompleted$inboundSchema;
  /** @deprecated use `OpenResponsesOutputMessageStatusCompleted$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesOutputMessageStatusCompleted$outboundSchema;
}

/** @internal */
export const OpenResponsesOutputMessageStatusUnion$inboundSchema: z.ZodType<
  OpenResponsesOutputMessageStatusUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  OpenResponsesOutputMessageStatusCompleted$inboundSchema,
  OpenResponsesOutputMessageStatusIncomplete$inboundSchema,
  OpenResponsesOutputMessageStatusInProgress$inboundSchema,
]);

/** @internal */
export type OpenResponsesOutputMessageStatusUnion$Outbound =
  | string
  | string
  | string;

/** @internal */
export const OpenResponsesOutputMessageStatusUnion$outboundSchema: z.ZodType<
  OpenResponsesOutputMessageStatusUnion$Outbound,
  z.ZodTypeDef,
  OpenResponsesOutputMessageStatusUnion
> = z.union([
  OpenResponsesOutputMessageStatusCompleted$outboundSchema,
  OpenResponsesOutputMessageStatusIncomplete$outboundSchema,
  OpenResponsesOutputMessageStatusInProgress$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesOutputMessageStatusUnion$ {
  /** @deprecated use `OpenResponsesOutputMessageStatusUnion$inboundSchema` instead. */
  export const inboundSchema =
    OpenResponsesOutputMessageStatusUnion$inboundSchema;
  /** @deprecated use `OpenResponsesOutputMessageStatusUnion$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesOutputMessageStatusUnion$outboundSchema;
  /** @deprecated use `OpenResponsesOutputMessageStatusUnion$Outbound` instead. */
  export type Outbound = OpenResponsesOutputMessageStatusUnion$Outbound;
}

export function openResponsesOutputMessageStatusUnionToJSON(
  openResponsesOutputMessageStatusUnion: OpenResponsesOutputMessageStatusUnion,
): string {
  return JSON.stringify(
    OpenResponsesOutputMessageStatusUnion$outboundSchema.parse(
      openResponsesOutputMessageStatusUnion,
    ),
  );
}

export function openResponsesOutputMessageStatusUnionFromJSON(
  jsonString: string,
): SafeParseResult<OpenResponsesOutputMessageStatusUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OpenResponsesOutputMessageStatusUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenResponsesOutputMessageStatusUnion' from JSON`,
  );
}

/** @internal */
export const OpenResponsesOutputMessageContent$inboundSchema: z.ZodType<
  OpenResponsesOutputMessageContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  ResponseOutputText$inboundSchema,
  OpenAIResponsesRefusalContent$inboundSchema,
]);

/** @internal */
export type OpenResponsesOutputMessageContent$Outbound =
  | ResponseOutputText$Outbound
  | OpenAIResponsesRefusalContent$Outbound;

/** @internal */
export const OpenResponsesOutputMessageContent$outboundSchema: z.ZodType<
  OpenResponsesOutputMessageContent$Outbound,
  z.ZodTypeDef,
  OpenResponsesOutputMessageContent
> = z.union([
  ResponseOutputText$outboundSchema,
  OpenAIResponsesRefusalContent$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesOutputMessageContent$ {
  /** @deprecated use `OpenResponsesOutputMessageContent$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesOutputMessageContent$inboundSchema;
  /** @deprecated use `OpenResponsesOutputMessageContent$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesOutputMessageContent$outboundSchema;
  /** @deprecated use `OpenResponsesOutputMessageContent$Outbound` instead. */
  export type Outbound = OpenResponsesOutputMessageContent$Outbound;
}

export function openResponsesOutputMessageContentToJSON(
  openResponsesOutputMessageContent: OpenResponsesOutputMessageContent,
): string {
  return JSON.stringify(
    OpenResponsesOutputMessageContent$outboundSchema.parse(
      openResponsesOutputMessageContent,
    ),
  );
}

export function openResponsesOutputMessageContentFromJSON(
  jsonString: string,
): SafeParseResult<OpenResponsesOutputMessageContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenResponsesOutputMessageContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenResponsesOutputMessageContent' from JSON`,
  );
}

/** @internal */
export const OpenResponsesOutputMessage$inboundSchema: z.ZodType<
  OpenResponsesOutputMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  role: OpenResponsesOutputMessageRole$inboundSchema,
  type: OpenResponsesOutputMessageType$inboundSchema,
  status: z.union([
    OpenResponsesOutputMessageStatusCompleted$inboundSchema,
    OpenResponsesOutputMessageStatusIncomplete$inboundSchema,
    OpenResponsesOutputMessageStatusInProgress$inboundSchema,
  ]).optional(),
  content: z.array(
    z.union([
      ResponseOutputText$inboundSchema,
      OpenAIResponsesRefusalContent$inboundSchema,
    ]),
  ),
});

/** @internal */
export type OpenResponsesOutputMessage$Outbound = {
  id: string;
  role: string;
  type: string;
  status?: string | string | string | undefined;
  content: Array<
    ResponseOutputText$Outbound | OpenAIResponsesRefusalContent$Outbound
  >;
};

/** @internal */
export const OpenResponsesOutputMessage$outboundSchema: z.ZodType<
  OpenResponsesOutputMessage$Outbound,
  z.ZodTypeDef,
  OpenResponsesOutputMessage
> = z.object({
  id: z.string(),
  role: OpenResponsesOutputMessageRole$outboundSchema,
  type: OpenResponsesOutputMessageType$outboundSchema,
  status: z.union([
    OpenResponsesOutputMessageStatusCompleted$outboundSchema,
    OpenResponsesOutputMessageStatusIncomplete$outboundSchema,
    OpenResponsesOutputMessageStatusInProgress$outboundSchema,
  ]).optional(),
  content: z.array(
    z.union([
      ResponseOutputText$outboundSchema,
      OpenAIResponsesRefusalContent$outboundSchema,
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesOutputMessage$ {
  /** @deprecated use `OpenResponsesOutputMessage$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesOutputMessage$inboundSchema;
  /** @deprecated use `OpenResponsesOutputMessage$outboundSchema` instead. */
  export const outboundSchema = OpenResponsesOutputMessage$outboundSchema;
  /** @deprecated use `OpenResponsesOutputMessage$Outbound` instead. */
  export type Outbound = OpenResponsesOutputMessage$Outbound;
}

export function openResponsesOutputMessageToJSON(
  openResponsesOutputMessage: OpenResponsesOutputMessage,
): string {
  return JSON.stringify(
    OpenResponsesOutputMessage$outboundSchema.parse(openResponsesOutputMessage),
  );
}

export function openResponsesOutputMessageFromJSON(
  jsonString: string,
): SafeParseResult<OpenResponsesOutputMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenResponsesOutputMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenResponsesOutputMessage' from JSON`,
  );
}
