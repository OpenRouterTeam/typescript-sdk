/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const ReasoningDetailEncryptedType = {
  ReasoningEncrypted: "reasoning.encrypted",
} as const;
export type ReasoningDetailEncryptedType = ClosedEnum<
  typeof ReasoningDetailEncryptedType
>;

export const ReasoningDetailEncryptedFormat = {
  Unknown: "unknown",
  OpenaiResponsesV1: "openai-responses-v1",
  AnthropicClaudeV1: "anthropic-claude-v1",
} as const;
export type ReasoningDetailEncryptedFormat = ClosedEnum<
  typeof ReasoningDetailEncryptedFormat
>;

/**
 * Encrypted reasoning detail
 */
export type ReasoningDetailEncrypted = {
  type: ReasoningDetailEncryptedType;
  data: string;
  id?: string | null | undefined;
  format?: ReasoningDetailEncryptedFormat | null | undefined;
  index?: number | undefined;
};

/** @internal */
export const ReasoningDetailEncryptedType$inboundSchema: z.ZodNativeEnum<
  typeof ReasoningDetailEncryptedType
> = z.nativeEnum(ReasoningDetailEncryptedType);

/** @internal */
export const ReasoningDetailEncryptedType$outboundSchema: z.ZodNativeEnum<
  typeof ReasoningDetailEncryptedType
> = ReasoningDetailEncryptedType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReasoningDetailEncryptedType$ {
  /** @deprecated use `ReasoningDetailEncryptedType$inboundSchema` instead. */
  export const inboundSchema = ReasoningDetailEncryptedType$inboundSchema;
  /** @deprecated use `ReasoningDetailEncryptedType$outboundSchema` instead. */
  export const outboundSchema = ReasoningDetailEncryptedType$outboundSchema;
}

/** @internal */
export const ReasoningDetailEncryptedFormat$inboundSchema: z.ZodNativeEnum<
  typeof ReasoningDetailEncryptedFormat
> = z.nativeEnum(ReasoningDetailEncryptedFormat);

/** @internal */
export const ReasoningDetailEncryptedFormat$outboundSchema: z.ZodNativeEnum<
  typeof ReasoningDetailEncryptedFormat
> = ReasoningDetailEncryptedFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReasoningDetailEncryptedFormat$ {
  /** @deprecated use `ReasoningDetailEncryptedFormat$inboundSchema` instead. */
  export const inboundSchema = ReasoningDetailEncryptedFormat$inboundSchema;
  /** @deprecated use `ReasoningDetailEncryptedFormat$outboundSchema` instead. */
  export const outboundSchema = ReasoningDetailEncryptedFormat$outboundSchema;
}

/** @internal */
export const ReasoningDetailEncrypted$inboundSchema: z.ZodType<
  ReasoningDetailEncrypted,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ReasoningDetailEncryptedType$inboundSchema,
  data: z.string(),
  id: z.nullable(z.string()).optional(),
  format: z.nullable(
    ReasoningDetailEncryptedFormat$inboundSchema.default("anthropic-claude-v1"),
  ),
  index: z.number().optional(),
});

/** @internal */
export type ReasoningDetailEncrypted$Outbound = {
  type: string;
  data: string;
  id?: string | null | undefined;
  format: string | null;
  index?: number | undefined;
};

/** @internal */
export const ReasoningDetailEncrypted$outboundSchema: z.ZodType<
  ReasoningDetailEncrypted$Outbound,
  z.ZodTypeDef,
  ReasoningDetailEncrypted
> = z.object({
  type: ReasoningDetailEncryptedType$outboundSchema,
  data: z.string(),
  id: z.nullable(z.string()).optional(),
  format: z.nullable(
    ReasoningDetailEncryptedFormat$outboundSchema.default(
      "anthropic-claude-v1",
    ),
  ),
  index: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReasoningDetailEncrypted$ {
  /** @deprecated use `ReasoningDetailEncrypted$inboundSchema` instead. */
  export const inboundSchema = ReasoningDetailEncrypted$inboundSchema;
  /** @deprecated use `ReasoningDetailEncrypted$outboundSchema` instead. */
  export const outboundSchema = ReasoningDetailEncrypted$outboundSchema;
  /** @deprecated use `ReasoningDetailEncrypted$Outbound` instead. */
  export type Outbound = ReasoningDetailEncrypted$Outbound;
}

export function reasoningDetailEncryptedToJSON(
  reasoningDetailEncrypted: ReasoningDetailEncrypted,
): string {
  return JSON.stringify(
    ReasoningDetailEncrypted$outboundSchema.parse(reasoningDetailEncrypted),
  );
}

export function reasoningDetailEncryptedFromJSON(
  jsonString: string,
): SafeParseResult<ReasoningDetailEncrypted, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReasoningDetailEncrypted$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReasoningDetailEncrypted' from JSON`,
  );
}
