/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ToolFunction = {
  name: string;
  description?: string | undefined;
  parameters?: { [k: string]: any } | undefined;
  strict?: boolean | null | undefined;
};

export type Tool = {
  type: "function";
  function: ToolFunction;
};

/** @internal */
export const ToolFunction$inboundSchema: z.ZodType<
  ToolFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  parameters: z.record(z.any()).optional(),
  strict: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type ToolFunction$Outbound = {
  name: string;
  description?: string | undefined;
  parameters?: { [k: string]: any } | undefined;
  strict?: boolean | null | undefined;
};

/** @internal */
export const ToolFunction$outboundSchema: z.ZodType<
  ToolFunction$Outbound,
  z.ZodTypeDef,
  ToolFunction
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  parameters: z.record(z.any()).optional(),
  strict: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolFunction$ {
  /** @deprecated use `ToolFunction$inboundSchema` instead. */
  export const inboundSchema = ToolFunction$inboundSchema;
  /** @deprecated use `ToolFunction$outboundSchema` instead. */
  export const outboundSchema = ToolFunction$outboundSchema;
  /** @deprecated use `ToolFunction$Outbound` instead. */
  export type Outbound = ToolFunction$Outbound;
}

export function toolFunctionToJSON(toolFunction: ToolFunction): string {
  return JSON.stringify(ToolFunction$outboundSchema.parse(toolFunction));
}

export function toolFunctionFromJSON(
  jsonString: string,
): SafeParseResult<ToolFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolFunction' from JSON`,
  );
}

/** @internal */
export const Tool$inboundSchema: z.ZodType<Tool, z.ZodTypeDef, unknown> = z
  .object({
    type: z.literal("function"),
    function: z.lazy(() => ToolFunction$inboundSchema),
  });

/** @internal */
export type Tool$Outbound = {
  type: "function";
  function: ToolFunction$Outbound;
};

/** @internal */
export const Tool$outboundSchema: z.ZodType<Tool$Outbound, z.ZodTypeDef, Tool> =
  z.object({
    type: z.literal("function"),
    function: z.lazy(() => ToolFunction$outboundSchema),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Tool$ {
  /** @deprecated use `Tool$inboundSchema` instead. */
  export const inboundSchema = Tool$inboundSchema;
  /** @deprecated use `Tool$outboundSchema` instead. */
  export const outboundSchema = Tool$outboundSchema;
  /** @deprecated use `Tool$Outbound` instead. */
  export type Outbound = Tool$Outbound;
}

export function toolToJSON(tool: Tool): string {
  return JSON.stringify(Tool$outboundSchema.parse(tool));
}

export function toolFromJSON(
  jsonString: string,
): SafeParseResult<Tool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Tool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Tool' from JSON`,
  );
}
