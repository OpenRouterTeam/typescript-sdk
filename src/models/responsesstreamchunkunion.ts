/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ResponsesOutputText,
  ResponsesOutputText$inboundSchema,
  ResponsesOutputText$Outbound,
  ResponsesOutputText$outboundSchema,
} from "./responsesoutputtext.js";
import {
  ResponsesUsage,
  ResponsesUsage$inboundSchema,
  ResponsesUsage$Outbound,
  ResponsesUsage$outboundSchema,
} from "./responsesusage.js";

export const TypeError = {
  Error: "error",
} as const;
export type TypeError = ClosedEnum<typeof TypeError>;

export type ResponsesStreamChunkError2 = {
  code?: string | undefined;
  message: string;
};

export type ResponsesStreamChunkError = {
  type: TypeError;
  error: ResponsesStreamChunkError2;
};

export const TypeResponseRefusalDone = {
  ResponseRefusalDone: "response.refusal.done",
} as const;
export type TypeResponseRefusalDone = ClosedEnum<
  typeof TypeResponseRefusalDone
>;

export type ResponsesStreamChunkResponseRefusalDone = {
  type: TypeResponseRefusalDone;
  itemId: string;
  outputIndex: number;
  sequenceNumber: number;
  refusal: string;
};

export const TypeResponseRefusalDelta = {
  ResponseRefusalDelta: "response.refusal.delta",
} as const;
export type TypeResponseRefusalDelta = ClosedEnum<
  typeof TypeResponseRefusalDelta
>;

export type ResponsesStreamChunkResponseRefusalDelta = {
  type: TypeResponseRefusalDelta;
  itemId: string;
  outputIndex: number;
  sequenceNumber: number;
  delta: string;
};

export const TypeResponseError = {
  ResponseError: "response.error",
} as const;
export type TypeResponseError = ClosedEnum<typeof TypeResponseError>;

export type ResponsesStreamChunkError1 = {
  code?: string | undefined;
  message: string;
};

export type ResponsesStreamChunkResponseError = {
  type: TypeResponseError;
  error: ResponsesStreamChunkError1;
};

export const TypeResponseFailed = {
  ResponseFailed: "response.failed",
} as const;
export type TypeResponseFailed = ClosedEnum<typeof TypeResponseFailed>;

export const StatusFailed = {
  Failed: "failed",
} as const;
export type StatusFailed = ClosedEnum<typeof StatusFailed>;

export type ErrorFailed = {
  code: string;
  message: string;
};

export type ResponseFailed = {
  id: string;
  status: StatusFailed;
  error: ErrorFailed;
};

export type ResponsesStreamChunkResponseFailed = {
  type: TypeResponseFailed;
  response: ResponseFailed;
};

export const TypeResponseImageGenerationCallCompleted = {
  ResponseImageGenerationCallCompleted:
    "response.image_generation_call.completed",
} as const;
export type TypeResponseImageGenerationCallCompleted = ClosedEnum<
  typeof TypeResponseImageGenerationCallCompleted
>;

export type ResponsesStreamChunkResponseImageGenerationCallCompleted = {
  type: TypeResponseImageGenerationCallCompleted;
  itemId: string;
  outputIndex: number;
  sequenceNumber: number;
};

export const TypeResponseImageGenerationCallPartialImage = {
  ResponseImageGenerationCallPartialImage:
    "response.image_generation_call.partial_image",
} as const;
export type TypeResponseImageGenerationCallPartialImage = ClosedEnum<
  typeof TypeResponseImageGenerationCallPartialImage
>;

export type ResponsesStreamChunkResponseImageGenerationCallPartialImage = {
  type: TypeResponseImageGenerationCallPartialImage;
  itemId: string;
  outputIndex: number;
  sequenceNumber: number;
  partialImageB64: string;
  partialImageIndex: number;
};

export const TypeResponseImageGenerationCallGenerating = {
  ResponseImageGenerationCallGenerating:
    "response.image_generation_call.generating",
} as const;
export type TypeResponseImageGenerationCallGenerating = ClosedEnum<
  typeof TypeResponseImageGenerationCallGenerating
>;

export type ResponsesStreamChunkResponseImageGenerationCallGenerating = {
  type: TypeResponseImageGenerationCallGenerating;
  itemId: string;
  outputIndex: number;
  sequenceNumber: number;
};

export const TypeResponseImageGenerationCallInProgress = {
  ResponseImageGenerationCallInProgress:
    "response.image_generation_call.in_progress",
} as const;
export type TypeResponseImageGenerationCallInProgress = ClosedEnum<
  typeof TypeResponseImageGenerationCallInProgress
>;

export type ResponsesStreamChunkResponseImageGenerationCallInProgress = {
  type: TypeResponseImageGenerationCallInProgress;
  itemId: string;
  outputIndex: number;
  sequenceNumber: number;
};

export const TypeResponseWebSearchCallSearching = {
  ResponseWebSearchCallSearching: "response.web_search_call.searching",
} as const;
export type TypeResponseWebSearchCallSearching = ClosedEnum<
  typeof TypeResponseWebSearchCallSearching
>;

export type ResponsesStreamChunkResponseWebSearchCallSearching = {
  type: TypeResponseWebSearchCallSearching;
  itemId: string;
  outputIndex: number;
  query?: string | undefined;
  sequenceNumber: number;
};

export const TypeResponseWebSearchCallInProgress = {
  ResponseWebSearchCallInProgress: "response.web_search_call.in_progress",
} as const;
export type TypeResponseWebSearchCallInProgress = ClosedEnum<
  typeof TypeResponseWebSearchCallInProgress
>;

export type ResponsesStreamChunkResponseWebSearchCallInProgress = {
  type: TypeResponseWebSearchCallInProgress;
  itemId: string;
  outputIndex: number;
};

export const TypeResponseFileSearchCallCompleted = {
  ResponseFileSearchCallCompleted: "response.file_search_call.completed",
} as const;
export type TypeResponseFileSearchCallCompleted = ClosedEnum<
  typeof TypeResponseFileSearchCallCompleted
>;

export type Result = {
  fileId: string;
  filename: string;
  score: number;
};

export type ResponsesStreamChunkResponseFileSearchCallCompleted = {
  type: TypeResponseFileSearchCallCompleted;
  itemId: string;
  outputIndex: number;
  results: Array<Result>;
};

export const TypeResponseFileSearchCallSearching = {
  ResponseFileSearchCallSearching: "response.file_search_call.searching",
} as const;
export type TypeResponseFileSearchCallSearching = ClosedEnum<
  typeof TypeResponseFileSearchCallSearching
>;

export type ResponsesStreamChunkResponseFileSearchCallSearching = {
  type: TypeResponseFileSearchCallSearching;
  itemId: string;
  outputIndex: number;
  query: string;
};

export const TypeResponseFileSearchCallInProgress = {
  ResponseFileSearchCallInProgress: "response.file_search_call.in_progress",
} as const;
export type TypeResponseFileSearchCallInProgress = ClosedEnum<
  typeof TypeResponseFileSearchCallInProgress
>;

export type ResponsesStreamChunkResponseFileSearchCallInProgress = {
  type: TypeResponseFileSearchCallInProgress;
  itemId: string;
  outputIndex: number;
};

export const TypeResponseWebSearchCallCompleted = {
  ResponseWebSearchCallCompleted: "response.web_search_call.completed",
} as const;
export type TypeResponseWebSearchCallCompleted = ClosedEnum<
  typeof TypeResponseWebSearchCallCompleted
>;

export type ResponsesStreamChunkResponseWebSearchCallCompleted = {
  type: TypeResponseWebSearchCallCompleted;
  itemId: string;
  outputIndex: number;
  sequenceNumber: number;
};

export const TypeResponseFunctionCallArgumentsDone = {
  ResponseFunctionCallArgumentsDone: "response.function_call_arguments.done",
} as const;
export type TypeResponseFunctionCallArgumentsDone = ClosedEnum<
  typeof TypeResponseFunctionCallArgumentsDone
>;

export type ResponsesStreamChunkResponseFunctionCallArgumentsDone = {
  type: TypeResponseFunctionCallArgumentsDone;
  itemId: string;
  outputIndex: number;
  sequenceNumber: number;
  arguments: string;
};

export const TypeResponseReasoningSummaryTextDelta = {
  ResponseReasoningSummaryTextDelta: "response.reasoning_summary_text.delta",
} as const;
export type TypeResponseReasoningSummaryTextDelta = ClosedEnum<
  typeof TypeResponseReasoningSummaryTextDelta
>;

export type ResponsesStreamChunkResponseReasoningSummaryTextDelta = {
  type: TypeResponseReasoningSummaryTextDelta;
  itemId: string;
  outputIndex: number;
  summaryIndex: number;
  sequenceNumber: number;
  delta: string;
};

export const TypeResponseOutputTextAnnotationAdded = {
  ResponseOutputTextAnnotationAdded: "response.output_text.annotation.added",
} as const;
export type TypeResponseOutputTextAnnotationAdded = ClosedEnum<
  typeof TypeResponseOutputTextAnnotationAdded
>;

export const ResponsesStreamChunkTypeURLCitation = {
  UrlCitation: "url_citation",
} as const;
export type ResponsesStreamChunkTypeURLCitation = ClosedEnum<
  typeof ResponsesStreamChunkTypeURLCitation
>;

export type Annotation = {
  type: ResponsesStreamChunkTypeURLCitation;
  url: string;
  title: string;
  startIndex: number;
  endIndex: number;
};

export type ResponsesStreamChunkResponseOutputTextAnnotationAdded = {
  type: TypeResponseOutputTextAnnotationAdded;
  annotation: Annotation;
};

export const TypeResponseOutputItemAdded = {
  ResponseOutputItemAdded: "response.output_item.added",
} as const;
export type TypeResponseOutputItemAdded = ClosedEnum<
  typeof TypeResponseOutputItemAdded
>;

export const ItemTypeWebSearchCall2 = {
  WebSearchCall: "web_search_call",
} as const;
export type ItemTypeWebSearchCall2 = ClosedEnum<typeof ItemTypeWebSearchCall2>;

export const ItemStatusEnum4 = {
  InProgress: "in_progress",
  Completed: "completed",
  Searching: "searching",
} as const;
export type ItemStatusEnum4 = ClosedEnum<typeof ItemStatusEnum4>;

export type ItemWebSearchCall2 = {
  type: ItemTypeWebSearchCall2;
  id: string;
  status: ItemStatusEnum4;
};

export const ItemTypeImageGenerationCall = {
  ImageGenerationCall: "image_generation_call",
} as const;
export type ItemTypeImageGenerationCall = ClosedEnum<
  typeof ItemTypeImageGenerationCall
>;

export const ItemStatusEnum3 = {
  InProgress: "in_progress",
  Completed: "completed",
  Generating: "generating",
  Failed: "failed",
} as const;
export type ItemStatusEnum3 = ClosedEnum<typeof ItemStatusEnum3>;

export type ItemImageGenerationCall = {
  type: ItemTypeImageGenerationCall;
  id: string;
  status: ItemStatusEnum3;
};

export const ItemTypeReasoning2 = {
  Reasoning: "reasoning",
} as const;
export type ItemTypeReasoning2 = ClosedEnum<typeof ItemTypeReasoning2>;

export const ItemTypeSummaryText2 = {
  SummaryText: "summary_text",
} as const;
export type ItemTypeSummaryText2 = ClosedEnum<typeof ItemTypeSummaryText2>;

export type ResponsesStreamChunkSummary2 = {
  type: ItemTypeSummaryText2;
  text: string;
};

export type ItemReasoning2 = {
  type: ItemTypeReasoning2;
  id: string;
  summary: Array<ResponsesStreamChunkSummary2>;
};

export const ItemTypeFunctionCall2 = {
  FunctionCall: "function_call",
} as const;
export type ItemTypeFunctionCall2 = ClosedEnum<typeof ItemTypeFunctionCall2>;

export type ItemFunctionCall2 = {
  type: ItemTypeFunctionCall2;
  id: string;
  callId: string;
  name: string;
  arguments: string;
};

export const ItemTypeMessage2 = {
  Message: "message",
} as const;
export type ItemTypeMessage2 = ClosedEnum<typeof ItemTypeMessage2>;

export type ItemMessage = {
  type: ItemTypeMessage2;
};

export type ItemUnion2 =
  | ItemFunctionCall2
  | ItemReasoning2
  | ItemImageGenerationCall
  | ItemWebSearchCall2
  | ItemMessage;

export type ResponsesStreamChunkResponseOutputItemAdded = {
  type: TypeResponseOutputItemAdded;
  outputIndex: number;
  item:
    | ItemFunctionCall2
    | ItemReasoning2
    | ItemImageGenerationCall
    | ItemWebSearchCall2
    | ItemMessage;
};

export const TypeResponseFunctionCallArgumentsDelta = {
  ResponseFunctionCallArgumentsDelta: "response.function_call_arguments.delta",
} as const;
export type TypeResponseFunctionCallArgumentsDelta = ClosedEnum<
  typeof TypeResponseFunctionCallArgumentsDelta
>;

export type ResponsesStreamChunkResponseFunctionCallArgumentsDelta = {
  type: TypeResponseFunctionCallArgumentsDelta;
  itemId: string;
  outputIndex: number;
  sequenceNumber: number;
  delta: string;
};

export const TypeResponseOutputItemDone = {
  ResponseOutputItemDone: "response.output_item.done",
} as const;
export type TypeResponseOutputItemDone = ClosedEnum<
  typeof TypeResponseOutputItemDone
>;

export const ItemTypeFileSearchCall = {
  FileSearchCall: "file_search_call",
} as const;
export type ItemTypeFileSearchCall = ClosedEnum<typeof ItemTypeFileSearchCall>;

export const ItemStatusEnum2 = {
  Completed: "completed",
  Searching: "searching",
  InProgress: "in_progress",
  Failed: "failed",
} as const;
export type ItemStatusEnum2 = ClosedEnum<typeof ItemStatusEnum2>;

export type ItemFileSearchCall = {
  type: ItemTypeFileSearchCall;
  id: string;
  queries: Array<string>;
  status: ItemStatusEnum2;
};

export const ItemTypeWebSearchCall1 = {
  WebSearchCall: "web_search_call",
} as const;
export type ItemTypeWebSearchCall1 = ClosedEnum<typeof ItemTypeWebSearchCall1>;

export const ItemStatusEnum1 = {
  Completed: "completed",
  Searching: "searching",
  InProgress: "in_progress",
  Failed: "failed",
} as const;
export type ItemStatusEnum1 = ClosedEnum<typeof ItemStatusEnum1>;

export type ItemWebSearchCall1 = {
  type: ItemTypeWebSearchCall1;
  id: string;
  status: ItemStatusEnum1;
};

export const ItemTypeReasoning1 = {
  Reasoning: "reasoning",
} as const;
export type ItemTypeReasoning1 = ClosedEnum<typeof ItemTypeReasoning1>;

export const ItemTypeSummaryText1 = {
  SummaryText: "summary_text",
} as const;
export type ItemTypeSummaryText1 = ClosedEnum<typeof ItemTypeSummaryText1>;

export type ResponsesStreamChunkSummary1 = {
  type: ItemTypeSummaryText1;
  text: string;
};

export type ItemReasoning1 = {
  type: ItemTypeReasoning1;
  id: string;
  summary: Array<ResponsesStreamChunkSummary1>;
  encryptedContent?: string | null | undefined;
};

export const ItemTypeFunctionCall1 = {
  FunctionCall: "function_call",
} as const;
export type ItemTypeFunctionCall1 = ClosedEnum<typeof ItemTypeFunctionCall1>;

export type ItemFunctionCall1 = {
  type: ItemTypeFunctionCall1;
  id?: string | undefined;
  callId: string;
  name: string;
  arguments: string;
};

export const ItemTypeMessage1 = {
  Message: "message",
} as const;
export type ItemTypeMessage1 = ClosedEnum<typeof ItemTypeMessage1>;

export const ResponsesStreamChunkRole = {
  Assistant: "assistant",
} as const;
export type ResponsesStreamChunkRole = ClosedEnum<
  typeof ResponsesStreamChunkRole
>;

export const StatusInProgress = {
  InProgress: "in_progress",
} as const;
export type StatusInProgress = ClosedEnum<typeof StatusInProgress>;

export const StatusIncomplete = {
  Incomplete: "incomplete",
} as const;
export type StatusIncomplete = ClosedEnum<typeof StatusIncomplete>;

export const StatusCompleted = {
  Completed: "completed",
} as const;
export type StatusCompleted = ClosedEnum<typeof StatusCompleted>;

export type Status = StatusCompleted | StatusIncomplete | StatusInProgress;

export type ItemAssistant = {
  type: ItemTypeMessage1;
  id: string;
  content: Array<ResponsesOutputText>;
  role: ResponsesStreamChunkRole;
  status: StatusCompleted | StatusIncomplete | StatusInProgress;
};

export type ItemUnion1 =
  | ItemAssistant
  | ItemFunctionCall1
  | ItemFileSearchCall
  | ItemReasoning1
  | ItemWebSearchCall1;

export type ResponsesStreamChunkResponseOutputItemDone = {
  type: TypeResponseOutputItemDone;
  outputIndex: number;
  sequenceNumber: number;
  item:
    | ItemAssistant
    | ItemFunctionCall1
    | ItemFileSearchCall
    | ItemReasoning1
    | ItemWebSearchCall1;
};

export const TypeResponseCreated = {
  ResponseCreated: "response.created",
} as const;
export type TypeResponseCreated = ClosedEnum<typeof TypeResponseCreated>;

export type Response2 = {
  id: string;
  createdAt: number;
  model: string;
};

export type ResponsesStreamChunkResponseCreated = {
  type: TypeResponseCreated;
  response: Response2;
};

export const ResponsesStreamChunkType = {
  ResponseCompleted: "response.completed",
  ResponseIncomplete: "response.incomplete",
} as const;
export type ResponsesStreamChunkType = ClosedEnum<
  typeof ResponsesStreamChunkType
>;

export const ResponsesStreamChunkReason = {
  MaxOutputTokens: "max_output_tokens",
  ContentFilter: "content_filter",
} as const;
export type ResponsesStreamChunkReason = ClosedEnum<
  typeof ResponsesStreamChunkReason
>;

/**
 * Details about why response was incomplete
 */
export type IncompleteDetails = {
  reason: ResponsesStreamChunkReason;
};

export type Response1 = {
  incompleteDetails: IncompleteDetails | null;
  /**
   * Token usage statistics for Responses API
   */
  usage: ResponsesUsage;
};

export type ResponsesStreamChunk = {
  type: ResponsesStreamChunkType;
  response: Response1;
};

export const TypeResponseOutputTextDelta = {
  ResponseOutputTextDelta: "response.output_text.delta",
} as const;
export type TypeResponseOutputTextDelta = ClosedEnum<
  typeof TypeResponseOutputTextDelta
>;

export type ResponsesStreamChunkResponseOutputTextDelta = {
  type: TypeResponseOutputTextDelta;
  delta: string;
  sequenceNumber: number;
};

/**
 * Streaming chunk from Responses API
 */
export type ResponsesStreamChunkUnion =
  | ResponsesStreamChunkResponseReasoningSummaryTextDelta
  | ResponsesStreamChunkResponseImageGenerationCallPartialImage
  | ResponsesStreamChunkResponseFunctionCallArgumentsDelta
  | ResponsesStreamChunkResponseFunctionCallArgumentsDone
  | ResponsesStreamChunkResponseRefusalDelta
  | ResponsesStreamChunkResponseRefusalDone
  | ResponsesStreamChunkResponseOutputItemDone
  | ResponsesStreamChunkResponseWebSearchCallCompleted
  | ResponsesStreamChunkResponseFileSearchCallSearching
  | ResponsesStreamChunkResponseFileSearchCallCompleted
  | ResponsesStreamChunkResponseWebSearchCallSearching
  | ResponsesStreamChunkResponseImageGenerationCallInProgress
  | ResponsesStreamChunkResponseImageGenerationCallGenerating
  | ResponsesStreamChunkResponseImageGenerationCallCompleted
  | ResponsesStreamChunkResponseOutputTextDelta
  | ResponsesStreamChunkResponseOutputItemAdded
  | ResponsesStreamChunkResponseFileSearchCallInProgress
  | ResponsesStreamChunkResponseWebSearchCallInProgress
  | ResponsesStreamChunk
  | ResponsesStreamChunkResponseCreated
  | ResponsesStreamChunkResponseOutputTextAnnotationAdded
  | ResponsesStreamChunkResponseFailed
  | ResponsesStreamChunkResponseError
  | ResponsesStreamChunkError;

/** @internal */
export const TypeError$inboundSchema: z.ZodNativeEnum<typeof TypeError> = z
  .nativeEnum(TypeError);

/** @internal */
export const TypeError$outboundSchema: z.ZodNativeEnum<typeof TypeError> =
  TypeError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeError$ {
  /** @deprecated use `TypeError$inboundSchema` instead. */
  export const inboundSchema = TypeError$inboundSchema;
  /** @deprecated use `TypeError$outboundSchema` instead. */
  export const outboundSchema = TypeError$outboundSchema;
}

/** @internal */
export const ResponsesStreamChunkError2$inboundSchema: z.ZodType<
  ResponsesStreamChunkError2,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string().optional(),
  message: z.string(),
});

/** @internal */
export type ResponsesStreamChunkError2$Outbound = {
  code?: string | undefined;
  message: string;
};

/** @internal */
export const ResponsesStreamChunkError2$outboundSchema: z.ZodType<
  ResponsesStreamChunkError2$Outbound,
  z.ZodTypeDef,
  ResponsesStreamChunkError2
> = z.object({
  code: z.string().optional(),
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesStreamChunkError2$ {
  /** @deprecated use `ResponsesStreamChunkError2$inboundSchema` instead. */
  export const inboundSchema = ResponsesStreamChunkError2$inboundSchema;
  /** @deprecated use `ResponsesStreamChunkError2$outboundSchema` instead. */
  export const outboundSchema = ResponsesStreamChunkError2$outboundSchema;
  /** @deprecated use `ResponsesStreamChunkError2$Outbound` instead. */
  export type Outbound = ResponsesStreamChunkError2$Outbound;
}

export function responsesStreamChunkError2ToJSON(
  responsesStreamChunkError2: ResponsesStreamChunkError2,
): string {
  return JSON.stringify(
    ResponsesStreamChunkError2$outboundSchema.parse(responsesStreamChunkError2),
  );
}

export function responsesStreamChunkError2FromJSON(
  jsonString: string,
): SafeParseResult<ResponsesStreamChunkError2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponsesStreamChunkError2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponsesStreamChunkError2' from JSON`,
  );
}

/** @internal */
export const ResponsesStreamChunkError$inboundSchema: z.ZodType<
  ResponsesStreamChunkError,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TypeError$inboundSchema,
  error: z.lazy(() => ResponsesStreamChunkError2$inboundSchema),
});

/** @internal */
export type ResponsesStreamChunkError$Outbound = {
  type: string;
  error: ResponsesStreamChunkError2$Outbound;
};

/** @internal */
export const ResponsesStreamChunkError$outboundSchema: z.ZodType<
  ResponsesStreamChunkError$Outbound,
  z.ZodTypeDef,
  ResponsesStreamChunkError
> = z.object({
  type: TypeError$outboundSchema,
  error: z.lazy(() => ResponsesStreamChunkError2$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesStreamChunkError$ {
  /** @deprecated use `ResponsesStreamChunkError$inboundSchema` instead. */
  export const inboundSchema = ResponsesStreamChunkError$inboundSchema;
  /** @deprecated use `ResponsesStreamChunkError$outboundSchema` instead. */
  export const outboundSchema = ResponsesStreamChunkError$outboundSchema;
  /** @deprecated use `ResponsesStreamChunkError$Outbound` instead. */
  export type Outbound = ResponsesStreamChunkError$Outbound;
}

export function responsesStreamChunkErrorToJSON(
  responsesStreamChunkError: ResponsesStreamChunkError,
): string {
  return JSON.stringify(
    ResponsesStreamChunkError$outboundSchema.parse(responsesStreamChunkError),
  );
}

export function responsesStreamChunkErrorFromJSON(
  jsonString: string,
): SafeParseResult<ResponsesStreamChunkError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponsesStreamChunkError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponsesStreamChunkError' from JSON`,
  );
}

/** @internal */
export const TypeResponseRefusalDone$inboundSchema: z.ZodNativeEnum<
  typeof TypeResponseRefusalDone
> = z.nativeEnum(TypeResponseRefusalDone);

/** @internal */
export const TypeResponseRefusalDone$outboundSchema: z.ZodNativeEnum<
  typeof TypeResponseRefusalDone
> = TypeResponseRefusalDone$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeResponseRefusalDone$ {
  /** @deprecated use `TypeResponseRefusalDone$inboundSchema` instead. */
  export const inboundSchema = TypeResponseRefusalDone$inboundSchema;
  /** @deprecated use `TypeResponseRefusalDone$outboundSchema` instead. */
  export const outboundSchema = TypeResponseRefusalDone$outboundSchema;
}

/** @internal */
export const ResponsesStreamChunkResponseRefusalDone$inboundSchema: z.ZodType<
  ResponsesStreamChunkResponseRefusalDone,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TypeResponseRefusalDone$inboundSchema,
  item_id: z.string(),
  output_index: z.number(),
  sequence_number: z.number(),
  refusal: z.string(),
}).transform((v) => {
  return remap$(v, {
    "item_id": "itemId",
    "output_index": "outputIndex",
    "sequence_number": "sequenceNumber",
  });
});

/** @internal */
export type ResponsesStreamChunkResponseRefusalDone$Outbound = {
  type: string;
  item_id: string;
  output_index: number;
  sequence_number: number;
  refusal: string;
};

/** @internal */
export const ResponsesStreamChunkResponseRefusalDone$outboundSchema: z.ZodType<
  ResponsesStreamChunkResponseRefusalDone$Outbound,
  z.ZodTypeDef,
  ResponsesStreamChunkResponseRefusalDone
> = z.object({
  type: TypeResponseRefusalDone$outboundSchema,
  itemId: z.string(),
  outputIndex: z.number(),
  sequenceNumber: z.number(),
  refusal: z.string(),
}).transform((v) => {
  return remap$(v, {
    itemId: "item_id",
    outputIndex: "output_index",
    sequenceNumber: "sequence_number",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesStreamChunkResponseRefusalDone$ {
  /** @deprecated use `ResponsesStreamChunkResponseRefusalDone$inboundSchema` instead. */
  export const inboundSchema =
    ResponsesStreamChunkResponseRefusalDone$inboundSchema;
  /** @deprecated use `ResponsesStreamChunkResponseRefusalDone$outboundSchema` instead. */
  export const outboundSchema =
    ResponsesStreamChunkResponseRefusalDone$outboundSchema;
  /** @deprecated use `ResponsesStreamChunkResponseRefusalDone$Outbound` instead. */
  export type Outbound = ResponsesStreamChunkResponseRefusalDone$Outbound;
}

export function responsesStreamChunkResponseRefusalDoneToJSON(
  responsesStreamChunkResponseRefusalDone:
    ResponsesStreamChunkResponseRefusalDone,
): string {
  return JSON.stringify(
    ResponsesStreamChunkResponseRefusalDone$outboundSchema.parse(
      responsesStreamChunkResponseRefusalDone,
    ),
  );
}

export function responsesStreamChunkResponseRefusalDoneFromJSON(
  jsonString: string,
): SafeParseResult<
  ResponsesStreamChunkResponseRefusalDone,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ResponsesStreamChunkResponseRefusalDone$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ResponsesStreamChunkResponseRefusalDone' from JSON`,
  );
}

/** @internal */
export const TypeResponseRefusalDelta$inboundSchema: z.ZodNativeEnum<
  typeof TypeResponseRefusalDelta
> = z.nativeEnum(TypeResponseRefusalDelta);

/** @internal */
export const TypeResponseRefusalDelta$outboundSchema: z.ZodNativeEnum<
  typeof TypeResponseRefusalDelta
> = TypeResponseRefusalDelta$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeResponseRefusalDelta$ {
  /** @deprecated use `TypeResponseRefusalDelta$inboundSchema` instead. */
  export const inboundSchema = TypeResponseRefusalDelta$inboundSchema;
  /** @deprecated use `TypeResponseRefusalDelta$outboundSchema` instead. */
  export const outboundSchema = TypeResponseRefusalDelta$outboundSchema;
}

/** @internal */
export const ResponsesStreamChunkResponseRefusalDelta$inboundSchema: z.ZodType<
  ResponsesStreamChunkResponseRefusalDelta,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TypeResponseRefusalDelta$inboundSchema,
  item_id: z.string(),
  output_index: z.number(),
  sequence_number: z.number(),
  delta: z.string(),
}).transform((v) => {
  return remap$(v, {
    "item_id": "itemId",
    "output_index": "outputIndex",
    "sequence_number": "sequenceNumber",
  });
});

/** @internal */
export type ResponsesStreamChunkResponseRefusalDelta$Outbound = {
  type: string;
  item_id: string;
  output_index: number;
  sequence_number: number;
  delta: string;
};

/** @internal */
export const ResponsesStreamChunkResponseRefusalDelta$outboundSchema: z.ZodType<
  ResponsesStreamChunkResponseRefusalDelta$Outbound,
  z.ZodTypeDef,
  ResponsesStreamChunkResponseRefusalDelta
> = z.object({
  type: TypeResponseRefusalDelta$outboundSchema,
  itemId: z.string(),
  outputIndex: z.number(),
  sequenceNumber: z.number(),
  delta: z.string(),
}).transform((v) => {
  return remap$(v, {
    itemId: "item_id",
    outputIndex: "output_index",
    sequenceNumber: "sequence_number",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesStreamChunkResponseRefusalDelta$ {
  /** @deprecated use `ResponsesStreamChunkResponseRefusalDelta$inboundSchema` instead. */
  export const inboundSchema =
    ResponsesStreamChunkResponseRefusalDelta$inboundSchema;
  /** @deprecated use `ResponsesStreamChunkResponseRefusalDelta$outboundSchema` instead. */
  export const outboundSchema =
    ResponsesStreamChunkResponseRefusalDelta$outboundSchema;
  /** @deprecated use `ResponsesStreamChunkResponseRefusalDelta$Outbound` instead. */
  export type Outbound = ResponsesStreamChunkResponseRefusalDelta$Outbound;
}

export function responsesStreamChunkResponseRefusalDeltaToJSON(
  responsesStreamChunkResponseRefusalDelta:
    ResponsesStreamChunkResponseRefusalDelta,
): string {
  return JSON.stringify(
    ResponsesStreamChunkResponseRefusalDelta$outboundSchema.parse(
      responsesStreamChunkResponseRefusalDelta,
    ),
  );
}

export function responsesStreamChunkResponseRefusalDeltaFromJSON(
  jsonString: string,
): SafeParseResult<
  ResponsesStreamChunkResponseRefusalDelta,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ResponsesStreamChunkResponseRefusalDelta$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ResponsesStreamChunkResponseRefusalDelta' from JSON`,
  );
}

/** @internal */
export const TypeResponseError$inboundSchema: z.ZodNativeEnum<
  typeof TypeResponseError
> = z.nativeEnum(TypeResponseError);

/** @internal */
export const TypeResponseError$outboundSchema: z.ZodNativeEnum<
  typeof TypeResponseError
> = TypeResponseError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeResponseError$ {
  /** @deprecated use `TypeResponseError$inboundSchema` instead. */
  export const inboundSchema = TypeResponseError$inboundSchema;
  /** @deprecated use `TypeResponseError$outboundSchema` instead. */
  export const outboundSchema = TypeResponseError$outboundSchema;
}

/** @internal */
export const ResponsesStreamChunkError1$inboundSchema: z.ZodType<
  ResponsesStreamChunkError1,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string().optional(),
  message: z.string(),
});

/** @internal */
export type ResponsesStreamChunkError1$Outbound = {
  code?: string | undefined;
  message: string;
};

/** @internal */
export const ResponsesStreamChunkError1$outboundSchema: z.ZodType<
  ResponsesStreamChunkError1$Outbound,
  z.ZodTypeDef,
  ResponsesStreamChunkError1
> = z.object({
  code: z.string().optional(),
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesStreamChunkError1$ {
  /** @deprecated use `ResponsesStreamChunkError1$inboundSchema` instead. */
  export const inboundSchema = ResponsesStreamChunkError1$inboundSchema;
  /** @deprecated use `ResponsesStreamChunkError1$outboundSchema` instead. */
  export const outboundSchema = ResponsesStreamChunkError1$outboundSchema;
  /** @deprecated use `ResponsesStreamChunkError1$Outbound` instead. */
  export type Outbound = ResponsesStreamChunkError1$Outbound;
}

export function responsesStreamChunkError1ToJSON(
  responsesStreamChunkError1: ResponsesStreamChunkError1,
): string {
  return JSON.stringify(
    ResponsesStreamChunkError1$outboundSchema.parse(responsesStreamChunkError1),
  );
}

export function responsesStreamChunkError1FromJSON(
  jsonString: string,
): SafeParseResult<ResponsesStreamChunkError1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponsesStreamChunkError1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponsesStreamChunkError1' from JSON`,
  );
}

/** @internal */
export const ResponsesStreamChunkResponseError$inboundSchema: z.ZodType<
  ResponsesStreamChunkResponseError,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TypeResponseError$inboundSchema,
  error: z.lazy(() => ResponsesStreamChunkError1$inboundSchema),
});

/** @internal */
export type ResponsesStreamChunkResponseError$Outbound = {
  type: string;
  error: ResponsesStreamChunkError1$Outbound;
};

/** @internal */
export const ResponsesStreamChunkResponseError$outboundSchema: z.ZodType<
  ResponsesStreamChunkResponseError$Outbound,
  z.ZodTypeDef,
  ResponsesStreamChunkResponseError
> = z.object({
  type: TypeResponseError$outboundSchema,
  error: z.lazy(() => ResponsesStreamChunkError1$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesStreamChunkResponseError$ {
  /** @deprecated use `ResponsesStreamChunkResponseError$inboundSchema` instead. */
  export const inboundSchema = ResponsesStreamChunkResponseError$inboundSchema;
  /** @deprecated use `ResponsesStreamChunkResponseError$outboundSchema` instead. */
  export const outboundSchema =
    ResponsesStreamChunkResponseError$outboundSchema;
  /** @deprecated use `ResponsesStreamChunkResponseError$Outbound` instead. */
  export type Outbound = ResponsesStreamChunkResponseError$Outbound;
}

export function responsesStreamChunkResponseErrorToJSON(
  responsesStreamChunkResponseError: ResponsesStreamChunkResponseError,
): string {
  return JSON.stringify(
    ResponsesStreamChunkResponseError$outboundSchema.parse(
      responsesStreamChunkResponseError,
    ),
  );
}

export function responsesStreamChunkResponseErrorFromJSON(
  jsonString: string,
): SafeParseResult<ResponsesStreamChunkResponseError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponsesStreamChunkResponseError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponsesStreamChunkResponseError' from JSON`,
  );
}

/** @internal */
export const TypeResponseFailed$inboundSchema: z.ZodNativeEnum<
  typeof TypeResponseFailed
> = z.nativeEnum(TypeResponseFailed);

/** @internal */
export const TypeResponseFailed$outboundSchema: z.ZodNativeEnum<
  typeof TypeResponseFailed
> = TypeResponseFailed$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeResponseFailed$ {
  /** @deprecated use `TypeResponseFailed$inboundSchema` instead. */
  export const inboundSchema = TypeResponseFailed$inboundSchema;
  /** @deprecated use `TypeResponseFailed$outboundSchema` instead. */
  export const outboundSchema = TypeResponseFailed$outboundSchema;
}

/** @internal */
export const StatusFailed$inboundSchema: z.ZodNativeEnum<typeof StatusFailed> =
  z.nativeEnum(StatusFailed);

/** @internal */
export const StatusFailed$outboundSchema: z.ZodNativeEnum<typeof StatusFailed> =
  StatusFailed$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StatusFailed$ {
  /** @deprecated use `StatusFailed$inboundSchema` instead. */
  export const inboundSchema = StatusFailed$inboundSchema;
  /** @deprecated use `StatusFailed$outboundSchema` instead. */
  export const outboundSchema = StatusFailed$outboundSchema;
}

/** @internal */
export const ErrorFailed$inboundSchema: z.ZodType<
  ErrorFailed,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string(),
});

/** @internal */
export type ErrorFailed$Outbound = {
  code: string;
  message: string;
};

/** @internal */
export const ErrorFailed$outboundSchema: z.ZodType<
  ErrorFailed$Outbound,
  z.ZodTypeDef,
  ErrorFailed
> = z.object({
  code: z.string(),
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorFailed$ {
  /** @deprecated use `ErrorFailed$inboundSchema` instead. */
  export const inboundSchema = ErrorFailed$inboundSchema;
  /** @deprecated use `ErrorFailed$outboundSchema` instead. */
  export const outboundSchema = ErrorFailed$outboundSchema;
  /** @deprecated use `ErrorFailed$Outbound` instead. */
  export type Outbound = ErrorFailed$Outbound;
}

export function errorFailedToJSON(errorFailed: ErrorFailed): string {
  return JSON.stringify(ErrorFailed$outboundSchema.parse(errorFailed));
}

export function errorFailedFromJSON(
  jsonString: string,
): SafeParseResult<ErrorFailed, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ErrorFailed$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ErrorFailed' from JSON`,
  );
}

/** @internal */
export const ResponseFailed$inboundSchema: z.ZodType<
  ResponseFailed,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  status: StatusFailed$inboundSchema,
  error: z.lazy(() => ErrorFailed$inboundSchema),
});

/** @internal */
export type ResponseFailed$Outbound = {
  id: string;
  status: string;
  error: ErrorFailed$Outbound;
};

/** @internal */
export const ResponseFailed$outboundSchema: z.ZodType<
  ResponseFailed$Outbound,
  z.ZodTypeDef,
  ResponseFailed
> = z.object({
  id: z.string(),
  status: StatusFailed$outboundSchema,
  error: z.lazy(() => ErrorFailed$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseFailed$ {
  /** @deprecated use `ResponseFailed$inboundSchema` instead. */
  export const inboundSchema = ResponseFailed$inboundSchema;
  /** @deprecated use `ResponseFailed$outboundSchema` instead. */
  export const outboundSchema = ResponseFailed$outboundSchema;
  /** @deprecated use `ResponseFailed$Outbound` instead. */
  export type Outbound = ResponseFailed$Outbound;
}

export function responseFailedToJSON(responseFailed: ResponseFailed): string {
  return JSON.stringify(ResponseFailed$outboundSchema.parse(responseFailed));
}

export function responseFailedFromJSON(
  jsonString: string,
): SafeParseResult<ResponseFailed, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseFailed$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseFailed' from JSON`,
  );
}

/** @internal */
export const ResponsesStreamChunkResponseFailed$inboundSchema: z.ZodType<
  ResponsesStreamChunkResponseFailed,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TypeResponseFailed$inboundSchema,
  response: z.lazy(() => ResponseFailed$inboundSchema),
});

/** @internal */
export type ResponsesStreamChunkResponseFailed$Outbound = {
  type: string;
  response: ResponseFailed$Outbound;
};

/** @internal */
export const ResponsesStreamChunkResponseFailed$outboundSchema: z.ZodType<
  ResponsesStreamChunkResponseFailed$Outbound,
  z.ZodTypeDef,
  ResponsesStreamChunkResponseFailed
> = z.object({
  type: TypeResponseFailed$outboundSchema,
  response: z.lazy(() => ResponseFailed$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesStreamChunkResponseFailed$ {
  /** @deprecated use `ResponsesStreamChunkResponseFailed$inboundSchema` instead. */
  export const inboundSchema = ResponsesStreamChunkResponseFailed$inboundSchema;
  /** @deprecated use `ResponsesStreamChunkResponseFailed$outboundSchema` instead. */
  export const outboundSchema =
    ResponsesStreamChunkResponseFailed$outboundSchema;
  /** @deprecated use `ResponsesStreamChunkResponseFailed$Outbound` instead. */
  export type Outbound = ResponsesStreamChunkResponseFailed$Outbound;
}

export function responsesStreamChunkResponseFailedToJSON(
  responsesStreamChunkResponseFailed: ResponsesStreamChunkResponseFailed,
): string {
  return JSON.stringify(
    ResponsesStreamChunkResponseFailed$outboundSchema.parse(
      responsesStreamChunkResponseFailed,
    ),
  );
}

export function responsesStreamChunkResponseFailedFromJSON(
  jsonString: string,
): SafeParseResult<ResponsesStreamChunkResponseFailed, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ResponsesStreamChunkResponseFailed$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponsesStreamChunkResponseFailed' from JSON`,
  );
}

/** @internal */
export const TypeResponseImageGenerationCallCompleted$inboundSchema:
  z.ZodNativeEnum<typeof TypeResponseImageGenerationCallCompleted> = z
    .nativeEnum(TypeResponseImageGenerationCallCompleted);

/** @internal */
export const TypeResponseImageGenerationCallCompleted$outboundSchema:
  z.ZodNativeEnum<typeof TypeResponseImageGenerationCallCompleted> =
    TypeResponseImageGenerationCallCompleted$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeResponseImageGenerationCallCompleted$ {
  /** @deprecated use `TypeResponseImageGenerationCallCompleted$inboundSchema` instead. */
  export const inboundSchema =
    TypeResponseImageGenerationCallCompleted$inboundSchema;
  /** @deprecated use `TypeResponseImageGenerationCallCompleted$outboundSchema` instead. */
  export const outboundSchema =
    TypeResponseImageGenerationCallCompleted$outboundSchema;
}

/** @internal */
export const ResponsesStreamChunkResponseImageGenerationCallCompleted$inboundSchema:
  z.ZodType<
    ResponsesStreamChunkResponseImageGenerationCallCompleted,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: TypeResponseImageGenerationCallCompleted$inboundSchema,
    item_id: z.string(),
    output_index: z.number(),
    sequence_number: z.number(),
  }).transform((v) => {
    return remap$(v, {
      "item_id": "itemId",
      "output_index": "outputIndex",
      "sequence_number": "sequenceNumber",
    });
  });

/** @internal */
export type ResponsesStreamChunkResponseImageGenerationCallCompleted$Outbound =
  {
    type: string;
    item_id: string;
    output_index: number;
    sequence_number: number;
  };

/** @internal */
export const ResponsesStreamChunkResponseImageGenerationCallCompleted$outboundSchema:
  z.ZodType<
    ResponsesStreamChunkResponseImageGenerationCallCompleted$Outbound,
    z.ZodTypeDef,
    ResponsesStreamChunkResponseImageGenerationCallCompleted
  > = z.object({
    type: TypeResponseImageGenerationCallCompleted$outboundSchema,
    itemId: z.string(),
    outputIndex: z.number(),
    sequenceNumber: z.number(),
  }).transform((v) => {
    return remap$(v, {
      itemId: "item_id",
      outputIndex: "output_index",
      sequenceNumber: "sequence_number",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesStreamChunkResponseImageGenerationCallCompleted$ {
  /** @deprecated use `ResponsesStreamChunkResponseImageGenerationCallCompleted$inboundSchema` instead. */
  export const inboundSchema =
    ResponsesStreamChunkResponseImageGenerationCallCompleted$inboundSchema;
  /** @deprecated use `ResponsesStreamChunkResponseImageGenerationCallCompleted$outboundSchema` instead. */
  export const outboundSchema =
    ResponsesStreamChunkResponseImageGenerationCallCompleted$outboundSchema;
  /** @deprecated use `ResponsesStreamChunkResponseImageGenerationCallCompleted$Outbound` instead. */
  export type Outbound =
    ResponsesStreamChunkResponseImageGenerationCallCompleted$Outbound;
}

export function responsesStreamChunkResponseImageGenerationCallCompletedToJSON(
  responsesStreamChunkResponseImageGenerationCallCompleted:
    ResponsesStreamChunkResponseImageGenerationCallCompleted,
): string {
  return JSON.stringify(
    ResponsesStreamChunkResponseImageGenerationCallCompleted$outboundSchema
      .parse(responsesStreamChunkResponseImageGenerationCallCompleted),
  );
}

export function responsesStreamChunkResponseImageGenerationCallCompletedFromJSON(
  jsonString: string,
): SafeParseResult<
  ResponsesStreamChunkResponseImageGenerationCallCompleted,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ResponsesStreamChunkResponseImageGenerationCallCompleted$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'ResponsesStreamChunkResponseImageGenerationCallCompleted' from JSON`,
  );
}

/** @internal */
export const TypeResponseImageGenerationCallPartialImage$inboundSchema:
  z.ZodNativeEnum<typeof TypeResponseImageGenerationCallPartialImage> = z
    .nativeEnum(TypeResponseImageGenerationCallPartialImage);

/** @internal */
export const TypeResponseImageGenerationCallPartialImage$outboundSchema:
  z.ZodNativeEnum<typeof TypeResponseImageGenerationCallPartialImage> =
    TypeResponseImageGenerationCallPartialImage$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeResponseImageGenerationCallPartialImage$ {
  /** @deprecated use `TypeResponseImageGenerationCallPartialImage$inboundSchema` instead. */
  export const inboundSchema =
    TypeResponseImageGenerationCallPartialImage$inboundSchema;
  /** @deprecated use `TypeResponseImageGenerationCallPartialImage$outboundSchema` instead. */
  export const outboundSchema =
    TypeResponseImageGenerationCallPartialImage$outboundSchema;
}

/** @internal */
export const ResponsesStreamChunkResponseImageGenerationCallPartialImage$inboundSchema:
  z.ZodType<
    ResponsesStreamChunkResponseImageGenerationCallPartialImage,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: TypeResponseImageGenerationCallPartialImage$inboundSchema,
    item_id: z.string(),
    output_index: z.number(),
    sequence_number: z.number(),
    partial_image_b64: z.string(),
    partial_image_index: z.number(),
  }).transform((v) => {
    return remap$(v, {
      "item_id": "itemId",
      "output_index": "outputIndex",
      "sequence_number": "sequenceNumber",
      "partial_image_b64": "partialImageB64",
      "partial_image_index": "partialImageIndex",
    });
  });

/** @internal */
export type ResponsesStreamChunkResponseImageGenerationCallPartialImage$Outbound =
  {
    type: string;
    item_id: string;
    output_index: number;
    sequence_number: number;
    partial_image_b64: string;
    partial_image_index: number;
  };

/** @internal */
export const ResponsesStreamChunkResponseImageGenerationCallPartialImage$outboundSchema:
  z.ZodType<
    ResponsesStreamChunkResponseImageGenerationCallPartialImage$Outbound,
    z.ZodTypeDef,
    ResponsesStreamChunkResponseImageGenerationCallPartialImage
  > = z.object({
    type: TypeResponseImageGenerationCallPartialImage$outboundSchema,
    itemId: z.string(),
    outputIndex: z.number(),
    sequenceNumber: z.number(),
    partialImageB64: z.string(),
    partialImageIndex: z.number(),
  }).transform((v) => {
    return remap$(v, {
      itemId: "item_id",
      outputIndex: "output_index",
      sequenceNumber: "sequence_number",
      partialImageB64: "partial_image_b64",
      partialImageIndex: "partial_image_index",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesStreamChunkResponseImageGenerationCallPartialImage$ {
  /** @deprecated use `ResponsesStreamChunkResponseImageGenerationCallPartialImage$inboundSchema` instead. */
  export const inboundSchema =
    ResponsesStreamChunkResponseImageGenerationCallPartialImage$inboundSchema;
  /** @deprecated use `ResponsesStreamChunkResponseImageGenerationCallPartialImage$outboundSchema` instead. */
  export const outboundSchema =
    ResponsesStreamChunkResponseImageGenerationCallPartialImage$outboundSchema;
  /** @deprecated use `ResponsesStreamChunkResponseImageGenerationCallPartialImage$Outbound` instead. */
  export type Outbound =
    ResponsesStreamChunkResponseImageGenerationCallPartialImage$Outbound;
}

export function responsesStreamChunkResponseImageGenerationCallPartialImageToJSON(
  responsesStreamChunkResponseImageGenerationCallPartialImage:
    ResponsesStreamChunkResponseImageGenerationCallPartialImage,
): string {
  return JSON.stringify(
    ResponsesStreamChunkResponseImageGenerationCallPartialImage$outboundSchema
      .parse(responsesStreamChunkResponseImageGenerationCallPartialImage),
  );
}

export function responsesStreamChunkResponseImageGenerationCallPartialImageFromJSON(
  jsonString: string,
): SafeParseResult<
  ResponsesStreamChunkResponseImageGenerationCallPartialImage,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ResponsesStreamChunkResponseImageGenerationCallPartialImage$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'ResponsesStreamChunkResponseImageGenerationCallPartialImage' from JSON`,
  );
}

/** @internal */
export const TypeResponseImageGenerationCallGenerating$inboundSchema:
  z.ZodNativeEnum<typeof TypeResponseImageGenerationCallGenerating> = z
    .nativeEnum(TypeResponseImageGenerationCallGenerating);

/** @internal */
export const TypeResponseImageGenerationCallGenerating$outboundSchema:
  z.ZodNativeEnum<typeof TypeResponseImageGenerationCallGenerating> =
    TypeResponseImageGenerationCallGenerating$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeResponseImageGenerationCallGenerating$ {
  /** @deprecated use `TypeResponseImageGenerationCallGenerating$inboundSchema` instead. */
  export const inboundSchema =
    TypeResponseImageGenerationCallGenerating$inboundSchema;
  /** @deprecated use `TypeResponseImageGenerationCallGenerating$outboundSchema` instead. */
  export const outboundSchema =
    TypeResponseImageGenerationCallGenerating$outboundSchema;
}

/** @internal */
export const ResponsesStreamChunkResponseImageGenerationCallGenerating$inboundSchema:
  z.ZodType<
    ResponsesStreamChunkResponseImageGenerationCallGenerating,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: TypeResponseImageGenerationCallGenerating$inboundSchema,
    item_id: z.string(),
    output_index: z.number(),
    sequence_number: z.number(),
  }).transform((v) => {
    return remap$(v, {
      "item_id": "itemId",
      "output_index": "outputIndex",
      "sequence_number": "sequenceNumber",
    });
  });

/** @internal */
export type ResponsesStreamChunkResponseImageGenerationCallGenerating$Outbound =
  {
    type: string;
    item_id: string;
    output_index: number;
    sequence_number: number;
  };

/** @internal */
export const ResponsesStreamChunkResponseImageGenerationCallGenerating$outboundSchema:
  z.ZodType<
    ResponsesStreamChunkResponseImageGenerationCallGenerating$Outbound,
    z.ZodTypeDef,
    ResponsesStreamChunkResponseImageGenerationCallGenerating
  > = z.object({
    type: TypeResponseImageGenerationCallGenerating$outboundSchema,
    itemId: z.string(),
    outputIndex: z.number(),
    sequenceNumber: z.number(),
  }).transform((v) => {
    return remap$(v, {
      itemId: "item_id",
      outputIndex: "output_index",
      sequenceNumber: "sequence_number",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesStreamChunkResponseImageGenerationCallGenerating$ {
  /** @deprecated use `ResponsesStreamChunkResponseImageGenerationCallGenerating$inboundSchema` instead. */
  export const inboundSchema =
    ResponsesStreamChunkResponseImageGenerationCallGenerating$inboundSchema;
  /** @deprecated use `ResponsesStreamChunkResponseImageGenerationCallGenerating$outboundSchema` instead. */
  export const outboundSchema =
    ResponsesStreamChunkResponseImageGenerationCallGenerating$outboundSchema;
  /** @deprecated use `ResponsesStreamChunkResponseImageGenerationCallGenerating$Outbound` instead. */
  export type Outbound =
    ResponsesStreamChunkResponseImageGenerationCallGenerating$Outbound;
}

export function responsesStreamChunkResponseImageGenerationCallGeneratingToJSON(
  responsesStreamChunkResponseImageGenerationCallGenerating:
    ResponsesStreamChunkResponseImageGenerationCallGenerating,
): string {
  return JSON.stringify(
    ResponsesStreamChunkResponseImageGenerationCallGenerating$outboundSchema
      .parse(responsesStreamChunkResponseImageGenerationCallGenerating),
  );
}

export function responsesStreamChunkResponseImageGenerationCallGeneratingFromJSON(
  jsonString: string,
): SafeParseResult<
  ResponsesStreamChunkResponseImageGenerationCallGenerating,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ResponsesStreamChunkResponseImageGenerationCallGenerating$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'ResponsesStreamChunkResponseImageGenerationCallGenerating' from JSON`,
  );
}

/** @internal */
export const TypeResponseImageGenerationCallInProgress$inboundSchema:
  z.ZodNativeEnum<typeof TypeResponseImageGenerationCallInProgress> = z
    .nativeEnum(TypeResponseImageGenerationCallInProgress);

/** @internal */
export const TypeResponseImageGenerationCallInProgress$outboundSchema:
  z.ZodNativeEnum<typeof TypeResponseImageGenerationCallInProgress> =
    TypeResponseImageGenerationCallInProgress$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeResponseImageGenerationCallInProgress$ {
  /** @deprecated use `TypeResponseImageGenerationCallInProgress$inboundSchema` instead. */
  export const inboundSchema =
    TypeResponseImageGenerationCallInProgress$inboundSchema;
  /** @deprecated use `TypeResponseImageGenerationCallInProgress$outboundSchema` instead. */
  export const outboundSchema =
    TypeResponseImageGenerationCallInProgress$outboundSchema;
}

/** @internal */
export const ResponsesStreamChunkResponseImageGenerationCallInProgress$inboundSchema:
  z.ZodType<
    ResponsesStreamChunkResponseImageGenerationCallInProgress,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: TypeResponseImageGenerationCallInProgress$inboundSchema,
    item_id: z.string(),
    output_index: z.number(),
    sequence_number: z.number(),
  }).transform((v) => {
    return remap$(v, {
      "item_id": "itemId",
      "output_index": "outputIndex",
      "sequence_number": "sequenceNumber",
    });
  });

/** @internal */
export type ResponsesStreamChunkResponseImageGenerationCallInProgress$Outbound =
  {
    type: string;
    item_id: string;
    output_index: number;
    sequence_number: number;
  };

/** @internal */
export const ResponsesStreamChunkResponseImageGenerationCallInProgress$outboundSchema:
  z.ZodType<
    ResponsesStreamChunkResponseImageGenerationCallInProgress$Outbound,
    z.ZodTypeDef,
    ResponsesStreamChunkResponseImageGenerationCallInProgress
  > = z.object({
    type: TypeResponseImageGenerationCallInProgress$outboundSchema,
    itemId: z.string(),
    outputIndex: z.number(),
    sequenceNumber: z.number(),
  }).transform((v) => {
    return remap$(v, {
      itemId: "item_id",
      outputIndex: "output_index",
      sequenceNumber: "sequence_number",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesStreamChunkResponseImageGenerationCallInProgress$ {
  /** @deprecated use `ResponsesStreamChunkResponseImageGenerationCallInProgress$inboundSchema` instead. */
  export const inboundSchema =
    ResponsesStreamChunkResponseImageGenerationCallInProgress$inboundSchema;
  /** @deprecated use `ResponsesStreamChunkResponseImageGenerationCallInProgress$outboundSchema` instead. */
  export const outboundSchema =
    ResponsesStreamChunkResponseImageGenerationCallInProgress$outboundSchema;
  /** @deprecated use `ResponsesStreamChunkResponseImageGenerationCallInProgress$Outbound` instead. */
  export type Outbound =
    ResponsesStreamChunkResponseImageGenerationCallInProgress$Outbound;
}

export function responsesStreamChunkResponseImageGenerationCallInProgressToJSON(
  responsesStreamChunkResponseImageGenerationCallInProgress:
    ResponsesStreamChunkResponseImageGenerationCallInProgress,
): string {
  return JSON.stringify(
    ResponsesStreamChunkResponseImageGenerationCallInProgress$outboundSchema
      .parse(responsesStreamChunkResponseImageGenerationCallInProgress),
  );
}

export function responsesStreamChunkResponseImageGenerationCallInProgressFromJSON(
  jsonString: string,
): SafeParseResult<
  ResponsesStreamChunkResponseImageGenerationCallInProgress,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ResponsesStreamChunkResponseImageGenerationCallInProgress$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'ResponsesStreamChunkResponseImageGenerationCallInProgress' from JSON`,
  );
}

/** @internal */
export const TypeResponseWebSearchCallSearching$inboundSchema: z.ZodNativeEnum<
  typeof TypeResponseWebSearchCallSearching
> = z.nativeEnum(TypeResponseWebSearchCallSearching);

/** @internal */
export const TypeResponseWebSearchCallSearching$outboundSchema: z.ZodNativeEnum<
  typeof TypeResponseWebSearchCallSearching
> = TypeResponseWebSearchCallSearching$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeResponseWebSearchCallSearching$ {
  /** @deprecated use `TypeResponseWebSearchCallSearching$inboundSchema` instead. */
  export const inboundSchema = TypeResponseWebSearchCallSearching$inboundSchema;
  /** @deprecated use `TypeResponseWebSearchCallSearching$outboundSchema` instead. */
  export const outboundSchema =
    TypeResponseWebSearchCallSearching$outboundSchema;
}

/** @internal */
export const ResponsesStreamChunkResponseWebSearchCallSearching$inboundSchema:
  z.ZodType<
    ResponsesStreamChunkResponseWebSearchCallSearching,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: TypeResponseWebSearchCallSearching$inboundSchema,
    item_id: z.string(),
    output_index: z.number(),
    query: z.string().optional(),
    sequence_number: z.number(),
  }).transform((v) => {
    return remap$(v, {
      "item_id": "itemId",
      "output_index": "outputIndex",
      "sequence_number": "sequenceNumber",
    });
  });

/** @internal */
export type ResponsesStreamChunkResponseWebSearchCallSearching$Outbound = {
  type: string;
  item_id: string;
  output_index: number;
  query?: string | undefined;
  sequence_number: number;
};

/** @internal */
export const ResponsesStreamChunkResponseWebSearchCallSearching$outboundSchema:
  z.ZodType<
    ResponsesStreamChunkResponseWebSearchCallSearching$Outbound,
    z.ZodTypeDef,
    ResponsesStreamChunkResponseWebSearchCallSearching
  > = z.object({
    type: TypeResponseWebSearchCallSearching$outboundSchema,
    itemId: z.string(),
    outputIndex: z.number(),
    query: z.string().optional(),
    sequenceNumber: z.number(),
  }).transform((v) => {
    return remap$(v, {
      itemId: "item_id",
      outputIndex: "output_index",
      sequenceNumber: "sequence_number",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesStreamChunkResponseWebSearchCallSearching$ {
  /** @deprecated use `ResponsesStreamChunkResponseWebSearchCallSearching$inboundSchema` instead. */
  export const inboundSchema =
    ResponsesStreamChunkResponseWebSearchCallSearching$inboundSchema;
  /** @deprecated use `ResponsesStreamChunkResponseWebSearchCallSearching$outboundSchema` instead. */
  export const outboundSchema =
    ResponsesStreamChunkResponseWebSearchCallSearching$outboundSchema;
  /** @deprecated use `ResponsesStreamChunkResponseWebSearchCallSearching$Outbound` instead. */
  export type Outbound =
    ResponsesStreamChunkResponseWebSearchCallSearching$Outbound;
}

export function responsesStreamChunkResponseWebSearchCallSearchingToJSON(
  responsesStreamChunkResponseWebSearchCallSearching:
    ResponsesStreamChunkResponseWebSearchCallSearching,
): string {
  return JSON.stringify(
    ResponsesStreamChunkResponseWebSearchCallSearching$outboundSchema.parse(
      responsesStreamChunkResponseWebSearchCallSearching,
    ),
  );
}

export function responsesStreamChunkResponseWebSearchCallSearchingFromJSON(
  jsonString: string,
): SafeParseResult<
  ResponsesStreamChunkResponseWebSearchCallSearching,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ResponsesStreamChunkResponseWebSearchCallSearching$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ResponsesStreamChunkResponseWebSearchCallSearching' from JSON`,
  );
}

/** @internal */
export const TypeResponseWebSearchCallInProgress$inboundSchema: z.ZodNativeEnum<
  typeof TypeResponseWebSearchCallInProgress
> = z.nativeEnum(TypeResponseWebSearchCallInProgress);

/** @internal */
export const TypeResponseWebSearchCallInProgress$outboundSchema:
  z.ZodNativeEnum<typeof TypeResponseWebSearchCallInProgress> =
    TypeResponseWebSearchCallInProgress$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeResponseWebSearchCallInProgress$ {
  /** @deprecated use `TypeResponseWebSearchCallInProgress$inboundSchema` instead. */
  export const inboundSchema =
    TypeResponseWebSearchCallInProgress$inboundSchema;
  /** @deprecated use `TypeResponseWebSearchCallInProgress$outboundSchema` instead. */
  export const outboundSchema =
    TypeResponseWebSearchCallInProgress$outboundSchema;
}

/** @internal */
export const ResponsesStreamChunkResponseWebSearchCallInProgress$inboundSchema:
  z.ZodType<
    ResponsesStreamChunkResponseWebSearchCallInProgress,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: TypeResponseWebSearchCallInProgress$inboundSchema,
    item_id: z.string(),
    output_index: z.number(),
  }).transform((v) => {
    return remap$(v, {
      "item_id": "itemId",
      "output_index": "outputIndex",
    });
  });

/** @internal */
export type ResponsesStreamChunkResponseWebSearchCallInProgress$Outbound = {
  type: string;
  item_id: string;
  output_index: number;
};

/** @internal */
export const ResponsesStreamChunkResponseWebSearchCallInProgress$outboundSchema:
  z.ZodType<
    ResponsesStreamChunkResponseWebSearchCallInProgress$Outbound,
    z.ZodTypeDef,
    ResponsesStreamChunkResponseWebSearchCallInProgress
  > = z.object({
    type: TypeResponseWebSearchCallInProgress$outboundSchema,
    itemId: z.string(),
    outputIndex: z.number(),
  }).transform((v) => {
    return remap$(v, {
      itemId: "item_id",
      outputIndex: "output_index",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesStreamChunkResponseWebSearchCallInProgress$ {
  /** @deprecated use `ResponsesStreamChunkResponseWebSearchCallInProgress$inboundSchema` instead. */
  export const inboundSchema =
    ResponsesStreamChunkResponseWebSearchCallInProgress$inboundSchema;
  /** @deprecated use `ResponsesStreamChunkResponseWebSearchCallInProgress$outboundSchema` instead. */
  export const outboundSchema =
    ResponsesStreamChunkResponseWebSearchCallInProgress$outboundSchema;
  /** @deprecated use `ResponsesStreamChunkResponseWebSearchCallInProgress$Outbound` instead. */
  export type Outbound =
    ResponsesStreamChunkResponseWebSearchCallInProgress$Outbound;
}

export function responsesStreamChunkResponseWebSearchCallInProgressToJSON(
  responsesStreamChunkResponseWebSearchCallInProgress:
    ResponsesStreamChunkResponseWebSearchCallInProgress,
): string {
  return JSON.stringify(
    ResponsesStreamChunkResponseWebSearchCallInProgress$outboundSchema.parse(
      responsesStreamChunkResponseWebSearchCallInProgress,
    ),
  );
}

export function responsesStreamChunkResponseWebSearchCallInProgressFromJSON(
  jsonString: string,
): SafeParseResult<
  ResponsesStreamChunkResponseWebSearchCallInProgress,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ResponsesStreamChunkResponseWebSearchCallInProgress$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ResponsesStreamChunkResponseWebSearchCallInProgress' from JSON`,
  );
}

/** @internal */
export const TypeResponseFileSearchCallCompleted$inboundSchema: z.ZodNativeEnum<
  typeof TypeResponseFileSearchCallCompleted
> = z.nativeEnum(TypeResponseFileSearchCallCompleted);

/** @internal */
export const TypeResponseFileSearchCallCompleted$outboundSchema:
  z.ZodNativeEnum<typeof TypeResponseFileSearchCallCompleted> =
    TypeResponseFileSearchCallCompleted$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeResponseFileSearchCallCompleted$ {
  /** @deprecated use `TypeResponseFileSearchCallCompleted$inboundSchema` instead. */
  export const inboundSchema =
    TypeResponseFileSearchCallCompleted$inboundSchema;
  /** @deprecated use `TypeResponseFileSearchCallCompleted$outboundSchema` instead. */
  export const outboundSchema =
    TypeResponseFileSearchCallCompleted$outboundSchema;
}

/** @internal */
export const Result$inboundSchema: z.ZodType<Result, z.ZodTypeDef, unknown> = z
  .object({
    file_id: z.string(),
    filename: z.string(),
    score: z.number(),
  }).transform((v) => {
    return remap$(v, {
      "file_id": "fileId",
    });
  });

/** @internal */
export type Result$Outbound = {
  file_id: string;
  filename: string;
  score: number;
};

/** @internal */
export const Result$outboundSchema: z.ZodType<
  Result$Outbound,
  z.ZodTypeDef,
  Result
> = z.object({
  fileId: z.string(),
  filename: z.string(),
  score: z.number(),
}).transform((v) => {
  return remap$(v, {
    fileId: "file_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Result$ {
  /** @deprecated use `Result$inboundSchema` instead. */
  export const inboundSchema = Result$inboundSchema;
  /** @deprecated use `Result$outboundSchema` instead. */
  export const outboundSchema = Result$outboundSchema;
  /** @deprecated use `Result$Outbound` instead. */
  export type Outbound = Result$Outbound;
}

export function resultToJSON(result: Result): string {
  return JSON.stringify(Result$outboundSchema.parse(result));
}

export function resultFromJSON(
  jsonString: string,
): SafeParseResult<Result, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Result$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Result' from JSON`,
  );
}

/** @internal */
export const ResponsesStreamChunkResponseFileSearchCallCompleted$inboundSchema:
  z.ZodType<
    ResponsesStreamChunkResponseFileSearchCallCompleted,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: TypeResponseFileSearchCallCompleted$inboundSchema,
    item_id: z.string(),
    output_index: z.number(),
    results: z.array(z.lazy(() => Result$inboundSchema)),
  }).transform((v) => {
    return remap$(v, {
      "item_id": "itemId",
      "output_index": "outputIndex",
    });
  });

/** @internal */
export type ResponsesStreamChunkResponseFileSearchCallCompleted$Outbound = {
  type: string;
  item_id: string;
  output_index: number;
  results: Array<Result$Outbound>;
};

/** @internal */
export const ResponsesStreamChunkResponseFileSearchCallCompleted$outboundSchema:
  z.ZodType<
    ResponsesStreamChunkResponseFileSearchCallCompleted$Outbound,
    z.ZodTypeDef,
    ResponsesStreamChunkResponseFileSearchCallCompleted
  > = z.object({
    type: TypeResponseFileSearchCallCompleted$outboundSchema,
    itemId: z.string(),
    outputIndex: z.number(),
    results: z.array(z.lazy(() => Result$outboundSchema)),
  }).transform((v) => {
    return remap$(v, {
      itemId: "item_id",
      outputIndex: "output_index",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesStreamChunkResponseFileSearchCallCompleted$ {
  /** @deprecated use `ResponsesStreamChunkResponseFileSearchCallCompleted$inboundSchema` instead. */
  export const inboundSchema =
    ResponsesStreamChunkResponseFileSearchCallCompleted$inboundSchema;
  /** @deprecated use `ResponsesStreamChunkResponseFileSearchCallCompleted$outboundSchema` instead. */
  export const outboundSchema =
    ResponsesStreamChunkResponseFileSearchCallCompleted$outboundSchema;
  /** @deprecated use `ResponsesStreamChunkResponseFileSearchCallCompleted$Outbound` instead. */
  export type Outbound =
    ResponsesStreamChunkResponseFileSearchCallCompleted$Outbound;
}

export function responsesStreamChunkResponseFileSearchCallCompletedToJSON(
  responsesStreamChunkResponseFileSearchCallCompleted:
    ResponsesStreamChunkResponseFileSearchCallCompleted,
): string {
  return JSON.stringify(
    ResponsesStreamChunkResponseFileSearchCallCompleted$outboundSchema.parse(
      responsesStreamChunkResponseFileSearchCallCompleted,
    ),
  );
}

export function responsesStreamChunkResponseFileSearchCallCompletedFromJSON(
  jsonString: string,
): SafeParseResult<
  ResponsesStreamChunkResponseFileSearchCallCompleted,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ResponsesStreamChunkResponseFileSearchCallCompleted$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ResponsesStreamChunkResponseFileSearchCallCompleted' from JSON`,
  );
}

/** @internal */
export const TypeResponseFileSearchCallSearching$inboundSchema: z.ZodNativeEnum<
  typeof TypeResponseFileSearchCallSearching
> = z.nativeEnum(TypeResponseFileSearchCallSearching);

/** @internal */
export const TypeResponseFileSearchCallSearching$outboundSchema:
  z.ZodNativeEnum<typeof TypeResponseFileSearchCallSearching> =
    TypeResponseFileSearchCallSearching$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeResponseFileSearchCallSearching$ {
  /** @deprecated use `TypeResponseFileSearchCallSearching$inboundSchema` instead. */
  export const inboundSchema =
    TypeResponseFileSearchCallSearching$inboundSchema;
  /** @deprecated use `TypeResponseFileSearchCallSearching$outboundSchema` instead. */
  export const outboundSchema =
    TypeResponseFileSearchCallSearching$outboundSchema;
}

/** @internal */
export const ResponsesStreamChunkResponseFileSearchCallSearching$inboundSchema:
  z.ZodType<
    ResponsesStreamChunkResponseFileSearchCallSearching,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: TypeResponseFileSearchCallSearching$inboundSchema,
    item_id: z.string(),
    output_index: z.number(),
    query: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "item_id": "itemId",
      "output_index": "outputIndex",
    });
  });

/** @internal */
export type ResponsesStreamChunkResponseFileSearchCallSearching$Outbound = {
  type: string;
  item_id: string;
  output_index: number;
  query: string;
};

/** @internal */
export const ResponsesStreamChunkResponseFileSearchCallSearching$outboundSchema:
  z.ZodType<
    ResponsesStreamChunkResponseFileSearchCallSearching$Outbound,
    z.ZodTypeDef,
    ResponsesStreamChunkResponseFileSearchCallSearching
  > = z.object({
    type: TypeResponseFileSearchCallSearching$outboundSchema,
    itemId: z.string(),
    outputIndex: z.number(),
    query: z.string(),
  }).transform((v) => {
    return remap$(v, {
      itemId: "item_id",
      outputIndex: "output_index",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesStreamChunkResponseFileSearchCallSearching$ {
  /** @deprecated use `ResponsesStreamChunkResponseFileSearchCallSearching$inboundSchema` instead. */
  export const inboundSchema =
    ResponsesStreamChunkResponseFileSearchCallSearching$inboundSchema;
  /** @deprecated use `ResponsesStreamChunkResponseFileSearchCallSearching$outboundSchema` instead. */
  export const outboundSchema =
    ResponsesStreamChunkResponseFileSearchCallSearching$outboundSchema;
  /** @deprecated use `ResponsesStreamChunkResponseFileSearchCallSearching$Outbound` instead. */
  export type Outbound =
    ResponsesStreamChunkResponseFileSearchCallSearching$Outbound;
}

export function responsesStreamChunkResponseFileSearchCallSearchingToJSON(
  responsesStreamChunkResponseFileSearchCallSearching:
    ResponsesStreamChunkResponseFileSearchCallSearching,
): string {
  return JSON.stringify(
    ResponsesStreamChunkResponseFileSearchCallSearching$outboundSchema.parse(
      responsesStreamChunkResponseFileSearchCallSearching,
    ),
  );
}

export function responsesStreamChunkResponseFileSearchCallSearchingFromJSON(
  jsonString: string,
): SafeParseResult<
  ResponsesStreamChunkResponseFileSearchCallSearching,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ResponsesStreamChunkResponseFileSearchCallSearching$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ResponsesStreamChunkResponseFileSearchCallSearching' from JSON`,
  );
}

/** @internal */
export const TypeResponseFileSearchCallInProgress$inboundSchema:
  z.ZodNativeEnum<typeof TypeResponseFileSearchCallInProgress> = z.nativeEnum(
    TypeResponseFileSearchCallInProgress,
  );

/** @internal */
export const TypeResponseFileSearchCallInProgress$outboundSchema:
  z.ZodNativeEnum<typeof TypeResponseFileSearchCallInProgress> =
    TypeResponseFileSearchCallInProgress$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeResponseFileSearchCallInProgress$ {
  /** @deprecated use `TypeResponseFileSearchCallInProgress$inboundSchema` instead. */
  export const inboundSchema =
    TypeResponseFileSearchCallInProgress$inboundSchema;
  /** @deprecated use `TypeResponseFileSearchCallInProgress$outboundSchema` instead. */
  export const outboundSchema =
    TypeResponseFileSearchCallInProgress$outboundSchema;
}

/** @internal */
export const ResponsesStreamChunkResponseFileSearchCallInProgress$inboundSchema:
  z.ZodType<
    ResponsesStreamChunkResponseFileSearchCallInProgress,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: TypeResponseFileSearchCallInProgress$inboundSchema,
    item_id: z.string(),
    output_index: z.number(),
  }).transform((v) => {
    return remap$(v, {
      "item_id": "itemId",
      "output_index": "outputIndex",
    });
  });

/** @internal */
export type ResponsesStreamChunkResponseFileSearchCallInProgress$Outbound = {
  type: string;
  item_id: string;
  output_index: number;
};

/** @internal */
export const ResponsesStreamChunkResponseFileSearchCallInProgress$outboundSchema:
  z.ZodType<
    ResponsesStreamChunkResponseFileSearchCallInProgress$Outbound,
    z.ZodTypeDef,
    ResponsesStreamChunkResponseFileSearchCallInProgress
  > = z.object({
    type: TypeResponseFileSearchCallInProgress$outboundSchema,
    itemId: z.string(),
    outputIndex: z.number(),
  }).transform((v) => {
    return remap$(v, {
      itemId: "item_id",
      outputIndex: "output_index",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesStreamChunkResponseFileSearchCallInProgress$ {
  /** @deprecated use `ResponsesStreamChunkResponseFileSearchCallInProgress$inboundSchema` instead. */
  export const inboundSchema =
    ResponsesStreamChunkResponseFileSearchCallInProgress$inboundSchema;
  /** @deprecated use `ResponsesStreamChunkResponseFileSearchCallInProgress$outboundSchema` instead. */
  export const outboundSchema =
    ResponsesStreamChunkResponseFileSearchCallInProgress$outboundSchema;
  /** @deprecated use `ResponsesStreamChunkResponseFileSearchCallInProgress$Outbound` instead. */
  export type Outbound =
    ResponsesStreamChunkResponseFileSearchCallInProgress$Outbound;
}

export function responsesStreamChunkResponseFileSearchCallInProgressToJSON(
  responsesStreamChunkResponseFileSearchCallInProgress:
    ResponsesStreamChunkResponseFileSearchCallInProgress,
): string {
  return JSON.stringify(
    ResponsesStreamChunkResponseFileSearchCallInProgress$outboundSchema.parse(
      responsesStreamChunkResponseFileSearchCallInProgress,
    ),
  );
}

export function responsesStreamChunkResponseFileSearchCallInProgressFromJSON(
  jsonString: string,
): SafeParseResult<
  ResponsesStreamChunkResponseFileSearchCallInProgress,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ResponsesStreamChunkResponseFileSearchCallInProgress$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ResponsesStreamChunkResponseFileSearchCallInProgress' from JSON`,
  );
}

/** @internal */
export const TypeResponseWebSearchCallCompleted$inboundSchema: z.ZodNativeEnum<
  typeof TypeResponseWebSearchCallCompleted
> = z.nativeEnum(TypeResponseWebSearchCallCompleted);

/** @internal */
export const TypeResponseWebSearchCallCompleted$outboundSchema: z.ZodNativeEnum<
  typeof TypeResponseWebSearchCallCompleted
> = TypeResponseWebSearchCallCompleted$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeResponseWebSearchCallCompleted$ {
  /** @deprecated use `TypeResponseWebSearchCallCompleted$inboundSchema` instead. */
  export const inboundSchema = TypeResponseWebSearchCallCompleted$inboundSchema;
  /** @deprecated use `TypeResponseWebSearchCallCompleted$outboundSchema` instead. */
  export const outboundSchema =
    TypeResponseWebSearchCallCompleted$outboundSchema;
}

/** @internal */
export const ResponsesStreamChunkResponseWebSearchCallCompleted$inboundSchema:
  z.ZodType<
    ResponsesStreamChunkResponseWebSearchCallCompleted,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: TypeResponseWebSearchCallCompleted$inboundSchema,
    item_id: z.string(),
    output_index: z.number(),
    sequence_number: z.number(),
  }).transform((v) => {
    return remap$(v, {
      "item_id": "itemId",
      "output_index": "outputIndex",
      "sequence_number": "sequenceNumber",
    });
  });

/** @internal */
export type ResponsesStreamChunkResponseWebSearchCallCompleted$Outbound = {
  type: string;
  item_id: string;
  output_index: number;
  sequence_number: number;
};

/** @internal */
export const ResponsesStreamChunkResponseWebSearchCallCompleted$outboundSchema:
  z.ZodType<
    ResponsesStreamChunkResponseWebSearchCallCompleted$Outbound,
    z.ZodTypeDef,
    ResponsesStreamChunkResponseWebSearchCallCompleted
  > = z.object({
    type: TypeResponseWebSearchCallCompleted$outboundSchema,
    itemId: z.string(),
    outputIndex: z.number(),
    sequenceNumber: z.number(),
  }).transform((v) => {
    return remap$(v, {
      itemId: "item_id",
      outputIndex: "output_index",
      sequenceNumber: "sequence_number",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesStreamChunkResponseWebSearchCallCompleted$ {
  /** @deprecated use `ResponsesStreamChunkResponseWebSearchCallCompleted$inboundSchema` instead. */
  export const inboundSchema =
    ResponsesStreamChunkResponseWebSearchCallCompleted$inboundSchema;
  /** @deprecated use `ResponsesStreamChunkResponseWebSearchCallCompleted$outboundSchema` instead. */
  export const outboundSchema =
    ResponsesStreamChunkResponseWebSearchCallCompleted$outboundSchema;
  /** @deprecated use `ResponsesStreamChunkResponseWebSearchCallCompleted$Outbound` instead. */
  export type Outbound =
    ResponsesStreamChunkResponseWebSearchCallCompleted$Outbound;
}

export function responsesStreamChunkResponseWebSearchCallCompletedToJSON(
  responsesStreamChunkResponseWebSearchCallCompleted:
    ResponsesStreamChunkResponseWebSearchCallCompleted,
): string {
  return JSON.stringify(
    ResponsesStreamChunkResponseWebSearchCallCompleted$outboundSchema.parse(
      responsesStreamChunkResponseWebSearchCallCompleted,
    ),
  );
}

export function responsesStreamChunkResponseWebSearchCallCompletedFromJSON(
  jsonString: string,
): SafeParseResult<
  ResponsesStreamChunkResponseWebSearchCallCompleted,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ResponsesStreamChunkResponseWebSearchCallCompleted$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ResponsesStreamChunkResponseWebSearchCallCompleted' from JSON`,
  );
}

/** @internal */
export const TypeResponseFunctionCallArgumentsDone$inboundSchema:
  z.ZodNativeEnum<typeof TypeResponseFunctionCallArgumentsDone> = z.nativeEnum(
    TypeResponseFunctionCallArgumentsDone,
  );

/** @internal */
export const TypeResponseFunctionCallArgumentsDone$outboundSchema:
  z.ZodNativeEnum<typeof TypeResponseFunctionCallArgumentsDone> =
    TypeResponseFunctionCallArgumentsDone$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeResponseFunctionCallArgumentsDone$ {
  /** @deprecated use `TypeResponseFunctionCallArgumentsDone$inboundSchema` instead. */
  export const inboundSchema =
    TypeResponseFunctionCallArgumentsDone$inboundSchema;
  /** @deprecated use `TypeResponseFunctionCallArgumentsDone$outboundSchema` instead. */
  export const outboundSchema =
    TypeResponseFunctionCallArgumentsDone$outboundSchema;
}

/** @internal */
export const ResponsesStreamChunkResponseFunctionCallArgumentsDone$inboundSchema:
  z.ZodType<
    ResponsesStreamChunkResponseFunctionCallArgumentsDone,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: TypeResponseFunctionCallArgumentsDone$inboundSchema,
    item_id: z.string(),
    output_index: z.number(),
    sequence_number: z.number(),
    arguments: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "item_id": "itemId",
      "output_index": "outputIndex",
      "sequence_number": "sequenceNumber",
    });
  });

/** @internal */
export type ResponsesStreamChunkResponseFunctionCallArgumentsDone$Outbound = {
  type: string;
  item_id: string;
  output_index: number;
  sequence_number: number;
  arguments: string;
};

/** @internal */
export const ResponsesStreamChunkResponseFunctionCallArgumentsDone$outboundSchema:
  z.ZodType<
    ResponsesStreamChunkResponseFunctionCallArgumentsDone$Outbound,
    z.ZodTypeDef,
    ResponsesStreamChunkResponseFunctionCallArgumentsDone
  > = z.object({
    type: TypeResponseFunctionCallArgumentsDone$outboundSchema,
    itemId: z.string(),
    outputIndex: z.number(),
    sequenceNumber: z.number(),
    arguments: z.string(),
  }).transform((v) => {
    return remap$(v, {
      itemId: "item_id",
      outputIndex: "output_index",
      sequenceNumber: "sequence_number",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesStreamChunkResponseFunctionCallArgumentsDone$ {
  /** @deprecated use `ResponsesStreamChunkResponseFunctionCallArgumentsDone$inboundSchema` instead. */
  export const inboundSchema =
    ResponsesStreamChunkResponseFunctionCallArgumentsDone$inboundSchema;
  /** @deprecated use `ResponsesStreamChunkResponseFunctionCallArgumentsDone$outboundSchema` instead. */
  export const outboundSchema =
    ResponsesStreamChunkResponseFunctionCallArgumentsDone$outboundSchema;
  /** @deprecated use `ResponsesStreamChunkResponseFunctionCallArgumentsDone$Outbound` instead. */
  export type Outbound =
    ResponsesStreamChunkResponseFunctionCallArgumentsDone$Outbound;
}

export function responsesStreamChunkResponseFunctionCallArgumentsDoneToJSON(
  responsesStreamChunkResponseFunctionCallArgumentsDone:
    ResponsesStreamChunkResponseFunctionCallArgumentsDone,
): string {
  return JSON.stringify(
    ResponsesStreamChunkResponseFunctionCallArgumentsDone$outboundSchema.parse(
      responsesStreamChunkResponseFunctionCallArgumentsDone,
    ),
  );
}

export function responsesStreamChunkResponseFunctionCallArgumentsDoneFromJSON(
  jsonString: string,
): SafeParseResult<
  ResponsesStreamChunkResponseFunctionCallArgumentsDone,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ResponsesStreamChunkResponseFunctionCallArgumentsDone$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ResponsesStreamChunkResponseFunctionCallArgumentsDone' from JSON`,
  );
}

/** @internal */
export const TypeResponseReasoningSummaryTextDelta$inboundSchema:
  z.ZodNativeEnum<typeof TypeResponseReasoningSummaryTextDelta> = z.nativeEnum(
    TypeResponseReasoningSummaryTextDelta,
  );

/** @internal */
export const TypeResponseReasoningSummaryTextDelta$outboundSchema:
  z.ZodNativeEnum<typeof TypeResponseReasoningSummaryTextDelta> =
    TypeResponseReasoningSummaryTextDelta$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeResponseReasoningSummaryTextDelta$ {
  /** @deprecated use `TypeResponseReasoningSummaryTextDelta$inboundSchema` instead. */
  export const inboundSchema =
    TypeResponseReasoningSummaryTextDelta$inboundSchema;
  /** @deprecated use `TypeResponseReasoningSummaryTextDelta$outboundSchema` instead. */
  export const outboundSchema =
    TypeResponseReasoningSummaryTextDelta$outboundSchema;
}

/** @internal */
export const ResponsesStreamChunkResponseReasoningSummaryTextDelta$inboundSchema:
  z.ZodType<
    ResponsesStreamChunkResponseReasoningSummaryTextDelta,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: TypeResponseReasoningSummaryTextDelta$inboundSchema,
    item_id: z.string(),
    output_index: z.number(),
    summary_index: z.number(),
    sequence_number: z.number(),
    delta: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "item_id": "itemId",
      "output_index": "outputIndex",
      "summary_index": "summaryIndex",
      "sequence_number": "sequenceNumber",
    });
  });

/** @internal */
export type ResponsesStreamChunkResponseReasoningSummaryTextDelta$Outbound = {
  type: string;
  item_id: string;
  output_index: number;
  summary_index: number;
  sequence_number: number;
  delta: string;
};

/** @internal */
export const ResponsesStreamChunkResponseReasoningSummaryTextDelta$outboundSchema:
  z.ZodType<
    ResponsesStreamChunkResponseReasoningSummaryTextDelta$Outbound,
    z.ZodTypeDef,
    ResponsesStreamChunkResponseReasoningSummaryTextDelta
  > = z.object({
    type: TypeResponseReasoningSummaryTextDelta$outboundSchema,
    itemId: z.string(),
    outputIndex: z.number(),
    summaryIndex: z.number(),
    sequenceNumber: z.number(),
    delta: z.string(),
  }).transform((v) => {
    return remap$(v, {
      itemId: "item_id",
      outputIndex: "output_index",
      summaryIndex: "summary_index",
      sequenceNumber: "sequence_number",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesStreamChunkResponseReasoningSummaryTextDelta$ {
  /** @deprecated use `ResponsesStreamChunkResponseReasoningSummaryTextDelta$inboundSchema` instead. */
  export const inboundSchema =
    ResponsesStreamChunkResponseReasoningSummaryTextDelta$inboundSchema;
  /** @deprecated use `ResponsesStreamChunkResponseReasoningSummaryTextDelta$outboundSchema` instead. */
  export const outboundSchema =
    ResponsesStreamChunkResponseReasoningSummaryTextDelta$outboundSchema;
  /** @deprecated use `ResponsesStreamChunkResponseReasoningSummaryTextDelta$Outbound` instead. */
  export type Outbound =
    ResponsesStreamChunkResponseReasoningSummaryTextDelta$Outbound;
}

export function responsesStreamChunkResponseReasoningSummaryTextDeltaToJSON(
  responsesStreamChunkResponseReasoningSummaryTextDelta:
    ResponsesStreamChunkResponseReasoningSummaryTextDelta,
): string {
  return JSON.stringify(
    ResponsesStreamChunkResponseReasoningSummaryTextDelta$outboundSchema.parse(
      responsesStreamChunkResponseReasoningSummaryTextDelta,
    ),
  );
}

export function responsesStreamChunkResponseReasoningSummaryTextDeltaFromJSON(
  jsonString: string,
): SafeParseResult<
  ResponsesStreamChunkResponseReasoningSummaryTextDelta,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ResponsesStreamChunkResponseReasoningSummaryTextDelta$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ResponsesStreamChunkResponseReasoningSummaryTextDelta' from JSON`,
  );
}

/** @internal */
export const TypeResponseOutputTextAnnotationAdded$inboundSchema:
  z.ZodNativeEnum<typeof TypeResponseOutputTextAnnotationAdded> = z.nativeEnum(
    TypeResponseOutputTextAnnotationAdded,
  );

/** @internal */
export const TypeResponseOutputTextAnnotationAdded$outboundSchema:
  z.ZodNativeEnum<typeof TypeResponseOutputTextAnnotationAdded> =
    TypeResponseOutputTextAnnotationAdded$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeResponseOutputTextAnnotationAdded$ {
  /** @deprecated use `TypeResponseOutputTextAnnotationAdded$inboundSchema` instead. */
  export const inboundSchema =
    TypeResponseOutputTextAnnotationAdded$inboundSchema;
  /** @deprecated use `TypeResponseOutputTextAnnotationAdded$outboundSchema` instead. */
  export const outboundSchema =
    TypeResponseOutputTextAnnotationAdded$outboundSchema;
}

/** @internal */
export const ResponsesStreamChunkTypeURLCitation$inboundSchema: z.ZodNativeEnum<
  typeof ResponsesStreamChunkTypeURLCitation
> = z.nativeEnum(ResponsesStreamChunkTypeURLCitation);

/** @internal */
export const ResponsesStreamChunkTypeURLCitation$outboundSchema:
  z.ZodNativeEnum<typeof ResponsesStreamChunkTypeURLCitation> =
    ResponsesStreamChunkTypeURLCitation$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesStreamChunkTypeURLCitation$ {
  /** @deprecated use `ResponsesStreamChunkTypeURLCitation$inboundSchema` instead. */
  export const inboundSchema =
    ResponsesStreamChunkTypeURLCitation$inboundSchema;
  /** @deprecated use `ResponsesStreamChunkTypeURLCitation$outboundSchema` instead. */
  export const outboundSchema =
    ResponsesStreamChunkTypeURLCitation$outboundSchema;
}

/** @internal */
export const Annotation$inboundSchema: z.ZodType<
  Annotation,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ResponsesStreamChunkTypeURLCitation$inboundSchema,
  url: z.string(),
  title: z.string(),
  start_index: z.number(),
  end_index: z.number(),
}).transform((v) => {
  return remap$(v, {
    "start_index": "startIndex",
    "end_index": "endIndex",
  });
});

/** @internal */
export type Annotation$Outbound = {
  type: string;
  url: string;
  title: string;
  start_index: number;
  end_index: number;
};

/** @internal */
export const Annotation$outboundSchema: z.ZodType<
  Annotation$Outbound,
  z.ZodTypeDef,
  Annotation
> = z.object({
  type: ResponsesStreamChunkTypeURLCitation$outboundSchema,
  url: z.string(),
  title: z.string(),
  startIndex: z.number(),
  endIndex: z.number(),
}).transform((v) => {
  return remap$(v, {
    startIndex: "start_index",
    endIndex: "end_index",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Annotation$ {
  /** @deprecated use `Annotation$inboundSchema` instead. */
  export const inboundSchema = Annotation$inboundSchema;
  /** @deprecated use `Annotation$outboundSchema` instead. */
  export const outboundSchema = Annotation$outboundSchema;
  /** @deprecated use `Annotation$Outbound` instead. */
  export type Outbound = Annotation$Outbound;
}

export function annotationToJSON(annotation: Annotation): string {
  return JSON.stringify(Annotation$outboundSchema.parse(annotation));
}

export function annotationFromJSON(
  jsonString: string,
): SafeParseResult<Annotation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Annotation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Annotation' from JSON`,
  );
}

/** @internal */
export const ResponsesStreamChunkResponseOutputTextAnnotationAdded$inboundSchema:
  z.ZodType<
    ResponsesStreamChunkResponseOutputTextAnnotationAdded,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: TypeResponseOutputTextAnnotationAdded$inboundSchema,
    annotation: z.lazy(() => Annotation$inboundSchema),
  });

/** @internal */
export type ResponsesStreamChunkResponseOutputTextAnnotationAdded$Outbound = {
  type: string;
  annotation: Annotation$Outbound;
};

/** @internal */
export const ResponsesStreamChunkResponseOutputTextAnnotationAdded$outboundSchema:
  z.ZodType<
    ResponsesStreamChunkResponseOutputTextAnnotationAdded$Outbound,
    z.ZodTypeDef,
    ResponsesStreamChunkResponseOutputTextAnnotationAdded
  > = z.object({
    type: TypeResponseOutputTextAnnotationAdded$outboundSchema,
    annotation: z.lazy(() => Annotation$outboundSchema),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesStreamChunkResponseOutputTextAnnotationAdded$ {
  /** @deprecated use `ResponsesStreamChunkResponseOutputTextAnnotationAdded$inboundSchema` instead. */
  export const inboundSchema =
    ResponsesStreamChunkResponseOutputTextAnnotationAdded$inboundSchema;
  /** @deprecated use `ResponsesStreamChunkResponseOutputTextAnnotationAdded$outboundSchema` instead. */
  export const outboundSchema =
    ResponsesStreamChunkResponseOutputTextAnnotationAdded$outboundSchema;
  /** @deprecated use `ResponsesStreamChunkResponseOutputTextAnnotationAdded$Outbound` instead. */
  export type Outbound =
    ResponsesStreamChunkResponseOutputTextAnnotationAdded$Outbound;
}

export function responsesStreamChunkResponseOutputTextAnnotationAddedToJSON(
  responsesStreamChunkResponseOutputTextAnnotationAdded:
    ResponsesStreamChunkResponseOutputTextAnnotationAdded,
): string {
  return JSON.stringify(
    ResponsesStreamChunkResponseOutputTextAnnotationAdded$outboundSchema.parse(
      responsesStreamChunkResponseOutputTextAnnotationAdded,
    ),
  );
}

export function responsesStreamChunkResponseOutputTextAnnotationAddedFromJSON(
  jsonString: string,
): SafeParseResult<
  ResponsesStreamChunkResponseOutputTextAnnotationAdded,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ResponsesStreamChunkResponseOutputTextAnnotationAdded$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ResponsesStreamChunkResponseOutputTextAnnotationAdded' from JSON`,
  );
}

/** @internal */
export const TypeResponseOutputItemAdded$inboundSchema: z.ZodNativeEnum<
  typeof TypeResponseOutputItemAdded
> = z.nativeEnum(TypeResponseOutputItemAdded);

/** @internal */
export const TypeResponseOutputItemAdded$outboundSchema: z.ZodNativeEnum<
  typeof TypeResponseOutputItemAdded
> = TypeResponseOutputItemAdded$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeResponseOutputItemAdded$ {
  /** @deprecated use `TypeResponseOutputItemAdded$inboundSchema` instead. */
  export const inboundSchema = TypeResponseOutputItemAdded$inboundSchema;
  /** @deprecated use `TypeResponseOutputItemAdded$outboundSchema` instead. */
  export const outboundSchema = TypeResponseOutputItemAdded$outboundSchema;
}

/** @internal */
export const ItemTypeWebSearchCall2$inboundSchema: z.ZodNativeEnum<
  typeof ItemTypeWebSearchCall2
> = z.nativeEnum(ItemTypeWebSearchCall2);

/** @internal */
export const ItemTypeWebSearchCall2$outboundSchema: z.ZodNativeEnum<
  typeof ItemTypeWebSearchCall2
> = ItemTypeWebSearchCall2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ItemTypeWebSearchCall2$ {
  /** @deprecated use `ItemTypeWebSearchCall2$inboundSchema` instead. */
  export const inboundSchema = ItemTypeWebSearchCall2$inboundSchema;
  /** @deprecated use `ItemTypeWebSearchCall2$outboundSchema` instead. */
  export const outboundSchema = ItemTypeWebSearchCall2$outboundSchema;
}

/** @internal */
export const ItemStatusEnum4$inboundSchema: z.ZodNativeEnum<
  typeof ItemStatusEnum4
> = z.nativeEnum(ItemStatusEnum4);

/** @internal */
export const ItemStatusEnum4$outboundSchema: z.ZodNativeEnum<
  typeof ItemStatusEnum4
> = ItemStatusEnum4$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ItemStatusEnum4$ {
  /** @deprecated use `ItemStatusEnum4$inboundSchema` instead. */
  export const inboundSchema = ItemStatusEnum4$inboundSchema;
  /** @deprecated use `ItemStatusEnum4$outboundSchema` instead. */
  export const outboundSchema = ItemStatusEnum4$outboundSchema;
}

/** @internal */
export const ItemWebSearchCall2$inboundSchema: z.ZodType<
  ItemWebSearchCall2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ItemTypeWebSearchCall2$inboundSchema,
  id: z.string(),
  status: ItemStatusEnum4$inboundSchema,
});

/** @internal */
export type ItemWebSearchCall2$Outbound = {
  type: string;
  id: string;
  status: string;
};

/** @internal */
export const ItemWebSearchCall2$outboundSchema: z.ZodType<
  ItemWebSearchCall2$Outbound,
  z.ZodTypeDef,
  ItemWebSearchCall2
> = z.object({
  type: ItemTypeWebSearchCall2$outboundSchema,
  id: z.string(),
  status: ItemStatusEnum4$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ItemWebSearchCall2$ {
  /** @deprecated use `ItemWebSearchCall2$inboundSchema` instead. */
  export const inboundSchema = ItemWebSearchCall2$inboundSchema;
  /** @deprecated use `ItemWebSearchCall2$outboundSchema` instead. */
  export const outboundSchema = ItemWebSearchCall2$outboundSchema;
  /** @deprecated use `ItemWebSearchCall2$Outbound` instead. */
  export type Outbound = ItemWebSearchCall2$Outbound;
}

export function itemWebSearchCall2ToJSON(
  itemWebSearchCall2: ItemWebSearchCall2,
): string {
  return JSON.stringify(
    ItemWebSearchCall2$outboundSchema.parse(itemWebSearchCall2),
  );
}

export function itemWebSearchCall2FromJSON(
  jsonString: string,
): SafeParseResult<ItemWebSearchCall2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ItemWebSearchCall2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ItemWebSearchCall2' from JSON`,
  );
}

/** @internal */
export const ItemTypeImageGenerationCall$inboundSchema: z.ZodNativeEnum<
  typeof ItemTypeImageGenerationCall
> = z.nativeEnum(ItemTypeImageGenerationCall);

/** @internal */
export const ItemTypeImageGenerationCall$outboundSchema: z.ZodNativeEnum<
  typeof ItemTypeImageGenerationCall
> = ItemTypeImageGenerationCall$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ItemTypeImageGenerationCall$ {
  /** @deprecated use `ItemTypeImageGenerationCall$inboundSchema` instead. */
  export const inboundSchema = ItemTypeImageGenerationCall$inboundSchema;
  /** @deprecated use `ItemTypeImageGenerationCall$outboundSchema` instead. */
  export const outboundSchema = ItemTypeImageGenerationCall$outboundSchema;
}

/** @internal */
export const ItemStatusEnum3$inboundSchema: z.ZodNativeEnum<
  typeof ItemStatusEnum3
> = z.nativeEnum(ItemStatusEnum3);

/** @internal */
export const ItemStatusEnum3$outboundSchema: z.ZodNativeEnum<
  typeof ItemStatusEnum3
> = ItemStatusEnum3$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ItemStatusEnum3$ {
  /** @deprecated use `ItemStatusEnum3$inboundSchema` instead. */
  export const inboundSchema = ItemStatusEnum3$inboundSchema;
  /** @deprecated use `ItemStatusEnum3$outboundSchema` instead. */
  export const outboundSchema = ItemStatusEnum3$outboundSchema;
}

/** @internal */
export const ItemImageGenerationCall$inboundSchema: z.ZodType<
  ItemImageGenerationCall,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ItemTypeImageGenerationCall$inboundSchema,
  id: z.string(),
  status: ItemStatusEnum3$inboundSchema,
});

/** @internal */
export type ItemImageGenerationCall$Outbound = {
  type: string;
  id: string;
  status: string;
};

/** @internal */
export const ItemImageGenerationCall$outboundSchema: z.ZodType<
  ItemImageGenerationCall$Outbound,
  z.ZodTypeDef,
  ItemImageGenerationCall
> = z.object({
  type: ItemTypeImageGenerationCall$outboundSchema,
  id: z.string(),
  status: ItemStatusEnum3$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ItemImageGenerationCall$ {
  /** @deprecated use `ItemImageGenerationCall$inboundSchema` instead. */
  export const inboundSchema = ItemImageGenerationCall$inboundSchema;
  /** @deprecated use `ItemImageGenerationCall$outboundSchema` instead. */
  export const outboundSchema = ItemImageGenerationCall$outboundSchema;
  /** @deprecated use `ItemImageGenerationCall$Outbound` instead. */
  export type Outbound = ItemImageGenerationCall$Outbound;
}

export function itemImageGenerationCallToJSON(
  itemImageGenerationCall: ItemImageGenerationCall,
): string {
  return JSON.stringify(
    ItemImageGenerationCall$outboundSchema.parse(itemImageGenerationCall),
  );
}

export function itemImageGenerationCallFromJSON(
  jsonString: string,
): SafeParseResult<ItemImageGenerationCall, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ItemImageGenerationCall$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ItemImageGenerationCall' from JSON`,
  );
}

/** @internal */
export const ItemTypeReasoning2$inboundSchema: z.ZodNativeEnum<
  typeof ItemTypeReasoning2
> = z.nativeEnum(ItemTypeReasoning2);

/** @internal */
export const ItemTypeReasoning2$outboundSchema: z.ZodNativeEnum<
  typeof ItemTypeReasoning2
> = ItemTypeReasoning2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ItemTypeReasoning2$ {
  /** @deprecated use `ItemTypeReasoning2$inboundSchema` instead. */
  export const inboundSchema = ItemTypeReasoning2$inboundSchema;
  /** @deprecated use `ItemTypeReasoning2$outboundSchema` instead. */
  export const outboundSchema = ItemTypeReasoning2$outboundSchema;
}

/** @internal */
export const ItemTypeSummaryText2$inboundSchema: z.ZodNativeEnum<
  typeof ItemTypeSummaryText2
> = z.nativeEnum(ItemTypeSummaryText2);

/** @internal */
export const ItemTypeSummaryText2$outboundSchema: z.ZodNativeEnum<
  typeof ItemTypeSummaryText2
> = ItemTypeSummaryText2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ItemTypeSummaryText2$ {
  /** @deprecated use `ItemTypeSummaryText2$inboundSchema` instead. */
  export const inboundSchema = ItemTypeSummaryText2$inboundSchema;
  /** @deprecated use `ItemTypeSummaryText2$outboundSchema` instead. */
  export const outboundSchema = ItemTypeSummaryText2$outboundSchema;
}

/** @internal */
export const ResponsesStreamChunkSummary2$inboundSchema: z.ZodType<
  ResponsesStreamChunkSummary2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ItemTypeSummaryText2$inboundSchema,
  text: z.string(),
});

/** @internal */
export type ResponsesStreamChunkSummary2$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const ResponsesStreamChunkSummary2$outboundSchema: z.ZodType<
  ResponsesStreamChunkSummary2$Outbound,
  z.ZodTypeDef,
  ResponsesStreamChunkSummary2
> = z.object({
  type: ItemTypeSummaryText2$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesStreamChunkSummary2$ {
  /** @deprecated use `ResponsesStreamChunkSummary2$inboundSchema` instead. */
  export const inboundSchema = ResponsesStreamChunkSummary2$inboundSchema;
  /** @deprecated use `ResponsesStreamChunkSummary2$outboundSchema` instead. */
  export const outboundSchema = ResponsesStreamChunkSummary2$outboundSchema;
  /** @deprecated use `ResponsesStreamChunkSummary2$Outbound` instead. */
  export type Outbound = ResponsesStreamChunkSummary2$Outbound;
}

export function responsesStreamChunkSummary2ToJSON(
  responsesStreamChunkSummary2: ResponsesStreamChunkSummary2,
): string {
  return JSON.stringify(
    ResponsesStreamChunkSummary2$outboundSchema.parse(
      responsesStreamChunkSummary2,
    ),
  );
}

export function responsesStreamChunkSummary2FromJSON(
  jsonString: string,
): SafeParseResult<ResponsesStreamChunkSummary2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponsesStreamChunkSummary2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponsesStreamChunkSummary2' from JSON`,
  );
}

/** @internal */
export const ItemReasoning2$inboundSchema: z.ZodType<
  ItemReasoning2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ItemTypeReasoning2$inboundSchema,
  id: z.string(),
  summary: z.array(z.lazy(() => ResponsesStreamChunkSummary2$inboundSchema)),
});

/** @internal */
export type ItemReasoning2$Outbound = {
  type: string;
  id: string;
  summary: Array<ResponsesStreamChunkSummary2$Outbound>;
};

/** @internal */
export const ItemReasoning2$outboundSchema: z.ZodType<
  ItemReasoning2$Outbound,
  z.ZodTypeDef,
  ItemReasoning2
> = z.object({
  type: ItemTypeReasoning2$outboundSchema,
  id: z.string(),
  summary: z.array(z.lazy(() => ResponsesStreamChunkSummary2$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ItemReasoning2$ {
  /** @deprecated use `ItemReasoning2$inboundSchema` instead. */
  export const inboundSchema = ItemReasoning2$inboundSchema;
  /** @deprecated use `ItemReasoning2$outboundSchema` instead. */
  export const outboundSchema = ItemReasoning2$outboundSchema;
  /** @deprecated use `ItemReasoning2$Outbound` instead. */
  export type Outbound = ItemReasoning2$Outbound;
}

export function itemReasoning2ToJSON(itemReasoning2: ItemReasoning2): string {
  return JSON.stringify(ItemReasoning2$outboundSchema.parse(itemReasoning2));
}

export function itemReasoning2FromJSON(
  jsonString: string,
): SafeParseResult<ItemReasoning2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ItemReasoning2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ItemReasoning2' from JSON`,
  );
}

/** @internal */
export const ItemTypeFunctionCall2$inboundSchema: z.ZodNativeEnum<
  typeof ItemTypeFunctionCall2
> = z.nativeEnum(ItemTypeFunctionCall2);

/** @internal */
export const ItemTypeFunctionCall2$outboundSchema: z.ZodNativeEnum<
  typeof ItemTypeFunctionCall2
> = ItemTypeFunctionCall2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ItemTypeFunctionCall2$ {
  /** @deprecated use `ItemTypeFunctionCall2$inboundSchema` instead. */
  export const inboundSchema = ItemTypeFunctionCall2$inboundSchema;
  /** @deprecated use `ItemTypeFunctionCall2$outboundSchema` instead. */
  export const outboundSchema = ItemTypeFunctionCall2$outboundSchema;
}

/** @internal */
export const ItemFunctionCall2$inboundSchema: z.ZodType<
  ItemFunctionCall2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ItemTypeFunctionCall2$inboundSchema,
  id: z.string(),
  call_id: z.string(),
  name: z.string(),
  arguments: z.string(),
}).transform((v) => {
  return remap$(v, {
    "call_id": "callId",
  });
});

/** @internal */
export type ItemFunctionCall2$Outbound = {
  type: string;
  id: string;
  call_id: string;
  name: string;
  arguments: string;
};

/** @internal */
export const ItemFunctionCall2$outboundSchema: z.ZodType<
  ItemFunctionCall2$Outbound,
  z.ZodTypeDef,
  ItemFunctionCall2
> = z.object({
  type: ItemTypeFunctionCall2$outboundSchema,
  id: z.string(),
  callId: z.string(),
  name: z.string(),
  arguments: z.string(),
}).transform((v) => {
  return remap$(v, {
    callId: "call_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ItemFunctionCall2$ {
  /** @deprecated use `ItemFunctionCall2$inboundSchema` instead. */
  export const inboundSchema = ItemFunctionCall2$inboundSchema;
  /** @deprecated use `ItemFunctionCall2$outboundSchema` instead. */
  export const outboundSchema = ItemFunctionCall2$outboundSchema;
  /** @deprecated use `ItemFunctionCall2$Outbound` instead. */
  export type Outbound = ItemFunctionCall2$Outbound;
}

export function itemFunctionCall2ToJSON(
  itemFunctionCall2: ItemFunctionCall2,
): string {
  return JSON.stringify(
    ItemFunctionCall2$outboundSchema.parse(itemFunctionCall2),
  );
}

export function itemFunctionCall2FromJSON(
  jsonString: string,
): SafeParseResult<ItemFunctionCall2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ItemFunctionCall2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ItemFunctionCall2' from JSON`,
  );
}

/** @internal */
export const ItemTypeMessage2$inboundSchema: z.ZodNativeEnum<
  typeof ItemTypeMessage2
> = z.nativeEnum(ItemTypeMessage2);

/** @internal */
export const ItemTypeMessage2$outboundSchema: z.ZodNativeEnum<
  typeof ItemTypeMessage2
> = ItemTypeMessage2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ItemTypeMessage2$ {
  /** @deprecated use `ItemTypeMessage2$inboundSchema` instead. */
  export const inboundSchema = ItemTypeMessage2$inboundSchema;
  /** @deprecated use `ItemTypeMessage2$outboundSchema` instead. */
  export const outboundSchema = ItemTypeMessage2$outboundSchema;
}

/** @internal */
export const ItemMessage$inboundSchema: z.ZodType<
  ItemMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ItemTypeMessage2$inboundSchema,
});

/** @internal */
export type ItemMessage$Outbound = {
  type: string;
};

/** @internal */
export const ItemMessage$outboundSchema: z.ZodType<
  ItemMessage$Outbound,
  z.ZodTypeDef,
  ItemMessage
> = z.object({
  type: ItemTypeMessage2$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ItemMessage$ {
  /** @deprecated use `ItemMessage$inboundSchema` instead. */
  export const inboundSchema = ItemMessage$inboundSchema;
  /** @deprecated use `ItemMessage$outboundSchema` instead. */
  export const outboundSchema = ItemMessage$outboundSchema;
  /** @deprecated use `ItemMessage$Outbound` instead. */
  export type Outbound = ItemMessage$Outbound;
}

export function itemMessageToJSON(itemMessage: ItemMessage): string {
  return JSON.stringify(ItemMessage$outboundSchema.parse(itemMessage));
}

export function itemMessageFromJSON(
  jsonString: string,
): SafeParseResult<ItemMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ItemMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ItemMessage' from JSON`,
  );
}

/** @internal */
export const ItemUnion2$inboundSchema: z.ZodType<
  ItemUnion2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ItemFunctionCall2$inboundSchema),
  z.lazy(() => ItemReasoning2$inboundSchema),
  z.lazy(() => ItemImageGenerationCall$inboundSchema),
  z.lazy(() => ItemWebSearchCall2$inboundSchema),
  z.lazy(() => ItemMessage$inboundSchema),
]);

/** @internal */
export type ItemUnion2$Outbound =
  | ItemFunctionCall2$Outbound
  | ItemReasoning2$Outbound
  | ItemImageGenerationCall$Outbound
  | ItemWebSearchCall2$Outbound
  | ItemMessage$Outbound;

/** @internal */
export const ItemUnion2$outboundSchema: z.ZodType<
  ItemUnion2$Outbound,
  z.ZodTypeDef,
  ItemUnion2
> = z.union([
  z.lazy(() => ItemFunctionCall2$outboundSchema),
  z.lazy(() => ItemReasoning2$outboundSchema),
  z.lazy(() => ItemImageGenerationCall$outboundSchema),
  z.lazy(() => ItemWebSearchCall2$outboundSchema),
  z.lazy(() => ItemMessage$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ItemUnion2$ {
  /** @deprecated use `ItemUnion2$inboundSchema` instead. */
  export const inboundSchema = ItemUnion2$inboundSchema;
  /** @deprecated use `ItemUnion2$outboundSchema` instead. */
  export const outboundSchema = ItemUnion2$outboundSchema;
  /** @deprecated use `ItemUnion2$Outbound` instead. */
  export type Outbound = ItemUnion2$Outbound;
}

export function itemUnion2ToJSON(itemUnion2: ItemUnion2): string {
  return JSON.stringify(ItemUnion2$outboundSchema.parse(itemUnion2));
}

export function itemUnion2FromJSON(
  jsonString: string,
): SafeParseResult<ItemUnion2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ItemUnion2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ItemUnion2' from JSON`,
  );
}

/** @internal */
export const ResponsesStreamChunkResponseOutputItemAdded$inboundSchema:
  z.ZodType<
    ResponsesStreamChunkResponseOutputItemAdded,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: TypeResponseOutputItemAdded$inboundSchema,
    output_index: z.number(),
    item: z.union([
      z.lazy(() => ItemFunctionCall2$inboundSchema),
      z.lazy(() => ItemReasoning2$inboundSchema),
      z.lazy(() => ItemImageGenerationCall$inboundSchema),
      z.lazy(() => ItemWebSearchCall2$inboundSchema),
      z.lazy(() => ItemMessage$inboundSchema),
    ]),
  }).transform((v) => {
    return remap$(v, {
      "output_index": "outputIndex",
    });
  });

/** @internal */
export type ResponsesStreamChunkResponseOutputItemAdded$Outbound = {
  type: string;
  output_index: number;
  item:
    | ItemFunctionCall2$Outbound
    | ItemReasoning2$Outbound
    | ItemImageGenerationCall$Outbound
    | ItemWebSearchCall2$Outbound
    | ItemMessage$Outbound;
};

/** @internal */
export const ResponsesStreamChunkResponseOutputItemAdded$outboundSchema:
  z.ZodType<
    ResponsesStreamChunkResponseOutputItemAdded$Outbound,
    z.ZodTypeDef,
    ResponsesStreamChunkResponseOutputItemAdded
  > = z.object({
    type: TypeResponseOutputItemAdded$outboundSchema,
    outputIndex: z.number(),
    item: z.union([
      z.lazy(() => ItemFunctionCall2$outboundSchema),
      z.lazy(() => ItemReasoning2$outboundSchema),
      z.lazy(() => ItemImageGenerationCall$outboundSchema),
      z.lazy(() => ItemWebSearchCall2$outboundSchema),
      z.lazy(() => ItemMessage$outboundSchema),
    ]),
  }).transform((v) => {
    return remap$(v, {
      outputIndex: "output_index",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesStreamChunkResponseOutputItemAdded$ {
  /** @deprecated use `ResponsesStreamChunkResponseOutputItemAdded$inboundSchema` instead. */
  export const inboundSchema =
    ResponsesStreamChunkResponseOutputItemAdded$inboundSchema;
  /** @deprecated use `ResponsesStreamChunkResponseOutputItemAdded$outboundSchema` instead. */
  export const outboundSchema =
    ResponsesStreamChunkResponseOutputItemAdded$outboundSchema;
  /** @deprecated use `ResponsesStreamChunkResponseOutputItemAdded$Outbound` instead. */
  export type Outbound = ResponsesStreamChunkResponseOutputItemAdded$Outbound;
}

export function responsesStreamChunkResponseOutputItemAddedToJSON(
  responsesStreamChunkResponseOutputItemAdded:
    ResponsesStreamChunkResponseOutputItemAdded,
): string {
  return JSON.stringify(
    ResponsesStreamChunkResponseOutputItemAdded$outboundSchema.parse(
      responsesStreamChunkResponseOutputItemAdded,
    ),
  );
}

export function responsesStreamChunkResponseOutputItemAddedFromJSON(
  jsonString: string,
): SafeParseResult<
  ResponsesStreamChunkResponseOutputItemAdded,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ResponsesStreamChunkResponseOutputItemAdded$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ResponsesStreamChunkResponseOutputItemAdded' from JSON`,
  );
}

/** @internal */
export const TypeResponseFunctionCallArgumentsDelta$inboundSchema:
  z.ZodNativeEnum<typeof TypeResponseFunctionCallArgumentsDelta> = z.nativeEnum(
    TypeResponseFunctionCallArgumentsDelta,
  );

/** @internal */
export const TypeResponseFunctionCallArgumentsDelta$outboundSchema:
  z.ZodNativeEnum<typeof TypeResponseFunctionCallArgumentsDelta> =
    TypeResponseFunctionCallArgumentsDelta$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeResponseFunctionCallArgumentsDelta$ {
  /** @deprecated use `TypeResponseFunctionCallArgumentsDelta$inboundSchema` instead. */
  export const inboundSchema =
    TypeResponseFunctionCallArgumentsDelta$inboundSchema;
  /** @deprecated use `TypeResponseFunctionCallArgumentsDelta$outboundSchema` instead. */
  export const outboundSchema =
    TypeResponseFunctionCallArgumentsDelta$outboundSchema;
}

/** @internal */
export const ResponsesStreamChunkResponseFunctionCallArgumentsDelta$inboundSchema:
  z.ZodType<
    ResponsesStreamChunkResponseFunctionCallArgumentsDelta,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: TypeResponseFunctionCallArgumentsDelta$inboundSchema,
    item_id: z.string(),
    output_index: z.number(),
    sequence_number: z.number(),
    delta: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "item_id": "itemId",
      "output_index": "outputIndex",
      "sequence_number": "sequenceNumber",
    });
  });

/** @internal */
export type ResponsesStreamChunkResponseFunctionCallArgumentsDelta$Outbound = {
  type: string;
  item_id: string;
  output_index: number;
  sequence_number: number;
  delta: string;
};

/** @internal */
export const ResponsesStreamChunkResponseFunctionCallArgumentsDelta$outboundSchema:
  z.ZodType<
    ResponsesStreamChunkResponseFunctionCallArgumentsDelta$Outbound,
    z.ZodTypeDef,
    ResponsesStreamChunkResponseFunctionCallArgumentsDelta
  > = z.object({
    type: TypeResponseFunctionCallArgumentsDelta$outboundSchema,
    itemId: z.string(),
    outputIndex: z.number(),
    sequenceNumber: z.number(),
    delta: z.string(),
  }).transform((v) => {
    return remap$(v, {
      itemId: "item_id",
      outputIndex: "output_index",
      sequenceNumber: "sequence_number",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesStreamChunkResponseFunctionCallArgumentsDelta$ {
  /** @deprecated use `ResponsesStreamChunkResponseFunctionCallArgumentsDelta$inboundSchema` instead. */
  export const inboundSchema =
    ResponsesStreamChunkResponseFunctionCallArgumentsDelta$inboundSchema;
  /** @deprecated use `ResponsesStreamChunkResponseFunctionCallArgumentsDelta$outboundSchema` instead. */
  export const outboundSchema =
    ResponsesStreamChunkResponseFunctionCallArgumentsDelta$outboundSchema;
  /** @deprecated use `ResponsesStreamChunkResponseFunctionCallArgumentsDelta$Outbound` instead. */
  export type Outbound =
    ResponsesStreamChunkResponseFunctionCallArgumentsDelta$Outbound;
}

export function responsesStreamChunkResponseFunctionCallArgumentsDeltaToJSON(
  responsesStreamChunkResponseFunctionCallArgumentsDelta:
    ResponsesStreamChunkResponseFunctionCallArgumentsDelta,
): string {
  return JSON.stringify(
    ResponsesStreamChunkResponseFunctionCallArgumentsDelta$outboundSchema.parse(
      responsesStreamChunkResponseFunctionCallArgumentsDelta,
    ),
  );
}

export function responsesStreamChunkResponseFunctionCallArgumentsDeltaFromJSON(
  jsonString: string,
): SafeParseResult<
  ResponsesStreamChunkResponseFunctionCallArgumentsDelta,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ResponsesStreamChunkResponseFunctionCallArgumentsDelta$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'ResponsesStreamChunkResponseFunctionCallArgumentsDelta' from JSON`,
  );
}

/** @internal */
export const TypeResponseOutputItemDone$inboundSchema: z.ZodNativeEnum<
  typeof TypeResponseOutputItemDone
> = z.nativeEnum(TypeResponseOutputItemDone);

/** @internal */
export const TypeResponseOutputItemDone$outboundSchema: z.ZodNativeEnum<
  typeof TypeResponseOutputItemDone
> = TypeResponseOutputItemDone$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeResponseOutputItemDone$ {
  /** @deprecated use `TypeResponseOutputItemDone$inboundSchema` instead. */
  export const inboundSchema = TypeResponseOutputItemDone$inboundSchema;
  /** @deprecated use `TypeResponseOutputItemDone$outboundSchema` instead. */
  export const outboundSchema = TypeResponseOutputItemDone$outboundSchema;
}

/** @internal */
export const ItemTypeFileSearchCall$inboundSchema: z.ZodNativeEnum<
  typeof ItemTypeFileSearchCall
> = z.nativeEnum(ItemTypeFileSearchCall);

/** @internal */
export const ItemTypeFileSearchCall$outboundSchema: z.ZodNativeEnum<
  typeof ItemTypeFileSearchCall
> = ItemTypeFileSearchCall$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ItemTypeFileSearchCall$ {
  /** @deprecated use `ItemTypeFileSearchCall$inboundSchema` instead. */
  export const inboundSchema = ItemTypeFileSearchCall$inboundSchema;
  /** @deprecated use `ItemTypeFileSearchCall$outboundSchema` instead. */
  export const outboundSchema = ItemTypeFileSearchCall$outboundSchema;
}

/** @internal */
export const ItemStatusEnum2$inboundSchema: z.ZodNativeEnum<
  typeof ItemStatusEnum2
> = z.nativeEnum(ItemStatusEnum2);

/** @internal */
export const ItemStatusEnum2$outboundSchema: z.ZodNativeEnum<
  typeof ItemStatusEnum2
> = ItemStatusEnum2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ItemStatusEnum2$ {
  /** @deprecated use `ItemStatusEnum2$inboundSchema` instead. */
  export const inboundSchema = ItemStatusEnum2$inboundSchema;
  /** @deprecated use `ItemStatusEnum2$outboundSchema` instead. */
  export const outboundSchema = ItemStatusEnum2$outboundSchema;
}

/** @internal */
export const ItemFileSearchCall$inboundSchema: z.ZodType<
  ItemFileSearchCall,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ItemTypeFileSearchCall$inboundSchema,
  id: z.string(),
  queries: z.array(z.string()),
  status: ItemStatusEnum2$inboundSchema,
});

/** @internal */
export type ItemFileSearchCall$Outbound = {
  type: string;
  id: string;
  queries: Array<string>;
  status: string;
};

/** @internal */
export const ItemFileSearchCall$outboundSchema: z.ZodType<
  ItemFileSearchCall$Outbound,
  z.ZodTypeDef,
  ItemFileSearchCall
> = z.object({
  type: ItemTypeFileSearchCall$outboundSchema,
  id: z.string(),
  queries: z.array(z.string()),
  status: ItemStatusEnum2$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ItemFileSearchCall$ {
  /** @deprecated use `ItemFileSearchCall$inboundSchema` instead. */
  export const inboundSchema = ItemFileSearchCall$inboundSchema;
  /** @deprecated use `ItemFileSearchCall$outboundSchema` instead. */
  export const outboundSchema = ItemFileSearchCall$outboundSchema;
  /** @deprecated use `ItemFileSearchCall$Outbound` instead. */
  export type Outbound = ItemFileSearchCall$Outbound;
}

export function itemFileSearchCallToJSON(
  itemFileSearchCall: ItemFileSearchCall,
): string {
  return JSON.stringify(
    ItemFileSearchCall$outboundSchema.parse(itemFileSearchCall),
  );
}

export function itemFileSearchCallFromJSON(
  jsonString: string,
): SafeParseResult<ItemFileSearchCall, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ItemFileSearchCall$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ItemFileSearchCall' from JSON`,
  );
}

/** @internal */
export const ItemTypeWebSearchCall1$inboundSchema: z.ZodNativeEnum<
  typeof ItemTypeWebSearchCall1
> = z.nativeEnum(ItemTypeWebSearchCall1);

/** @internal */
export const ItemTypeWebSearchCall1$outboundSchema: z.ZodNativeEnum<
  typeof ItemTypeWebSearchCall1
> = ItemTypeWebSearchCall1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ItemTypeWebSearchCall1$ {
  /** @deprecated use `ItemTypeWebSearchCall1$inboundSchema` instead. */
  export const inboundSchema = ItemTypeWebSearchCall1$inboundSchema;
  /** @deprecated use `ItemTypeWebSearchCall1$outboundSchema` instead. */
  export const outboundSchema = ItemTypeWebSearchCall1$outboundSchema;
}

/** @internal */
export const ItemStatusEnum1$inboundSchema: z.ZodNativeEnum<
  typeof ItemStatusEnum1
> = z.nativeEnum(ItemStatusEnum1);

/** @internal */
export const ItemStatusEnum1$outboundSchema: z.ZodNativeEnum<
  typeof ItemStatusEnum1
> = ItemStatusEnum1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ItemStatusEnum1$ {
  /** @deprecated use `ItemStatusEnum1$inboundSchema` instead. */
  export const inboundSchema = ItemStatusEnum1$inboundSchema;
  /** @deprecated use `ItemStatusEnum1$outboundSchema` instead. */
  export const outboundSchema = ItemStatusEnum1$outboundSchema;
}

/** @internal */
export const ItemWebSearchCall1$inboundSchema: z.ZodType<
  ItemWebSearchCall1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ItemTypeWebSearchCall1$inboundSchema,
  id: z.string(),
  status: ItemStatusEnum1$inboundSchema,
});

/** @internal */
export type ItemWebSearchCall1$Outbound = {
  type: string;
  id: string;
  status: string;
};

/** @internal */
export const ItemWebSearchCall1$outboundSchema: z.ZodType<
  ItemWebSearchCall1$Outbound,
  z.ZodTypeDef,
  ItemWebSearchCall1
> = z.object({
  type: ItemTypeWebSearchCall1$outboundSchema,
  id: z.string(),
  status: ItemStatusEnum1$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ItemWebSearchCall1$ {
  /** @deprecated use `ItemWebSearchCall1$inboundSchema` instead. */
  export const inboundSchema = ItemWebSearchCall1$inboundSchema;
  /** @deprecated use `ItemWebSearchCall1$outboundSchema` instead. */
  export const outboundSchema = ItemWebSearchCall1$outboundSchema;
  /** @deprecated use `ItemWebSearchCall1$Outbound` instead. */
  export type Outbound = ItemWebSearchCall1$Outbound;
}

export function itemWebSearchCall1ToJSON(
  itemWebSearchCall1: ItemWebSearchCall1,
): string {
  return JSON.stringify(
    ItemWebSearchCall1$outboundSchema.parse(itemWebSearchCall1),
  );
}

export function itemWebSearchCall1FromJSON(
  jsonString: string,
): SafeParseResult<ItemWebSearchCall1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ItemWebSearchCall1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ItemWebSearchCall1' from JSON`,
  );
}

/** @internal */
export const ItemTypeReasoning1$inboundSchema: z.ZodNativeEnum<
  typeof ItemTypeReasoning1
> = z.nativeEnum(ItemTypeReasoning1);

/** @internal */
export const ItemTypeReasoning1$outboundSchema: z.ZodNativeEnum<
  typeof ItemTypeReasoning1
> = ItemTypeReasoning1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ItemTypeReasoning1$ {
  /** @deprecated use `ItemTypeReasoning1$inboundSchema` instead. */
  export const inboundSchema = ItemTypeReasoning1$inboundSchema;
  /** @deprecated use `ItemTypeReasoning1$outboundSchema` instead. */
  export const outboundSchema = ItemTypeReasoning1$outboundSchema;
}

/** @internal */
export const ItemTypeSummaryText1$inboundSchema: z.ZodNativeEnum<
  typeof ItemTypeSummaryText1
> = z.nativeEnum(ItemTypeSummaryText1);

/** @internal */
export const ItemTypeSummaryText1$outboundSchema: z.ZodNativeEnum<
  typeof ItemTypeSummaryText1
> = ItemTypeSummaryText1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ItemTypeSummaryText1$ {
  /** @deprecated use `ItemTypeSummaryText1$inboundSchema` instead. */
  export const inboundSchema = ItemTypeSummaryText1$inboundSchema;
  /** @deprecated use `ItemTypeSummaryText1$outboundSchema` instead. */
  export const outboundSchema = ItemTypeSummaryText1$outboundSchema;
}

/** @internal */
export const ResponsesStreamChunkSummary1$inboundSchema: z.ZodType<
  ResponsesStreamChunkSummary1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ItemTypeSummaryText1$inboundSchema,
  text: z.string(),
});

/** @internal */
export type ResponsesStreamChunkSummary1$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const ResponsesStreamChunkSummary1$outboundSchema: z.ZodType<
  ResponsesStreamChunkSummary1$Outbound,
  z.ZodTypeDef,
  ResponsesStreamChunkSummary1
> = z.object({
  type: ItemTypeSummaryText1$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesStreamChunkSummary1$ {
  /** @deprecated use `ResponsesStreamChunkSummary1$inboundSchema` instead. */
  export const inboundSchema = ResponsesStreamChunkSummary1$inboundSchema;
  /** @deprecated use `ResponsesStreamChunkSummary1$outboundSchema` instead. */
  export const outboundSchema = ResponsesStreamChunkSummary1$outboundSchema;
  /** @deprecated use `ResponsesStreamChunkSummary1$Outbound` instead. */
  export type Outbound = ResponsesStreamChunkSummary1$Outbound;
}

export function responsesStreamChunkSummary1ToJSON(
  responsesStreamChunkSummary1: ResponsesStreamChunkSummary1,
): string {
  return JSON.stringify(
    ResponsesStreamChunkSummary1$outboundSchema.parse(
      responsesStreamChunkSummary1,
    ),
  );
}

export function responsesStreamChunkSummary1FromJSON(
  jsonString: string,
): SafeParseResult<ResponsesStreamChunkSummary1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponsesStreamChunkSummary1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponsesStreamChunkSummary1' from JSON`,
  );
}

/** @internal */
export const ItemReasoning1$inboundSchema: z.ZodType<
  ItemReasoning1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ItemTypeReasoning1$inboundSchema,
  id: z.string(),
  summary: z.array(z.lazy(() => ResponsesStreamChunkSummary1$inboundSchema)),
  encrypted_content: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "encrypted_content": "encryptedContent",
  });
});

/** @internal */
export type ItemReasoning1$Outbound = {
  type: string;
  id: string;
  summary: Array<ResponsesStreamChunkSummary1$Outbound>;
  encrypted_content?: string | null | undefined;
};

/** @internal */
export const ItemReasoning1$outboundSchema: z.ZodType<
  ItemReasoning1$Outbound,
  z.ZodTypeDef,
  ItemReasoning1
> = z.object({
  type: ItemTypeReasoning1$outboundSchema,
  id: z.string(),
  summary: z.array(z.lazy(() => ResponsesStreamChunkSummary1$outboundSchema)),
  encryptedContent: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    encryptedContent: "encrypted_content",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ItemReasoning1$ {
  /** @deprecated use `ItemReasoning1$inboundSchema` instead. */
  export const inboundSchema = ItemReasoning1$inboundSchema;
  /** @deprecated use `ItemReasoning1$outboundSchema` instead. */
  export const outboundSchema = ItemReasoning1$outboundSchema;
  /** @deprecated use `ItemReasoning1$Outbound` instead. */
  export type Outbound = ItemReasoning1$Outbound;
}

export function itemReasoning1ToJSON(itemReasoning1: ItemReasoning1): string {
  return JSON.stringify(ItemReasoning1$outboundSchema.parse(itemReasoning1));
}

export function itemReasoning1FromJSON(
  jsonString: string,
): SafeParseResult<ItemReasoning1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ItemReasoning1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ItemReasoning1' from JSON`,
  );
}

/** @internal */
export const ItemTypeFunctionCall1$inboundSchema: z.ZodNativeEnum<
  typeof ItemTypeFunctionCall1
> = z.nativeEnum(ItemTypeFunctionCall1);

/** @internal */
export const ItemTypeFunctionCall1$outboundSchema: z.ZodNativeEnum<
  typeof ItemTypeFunctionCall1
> = ItemTypeFunctionCall1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ItemTypeFunctionCall1$ {
  /** @deprecated use `ItemTypeFunctionCall1$inboundSchema` instead. */
  export const inboundSchema = ItemTypeFunctionCall1$inboundSchema;
  /** @deprecated use `ItemTypeFunctionCall1$outboundSchema` instead. */
  export const outboundSchema = ItemTypeFunctionCall1$outboundSchema;
}

/** @internal */
export const ItemFunctionCall1$inboundSchema: z.ZodType<
  ItemFunctionCall1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ItemTypeFunctionCall1$inboundSchema,
  id: z.string().optional(),
  call_id: z.string(),
  name: z.string(),
  arguments: z.string(),
}).transform((v) => {
  return remap$(v, {
    "call_id": "callId",
  });
});

/** @internal */
export type ItemFunctionCall1$Outbound = {
  type: string;
  id?: string | undefined;
  call_id: string;
  name: string;
  arguments: string;
};

/** @internal */
export const ItemFunctionCall1$outboundSchema: z.ZodType<
  ItemFunctionCall1$Outbound,
  z.ZodTypeDef,
  ItemFunctionCall1
> = z.object({
  type: ItemTypeFunctionCall1$outboundSchema,
  id: z.string().optional(),
  callId: z.string(),
  name: z.string(),
  arguments: z.string(),
}).transform((v) => {
  return remap$(v, {
    callId: "call_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ItemFunctionCall1$ {
  /** @deprecated use `ItemFunctionCall1$inboundSchema` instead. */
  export const inboundSchema = ItemFunctionCall1$inboundSchema;
  /** @deprecated use `ItemFunctionCall1$outboundSchema` instead. */
  export const outboundSchema = ItemFunctionCall1$outboundSchema;
  /** @deprecated use `ItemFunctionCall1$Outbound` instead. */
  export type Outbound = ItemFunctionCall1$Outbound;
}

export function itemFunctionCall1ToJSON(
  itemFunctionCall1: ItemFunctionCall1,
): string {
  return JSON.stringify(
    ItemFunctionCall1$outboundSchema.parse(itemFunctionCall1),
  );
}

export function itemFunctionCall1FromJSON(
  jsonString: string,
): SafeParseResult<ItemFunctionCall1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ItemFunctionCall1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ItemFunctionCall1' from JSON`,
  );
}

/** @internal */
export const ItemTypeMessage1$inboundSchema: z.ZodNativeEnum<
  typeof ItemTypeMessage1
> = z.nativeEnum(ItemTypeMessage1);

/** @internal */
export const ItemTypeMessage1$outboundSchema: z.ZodNativeEnum<
  typeof ItemTypeMessage1
> = ItemTypeMessage1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ItemTypeMessage1$ {
  /** @deprecated use `ItemTypeMessage1$inboundSchema` instead. */
  export const inboundSchema = ItemTypeMessage1$inboundSchema;
  /** @deprecated use `ItemTypeMessage1$outboundSchema` instead. */
  export const outboundSchema = ItemTypeMessage1$outboundSchema;
}

/** @internal */
export const ResponsesStreamChunkRole$inboundSchema: z.ZodNativeEnum<
  typeof ResponsesStreamChunkRole
> = z.nativeEnum(ResponsesStreamChunkRole);

/** @internal */
export const ResponsesStreamChunkRole$outboundSchema: z.ZodNativeEnum<
  typeof ResponsesStreamChunkRole
> = ResponsesStreamChunkRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesStreamChunkRole$ {
  /** @deprecated use `ResponsesStreamChunkRole$inboundSchema` instead. */
  export const inboundSchema = ResponsesStreamChunkRole$inboundSchema;
  /** @deprecated use `ResponsesStreamChunkRole$outboundSchema` instead. */
  export const outboundSchema = ResponsesStreamChunkRole$outboundSchema;
}

/** @internal */
export const StatusInProgress$inboundSchema: z.ZodNativeEnum<
  typeof StatusInProgress
> = z.nativeEnum(StatusInProgress);

/** @internal */
export const StatusInProgress$outboundSchema: z.ZodNativeEnum<
  typeof StatusInProgress
> = StatusInProgress$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StatusInProgress$ {
  /** @deprecated use `StatusInProgress$inboundSchema` instead. */
  export const inboundSchema = StatusInProgress$inboundSchema;
  /** @deprecated use `StatusInProgress$outboundSchema` instead. */
  export const outboundSchema = StatusInProgress$outboundSchema;
}

/** @internal */
export const StatusIncomplete$inboundSchema: z.ZodNativeEnum<
  typeof StatusIncomplete
> = z.nativeEnum(StatusIncomplete);

/** @internal */
export const StatusIncomplete$outboundSchema: z.ZodNativeEnum<
  typeof StatusIncomplete
> = StatusIncomplete$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StatusIncomplete$ {
  /** @deprecated use `StatusIncomplete$inboundSchema` instead. */
  export const inboundSchema = StatusIncomplete$inboundSchema;
  /** @deprecated use `StatusIncomplete$outboundSchema` instead. */
  export const outboundSchema = StatusIncomplete$outboundSchema;
}

/** @internal */
export const StatusCompleted$inboundSchema: z.ZodNativeEnum<
  typeof StatusCompleted
> = z.nativeEnum(StatusCompleted);

/** @internal */
export const StatusCompleted$outboundSchema: z.ZodNativeEnum<
  typeof StatusCompleted
> = StatusCompleted$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StatusCompleted$ {
  /** @deprecated use `StatusCompleted$inboundSchema` instead. */
  export const inboundSchema = StatusCompleted$inboundSchema;
  /** @deprecated use `StatusCompleted$outboundSchema` instead. */
  export const outboundSchema = StatusCompleted$outboundSchema;
}

/** @internal */
export const Status$inboundSchema: z.ZodType<Status, z.ZodTypeDef, unknown> = z
  .union([
    StatusCompleted$inboundSchema,
    StatusIncomplete$inboundSchema,
    StatusInProgress$inboundSchema,
  ]);

/** @internal */
export type Status$Outbound = string | string | string;

/** @internal */
export const Status$outboundSchema: z.ZodType<
  Status$Outbound,
  z.ZodTypeDef,
  Status
> = z.union([
  StatusCompleted$outboundSchema,
  StatusIncomplete$outboundSchema,
  StatusInProgress$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Status$ {
  /** @deprecated use `Status$inboundSchema` instead. */
  export const inboundSchema = Status$inboundSchema;
  /** @deprecated use `Status$outboundSchema` instead. */
  export const outboundSchema = Status$outboundSchema;
  /** @deprecated use `Status$Outbound` instead. */
  export type Outbound = Status$Outbound;
}

export function statusToJSON(status: Status): string {
  return JSON.stringify(Status$outboundSchema.parse(status));
}

export function statusFromJSON(
  jsonString: string,
): SafeParseResult<Status, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Status$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Status' from JSON`,
  );
}

/** @internal */
export const ItemAssistant$inboundSchema: z.ZodType<
  ItemAssistant,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ItemTypeMessage1$inboundSchema,
  id: z.string(),
  content: z.array(ResponsesOutputText$inboundSchema),
  role: ResponsesStreamChunkRole$inboundSchema,
  status: z.union([
    StatusCompleted$inboundSchema,
    StatusIncomplete$inboundSchema,
    StatusInProgress$inboundSchema,
  ]),
});

/** @internal */
export type ItemAssistant$Outbound = {
  type: string;
  id: string;
  content: Array<ResponsesOutputText$Outbound>;
  role: string;
  status: string | string | string;
};

/** @internal */
export const ItemAssistant$outboundSchema: z.ZodType<
  ItemAssistant$Outbound,
  z.ZodTypeDef,
  ItemAssistant
> = z.object({
  type: ItemTypeMessage1$outboundSchema,
  id: z.string(),
  content: z.array(ResponsesOutputText$outboundSchema),
  role: ResponsesStreamChunkRole$outboundSchema,
  status: z.union([
    StatusCompleted$outboundSchema,
    StatusIncomplete$outboundSchema,
    StatusInProgress$outboundSchema,
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ItemAssistant$ {
  /** @deprecated use `ItemAssistant$inboundSchema` instead. */
  export const inboundSchema = ItemAssistant$inboundSchema;
  /** @deprecated use `ItemAssistant$outboundSchema` instead. */
  export const outboundSchema = ItemAssistant$outboundSchema;
  /** @deprecated use `ItemAssistant$Outbound` instead. */
  export type Outbound = ItemAssistant$Outbound;
}

export function itemAssistantToJSON(itemAssistant: ItemAssistant): string {
  return JSON.stringify(ItemAssistant$outboundSchema.parse(itemAssistant));
}

export function itemAssistantFromJSON(
  jsonString: string,
): SafeParseResult<ItemAssistant, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ItemAssistant$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ItemAssistant' from JSON`,
  );
}

/** @internal */
export const ItemUnion1$inboundSchema: z.ZodType<
  ItemUnion1,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ItemAssistant$inboundSchema),
  z.lazy(() => ItemFunctionCall1$inboundSchema),
  z.lazy(() => ItemFileSearchCall$inboundSchema),
  z.lazy(() => ItemReasoning1$inboundSchema),
  z.lazy(() => ItemWebSearchCall1$inboundSchema),
]);

/** @internal */
export type ItemUnion1$Outbound =
  | ItemAssistant$Outbound
  | ItemFunctionCall1$Outbound
  | ItemFileSearchCall$Outbound
  | ItemReasoning1$Outbound
  | ItemWebSearchCall1$Outbound;

/** @internal */
export const ItemUnion1$outboundSchema: z.ZodType<
  ItemUnion1$Outbound,
  z.ZodTypeDef,
  ItemUnion1
> = z.union([
  z.lazy(() => ItemAssistant$outboundSchema),
  z.lazy(() => ItemFunctionCall1$outboundSchema),
  z.lazy(() => ItemFileSearchCall$outboundSchema),
  z.lazy(() => ItemReasoning1$outboundSchema),
  z.lazy(() => ItemWebSearchCall1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ItemUnion1$ {
  /** @deprecated use `ItemUnion1$inboundSchema` instead. */
  export const inboundSchema = ItemUnion1$inboundSchema;
  /** @deprecated use `ItemUnion1$outboundSchema` instead. */
  export const outboundSchema = ItemUnion1$outboundSchema;
  /** @deprecated use `ItemUnion1$Outbound` instead. */
  export type Outbound = ItemUnion1$Outbound;
}

export function itemUnion1ToJSON(itemUnion1: ItemUnion1): string {
  return JSON.stringify(ItemUnion1$outboundSchema.parse(itemUnion1));
}

export function itemUnion1FromJSON(
  jsonString: string,
): SafeParseResult<ItemUnion1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ItemUnion1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ItemUnion1' from JSON`,
  );
}

/** @internal */
export const ResponsesStreamChunkResponseOutputItemDone$inboundSchema:
  z.ZodType<ResponsesStreamChunkResponseOutputItemDone, z.ZodTypeDef, unknown> =
    z.object({
      type: TypeResponseOutputItemDone$inboundSchema,
      output_index: z.number(),
      sequence_number: z.number(),
      item: z.union([
        z.lazy(() => ItemAssistant$inboundSchema),
        z.lazy(() => ItemFunctionCall1$inboundSchema),
        z.lazy(() => ItemFileSearchCall$inboundSchema),
        z.lazy(() => ItemReasoning1$inboundSchema),
        z.lazy(() => ItemWebSearchCall1$inboundSchema),
      ]),
    }).transform((v) => {
      return remap$(v, {
        "output_index": "outputIndex",
        "sequence_number": "sequenceNumber",
      });
    });

/** @internal */
export type ResponsesStreamChunkResponseOutputItemDone$Outbound = {
  type: string;
  output_index: number;
  sequence_number: number;
  item:
    | ItemAssistant$Outbound
    | ItemFunctionCall1$Outbound
    | ItemFileSearchCall$Outbound
    | ItemReasoning1$Outbound
    | ItemWebSearchCall1$Outbound;
};

/** @internal */
export const ResponsesStreamChunkResponseOutputItemDone$outboundSchema:
  z.ZodType<
    ResponsesStreamChunkResponseOutputItemDone$Outbound,
    z.ZodTypeDef,
    ResponsesStreamChunkResponseOutputItemDone
  > = z.object({
    type: TypeResponseOutputItemDone$outboundSchema,
    outputIndex: z.number(),
    sequenceNumber: z.number(),
    item: z.union([
      z.lazy(() => ItemAssistant$outboundSchema),
      z.lazy(() => ItemFunctionCall1$outboundSchema),
      z.lazy(() => ItemFileSearchCall$outboundSchema),
      z.lazy(() => ItemReasoning1$outboundSchema),
      z.lazy(() => ItemWebSearchCall1$outboundSchema),
    ]),
  }).transform((v) => {
    return remap$(v, {
      outputIndex: "output_index",
      sequenceNumber: "sequence_number",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesStreamChunkResponseOutputItemDone$ {
  /** @deprecated use `ResponsesStreamChunkResponseOutputItemDone$inboundSchema` instead. */
  export const inboundSchema =
    ResponsesStreamChunkResponseOutputItemDone$inboundSchema;
  /** @deprecated use `ResponsesStreamChunkResponseOutputItemDone$outboundSchema` instead. */
  export const outboundSchema =
    ResponsesStreamChunkResponseOutputItemDone$outboundSchema;
  /** @deprecated use `ResponsesStreamChunkResponseOutputItemDone$Outbound` instead. */
  export type Outbound = ResponsesStreamChunkResponseOutputItemDone$Outbound;
}

export function responsesStreamChunkResponseOutputItemDoneToJSON(
  responsesStreamChunkResponseOutputItemDone:
    ResponsesStreamChunkResponseOutputItemDone,
): string {
  return JSON.stringify(
    ResponsesStreamChunkResponseOutputItemDone$outboundSchema.parse(
      responsesStreamChunkResponseOutputItemDone,
    ),
  );
}

export function responsesStreamChunkResponseOutputItemDoneFromJSON(
  jsonString: string,
): SafeParseResult<
  ResponsesStreamChunkResponseOutputItemDone,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ResponsesStreamChunkResponseOutputItemDone$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ResponsesStreamChunkResponseOutputItemDone' from JSON`,
  );
}

/** @internal */
export const TypeResponseCreated$inboundSchema: z.ZodNativeEnum<
  typeof TypeResponseCreated
> = z.nativeEnum(TypeResponseCreated);

/** @internal */
export const TypeResponseCreated$outboundSchema: z.ZodNativeEnum<
  typeof TypeResponseCreated
> = TypeResponseCreated$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeResponseCreated$ {
  /** @deprecated use `TypeResponseCreated$inboundSchema` instead. */
  export const inboundSchema = TypeResponseCreated$inboundSchema;
  /** @deprecated use `TypeResponseCreated$outboundSchema` instead. */
  export const outboundSchema = TypeResponseCreated$outboundSchema;
}

/** @internal */
export const Response2$inboundSchema: z.ZodType<
  Response2,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  created_at: z.number(),
  model: z.string(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
  });
});

/** @internal */
export type Response2$Outbound = {
  id: string;
  created_at: number;
  model: string;
};

/** @internal */
export const Response2$outboundSchema: z.ZodType<
  Response2$Outbound,
  z.ZodTypeDef,
  Response2
> = z.object({
  id: z.string(),
  createdAt: z.number(),
  model: z.string(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Response2$ {
  /** @deprecated use `Response2$inboundSchema` instead. */
  export const inboundSchema = Response2$inboundSchema;
  /** @deprecated use `Response2$outboundSchema` instead. */
  export const outboundSchema = Response2$outboundSchema;
  /** @deprecated use `Response2$Outbound` instead. */
  export type Outbound = Response2$Outbound;
}

export function response2ToJSON(response2: Response2): string {
  return JSON.stringify(Response2$outboundSchema.parse(response2));
}

export function response2FromJSON(
  jsonString: string,
): SafeParseResult<Response2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Response2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Response2' from JSON`,
  );
}

/** @internal */
export const ResponsesStreamChunkResponseCreated$inboundSchema: z.ZodType<
  ResponsesStreamChunkResponseCreated,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TypeResponseCreated$inboundSchema,
  response: z.lazy(() => Response2$inboundSchema),
});

/** @internal */
export type ResponsesStreamChunkResponseCreated$Outbound = {
  type: string;
  response: Response2$Outbound;
};

/** @internal */
export const ResponsesStreamChunkResponseCreated$outboundSchema: z.ZodType<
  ResponsesStreamChunkResponseCreated$Outbound,
  z.ZodTypeDef,
  ResponsesStreamChunkResponseCreated
> = z.object({
  type: TypeResponseCreated$outboundSchema,
  response: z.lazy(() => Response2$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesStreamChunkResponseCreated$ {
  /** @deprecated use `ResponsesStreamChunkResponseCreated$inboundSchema` instead. */
  export const inboundSchema =
    ResponsesStreamChunkResponseCreated$inboundSchema;
  /** @deprecated use `ResponsesStreamChunkResponseCreated$outboundSchema` instead. */
  export const outboundSchema =
    ResponsesStreamChunkResponseCreated$outboundSchema;
  /** @deprecated use `ResponsesStreamChunkResponseCreated$Outbound` instead. */
  export type Outbound = ResponsesStreamChunkResponseCreated$Outbound;
}

export function responsesStreamChunkResponseCreatedToJSON(
  responsesStreamChunkResponseCreated: ResponsesStreamChunkResponseCreated,
): string {
  return JSON.stringify(
    ResponsesStreamChunkResponseCreated$outboundSchema.parse(
      responsesStreamChunkResponseCreated,
    ),
  );
}

export function responsesStreamChunkResponseCreatedFromJSON(
  jsonString: string,
): SafeParseResult<ResponsesStreamChunkResponseCreated, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ResponsesStreamChunkResponseCreated$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponsesStreamChunkResponseCreated' from JSON`,
  );
}

/** @internal */
export const ResponsesStreamChunkType$inboundSchema: z.ZodNativeEnum<
  typeof ResponsesStreamChunkType
> = z.nativeEnum(ResponsesStreamChunkType);

/** @internal */
export const ResponsesStreamChunkType$outboundSchema: z.ZodNativeEnum<
  typeof ResponsesStreamChunkType
> = ResponsesStreamChunkType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesStreamChunkType$ {
  /** @deprecated use `ResponsesStreamChunkType$inboundSchema` instead. */
  export const inboundSchema = ResponsesStreamChunkType$inboundSchema;
  /** @deprecated use `ResponsesStreamChunkType$outboundSchema` instead. */
  export const outboundSchema = ResponsesStreamChunkType$outboundSchema;
}

/** @internal */
export const ResponsesStreamChunkReason$inboundSchema: z.ZodNativeEnum<
  typeof ResponsesStreamChunkReason
> = z.nativeEnum(ResponsesStreamChunkReason);

/** @internal */
export const ResponsesStreamChunkReason$outboundSchema: z.ZodNativeEnum<
  typeof ResponsesStreamChunkReason
> = ResponsesStreamChunkReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesStreamChunkReason$ {
  /** @deprecated use `ResponsesStreamChunkReason$inboundSchema` instead. */
  export const inboundSchema = ResponsesStreamChunkReason$inboundSchema;
  /** @deprecated use `ResponsesStreamChunkReason$outboundSchema` instead. */
  export const outboundSchema = ResponsesStreamChunkReason$outboundSchema;
}

/** @internal */
export const IncompleteDetails$inboundSchema: z.ZodType<
  IncompleteDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  reason: ResponsesStreamChunkReason$inboundSchema,
});

/** @internal */
export type IncompleteDetails$Outbound = {
  reason: string;
};

/** @internal */
export const IncompleteDetails$outboundSchema: z.ZodType<
  IncompleteDetails$Outbound,
  z.ZodTypeDef,
  IncompleteDetails
> = z.object({
  reason: ResponsesStreamChunkReason$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncompleteDetails$ {
  /** @deprecated use `IncompleteDetails$inboundSchema` instead. */
  export const inboundSchema = IncompleteDetails$inboundSchema;
  /** @deprecated use `IncompleteDetails$outboundSchema` instead. */
  export const outboundSchema = IncompleteDetails$outboundSchema;
  /** @deprecated use `IncompleteDetails$Outbound` instead. */
  export type Outbound = IncompleteDetails$Outbound;
}

export function incompleteDetailsToJSON(
  incompleteDetails: IncompleteDetails,
): string {
  return JSON.stringify(
    IncompleteDetails$outboundSchema.parse(incompleteDetails),
  );
}

export function incompleteDetailsFromJSON(
  jsonString: string,
): SafeParseResult<IncompleteDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IncompleteDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IncompleteDetails' from JSON`,
  );
}

/** @internal */
export const Response1$inboundSchema: z.ZodType<
  Response1,
  z.ZodTypeDef,
  unknown
> = z.object({
  incomplete_details: z.nullable(z.lazy(() => IncompleteDetails$inboundSchema)),
  usage: ResponsesUsage$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "incomplete_details": "incompleteDetails",
  });
});

/** @internal */
export type Response1$Outbound = {
  incomplete_details: IncompleteDetails$Outbound | null;
  usage: ResponsesUsage$Outbound;
};

/** @internal */
export const Response1$outboundSchema: z.ZodType<
  Response1$Outbound,
  z.ZodTypeDef,
  Response1
> = z.object({
  incompleteDetails: z.nullable(z.lazy(() => IncompleteDetails$outboundSchema)),
  usage: ResponsesUsage$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    incompleteDetails: "incomplete_details",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Response1$ {
  /** @deprecated use `Response1$inboundSchema` instead. */
  export const inboundSchema = Response1$inboundSchema;
  /** @deprecated use `Response1$outboundSchema` instead. */
  export const outboundSchema = Response1$outboundSchema;
  /** @deprecated use `Response1$Outbound` instead. */
  export type Outbound = Response1$Outbound;
}

export function response1ToJSON(response1: Response1): string {
  return JSON.stringify(Response1$outboundSchema.parse(response1));
}

export function response1FromJSON(
  jsonString: string,
): SafeParseResult<Response1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Response1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Response1' from JSON`,
  );
}

/** @internal */
export const ResponsesStreamChunk$inboundSchema: z.ZodType<
  ResponsesStreamChunk,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ResponsesStreamChunkType$inboundSchema,
  response: z.lazy(() => Response1$inboundSchema),
});

/** @internal */
export type ResponsesStreamChunk$Outbound = {
  type: string;
  response: Response1$Outbound;
};

/** @internal */
export const ResponsesStreamChunk$outboundSchema: z.ZodType<
  ResponsesStreamChunk$Outbound,
  z.ZodTypeDef,
  ResponsesStreamChunk
> = z.object({
  type: ResponsesStreamChunkType$outboundSchema,
  response: z.lazy(() => Response1$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesStreamChunk$ {
  /** @deprecated use `ResponsesStreamChunk$inboundSchema` instead. */
  export const inboundSchema = ResponsesStreamChunk$inboundSchema;
  /** @deprecated use `ResponsesStreamChunk$outboundSchema` instead. */
  export const outboundSchema = ResponsesStreamChunk$outboundSchema;
  /** @deprecated use `ResponsesStreamChunk$Outbound` instead. */
  export type Outbound = ResponsesStreamChunk$Outbound;
}

export function responsesStreamChunkToJSON(
  responsesStreamChunk: ResponsesStreamChunk,
): string {
  return JSON.stringify(
    ResponsesStreamChunk$outboundSchema.parse(responsesStreamChunk),
  );
}

export function responsesStreamChunkFromJSON(
  jsonString: string,
): SafeParseResult<ResponsesStreamChunk, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponsesStreamChunk$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponsesStreamChunk' from JSON`,
  );
}

/** @internal */
export const TypeResponseOutputTextDelta$inboundSchema: z.ZodNativeEnum<
  typeof TypeResponseOutputTextDelta
> = z.nativeEnum(TypeResponseOutputTextDelta);

/** @internal */
export const TypeResponseOutputTextDelta$outboundSchema: z.ZodNativeEnum<
  typeof TypeResponseOutputTextDelta
> = TypeResponseOutputTextDelta$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeResponseOutputTextDelta$ {
  /** @deprecated use `TypeResponseOutputTextDelta$inboundSchema` instead. */
  export const inboundSchema = TypeResponseOutputTextDelta$inboundSchema;
  /** @deprecated use `TypeResponseOutputTextDelta$outboundSchema` instead. */
  export const outboundSchema = TypeResponseOutputTextDelta$outboundSchema;
}

/** @internal */
export const ResponsesStreamChunkResponseOutputTextDelta$inboundSchema:
  z.ZodType<
    ResponsesStreamChunkResponseOutputTextDelta,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: TypeResponseOutputTextDelta$inboundSchema,
    delta: z.string(),
    sequence_number: z.number(),
  }).transform((v) => {
    return remap$(v, {
      "sequence_number": "sequenceNumber",
    });
  });

/** @internal */
export type ResponsesStreamChunkResponseOutputTextDelta$Outbound = {
  type: string;
  delta: string;
  sequence_number: number;
};

/** @internal */
export const ResponsesStreamChunkResponseOutputTextDelta$outboundSchema:
  z.ZodType<
    ResponsesStreamChunkResponseOutputTextDelta$Outbound,
    z.ZodTypeDef,
    ResponsesStreamChunkResponseOutputTextDelta
  > = z.object({
    type: TypeResponseOutputTextDelta$outboundSchema,
    delta: z.string(),
    sequenceNumber: z.number(),
  }).transform((v) => {
    return remap$(v, {
      sequenceNumber: "sequence_number",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesStreamChunkResponseOutputTextDelta$ {
  /** @deprecated use `ResponsesStreamChunkResponseOutputTextDelta$inboundSchema` instead. */
  export const inboundSchema =
    ResponsesStreamChunkResponseOutputTextDelta$inboundSchema;
  /** @deprecated use `ResponsesStreamChunkResponseOutputTextDelta$outboundSchema` instead. */
  export const outboundSchema =
    ResponsesStreamChunkResponseOutputTextDelta$outboundSchema;
  /** @deprecated use `ResponsesStreamChunkResponseOutputTextDelta$Outbound` instead. */
  export type Outbound = ResponsesStreamChunkResponseOutputTextDelta$Outbound;
}

export function responsesStreamChunkResponseOutputTextDeltaToJSON(
  responsesStreamChunkResponseOutputTextDelta:
    ResponsesStreamChunkResponseOutputTextDelta,
): string {
  return JSON.stringify(
    ResponsesStreamChunkResponseOutputTextDelta$outboundSchema.parse(
      responsesStreamChunkResponseOutputTextDelta,
    ),
  );
}

export function responsesStreamChunkResponseOutputTextDeltaFromJSON(
  jsonString: string,
): SafeParseResult<
  ResponsesStreamChunkResponseOutputTextDelta,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ResponsesStreamChunkResponseOutputTextDelta$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ResponsesStreamChunkResponseOutputTextDelta' from JSON`,
  );
}

/** @internal */
export const ResponsesStreamChunkUnion$inboundSchema: z.ZodType<
  ResponsesStreamChunkUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() =>
    ResponsesStreamChunkResponseReasoningSummaryTextDelta$inboundSchema
  ),
  z.lazy(() =>
    ResponsesStreamChunkResponseImageGenerationCallPartialImage$inboundSchema
  ),
  z.lazy(() =>
    ResponsesStreamChunkResponseFunctionCallArgumentsDelta$inboundSchema
  ),
  z.lazy(() =>
    ResponsesStreamChunkResponseFunctionCallArgumentsDone$inboundSchema
  ),
  z.lazy(() => ResponsesStreamChunkResponseRefusalDelta$inboundSchema),
  z.lazy(() => ResponsesStreamChunkResponseRefusalDone$inboundSchema),
  z.lazy(() => ResponsesStreamChunkResponseOutputItemDone$inboundSchema),
  z.lazy(() =>
    ResponsesStreamChunkResponseWebSearchCallCompleted$inboundSchema
  ),
  z.lazy(() =>
    ResponsesStreamChunkResponseFileSearchCallSearching$inboundSchema
  ),
  z.lazy(() =>
    ResponsesStreamChunkResponseFileSearchCallCompleted$inboundSchema
  ),
  z.lazy(() =>
    ResponsesStreamChunkResponseWebSearchCallSearching$inboundSchema
  ),
  z.lazy(() =>
    ResponsesStreamChunkResponseImageGenerationCallInProgress$inboundSchema
  ),
  z.lazy(() =>
    ResponsesStreamChunkResponseImageGenerationCallGenerating$inboundSchema
  ),
  z.lazy(() =>
    ResponsesStreamChunkResponseImageGenerationCallCompleted$inboundSchema
  ),
  z.lazy(() => ResponsesStreamChunkResponseOutputTextDelta$inboundSchema),
  z.lazy(() => ResponsesStreamChunkResponseOutputItemAdded$inboundSchema),
  z.lazy(() =>
    ResponsesStreamChunkResponseFileSearchCallInProgress$inboundSchema
  ),
  z.lazy(() =>
    ResponsesStreamChunkResponseWebSearchCallInProgress$inboundSchema
  ),
  z.lazy(() => ResponsesStreamChunk$inboundSchema),
  z.lazy(() => ResponsesStreamChunkResponseCreated$inboundSchema),
  z.lazy(() =>
    ResponsesStreamChunkResponseOutputTextAnnotationAdded$inboundSchema
  ),
  z.lazy(() => ResponsesStreamChunkResponseFailed$inboundSchema),
  z.lazy(() => ResponsesStreamChunkResponseError$inboundSchema),
  z.lazy(() => ResponsesStreamChunkError$inboundSchema),
]);

/** @internal */
export type ResponsesStreamChunkUnion$Outbound =
  | ResponsesStreamChunkResponseReasoningSummaryTextDelta$Outbound
  | ResponsesStreamChunkResponseImageGenerationCallPartialImage$Outbound
  | ResponsesStreamChunkResponseFunctionCallArgumentsDelta$Outbound
  | ResponsesStreamChunkResponseFunctionCallArgumentsDone$Outbound
  | ResponsesStreamChunkResponseRefusalDelta$Outbound
  | ResponsesStreamChunkResponseRefusalDone$Outbound
  | ResponsesStreamChunkResponseOutputItemDone$Outbound
  | ResponsesStreamChunkResponseWebSearchCallCompleted$Outbound
  | ResponsesStreamChunkResponseFileSearchCallSearching$Outbound
  | ResponsesStreamChunkResponseFileSearchCallCompleted$Outbound
  | ResponsesStreamChunkResponseWebSearchCallSearching$Outbound
  | ResponsesStreamChunkResponseImageGenerationCallInProgress$Outbound
  | ResponsesStreamChunkResponseImageGenerationCallGenerating$Outbound
  | ResponsesStreamChunkResponseImageGenerationCallCompleted$Outbound
  | ResponsesStreamChunkResponseOutputTextDelta$Outbound
  | ResponsesStreamChunkResponseOutputItemAdded$Outbound
  | ResponsesStreamChunkResponseFileSearchCallInProgress$Outbound
  | ResponsesStreamChunkResponseWebSearchCallInProgress$Outbound
  | ResponsesStreamChunk$Outbound
  | ResponsesStreamChunkResponseCreated$Outbound
  | ResponsesStreamChunkResponseOutputTextAnnotationAdded$Outbound
  | ResponsesStreamChunkResponseFailed$Outbound
  | ResponsesStreamChunkResponseError$Outbound
  | ResponsesStreamChunkError$Outbound;

/** @internal */
export const ResponsesStreamChunkUnion$outboundSchema: z.ZodType<
  ResponsesStreamChunkUnion$Outbound,
  z.ZodTypeDef,
  ResponsesStreamChunkUnion
> = z.union([
  z.lazy(() =>
    ResponsesStreamChunkResponseReasoningSummaryTextDelta$outboundSchema
  ),
  z.lazy(() =>
    ResponsesStreamChunkResponseImageGenerationCallPartialImage$outboundSchema
  ),
  z.lazy(() =>
    ResponsesStreamChunkResponseFunctionCallArgumentsDelta$outboundSchema
  ),
  z.lazy(() =>
    ResponsesStreamChunkResponseFunctionCallArgumentsDone$outboundSchema
  ),
  z.lazy(() => ResponsesStreamChunkResponseRefusalDelta$outboundSchema),
  z.lazy(() => ResponsesStreamChunkResponseRefusalDone$outboundSchema),
  z.lazy(() => ResponsesStreamChunkResponseOutputItemDone$outboundSchema),
  z.lazy(() =>
    ResponsesStreamChunkResponseWebSearchCallCompleted$outboundSchema
  ),
  z.lazy(() =>
    ResponsesStreamChunkResponseFileSearchCallSearching$outboundSchema
  ),
  z.lazy(() =>
    ResponsesStreamChunkResponseFileSearchCallCompleted$outboundSchema
  ),
  z.lazy(() =>
    ResponsesStreamChunkResponseWebSearchCallSearching$outboundSchema
  ),
  z.lazy(() =>
    ResponsesStreamChunkResponseImageGenerationCallInProgress$outboundSchema
  ),
  z.lazy(() =>
    ResponsesStreamChunkResponseImageGenerationCallGenerating$outboundSchema
  ),
  z.lazy(() =>
    ResponsesStreamChunkResponseImageGenerationCallCompleted$outboundSchema
  ),
  z.lazy(() => ResponsesStreamChunkResponseOutputTextDelta$outboundSchema),
  z.lazy(() => ResponsesStreamChunkResponseOutputItemAdded$outboundSchema),
  z.lazy(() =>
    ResponsesStreamChunkResponseFileSearchCallInProgress$outboundSchema
  ),
  z.lazy(() =>
    ResponsesStreamChunkResponseWebSearchCallInProgress$outboundSchema
  ),
  z.lazy(() => ResponsesStreamChunk$outboundSchema),
  z.lazy(() => ResponsesStreamChunkResponseCreated$outboundSchema),
  z.lazy(() =>
    ResponsesStreamChunkResponseOutputTextAnnotationAdded$outboundSchema
  ),
  z.lazy(() => ResponsesStreamChunkResponseFailed$outboundSchema),
  z.lazy(() => ResponsesStreamChunkResponseError$outboundSchema),
  z.lazy(() => ResponsesStreamChunkError$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesStreamChunkUnion$ {
  /** @deprecated use `ResponsesStreamChunkUnion$inboundSchema` instead. */
  export const inboundSchema = ResponsesStreamChunkUnion$inboundSchema;
  /** @deprecated use `ResponsesStreamChunkUnion$outboundSchema` instead. */
  export const outboundSchema = ResponsesStreamChunkUnion$outboundSchema;
  /** @deprecated use `ResponsesStreamChunkUnion$Outbound` instead. */
  export type Outbound = ResponsesStreamChunkUnion$Outbound;
}

export function responsesStreamChunkUnionToJSON(
  responsesStreamChunkUnion: ResponsesStreamChunkUnion,
): string {
  return JSON.stringify(
    ResponsesStreamChunkUnion$outboundSchema.parse(responsesStreamChunkUnion),
  );
}

export function responsesStreamChunkUnionFromJSON(
  jsonString: string,
): SafeParseResult<ResponsesStreamChunkUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponsesStreamChunkUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponsesStreamChunkUnion' from JSON`,
  );
}
