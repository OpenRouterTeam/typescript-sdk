/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const OpenResponsesInputFileType = {
  InputFile: "input_file",
} as const;
export type OpenResponsesInputFileType = ClosedEnum<
  typeof OpenResponsesInputFileType
>;

/**
 * File input content item
 */
export type OpenResponsesInputFile = {
  type: OpenResponsesInputFileType;
  fileId?: string | null | undefined;
  fileData?: string | undefined;
  filename?: string | undefined;
  fileUrl?: string | undefined;
};

/** @internal */
export const OpenResponsesInputFileType$inboundSchema: z.ZodNativeEnum<
  typeof OpenResponsesInputFileType
> = z.nativeEnum(OpenResponsesInputFileType);

/** @internal */
export const OpenResponsesInputFileType$outboundSchema: z.ZodNativeEnum<
  typeof OpenResponsesInputFileType
> = OpenResponsesInputFileType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesInputFileType$ {
  /** @deprecated use `OpenResponsesInputFileType$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesInputFileType$inboundSchema;
  /** @deprecated use `OpenResponsesInputFileType$outboundSchema` instead. */
  export const outboundSchema = OpenResponsesInputFileType$outboundSchema;
}

/** @internal */
export const OpenResponsesInputFile$inboundSchema: z.ZodType<
  OpenResponsesInputFile,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: OpenResponsesInputFileType$inboundSchema,
  file_id: z.nullable(z.string()).optional(),
  file_data: z.string().optional(),
  filename: z.string().optional(),
  file_url: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "file_id": "fileId",
    "file_data": "fileData",
    "file_url": "fileUrl",
  });
});

/** @internal */
export type OpenResponsesInputFile$Outbound = {
  type: string;
  file_id?: string | null | undefined;
  file_data?: string | undefined;
  filename?: string | undefined;
  file_url?: string | undefined;
};

/** @internal */
export const OpenResponsesInputFile$outboundSchema: z.ZodType<
  OpenResponsesInputFile$Outbound,
  z.ZodTypeDef,
  OpenResponsesInputFile
> = z.object({
  type: OpenResponsesInputFileType$outboundSchema,
  fileId: z.nullable(z.string()).optional(),
  fileData: z.string().optional(),
  filename: z.string().optional(),
  fileUrl: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    fileId: "file_id",
    fileData: "file_data",
    fileUrl: "file_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesInputFile$ {
  /** @deprecated use `OpenResponsesInputFile$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesInputFile$inboundSchema;
  /** @deprecated use `OpenResponsesInputFile$outboundSchema` instead. */
  export const outboundSchema = OpenResponsesInputFile$outboundSchema;
  /** @deprecated use `OpenResponsesInputFile$Outbound` instead. */
  export type Outbound = OpenResponsesInputFile$Outbound;
}

export function openResponsesInputFileToJSON(
  openResponsesInputFile: OpenResponsesInputFile,
): string {
  return JSON.stringify(
    OpenResponsesInputFile$outboundSchema.parse(openResponsesInputFile),
  );
}

export function openResponsesInputFileFromJSON(
  jsonString: string,
): SafeParseResult<OpenResponsesInputFile, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenResponsesInputFile$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenResponsesInputFile' from JSON`,
  );
}
