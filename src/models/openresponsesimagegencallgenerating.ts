/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const OpenResponsesImageGenCallGeneratingType = {
  ResponseImageGenerationCallGenerating:
    "response.image_generation_call.generating",
} as const;
export type OpenResponsesImageGenCallGeneratingType = ClosedEnum<
  typeof OpenResponsesImageGenCallGeneratingType
>;

/**
 * Image generation call is generating
 */
export type OpenResponsesImageGenCallGenerating = {
  type: OpenResponsesImageGenCallGeneratingType;
  itemId: string;
  outputIndex: number;
  sequenceNumber: number;
};

/** @internal */
export const OpenResponsesImageGenCallGeneratingType$inboundSchema:
  z.ZodNativeEnum<typeof OpenResponsesImageGenCallGeneratingType> = z
    .nativeEnum(OpenResponsesImageGenCallGeneratingType);

/** @internal */
export const OpenResponsesImageGenCallGeneratingType$outboundSchema:
  z.ZodNativeEnum<typeof OpenResponsesImageGenCallGeneratingType> =
    OpenResponsesImageGenCallGeneratingType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesImageGenCallGeneratingType$ {
  /** @deprecated use `OpenResponsesImageGenCallGeneratingType$inboundSchema` instead. */
  export const inboundSchema =
    OpenResponsesImageGenCallGeneratingType$inboundSchema;
  /** @deprecated use `OpenResponsesImageGenCallGeneratingType$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesImageGenCallGeneratingType$outboundSchema;
}

/** @internal */
export const OpenResponsesImageGenCallGenerating$inboundSchema: z.ZodType<
  OpenResponsesImageGenCallGenerating,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: OpenResponsesImageGenCallGeneratingType$inboundSchema,
  item_id: z.string(),
  output_index: z.number(),
  sequence_number: z.number(),
}).transform((v) => {
  return remap$(v, {
    "item_id": "itemId",
    "output_index": "outputIndex",
    "sequence_number": "sequenceNumber",
  });
});

/** @internal */
export type OpenResponsesImageGenCallGenerating$Outbound = {
  type: string;
  item_id: string;
  output_index: number;
  sequence_number: number;
};

/** @internal */
export const OpenResponsesImageGenCallGenerating$outboundSchema: z.ZodType<
  OpenResponsesImageGenCallGenerating$Outbound,
  z.ZodTypeDef,
  OpenResponsesImageGenCallGenerating
> = z.object({
  type: OpenResponsesImageGenCallGeneratingType$outboundSchema,
  itemId: z.string(),
  outputIndex: z.number(),
  sequenceNumber: z.number(),
}).transform((v) => {
  return remap$(v, {
    itemId: "item_id",
    outputIndex: "output_index",
    sequenceNumber: "sequence_number",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesImageGenCallGenerating$ {
  /** @deprecated use `OpenResponsesImageGenCallGenerating$inboundSchema` instead. */
  export const inboundSchema =
    OpenResponsesImageGenCallGenerating$inboundSchema;
  /** @deprecated use `OpenResponsesImageGenCallGenerating$outboundSchema` instead. */
  export const outboundSchema =
    OpenResponsesImageGenCallGenerating$outboundSchema;
  /** @deprecated use `OpenResponsesImageGenCallGenerating$Outbound` instead. */
  export type Outbound = OpenResponsesImageGenCallGenerating$Outbound;
}

export function openResponsesImageGenCallGeneratingToJSON(
  openResponsesImageGenCallGenerating: OpenResponsesImageGenCallGenerating,
): string {
  return JSON.stringify(
    OpenResponsesImageGenCallGenerating$outboundSchema.parse(
      openResponsesImageGenCallGenerating,
    ),
  );
}

export function openResponsesImageGenCallGeneratingFromJSON(
  jsonString: string,
): SafeParseResult<OpenResponsesImageGenCallGenerating, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OpenResponsesImageGenCallGenerating$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenResponsesImageGenCallGenerating' from JSON`,
  );
}
