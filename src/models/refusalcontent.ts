/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v4";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const RefusalContentType = {
  Refusal: "refusal",
} as const;
export type RefusalContentType = ClosedEnum<typeof RefusalContentType>;

export type RefusalContent = {
  type: RefusalContentType;
  refusal: string;
};

/** @internal */
export const RefusalContentType$inboundSchema: z.ZodEnum<
  typeof RefusalContentType
> = z.enum(RefusalContentType);

/** @internal */
export const RefusalContentType$outboundSchema: z.ZodEnum<
  typeof RefusalContentType
> = RefusalContentType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefusalContentType$ {
  /** @deprecated use `RefusalContentType$inboundSchema` instead. */
  export const inboundSchema = RefusalContentType$inboundSchema;
  /** @deprecated use `RefusalContentType$outboundSchema` instead. */
  export const outboundSchema = RefusalContentType$outboundSchema;
}

/** @internal */
export const RefusalContent$inboundSchema: z.ZodType<RefusalContent, unknown> =
  z.object({
    type: RefusalContentType$inboundSchema,
    refusal: z.string(),
  });

/** @internal */
export type RefusalContent$Outbound = {
  type: string;
  refusal: string;
};

/** @internal */
export const RefusalContent$outboundSchema: z.ZodType<
  RefusalContent$Outbound,
  RefusalContent
> = z.object({
  type: RefusalContentType$outboundSchema,
  refusal: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefusalContent$ {
  /** @deprecated use `RefusalContent$inboundSchema` instead. */
  export const inboundSchema = RefusalContent$inboundSchema;
  /** @deprecated use `RefusalContent$outboundSchema` instead. */
  export const outboundSchema = RefusalContent$outboundSchema;
  /** @deprecated use `RefusalContent$Outbound` instead. */
  export type Outbound = RefusalContent$Outbound;
}

export function refusalContentToJSON(refusalContent: RefusalContent): string {
  return JSON.stringify(RefusalContent$outboundSchema.parse(refusalContent));
}

export function refusalContentFromJSON(
  jsonString: string,
): SafeParseResult<RefusalContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RefusalContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RefusalContent' from JSON`,
  );
}
