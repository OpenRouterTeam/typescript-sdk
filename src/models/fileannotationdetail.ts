/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const TypeFile = {
  File: "file",
} as const;
export type TypeFile = ClosedEnum<typeof TypeFile>;

export const ContentTypeImageURL = {
  ImageUrl: "image_url",
} as const;
export type ContentTypeImageURL = ClosedEnum<typeof ContentTypeImageURL>;

export type FileAnnotationDetailImageUrl = {
  url: string;
};

export type ContentImageURL = {
  type: ContentTypeImageURL;
  imageUrl: FileAnnotationDetailImageUrl;
};

export const ContentTypeText = {
  Text: "text",
} as const;
export type ContentTypeText = ClosedEnum<typeof ContentTypeText>;

export type ContentText = {
  type: ContentTypeText;
  text: string;
};

export type FileAnnotationDetailContentUnion = ContentText | ContentImageURL;

export type FileT = {
  hash: string;
  name?: string | undefined;
  content: Array<ContentText | ContentImageURL>;
};

/**
 * File annotation with content
 */
export type FileAnnotationDetail = {
  type: TypeFile;
  file: FileT;
};

/** @internal */
export const TypeFile$inboundSchema: z.ZodNativeEnum<typeof TypeFile> = z
  .nativeEnum(TypeFile);

/** @internal */
export const TypeFile$outboundSchema: z.ZodNativeEnum<typeof TypeFile> =
  TypeFile$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeFile$ {
  /** @deprecated use `TypeFile$inboundSchema` instead. */
  export const inboundSchema = TypeFile$inboundSchema;
  /** @deprecated use `TypeFile$outboundSchema` instead. */
  export const outboundSchema = TypeFile$outboundSchema;
}

/** @internal */
export const ContentTypeImageURL$inboundSchema: z.ZodNativeEnum<
  typeof ContentTypeImageURL
> = z.nativeEnum(ContentTypeImageURL);

/** @internal */
export const ContentTypeImageURL$outboundSchema: z.ZodNativeEnum<
  typeof ContentTypeImageURL
> = ContentTypeImageURL$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContentTypeImageURL$ {
  /** @deprecated use `ContentTypeImageURL$inboundSchema` instead. */
  export const inboundSchema = ContentTypeImageURL$inboundSchema;
  /** @deprecated use `ContentTypeImageURL$outboundSchema` instead. */
  export const outboundSchema = ContentTypeImageURL$outboundSchema;
}

/** @internal */
export const FileAnnotationDetailImageUrl$inboundSchema: z.ZodType<
  FileAnnotationDetailImageUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
});

/** @internal */
export type FileAnnotationDetailImageUrl$Outbound = {
  url: string;
};

/** @internal */
export const FileAnnotationDetailImageUrl$outboundSchema: z.ZodType<
  FileAnnotationDetailImageUrl$Outbound,
  z.ZodTypeDef,
  FileAnnotationDetailImageUrl
> = z.object({
  url: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileAnnotationDetailImageUrl$ {
  /** @deprecated use `FileAnnotationDetailImageUrl$inboundSchema` instead. */
  export const inboundSchema = FileAnnotationDetailImageUrl$inboundSchema;
  /** @deprecated use `FileAnnotationDetailImageUrl$outboundSchema` instead. */
  export const outboundSchema = FileAnnotationDetailImageUrl$outboundSchema;
  /** @deprecated use `FileAnnotationDetailImageUrl$Outbound` instead. */
  export type Outbound = FileAnnotationDetailImageUrl$Outbound;
}

export function fileAnnotationDetailImageUrlToJSON(
  fileAnnotationDetailImageUrl: FileAnnotationDetailImageUrl,
): string {
  return JSON.stringify(
    FileAnnotationDetailImageUrl$outboundSchema.parse(
      fileAnnotationDetailImageUrl,
    ),
  );
}

export function fileAnnotationDetailImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<FileAnnotationDetailImageUrl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FileAnnotationDetailImageUrl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FileAnnotationDetailImageUrl' from JSON`,
  );
}

/** @internal */
export const ContentImageURL$inboundSchema: z.ZodType<
  ContentImageURL,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ContentTypeImageURL$inboundSchema,
  image_url: z.lazy(() => FileAnnotationDetailImageUrl$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type ContentImageURL$Outbound = {
  type: string;
  image_url: FileAnnotationDetailImageUrl$Outbound;
};

/** @internal */
export const ContentImageURL$outboundSchema: z.ZodType<
  ContentImageURL$Outbound,
  z.ZodTypeDef,
  ContentImageURL
> = z.object({
  type: ContentTypeImageURL$outboundSchema,
  imageUrl: z.lazy(() => FileAnnotationDetailImageUrl$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContentImageURL$ {
  /** @deprecated use `ContentImageURL$inboundSchema` instead. */
  export const inboundSchema = ContentImageURL$inboundSchema;
  /** @deprecated use `ContentImageURL$outboundSchema` instead. */
  export const outboundSchema = ContentImageURL$outboundSchema;
  /** @deprecated use `ContentImageURL$Outbound` instead. */
  export type Outbound = ContentImageURL$Outbound;
}

export function contentImageURLToJSON(
  contentImageURL: ContentImageURL,
): string {
  return JSON.stringify(ContentImageURL$outboundSchema.parse(contentImageURL));
}

export function contentImageURLFromJSON(
  jsonString: string,
): SafeParseResult<ContentImageURL, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContentImageURL$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContentImageURL' from JSON`,
  );
}

/** @internal */
export const ContentTypeText$inboundSchema: z.ZodNativeEnum<
  typeof ContentTypeText
> = z.nativeEnum(ContentTypeText);

/** @internal */
export const ContentTypeText$outboundSchema: z.ZodNativeEnum<
  typeof ContentTypeText
> = ContentTypeText$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContentTypeText$ {
  /** @deprecated use `ContentTypeText$inboundSchema` instead. */
  export const inboundSchema = ContentTypeText$inboundSchema;
  /** @deprecated use `ContentTypeText$outboundSchema` instead. */
  export const outboundSchema = ContentTypeText$outboundSchema;
}

/** @internal */
export const ContentText$inboundSchema: z.ZodType<
  ContentText,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ContentTypeText$inboundSchema,
  text: z.string(),
});

/** @internal */
export type ContentText$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const ContentText$outboundSchema: z.ZodType<
  ContentText$Outbound,
  z.ZodTypeDef,
  ContentText
> = z.object({
  type: ContentTypeText$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContentText$ {
  /** @deprecated use `ContentText$inboundSchema` instead. */
  export const inboundSchema = ContentText$inboundSchema;
  /** @deprecated use `ContentText$outboundSchema` instead. */
  export const outboundSchema = ContentText$outboundSchema;
  /** @deprecated use `ContentText$Outbound` instead. */
  export type Outbound = ContentText$Outbound;
}

export function contentTextToJSON(contentText: ContentText): string {
  return JSON.stringify(ContentText$outboundSchema.parse(contentText));
}

export function contentTextFromJSON(
  jsonString: string,
): SafeParseResult<ContentText, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContentText$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContentText' from JSON`,
  );
}

/** @internal */
export const FileAnnotationDetailContentUnion$inboundSchema: z.ZodType<
  FileAnnotationDetailContentUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ContentText$inboundSchema),
  z.lazy(() => ContentImageURL$inboundSchema),
]);

/** @internal */
export type FileAnnotationDetailContentUnion$Outbound =
  | ContentText$Outbound
  | ContentImageURL$Outbound;

/** @internal */
export const FileAnnotationDetailContentUnion$outboundSchema: z.ZodType<
  FileAnnotationDetailContentUnion$Outbound,
  z.ZodTypeDef,
  FileAnnotationDetailContentUnion
> = z.union([
  z.lazy(() => ContentText$outboundSchema),
  z.lazy(() => ContentImageURL$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileAnnotationDetailContentUnion$ {
  /** @deprecated use `FileAnnotationDetailContentUnion$inboundSchema` instead. */
  export const inboundSchema = FileAnnotationDetailContentUnion$inboundSchema;
  /** @deprecated use `FileAnnotationDetailContentUnion$outboundSchema` instead. */
  export const outboundSchema = FileAnnotationDetailContentUnion$outboundSchema;
  /** @deprecated use `FileAnnotationDetailContentUnion$Outbound` instead. */
  export type Outbound = FileAnnotationDetailContentUnion$Outbound;
}

export function fileAnnotationDetailContentUnionToJSON(
  fileAnnotationDetailContentUnion: FileAnnotationDetailContentUnion,
): string {
  return JSON.stringify(
    FileAnnotationDetailContentUnion$outboundSchema.parse(
      fileAnnotationDetailContentUnion,
    ),
  );
}

export function fileAnnotationDetailContentUnionFromJSON(
  jsonString: string,
): SafeParseResult<FileAnnotationDetailContentUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FileAnnotationDetailContentUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FileAnnotationDetailContentUnion' from JSON`,
  );
}

/** @internal */
export const FileT$inboundSchema: z.ZodType<FileT, z.ZodTypeDef, unknown> = z
  .object({
    hash: z.string(),
    name: z.string().optional(),
    content: z.array(
      z.union([
        z.lazy(() => ContentText$inboundSchema),
        z.lazy(() => ContentImageURL$inboundSchema),
      ]),
    ),
  });

/** @internal */
export type FileT$Outbound = {
  hash: string;
  name?: string | undefined;
  content: Array<ContentText$Outbound | ContentImageURL$Outbound>;
};

/** @internal */
export const FileT$outboundSchema: z.ZodType<
  FileT$Outbound,
  z.ZodTypeDef,
  FileT
> = z.object({
  hash: z.string(),
  name: z.string().optional(),
  content: z.array(
    z.union([
      z.lazy(() => ContentText$outboundSchema),
      z.lazy(() => ContentImageURL$outboundSchema),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileT$ {
  /** @deprecated use `FileT$inboundSchema` instead. */
  export const inboundSchema = FileT$inboundSchema;
  /** @deprecated use `FileT$outboundSchema` instead. */
  export const outboundSchema = FileT$outboundSchema;
  /** @deprecated use `FileT$Outbound` instead. */
  export type Outbound = FileT$Outbound;
}

export function fileToJSON(fileT: FileT): string {
  return JSON.stringify(FileT$outboundSchema.parse(fileT));
}

export function fileFromJSON(
  jsonString: string,
): SafeParseResult<FileT, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FileT$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FileT' from JSON`,
  );
}

/** @internal */
export const FileAnnotationDetail$inboundSchema: z.ZodType<
  FileAnnotationDetail,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TypeFile$inboundSchema,
  file: z.lazy(() => FileT$inboundSchema),
});

/** @internal */
export type FileAnnotationDetail$Outbound = {
  type: string;
  file: FileT$Outbound;
};

/** @internal */
export const FileAnnotationDetail$outboundSchema: z.ZodType<
  FileAnnotationDetail$Outbound,
  z.ZodTypeDef,
  FileAnnotationDetail
> = z.object({
  type: TypeFile$outboundSchema,
  file: z.lazy(() => FileT$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileAnnotationDetail$ {
  /** @deprecated use `FileAnnotationDetail$inboundSchema` instead. */
  export const inboundSchema = FileAnnotationDetail$inboundSchema;
  /** @deprecated use `FileAnnotationDetail$outboundSchema` instead. */
  export const outboundSchema = FileAnnotationDetail$outboundSchema;
  /** @deprecated use `FileAnnotationDetail$Outbound` instead. */
  export type Outbound = FileAnnotationDetail$Outbound;
}

export function fileAnnotationDetailToJSON(
  fileAnnotationDetail: FileAnnotationDetail,
): string {
  return JSON.stringify(
    FileAnnotationDetail$outboundSchema.parse(fileAnnotationDetail),
  );
}

export function fileAnnotationDetailFromJSON(
  jsonString: string,
): SafeParseResult<FileAnnotationDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FileAnnotationDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FileAnnotationDetail' from JSON`,
  );
}
