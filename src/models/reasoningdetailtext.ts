/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const ReasoningDetailTextType = {
  ReasoningText: "reasoning.text",
} as const;
export type ReasoningDetailTextType = ClosedEnum<
  typeof ReasoningDetailTextType
>;

export const ReasoningDetailTextFormat = {
  Unknown: "unknown",
  OpenaiResponsesV1: "openai-responses-v1",
  AnthropicClaudeV1: "anthropic-claude-v1",
} as const;
export type ReasoningDetailTextFormat = ClosedEnum<
  typeof ReasoningDetailTextFormat
>;

/**
 * Text reasoning detail
 */
export type ReasoningDetailText = {
  type: ReasoningDetailTextType;
  text?: string | null | undefined;
  signature?: string | null | undefined;
  id?: string | null | undefined;
  format?: ReasoningDetailTextFormat | null | undefined;
  index?: number | undefined;
};

/** @internal */
export const ReasoningDetailTextType$inboundSchema: z.ZodNativeEnum<
  typeof ReasoningDetailTextType
> = z.nativeEnum(ReasoningDetailTextType);

/** @internal */
export const ReasoningDetailTextType$outboundSchema: z.ZodNativeEnum<
  typeof ReasoningDetailTextType
> = ReasoningDetailTextType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReasoningDetailTextType$ {
  /** @deprecated use `ReasoningDetailTextType$inboundSchema` instead. */
  export const inboundSchema = ReasoningDetailTextType$inboundSchema;
  /** @deprecated use `ReasoningDetailTextType$outboundSchema` instead. */
  export const outboundSchema = ReasoningDetailTextType$outboundSchema;
}

/** @internal */
export const ReasoningDetailTextFormat$inboundSchema: z.ZodNativeEnum<
  typeof ReasoningDetailTextFormat
> = z.nativeEnum(ReasoningDetailTextFormat);

/** @internal */
export const ReasoningDetailTextFormat$outboundSchema: z.ZodNativeEnum<
  typeof ReasoningDetailTextFormat
> = ReasoningDetailTextFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReasoningDetailTextFormat$ {
  /** @deprecated use `ReasoningDetailTextFormat$inboundSchema` instead. */
  export const inboundSchema = ReasoningDetailTextFormat$inboundSchema;
  /** @deprecated use `ReasoningDetailTextFormat$outboundSchema` instead. */
  export const outboundSchema = ReasoningDetailTextFormat$outboundSchema;
}

/** @internal */
export const ReasoningDetailText$inboundSchema: z.ZodType<
  ReasoningDetailText,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ReasoningDetailTextType$inboundSchema,
  text: z.nullable(z.string()).optional(),
  signature: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  format: z.nullable(
    ReasoningDetailTextFormat$inboundSchema.default("anthropic-claude-v1"),
  ),
  index: z.number().optional(),
});

/** @internal */
export type ReasoningDetailText$Outbound = {
  type: string;
  text?: string | null | undefined;
  signature?: string | null | undefined;
  id?: string | null | undefined;
  format: string | null;
  index?: number | undefined;
};

/** @internal */
export const ReasoningDetailText$outboundSchema: z.ZodType<
  ReasoningDetailText$Outbound,
  z.ZodTypeDef,
  ReasoningDetailText
> = z.object({
  type: ReasoningDetailTextType$outboundSchema,
  text: z.nullable(z.string()).optional(),
  signature: z.nullable(z.string()).optional(),
  id: z.nullable(z.string()).optional(),
  format: z.nullable(
    ReasoningDetailTextFormat$outboundSchema.default("anthropic-claude-v1"),
  ),
  index: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReasoningDetailText$ {
  /** @deprecated use `ReasoningDetailText$inboundSchema` instead. */
  export const inboundSchema = ReasoningDetailText$inboundSchema;
  /** @deprecated use `ReasoningDetailText$outboundSchema` instead. */
  export const outboundSchema = ReasoningDetailText$outboundSchema;
  /** @deprecated use `ReasoningDetailText$Outbound` instead. */
  export type Outbound = ReasoningDetailText$Outbound;
}

export function reasoningDetailTextToJSON(
  reasoningDetailText: ReasoningDetailText,
): string {
  return JSON.stringify(
    ReasoningDetailText$outboundSchema.parse(reasoningDetailText),
  );
}

export function reasoningDetailTextFromJSON(
  jsonString: string,
): SafeParseResult<ReasoningDetailText, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReasoningDetailText$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReasoningDetailText' from JSON`,
  );
}
