/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const ResponsesReasoningTextContentType = {
  ReasoningText: "reasoning_text",
} as const;
export type ResponsesReasoningTextContentType = ClosedEnum<
  typeof ResponsesReasoningTextContentType
>;

export type ResponsesReasoningTextContent = {
  type: ResponsesReasoningTextContentType;
  text: string;
};

/** @internal */
export const ResponsesReasoningTextContentType$inboundSchema: z.ZodNativeEnum<
  typeof ResponsesReasoningTextContentType
> = z.nativeEnum(ResponsesReasoningTextContentType);

/** @internal */
export const ResponsesReasoningTextContentType$outboundSchema: z.ZodNativeEnum<
  typeof ResponsesReasoningTextContentType
> = ResponsesReasoningTextContentType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesReasoningTextContentType$ {
  /** @deprecated use `ResponsesReasoningTextContentType$inboundSchema` instead. */
  export const inboundSchema = ResponsesReasoningTextContentType$inboundSchema;
  /** @deprecated use `ResponsesReasoningTextContentType$outboundSchema` instead. */
  export const outboundSchema =
    ResponsesReasoningTextContentType$outboundSchema;
}

/** @internal */
export const ResponsesReasoningTextContent$inboundSchema: z.ZodType<
  ResponsesReasoningTextContent,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ResponsesReasoningTextContentType$inboundSchema,
  text: z.string(),
});

/** @internal */
export type ResponsesReasoningTextContent$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const ResponsesReasoningTextContent$outboundSchema: z.ZodType<
  ResponsesReasoningTextContent$Outbound,
  z.ZodTypeDef,
  ResponsesReasoningTextContent
> = z.object({
  type: ResponsesReasoningTextContentType$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesReasoningTextContent$ {
  /** @deprecated use `ResponsesReasoningTextContent$inboundSchema` instead. */
  export const inboundSchema = ResponsesReasoningTextContent$inboundSchema;
  /** @deprecated use `ResponsesReasoningTextContent$outboundSchema` instead. */
  export const outboundSchema = ResponsesReasoningTextContent$outboundSchema;
  /** @deprecated use `ResponsesReasoningTextContent$Outbound` instead. */
  export type Outbound = ResponsesReasoningTextContent$Outbound;
}

export function responsesReasoningTextContentToJSON(
  responsesReasoningTextContent: ResponsesReasoningTextContent,
): string {
  return JSON.stringify(
    ResponsesReasoningTextContent$outboundSchema.parse(
      responsesReasoningTextContent,
    ),
  );
}

export function responsesReasoningTextContentFromJSON(
  jsonString: string,
): SafeParseResult<ResponsesReasoningTextContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponsesReasoningTextContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponsesReasoningTextContent' from JSON`,
  );
}
