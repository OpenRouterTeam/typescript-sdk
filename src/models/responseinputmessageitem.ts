/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ResponseInputContent,
  ResponseInputContent$inboundSchema,
  ResponseInputContent$Outbound,
  ResponseInputContent$outboundSchema,
} from "./responseinputcontent.js";
import {
  ResponseInputMessageItemRole,
  ResponseInputMessageItemRole$inboundSchema,
  ResponseInputMessageItemRole$Outbound,
  ResponseInputMessageItemRole$outboundSchema,
} from "./responseinputmessageitemrole.js";

export const ResponseInputMessageItemType = {
  Message: "message",
} as const;
export type ResponseInputMessageItemType = ClosedEnum<
  typeof ResponseInputMessageItemType
>;

/**
 * Structured input message item
 */
export type ResponseInputMessageItem = {
  id: string;
  type?: ResponseInputMessageItemType | undefined;
  role: ResponseInputMessageItemRole;
  content: Array<ResponseInputContent>;
};

/** @internal */
export const ResponseInputMessageItemType$inboundSchema: z.ZodNativeEnum<
  typeof ResponseInputMessageItemType
> = z.nativeEnum(ResponseInputMessageItemType);

/** @internal */
export const ResponseInputMessageItemType$outboundSchema: z.ZodNativeEnum<
  typeof ResponseInputMessageItemType
> = ResponseInputMessageItemType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseInputMessageItemType$ {
  /** @deprecated use `ResponseInputMessageItemType$inboundSchema` instead. */
  export const inboundSchema = ResponseInputMessageItemType$inboundSchema;
  /** @deprecated use `ResponseInputMessageItemType$outboundSchema` instead. */
  export const outboundSchema = ResponseInputMessageItemType$outboundSchema;
}

/** @internal */
export const ResponseInputMessageItem$inboundSchema: z.ZodType<
  ResponseInputMessageItem,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  type: ResponseInputMessageItemType$inboundSchema.optional(),
  role: ResponseInputMessageItemRole$inboundSchema,
  content: z.array(ResponseInputContent$inboundSchema),
});

/** @internal */
export type ResponseInputMessageItem$Outbound = {
  id: string;
  type?: string | undefined;
  role: ResponseInputMessageItemRole$Outbound;
  content: Array<ResponseInputContent$Outbound>;
};

/** @internal */
export const ResponseInputMessageItem$outboundSchema: z.ZodType<
  ResponseInputMessageItem$Outbound,
  z.ZodTypeDef,
  ResponseInputMessageItem
> = z.object({
  id: z.string(),
  type: ResponseInputMessageItemType$outboundSchema.optional(),
  role: ResponseInputMessageItemRole$outboundSchema,
  content: z.array(ResponseInputContent$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseInputMessageItem$ {
  /** @deprecated use `ResponseInputMessageItem$inboundSchema` instead. */
  export const inboundSchema = ResponseInputMessageItem$inboundSchema;
  /** @deprecated use `ResponseInputMessageItem$outboundSchema` instead. */
  export const outboundSchema = ResponseInputMessageItem$outboundSchema;
  /** @deprecated use `ResponseInputMessageItem$Outbound` instead. */
  export type Outbound = ResponseInputMessageItem$Outbound;
}

export function responseInputMessageItemToJSON(
  responseInputMessageItem: ResponseInputMessageItem,
): string {
  return JSON.stringify(
    ResponseInputMessageItem$outboundSchema.parse(responseInputMessageItem),
  );
}

export function responseInputMessageItemFromJSON(
  jsonString: string,
): SafeParseResult<ResponseInputMessageItem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseInputMessageItem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseInputMessageItem' from JSON`,
  );
}
