/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v4";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ChatMessageContentItemAudio,
  ChatMessageContentItemAudio$inboundSchema,
  ChatMessageContentItemAudio$Outbound,
  ChatMessageContentItemAudio$outboundSchema,
} from "./chatmessagecontentitemaudio.js";
import {
  ChatMessageContentItemImage,
  ChatMessageContentItemImage$inboundSchema,
  ChatMessageContentItemImage$Outbound,
  ChatMessageContentItemImage$outboundSchema,
} from "./chatmessagecontentitemimage.js";
import {
  ChatMessageContentItemText,
  ChatMessageContentItemText$inboundSchema,
  ChatMessageContentItemText$Outbound,
  ChatMessageContentItemText$outboundSchema,
} from "./chatmessagecontentitemtext.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ChatMessageContentItem =
  | (ChatMessageContentItemText & { type: "text" })
  | (ChatMessageContentItemImage & { type: "image_url" })
  | (ChatMessageContentItemAudio & { type: "input_audio" });

/** @internal */
export const ChatMessageContentItem$inboundSchema: z.ZodType<
  ChatMessageContentItem,
  unknown
> = z.union([
  ChatMessageContentItemText$inboundSchema.and(
    z.object({ type: z.literal("text") }).transform((v) => ({ type: v.type })),
  ),
  ChatMessageContentItemImage$inboundSchema.and(
    z.object({ type: z.literal("image_url") }).transform((v) => ({
      type: v.type,
    })),
  ),
  ChatMessageContentItemAudio$inboundSchema.and(
    z.object({ type: z.literal("input_audio") }).transform((v) => ({
      type: v.type,
    })),
  ),
]);

/** @internal */
export type ChatMessageContentItem$Outbound =
  | (ChatMessageContentItemText$Outbound & { type: "text" })
  | (ChatMessageContentItemImage$Outbound & { type: "image_url" })
  | (ChatMessageContentItemAudio$Outbound & { type: "input_audio" });

/** @internal */
export const ChatMessageContentItem$outboundSchema: z.ZodType<
  ChatMessageContentItem$Outbound,
  ChatMessageContentItem
> = z.union([
  ChatMessageContentItemText$outboundSchema.and(
    z.object({ type: z.literal("text") }).transform((v) => ({ type: v.type })),
  ),
  ChatMessageContentItemImage$outboundSchema.and(
    z.object({ type: z.literal("image_url") }).transform((v) => ({
      type: v.type,
    })),
  ),
  ChatMessageContentItemAudio$outboundSchema.and(
    z.object({ type: z.literal("input_audio") }).transform((v) => ({
      type: v.type,
    })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatMessageContentItem$ {
  /** @deprecated use `ChatMessageContentItem$inboundSchema` instead. */
  export const inboundSchema = ChatMessageContentItem$inboundSchema;
  /** @deprecated use `ChatMessageContentItem$outboundSchema` instead. */
  export const outboundSchema = ChatMessageContentItem$outboundSchema;
  /** @deprecated use `ChatMessageContentItem$Outbound` instead. */
  export type Outbound = ChatMessageContentItem$Outbound;
}

export function chatMessageContentItemToJSON(
  chatMessageContentItem: ChatMessageContentItem,
): string {
  return JSON.stringify(
    ChatMessageContentItem$outboundSchema.parse(chatMessageContentItem),
  );
}

export function chatMessageContentItemFromJSON(
  jsonString: string,
): SafeParseResult<ChatMessageContentItem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatMessageContentItem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatMessageContentItem' from JSON`,
  );
}
