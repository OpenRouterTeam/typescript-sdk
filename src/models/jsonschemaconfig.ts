/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type JSONSchemaConfig = {
  name: string;
  description?: string | undefined;
  schema?: { [k: string]: any } | undefined;
  strict?: boolean | null | undefined;
};

/** @internal */
export const JSONSchemaConfig$inboundSchema: z.ZodType<
  JSONSchemaConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  schema: z.record(z.any()).optional(),
  strict: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type JSONSchemaConfig$Outbound = {
  name: string;
  description?: string | undefined;
  schema?: { [k: string]: any } | undefined;
  strict?: boolean | null | undefined;
};

/** @internal */
export const JSONSchemaConfig$outboundSchema: z.ZodType<
  JSONSchemaConfig$Outbound,
  z.ZodTypeDef,
  JSONSchemaConfig
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  schema: z.record(z.any()).optional(),
  strict: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JSONSchemaConfig$ {
  /** @deprecated use `JSONSchemaConfig$inboundSchema` instead. */
  export const inboundSchema = JSONSchemaConfig$inboundSchema;
  /** @deprecated use `JSONSchemaConfig$outboundSchema` instead. */
  export const outboundSchema = JSONSchemaConfig$outboundSchema;
  /** @deprecated use `JSONSchemaConfig$Outbound` instead. */
  export type Outbound = JSONSchemaConfig$Outbound;
}

export function jsonSchemaConfigToJSON(
  jsonSchemaConfig: JSONSchemaConfig,
): string {
  return JSON.stringify(
    JSONSchemaConfig$outboundSchema.parse(jsonSchemaConfig),
  );
}

export function jsonSchemaConfigFromJSON(
  jsonString: string,
): SafeParseResult<JSONSchemaConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => JSONSchemaConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'JSONSchemaConfig' from JSON`,
  );
}
