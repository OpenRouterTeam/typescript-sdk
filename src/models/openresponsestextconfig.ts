/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v4";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  OpenResponsesFormatTextConfig,
  OpenResponsesFormatTextConfig$inboundSchema,
  OpenResponsesFormatTextConfig$Outbound,
  OpenResponsesFormatTextConfig$outboundSchema,
} from "./openresponsesformattextconfig.js";

export const Verbosity = {
  High: "high",
  Low: "low",
  Medium: "medium",
} as const;
export type Verbosity = OpenEnum<typeof Verbosity>;

/**
 * Text output configuration including format and verbosity
 */
export type OpenResponsesTextConfig = {
  /**
   * Text response format configuration
   */
  format?: OpenResponsesFormatTextConfig | undefined;
  verbosity?: Verbosity | null | undefined;
};

/** @internal */
export const Verbosity$inboundSchema: z.ZodType<Verbosity, unknown> = z
  .union([
    z.enum(Verbosity),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const Verbosity$outboundSchema: z.ZodType<Verbosity, Verbosity> = z
  .union([
    z.enum(Verbosity),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Verbosity$ {
  /** @deprecated use `Verbosity$inboundSchema` instead. */
  export const inboundSchema = Verbosity$inboundSchema;
  /** @deprecated use `Verbosity$outboundSchema` instead. */
  export const outboundSchema = Verbosity$outboundSchema;
}

/** @internal */
export const OpenResponsesTextConfig$inboundSchema: z.ZodType<
  OpenResponsesTextConfig,
  unknown
> = z.object({
  format: OpenResponsesFormatTextConfig$inboundSchema.optional(),
  verbosity: z.nullable(Verbosity$inboundSchema).optional(),
});

/** @internal */
export type OpenResponsesTextConfig$Outbound = {
  format?: OpenResponsesFormatTextConfig$Outbound | undefined;
  verbosity?: string | null | undefined;
};

/** @internal */
export const OpenResponsesTextConfig$outboundSchema: z.ZodType<
  OpenResponsesTextConfig$Outbound,
  OpenResponsesTextConfig
> = z.object({
  format: OpenResponsesFormatTextConfig$outboundSchema.optional(),
  verbosity: z.nullable(Verbosity$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenResponsesTextConfig$ {
  /** @deprecated use `OpenResponsesTextConfig$inboundSchema` instead. */
  export const inboundSchema = OpenResponsesTextConfig$inboundSchema;
  /** @deprecated use `OpenResponsesTextConfig$outboundSchema` instead. */
  export const outboundSchema = OpenResponsesTextConfig$outboundSchema;
  /** @deprecated use `OpenResponsesTextConfig$Outbound` instead. */
  export type Outbound = OpenResponsesTextConfig$Outbound;
}

export function openResponsesTextConfigToJSON(
  openResponsesTextConfig: OpenResponsesTextConfig,
): string {
  return JSON.stringify(
    OpenResponsesTextConfig$outboundSchema.parse(openResponsesTextConfig),
  );
}

export function openResponsesTextConfigFromJSON(
  jsonString: string,
): SafeParseResult<OpenResponsesTextConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenResponsesTextConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenResponsesTextConfig' from JSON`,
  );
}
