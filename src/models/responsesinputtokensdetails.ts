/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Details about input token usage
 */
export type ResponsesInputTokensDetails = {
  cachedTokens: number;
};

/** @internal */
export const ResponsesInputTokensDetails$inboundSchema: z.ZodType<
  ResponsesInputTokensDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  cached_tokens: z.number(),
}).transform((v) => {
  return remap$(v, {
    "cached_tokens": "cachedTokens",
  });
});

/** @internal */
export type ResponsesInputTokensDetails$Outbound = {
  cached_tokens: number;
};

/** @internal */
export const ResponsesInputTokensDetails$outboundSchema: z.ZodType<
  ResponsesInputTokensDetails$Outbound,
  z.ZodTypeDef,
  ResponsesInputTokensDetails
> = z.object({
  cachedTokens: z.number(),
}).transform((v) => {
  return remap$(v, {
    cachedTokens: "cached_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponsesInputTokensDetails$ {
  /** @deprecated use `ResponsesInputTokensDetails$inboundSchema` instead. */
  export const inboundSchema = ResponsesInputTokensDetails$inboundSchema;
  /** @deprecated use `ResponsesInputTokensDetails$outboundSchema` instead. */
  export const outboundSchema = ResponsesInputTokensDetails$outboundSchema;
  /** @deprecated use `ResponsesInputTokensDetails$Outbound` instead. */
  export type Outbound = ResponsesInputTokensDetails$Outbound;
}

export function responsesInputTokensDetailsToJSON(
  responsesInputTokensDetails: ResponsesInputTokensDetails,
): string {
  return JSON.stringify(
    ResponsesInputTokensDetails$outboundSchema.parse(
      responsesInputTokensDetails,
    ),
  );
}

export function responsesInputTokensDetailsFromJSON(
  jsonString: string,
): SafeParseResult<ResponsesInputTokensDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponsesInputTokensDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponsesInputTokensDetails' from JSON`,
  );
}
