/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";

export const Parameter = {
  Temperature: "temperature",
  TopP: "top_p",
  TopK: "top_k",
  MinP: "min_p",
  TopA: "top_a",
  FrequencyPenalty: "frequency_penalty",
  PresencePenalty: "presence_penalty",
  RepetitionPenalty: "repetition_penalty",
  MaxTokens: "max_tokens",
  LogitBias: "logit_bias",
  Logprobs: "logprobs",
  TopLogprobs: "top_logprobs",
  Seed: "seed",
  ResponseFormat: "response_format",
  StructuredOutputs: "structured_outputs",
  Stop: "stop",
  Tools: "tools",
  ToolChoice: "tool_choice",
  ParallelToolCalls: "parallel_tool_calls",
  IncludeReasoning: "include_reasoning",
  Reasoning: "reasoning",
  WebSearchOptions: "web_search_options",
  Verbosity: "verbosity",
} as const;
export type Parameter = OpenEnum<typeof Parameter>;

/** @internal */
export const Parameter$inboundSchema: z.ZodType<
  Parameter,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(Parameter),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const Parameter$outboundSchema: z.ZodType<
  Parameter,
  z.ZodTypeDef,
  Parameter
> = z.union([
  z.nativeEnum(Parameter),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Parameter$ {
  /** @deprecated use `Parameter$inboundSchema` instead. */
  export const inboundSchema = Parameter$inboundSchema;
  /** @deprecated use `Parameter$outboundSchema` instead. */
  export const outboundSchema = Parameter$outboundSchema;
}
