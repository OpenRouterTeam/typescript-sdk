/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { OpenRouterCore } from "../core.js";
import {
  alphaResponsesSend2,
  Send2AcceptEnum,
} from "../funcs/alphaResponsesSend2.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useOpenRouterContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export { Send2AcceptEnum } from "../funcs/alphaResponsesSend2.js";

export type AlphaResponsesSend2MutationVariables = {
  request: operations.PostApiAlphaResponsesRequest;
  options?: RequestOptions & { acceptHeaderOverride?: Send2AcceptEnum };
};

export type AlphaResponsesSend2MutationData =
  operations.PostApiAlphaResponsesResponse;

/**
 * Submit a response request
 *
 * @remarks
 * Submits a request to the Responses API (beta)
 */
export function useAlphaResponsesSend2Mutation(
  options?: MutationHookOptions<
    AlphaResponsesSend2MutationData,
    Error,
    AlphaResponsesSend2MutationVariables
  >,
): UseMutationResult<
  AlphaResponsesSend2MutationData,
  Error,
  AlphaResponsesSend2MutationVariables
> {
  const client = useOpenRouterContext();
  return useMutation({
    ...buildAlphaResponsesSend2Mutation(client, options),
    ...options,
  });
}

export function mutationKeyAlphaResponsesSend2(): MutationKey {
  return ["@openrouter/sdk", "responses", "send2"];
}

export function buildAlphaResponsesSend2Mutation(
  client$: OpenRouterCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: AlphaResponsesSend2MutationVariables,
  ) => Promise<AlphaResponsesSend2MutationData>;
} {
  return {
    mutationKey: mutationKeyAlphaResponsesSend2(),
    mutationFn: function alphaResponsesSend2MutationFn({
      request,
      options,
    }): Promise<AlphaResponsesSend2MutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(alphaResponsesSend2(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
