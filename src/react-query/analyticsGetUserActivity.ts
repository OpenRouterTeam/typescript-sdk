/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { OpenRouterCore } from "../core.js";
import { analyticsGetUserActivity } from "../funcs/analyticsGetUserActivity.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useOpenRouterContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type AnalyticsGetUserActivityQueryData =
  operations.GetUserActivityResponse;

/**
 * Get user activity grouped by endpoint
 *
 * @remarks
 * Returns user activity data grouped by endpoint for the last 30 (completed) UTC days
 */
export function useAnalyticsGetUserActivity(
  request?: operations.GetUserActivityRequest | undefined,
  options?: QueryHookOptions<AnalyticsGetUserActivityQueryData>,
): UseQueryResult<AnalyticsGetUserActivityQueryData, Error> {
  const client = useOpenRouterContext();
  return useQuery({
    ...buildAnalyticsGetUserActivityQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get user activity grouped by endpoint
 *
 * @remarks
 * Returns user activity data grouped by endpoint for the last 30 (completed) UTC days
 */
export function useAnalyticsGetUserActivitySuspense(
  request?: operations.GetUserActivityRequest | undefined,
  options?: SuspenseQueryHookOptions<AnalyticsGetUserActivityQueryData>,
): UseSuspenseQueryResult<AnalyticsGetUserActivityQueryData, Error> {
  const client = useOpenRouterContext();
  return useSuspenseQuery({
    ...buildAnalyticsGetUserActivityQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchAnalyticsGetUserActivity(
  queryClient: QueryClient,
  client$: OpenRouterCore,
  request?: operations.GetUserActivityRequest | undefined,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildAnalyticsGetUserActivityQuery(
      client$,
      request,
    ),
  });
}

export function setAnalyticsGetUserActivityData(
  client: QueryClient,
  queryKeyBase: [parameters: { date?: string | undefined }],
  data: AnalyticsGetUserActivityQueryData,
): AnalyticsGetUserActivityQueryData | undefined {
  const key = queryKeyAnalyticsGetUserActivity(...queryKeyBase);

  return client.setQueryData<AnalyticsGetUserActivityQueryData>(key, data);
}

export function invalidateAnalyticsGetUserActivity(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<[parameters: { date?: string | undefined }]>,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@openrouter/sdk",
      "Analytics",
      "getUserActivity",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllAnalyticsGetUserActivity(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@openrouter/sdk", "Analytics", "getUserActivity"],
  });
}

export function buildAnalyticsGetUserActivityQuery(
  client$: OpenRouterCore,
  request?: operations.GetUserActivityRequest | undefined,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<AnalyticsGetUserActivityQueryData>;
} {
  return {
    queryKey: queryKeyAnalyticsGetUserActivity({ date: request?.date }),
    queryFn: async function analyticsGetUserActivityQueryFn(
      ctx,
    ): Promise<AnalyticsGetUserActivityQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(analyticsGetUserActivity(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyAnalyticsGetUserActivity(
  parameters: { date?: string | undefined },
): QueryKey {
  return ["@openrouter/sdk", "Analytics", "getUserActivity", parameters];
}
