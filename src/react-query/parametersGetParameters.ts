/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { OpenRouterCore } from "../core.js";
import { parametersGetParameters } from "../funcs/parametersGetParameters.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useOpenRouterContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type ParametersGetParametersQueryData = operations.GetParametersResponse;

/**
 * Get a model's supported parameters and data about which are most popular
 */
export function useParametersGetParameters(
  security: operations.GetParametersSecurity,
  request: operations.GetParametersRequest,
  options?: QueryHookOptions<ParametersGetParametersQueryData>,
): UseQueryResult<ParametersGetParametersQueryData, Error> {
  const client = useOpenRouterContext();
  return useQuery({
    ...buildParametersGetParametersQuery(
      client,
      security,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get a model's supported parameters and data about which are most popular
 */
export function useParametersGetParametersSuspense(
  security: operations.GetParametersSecurity,
  request: operations.GetParametersRequest,
  options?: SuspenseQueryHookOptions<ParametersGetParametersQueryData>,
): UseSuspenseQueryResult<ParametersGetParametersQueryData, Error> {
  const client = useOpenRouterContext();
  return useSuspenseQuery({
    ...buildParametersGetParametersQuery(
      client,
      security,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchParametersGetParameters(
  queryClient: QueryClient,
  client$: OpenRouterCore,
  security: operations.GetParametersSecurity,
  request: operations.GetParametersRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildParametersGetParametersQuery(
      client$,
      security,
      request,
    ),
  });
}

export function setParametersGetParametersData(
  client: QueryClient,
  queryKeyBase: [
    author: string,
    slug: string,
    parameters: { provider?: operations.Provider | undefined },
  ],
  data: ParametersGetParametersQueryData,
): ParametersGetParametersQueryData | undefined {
  const key = queryKeyParametersGetParameters(...queryKeyBase);

  return client.setQueryData<ParametersGetParametersQueryData>(key, data);
}

export function invalidateParametersGetParameters(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [
      author: string,
      slug: string,
      parameters: { provider?: operations.Provider | undefined },
    ]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@openrouter/sdk",
      "Parameters",
      "getParameters",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllParametersGetParameters(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@openrouter/sdk", "Parameters", "getParameters"],
  });
}

export function buildParametersGetParametersQuery(
  client$: OpenRouterCore,
  security: operations.GetParametersSecurity,
  request: operations.GetParametersRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<ParametersGetParametersQueryData>;
} {
  return {
    queryKey: queryKeyParametersGetParameters(request.author, request.slug, {
      provider: request.provider,
    }),
    queryFn: async function parametersGetParametersQueryFn(
      ctx,
    ): Promise<ParametersGetParametersQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(parametersGetParameters(
        client$,
        security,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyParametersGetParameters(
  author: string,
  slug: string,
  parameters: { provider?: operations.Provider | undefined },
): QueryKey {
  return [
    "@openrouter/sdk",
    "Parameters",
    "getParameters",
    author,
    slug,
    parameters,
  ];
}
