/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { OpenRouterCore } from "../core.js";
import { endpointsList } from "../funcs/endpointsList.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useOpenRouterContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type EndpointsListQueryData = operations.ListEndpointsResponse;

/**
 * List all endpoints for a model
 */
export function useEndpointsList(
  request: operations.ListEndpointsRequest,
  options?: QueryHookOptions<EndpointsListQueryData>,
): UseQueryResult<EndpointsListQueryData, Error> {
  const client = useOpenRouterContext();
  return useQuery({
    ...buildEndpointsListQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * List all endpoints for a model
 */
export function useEndpointsListSuspense(
  request: operations.ListEndpointsRequest,
  options?: SuspenseQueryHookOptions<EndpointsListQueryData>,
): UseSuspenseQueryResult<EndpointsListQueryData, Error> {
  const client = useOpenRouterContext();
  return useSuspenseQuery({
    ...buildEndpointsListQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchEndpointsList(
  queryClient: QueryClient,
  client$: OpenRouterCore,
  request: operations.ListEndpointsRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildEndpointsListQuery(
      client$,
      request,
    ),
  });
}

export function setEndpointsListData(
  client: QueryClient,
  queryKeyBase: [author: string, slug: string],
  data: EndpointsListQueryData,
): EndpointsListQueryData | undefined {
  const key = queryKeyEndpointsList(...queryKeyBase);

  return client.setQueryData<EndpointsListQueryData>(key, data);
}

export function invalidateEndpointsList(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<[author: string, slug: string]>,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@openrouter/sdk", "Endpoints", "list", ...queryKeyBase],
  });
}

export function invalidateAllEndpointsList(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@openrouter/sdk", "Endpoints", "list"],
  });
}

export function buildEndpointsListQuery(
  client$: OpenRouterCore,
  request: operations.ListEndpointsRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<EndpointsListQueryData>;
} {
  return {
    queryKey: queryKeyEndpointsList(request.author, request.slug),
    queryFn: async function endpointsListQueryFn(
      ctx,
    ): Promise<EndpointsListQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(endpointsList(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyEndpointsList(author: string, slug: string): QueryKey {
  return ["@openrouter/sdk", "Endpoints", "list", author, slug];
}
