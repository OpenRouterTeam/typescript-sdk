/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { OpenRouterCore } from "../core.js";
import { apiKeysDeleteKeysHash } from "../funcs/apiKeysDeleteKeysHash.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useOpenRouterContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type ApiKeysDeleteKeysHashMutationVariables = {
  request: operations.DeleteKeysHashRequest;
  options?: RequestOptions;
};

export type ApiKeysDeleteKeysHashMutationData =
  operations.DeleteKeysHashResponse;

/**
 * Delete an API key
 */
export function useApiKeysDeleteKeysHashMutation(
  options?: MutationHookOptions<
    ApiKeysDeleteKeysHashMutationData,
    Error,
    ApiKeysDeleteKeysHashMutationVariables
  >,
): UseMutationResult<
  ApiKeysDeleteKeysHashMutationData,
  Error,
  ApiKeysDeleteKeysHashMutationVariables
> {
  const client = useOpenRouterContext();
  return useMutation({
    ...buildApiKeysDeleteKeysHashMutation(client, options),
    ...options,
  });
}

export function mutationKeyApiKeysDeleteKeysHash(): MutationKey {
  return ["openrouter", "API Keys", "deleteKeysHash"];
}

export function buildApiKeysDeleteKeysHashMutation(
  client$: OpenRouterCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: ApiKeysDeleteKeysHashMutationVariables,
  ) => Promise<ApiKeysDeleteKeysHashMutationData>;
} {
  return {
    mutationKey: mutationKeyApiKeysDeleteKeysHash(),
    mutationFn: function apiKeysDeleteKeysHashMutationFn({
      request,
      options,
    }): Promise<ApiKeysDeleteKeysHashMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(apiKeysDeleteKeysHash(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
