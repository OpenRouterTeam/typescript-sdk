/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { OpenRouterCore } from "../core.js";
import { analyticsGetActivity } from "../funcs/analyticsGetActivity.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useOpenRouterContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type AnalyticsGetActivityQueryData = operations.GetActivityResponse;

/**
 * Get user activity grouped by endpoint
 *
 * @remarks
 * Returns user activity data grouped by endpoint for the last 30 (completed) UTC days
 */
export function useAnalyticsGetActivity(
  request?: operations.GetActivityRequest | undefined,
  options?: QueryHookOptions<AnalyticsGetActivityQueryData>,
): UseQueryResult<AnalyticsGetActivityQueryData, Error> {
  const client = useOpenRouterContext();
  return useQuery({
    ...buildAnalyticsGetActivityQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get user activity grouped by endpoint
 *
 * @remarks
 * Returns user activity data grouped by endpoint for the last 30 (completed) UTC days
 */
export function useAnalyticsGetActivitySuspense(
  request?: operations.GetActivityRequest | undefined,
  options?: SuspenseQueryHookOptions<AnalyticsGetActivityQueryData>,
): UseSuspenseQueryResult<AnalyticsGetActivityQueryData, Error> {
  const client = useOpenRouterContext();
  return useSuspenseQuery({
    ...buildAnalyticsGetActivityQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchAnalyticsGetActivity(
  queryClient: QueryClient,
  client$: OpenRouterCore,
  request?: operations.GetActivityRequest | undefined,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildAnalyticsGetActivityQuery(
      client$,
      request,
    ),
  });
}

export function setAnalyticsGetActivityData(
  client: QueryClient,
  queryKeyBase: [parameters: { date?: string | undefined }],
  data: AnalyticsGetActivityQueryData,
): AnalyticsGetActivityQueryData | undefined {
  const key = queryKeyAnalyticsGetActivity(...queryKeyBase);

  return client.setQueryData<AnalyticsGetActivityQueryData>(key, data);
}

export function invalidateAnalyticsGetActivity(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<[parameters: { date?: string | undefined }]>,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["openrouter", "Analytics", "getActivity", ...queryKeyBase],
  });
}

export function invalidateAllAnalyticsGetActivity(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["openrouter", "Analytics", "getActivity"],
  });
}

export function buildAnalyticsGetActivityQuery(
  client$: OpenRouterCore,
  request?: operations.GetActivityRequest | undefined,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<AnalyticsGetActivityQueryData>;
} {
  return {
    queryKey: queryKeyAnalyticsGetActivity({ date: request?.date }),
    queryFn: async function analyticsGetActivityQueryFn(
      ctx,
    ): Promise<AnalyticsGetActivityQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(analyticsGetActivity(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyAnalyticsGetActivity(
  parameters: { date?: string | undefined },
): QueryKey {
  return ["openrouter", "Analytics", "getActivity", parameters];
}
