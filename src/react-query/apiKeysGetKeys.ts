/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { OpenRouterCore } from "../core.js";
import { apiKeysGetKeys } from "../funcs/apiKeysGetKeys.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useOpenRouterContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type ApiKeysGetKeysQueryData = operations.GetKeysResponse;

/**
 * List API keys
 */
export function useApiKeysGetKeys(
  request?: operations.GetKeysRequest | undefined,
  options?: QueryHookOptions<ApiKeysGetKeysQueryData>,
): UseQueryResult<ApiKeysGetKeysQueryData, Error> {
  const client = useOpenRouterContext();
  return useQuery({
    ...buildApiKeysGetKeysQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * List API keys
 */
export function useApiKeysGetKeysSuspense(
  request?: operations.GetKeysRequest | undefined,
  options?: SuspenseQueryHookOptions<ApiKeysGetKeysQueryData>,
): UseSuspenseQueryResult<ApiKeysGetKeysQueryData, Error> {
  const client = useOpenRouterContext();
  return useSuspenseQuery({
    ...buildApiKeysGetKeysQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchApiKeysGetKeys(
  queryClient: QueryClient,
  client$: OpenRouterCore,
  request?: operations.GetKeysRequest | undefined,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildApiKeysGetKeysQuery(
      client$,
      request,
    ),
  });
}

export function setApiKeysGetKeysData(
  client: QueryClient,
  queryKeyBase: [
    parameters: {
      includeDisabled?: string | undefined;
      offset?: string | undefined;
    },
  ],
  data: ApiKeysGetKeysQueryData,
): ApiKeysGetKeysQueryData | undefined {
  const key = queryKeyApiKeysGetKeys(...queryKeyBase);

  return client.setQueryData<ApiKeysGetKeysQueryData>(key, data);
}

export function invalidateApiKeysGetKeys(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: {
      includeDisabled?: string | undefined;
      offset?: string | undefined;
    }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["openrouter", "API Keys", "getKeys", ...queryKeyBase],
  });
}

export function invalidateAllApiKeysGetKeys(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["openrouter", "API Keys", "getKeys"],
  });
}

export function buildApiKeysGetKeysQuery(
  client$: OpenRouterCore,
  request?: operations.GetKeysRequest | undefined,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<ApiKeysGetKeysQueryData>;
} {
  return {
    queryKey: queryKeyApiKeysGetKeys({
      includeDisabled: request?.includeDisabled,
      offset: request?.offset,
    }),
    queryFn: async function apiKeysGetKeysQueryFn(
      ctx,
    ): Promise<ApiKeysGetKeysQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(apiKeysGetKeys(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyApiKeysGetKeys(
  parameters: {
    includeDisabled?: string | undefined;
    offset?: string | undefined;
  },
): QueryKey {
  return ["openrouter", "API Keys", "getKeys", parameters];
}
