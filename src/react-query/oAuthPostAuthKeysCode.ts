/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { OpenRouterCore } from "../core.js";
import { oAuthPostAuthKeysCode } from "../funcs/oAuthPostAuthKeysCode.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useOpenRouterContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type OAuthPostAuthKeysCodeMutationVariables = {
  request?: operations.PostAuthKeysCodeRequest | undefined;
  options?: RequestOptions;
};

export type OAuthPostAuthKeysCodeMutationData =
  operations.PostAuthKeysCodeResponse;

/**
 * Create authorization code
 *
 * @remarks
 * Create an authorization code for the PKCE flow to generate a user-controlled API key
 */
export function useOAuthPostAuthKeysCodeMutation(
  options?: MutationHookOptions<
    OAuthPostAuthKeysCodeMutationData,
    Error,
    OAuthPostAuthKeysCodeMutationVariables
  >,
): UseMutationResult<
  OAuthPostAuthKeysCodeMutationData,
  Error,
  OAuthPostAuthKeysCodeMutationVariables
> {
  const client = useOpenRouterContext();
  return useMutation({
    ...buildOAuthPostAuthKeysCodeMutation(client, options),
    ...options,
  });
}

export function mutationKeyOAuthPostAuthKeysCode(): MutationKey {
  return ["@openrouter/sdk", "OAuth", "postAuthKeysCode"];
}

export function buildOAuthPostAuthKeysCodeMutation(
  client$: OpenRouterCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: OAuthPostAuthKeysCodeMutationVariables,
  ) => Promise<OAuthPostAuthKeysCodeMutationData>;
} {
  return {
    mutationKey: mutationKeyOAuthPostAuthKeysCode(),
    mutationFn: function oAuthPostAuthKeysCodeMutationFn({
      request,
      options,
    }): Promise<OAuthPostAuthKeysCodeMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(oAuthPostAuthKeysCode(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
