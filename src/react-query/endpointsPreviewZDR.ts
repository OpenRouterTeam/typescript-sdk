/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { OpenRouterCore } from "../core.js";
import { endpointsPreviewZDR } from "../funcs/endpointsPreviewZDR.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useOpenRouterContext } from "./_context.js";
import { QueryHookOptions, SuspenseQueryHookOptions } from "./_types.js";

export type EndpointsPreviewZDRQueryData = operations.PreviewZDRResponse;

/**
 * Preview the impact of ZDR on the available endpoints
 */
export function useEndpointsPreviewZDR(
  options?: QueryHookOptions<EndpointsPreviewZDRQueryData>,
): UseQueryResult<EndpointsPreviewZDRQueryData, Error> {
  const client = useOpenRouterContext();
  return useQuery({
    ...buildEndpointsPreviewZDRQuery(
      client,
      options,
    ),
    ...options,
  });
}

/**
 * Preview the impact of ZDR on the available endpoints
 */
export function useEndpointsPreviewZDRSuspense(
  options?: SuspenseQueryHookOptions<EndpointsPreviewZDRQueryData>,
): UseSuspenseQueryResult<EndpointsPreviewZDRQueryData, Error> {
  const client = useOpenRouterContext();
  return useSuspenseQuery({
    ...buildEndpointsPreviewZDRQuery(
      client,
      options,
    ),
    ...options,
  });
}

export function prefetchEndpointsPreviewZDR(
  queryClient: QueryClient,
  client$: OpenRouterCore,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildEndpointsPreviewZDRQuery(
      client$,
    ),
  });
}

export function setEndpointsPreviewZDRData(
  client: QueryClient,
  data: EndpointsPreviewZDRQueryData,
): EndpointsPreviewZDRQueryData | undefined {
  const key = queryKeyEndpointsPreviewZDR();

  return client.setQueryData<EndpointsPreviewZDRQueryData>(key, data);
}

export function invalidateAllEndpointsPreviewZDR(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@openrouter/sdk", "Endpoints", "previewZDR"],
  });
}

export function buildEndpointsPreviewZDRQuery(
  client$: OpenRouterCore,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<EndpointsPreviewZDRQueryData>;
} {
  return {
    queryKey: queryKeyEndpointsPreviewZDR(),
    queryFn: async function endpointsPreviewZDRQueryFn(
      ctx,
    ): Promise<EndpointsPreviewZDRQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(endpointsPreviewZDR(
        client$,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyEndpointsPreviewZDR(): QueryKey {
  return ["@openrouter/sdk", "Endpoints", "previewZDR"];
}
