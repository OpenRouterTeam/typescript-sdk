/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { OpenRouterCore } from "../core.js";
import { apiKeysGetKeysHash } from "../funcs/apiKeysGetKeysHash.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useOpenRouterContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type ApiKeysGetKeysHashQueryData = operations.GetKeysHashResponse;

/**
 * Get a single API key
 */
export function useApiKeysGetKeysHash(
  request: operations.GetKeysHashRequest,
  options?: QueryHookOptions<ApiKeysGetKeysHashQueryData>,
): UseQueryResult<ApiKeysGetKeysHashQueryData, Error> {
  const client = useOpenRouterContext();
  return useQuery({
    ...buildApiKeysGetKeysHashQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get a single API key
 */
export function useApiKeysGetKeysHashSuspense(
  request: operations.GetKeysHashRequest,
  options?: SuspenseQueryHookOptions<ApiKeysGetKeysHashQueryData>,
): UseSuspenseQueryResult<ApiKeysGetKeysHashQueryData, Error> {
  const client = useOpenRouterContext();
  return useSuspenseQuery({
    ...buildApiKeysGetKeysHashQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchApiKeysGetKeysHash(
  queryClient: QueryClient,
  client$: OpenRouterCore,
  request: operations.GetKeysHashRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildApiKeysGetKeysHashQuery(
      client$,
      request,
    ),
  });
}

export function setApiKeysGetKeysHashData(
  client: QueryClient,
  queryKeyBase: [hash: string],
  data: ApiKeysGetKeysHashQueryData,
): ApiKeysGetKeysHashQueryData | undefined {
  const key = queryKeyApiKeysGetKeysHash(...queryKeyBase);

  return client.setQueryData<ApiKeysGetKeysHashQueryData>(key, data);
}

export function invalidateApiKeysGetKeysHash(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<[hash: string]>,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@openrouter/sdk", "API Keys", "getKeysHash", ...queryKeyBase],
  });
}

export function invalidateAllApiKeysGetKeysHash(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@openrouter/sdk", "API Keys", "getKeysHash"],
  });
}

export function buildApiKeysGetKeysHashQuery(
  client$: OpenRouterCore,
  request: operations.GetKeysHashRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<ApiKeysGetKeysHashQueryData>;
} {
  return {
    queryKey: queryKeyApiKeysGetKeysHash(request.hash),
    queryFn: async function apiKeysGetKeysHashQueryFn(
      ctx,
    ): Promise<ApiKeysGetKeysHashQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(apiKeysGetKeysHash(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyApiKeysGetKeysHash(hash: string): QueryKey {
  return ["@openrouter/sdk", "API Keys", "getKeysHash", hash];
}
