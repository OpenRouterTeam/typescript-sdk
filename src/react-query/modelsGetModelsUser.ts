/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { OpenRouterCore } from "../core.js";
import { modelsGetModelsUser } from "../funcs/modelsGetModelsUser.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useOpenRouterContext } from "./_context.js";
import { QueryHookOptions, SuspenseQueryHookOptions } from "./_types.js";

export type ModelsGetModelsUserQueryData = operations.GetModelsUserResponse;

/**
 * List models filtered by user provider preferences
 */
export function useModelsGetModelsUser(
  security: operations.GetModelsUserSecurity,
  options?: QueryHookOptions<ModelsGetModelsUserQueryData>,
): UseQueryResult<ModelsGetModelsUserQueryData, Error> {
  const client = useOpenRouterContext();
  return useQuery({
    ...buildModelsGetModelsUserQuery(
      client,
      security,
      options,
    ),
    ...options,
  });
}

/**
 * List models filtered by user provider preferences
 */
export function useModelsGetModelsUserSuspense(
  security: operations.GetModelsUserSecurity,
  options?: SuspenseQueryHookOptions<ModelsGetModelsUserQueryData>,
): UseSuspenseQueryResult<ModelsGetModelsUserQueryData, Error> {
  const client = useOpenRouterContext();
  return useSuspenseQuery({
    ...buildModelsGetModelsUserQuery(
      client,
      security,
      options,
    ),
    ...options,
  });
}

export function prefetchModelsGetModelsUser(
  queryClient: QueryClient,
  client$: OpenRouterCore,
  security: operations.GetModelsUserSecurity,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildModelsGetModelsUserQuery(
      client$,
      security,
    ),
  });
}

export function setModelsGetModelsUserData(
  client: QueryClient,
  data: ModelsGetModelsUserQueryData,
): ModelsGetModelsUserQueryData | undefined {
  const key = queryKeyModelsGetModelsUser();

  return client.setQueryData<ModelsGetModelsUserQueryData>(key, data);
}

export function invalidateAllModelsGetModelsUser(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@openrouter/sdk", "Models", "getModelsUser"],
  });
}

export function buildModelsGetModelsUserQuery(
  client$: OpenRouterCore,
  security: operations.GetModelsUserSecurity,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<ModelsGetModelsUserQueryData>;
} {
  return {
    queryKey: queryKeyModelsGetModelsUser(),
    queryFn: async function modelsGetModelsUserQueryFn(
      ctx,
    ): Promise<ModelsGetModelsUserQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(modelsGetModelsUser(
        client$,
        security,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyModelsGetModelsUser(): QueryKey {
  return ["@openrouter/sdk", "Models", "getModelsUser"];
}
