/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { OpenRouterCore } from "../core.js";
import { parametersGetParametersAuthorSlug } from "../funcs/parametersGetParametersAuthorSlug.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useOpenRouterContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type ParametersGetParametersAuthorSlugQueryData =
  operations.GetParametersAuthorSlugResponse;

/**
 * Get a model's supported parameters and data about which are most popular
 */
export function useParametersGetParametersAuthorSlug(
  security: operations.GetParametersAuthorSlugSecurity,
  request: operations.GetParametersAuthorSlugRequest,
  options?: QueryHookOptions<ParametersGetParametersAuthorSlugQueryData>,
): UseQueryResult<ParametersGetParametersAuthorSlugQueryData, Error> {
  const client = useOpenRouterContext();
  return useQuery({
    ...buildParametersGetParametersAuthorSlugQuery(
      client,
      security,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get a model's supported parameters and data about which are most popular
 */
export function useParametersGetParametersAuthorSlugSuspense(
  security: operations.GetParametersAuthorSlugSecurity,
  request: operations.GetParametersAuthorSlugRequest,
  options?: SuspenseQueryHookOptions<
    ParametersGetParametersAuthorSlugQueryData
  >,
): UseSuspenseQueryResult<ParametersGetParametersAuthorSlugQueryData, Error> {
  const client = useOpenRouterContext();
  return useSuspenseQuery({
    ...buildParametersGetParametersAuthorSlugQuery(
      client,
      security,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchParametersGetParametersAuthorSlug(
  queryClient: QueryClient,
  client$: OpenRouterCore,
  security: operations.GetParametersAuthorSlugSecurity,
  request: operations.GetParametersAuthorSlugRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildParametersGetParametersAuthorSlugQuery(
      client$,
      security,
      request,
    ),
  });
}

export function setParametersGetParametersAuthorSlugData(
  client: QueryClient,
  queryKeyBase: [
    author: string,
    slug: string,
    parameters: {
      provider?: operations.GetParametersAuthorSlugProvider | undefined;
    },
  ],
  data: ParametersGetParametersAuthorSlugQueryData,
): ParametersGetParametersAuthorSlugQueryData | undefined {
  const key = queryKeyParametersGetParametersAuthorSlug(...queryKeyBase);

  return client.setQueryData<ParametersGetParametersAuthorSlugQueryData>(
    key,
    data,
  );
}

export function invalidateParametersGetParametersAuthorSlug(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [
      author: string,
      slug: string,
      parameters: {
        provider?: operations.GetParametersAuthorSlugProvider | undefined;
      },
    ]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@openrouter/sdk",
      "Parameters",
      "getParametersAuthorSlug",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllParametersGetParametersAuthorSlug(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@openrouter/sdk", "Parameters", "getParametersAuthorSlug"],
  });
}

export function buildParametersGetParametersAuthorSlugQuery(
  client$: OpenRouterCore,
  security: operations.GetParametersAuthorSlugSecurity,
  request: operations.GetParametersAuthorSlugRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<ParametersGetParametersAuthorSlugQueryData>;
} {
  return {
    queryKey: queryKeyParametersGetParametersAuthorSlug(
      request.author,
      request.slug,
      { provider: request.provider },
    ),
    queryFn: async function parametersGetParametersAuthorSlugQueryFn(
      ctx,
    ): Promise<ParametersGetParametersAuthorSlugQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(parametersGetParametersAuthorSlug(
        client$,
        security,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyParametersGetParametersAuthorSlug(
  author: string,
  slug: string,
  parameters: {
    provider?: operations.GetParametersAuthorSlugProvider | undefined;
  },
): QueryKey {
  return [
    "@openrouter/sdk",
    "Parameters",
    "getParametersAuthorSlug",
    author,
    slug,
    parameters,
  ];
}
