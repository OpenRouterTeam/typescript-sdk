/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { OpenRouterCore } from "../core.js";
import { chatSend } from "../funcs/chatSend.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useOpenRouterContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type ChatSendMutationVariables = {
  request: models.ChatGenerationParams;
  options?: RequestOptions;
};

export type ChatSendMutationData = operations.SendChatCompletionRequestResponse;

/**
 * Create a chat completion
 *
 * @remarks
 * Sends a request for a model response for the given chat conversation. Supports both streaming and non-streaming modes.
 */
export function useChatSendMutation(
  options?: MutationHookOptions<
    ChatSendMutationData,
    Error,
    ChatSendMutationVariables
  >,
): UseMutationResult<ChatSendMutationData, Error, ChatSendMutationVariables> {
  const client = useOpenRouterContext();
  return useMutation({
    ...buildChatSendMutation(client, options),
    ...options,
  });
}

export function mutationKeyChatSend(): MutationKey {
  return ["@openrouter/sdk", "chat", "send"];
}

export function buildChatSendMutation(
  client$: OpenRouterCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: ChatSendMutationVariables,
  ) => Promise<ChatSendMutationData>;
} {
  return {
    mutationKey: mutationKeyChatSend(),
    mutationFn: function chatSendMutationFn({
      request,
      options,
    }): Promise<ChatSendMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(chatSend(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
