/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { OpenRouterCore } from "../core.js";
import { apiKeysGetCurrentKeyMetadata } from "../funcs/apiKeysGetCurrentKeyMetadata.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useOpenRouterContext } from "./_context.js";
import { QueryHookOptions, SuspenseQueryHookOptions } from "./_types.js";

export type ApiKeysGetCurrentKeyMetadataQueryData =
  operations.GetCurrentKeyResponse;

/**
 * Get current API key
 *
 * @remarks
 * Get information on the API key associated with the current authentication session
 */
export function useApiKeysGetCurrentKeyMetadata(
  options?: QueryHookOptions<ApiKeysGetCurrentKeyMetadataQueryData>,
): UseQueryResult<ApiKeysGetCurrentKeyMetadataQueryData, Error> {
  const client = useOpenRouterContext();
  return useQuery({
    ...buildApiKeysGetCurrentKeyMetadataQuery(
      client,
      options,
    ),
    ...options,
  });
}

/**
 * Get current API key
 *
 * @remarks
 * Get information on the API key associated with the current authentication session
 */
export function useApiKeysGetCurrentKeyMetadataSuspense(
  options?: SuspenseQueryHookOptions<ApiKeysGetCurrentKeyMetadataQueryData>,
): UseSuspenseQueryResult<ApiKeysGetCurrentKeyMetadataQueryData, Error> {
  const client = useOpenRouterContext();
  return useSuspenseQuery({
    ...buildApiKeysGetCurrentKeyMetadataQuery(
      client,
      options,
    ),
    ...options,
  });
}

export function prefetchApiKeysGetCurrentKeyMetadata(
  queryClient: QueryClient,
  client$: OpenRouterCore,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildApiKeysGetCurrentKeyMetadataQuery(
      client$,
    ),
  });
}

export function setApiKeysGetCurrentKeyMetadataData(
  client: QueryClient,
  data: ApiKeysGetCurrentKeyMetadataQueryData,
): ApiKeysGetCurrentKeyMetadataQueryData | undefined {
  const key = queryKeyApiKeysGetCurrentKeyMetadata();

  return client.setQueryData<ApiKeysGetCurrentKeyMetadataQueryData>(key, data);
}

export function invalidateAllApiKeysGetCurrentKeyMetadata(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@openrouter/sdk", "API Keys", "getCurrentKeyMetadata"],
  });
}

export function buildApiKeysGetCurrentKeyMetadataQuery(
  client$: OpenRouterCore,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<ApiKeysGetCurrentKeyMetadataQueryData>;
} {
  return {
    queryKey: queryKeyApiKeysGetCurrentKeyMetadata(),
    queryFn: async function apiKeysGetCurrentKeyMetadataQueryFn(
      ctx,
    ): Promise<ApiKeysGetCurrentKeyMetadataQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(apiKeysGetCurrentKeyMetadata(
        client$,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyApiKeysGetCurrentKeyMetadata(): QueryKey {
  return ["@openrouter/sdk", "API Keys", "getCurrentKeyMetadata"];
}
