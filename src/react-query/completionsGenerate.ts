/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { OpenRouterCore } from "../core.js";
import {
  completionsGenerate,
  GenerateAcceptEnum,
} from "../funcs/completionsGenerate.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useOpenRouterContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export { GenerateAcceptEnum } from "../funcs/completionsGenerate.js";

export type CompletionsGenerateMutationVariables = {
  request: models.CompletionCreateParams;
  options?: RequestOptions & { acceptHeaderOverride?: GenerateAcceptEnum };
};

export type CompletionsGenerateMutationData =
  operations.PostCompletionsResponse;

/**
 * Create a completion
 *
 * @remarks
 * Creates a completion for the provided prompt and parameters. Supports both streaming and non-streaming modes.
 */
export function useCompletionsGenerateMutation(
  options?: MutationHookOptions<
    CompletionsGenerateMutationData,
    Error,
    CompletionsGenerateMutationVariables
  >,
): UseMutationResult<
  CompletionsGenerateMutationData,
  Error,
  CompletionsGenerateMutationVariables
> {
  const client = useOpenRouterContext();
  return useMutation({
    ...buildCompletionsGenerateMutation(client, options),
    ...options,
  });
}

export function mutationKeyCompletionsGenerate(): MutationKey {
  return ["@openrouter/sdk", "completions", "generate"];
}

export function buildCompletionsGenerateMutation(
  client$: OpenRouterCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: CompletionsGenerateMutationVariables,
  ) => Promise<CompletionsGenerateMutationData>;
} {
  return {
    mutationKey: mutationKeyCompletionsGenerate(),
    mutationFn: function completionsGenerateMutationFn({
      request,
      options,
    }): Promise<CompletionsGenerateMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(completionsGenerate(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
