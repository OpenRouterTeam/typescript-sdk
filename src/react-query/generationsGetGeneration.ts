/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { OpenRouterCore } from "../core.js";
import { generationsGetGeneration } from "../funcs/generationsGetGeneration.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useOpenRouterContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type GenerationsGetGenerationQueryData =
  operations.GetGenerationResponse;

/**
 * Get request & usage metadata for a generation
 */
export function useGenerationsGetGeneration(
  request: operations.GetGenerationRequest,
  options?: QueryHookOptions<GenerationsGetGenerationQueryData>,
): UseQueryResult<GenerationsGetGenerationQueryData, Error> {
  const client = useOpenRouterContext();
  return useQuery({
    ...buildGenerationsGetGenerationQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get request & usage metadata for a generation
 */
export function useGenerationsGetGenerationSuspense(
  request: operations.GetGenerationRequest,
  options?: SuspenseQueryHookOptions<GenerationsGetGenerationQueryData>,
): UseSuspenseQueryResult<GenerationsGetGenerationQueryData, Error> {
  const client = useOpenRouterContext();
  return useSuspenseQuery({
    ...buildGenerationsGetGenerationQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchGenerationsGetGeneration(
  queryClient: QueryClient,
  client$: OpenRouterCore,
  request: operations.GetGenerationRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildGenerationsGetGenerationQuery(
      client$,
      request,
    ),
  });
}

export function setGenerationsGetGenerationData(
  client: QueryClient,
  queryKeyBase: [parameters: { id: string }],
  data: GenerationsGetGenerationQueryData,
): GenerationsGetGenerationQueryData | undefined {
  const key = queryKeyGenerationsGetGeneration(...queryKeyBase);

  return client.setQueryData<GenerationsGetGenerationQueryData>(key, data);
}

export function invalidateGenerationsGetGeneration(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<[parameters: { id: string }]>,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@openrouter/sdk",
      "Generations",
      "getGeneration",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllGenerationsGetGeneration(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@openrouter/sdk", "Generations", "getGeneration"],
  });
}

export function buildGenerationsGetGenerationQuery(
  client$: OpenRouterCore,
  request: operations.GetGenerationRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<GenerationsGetGenerationQueryData>;
} {
  return {
    queryKey: queryKeyGenerationsGetGeneration({ id: request.id }),
    queryFn: async function generationsGetGenerationQueryFn(
      ctx,
    ): Promise<GenerationsGetGenerationQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(generationsGetGeneration(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyGenerationsGetGeneration(
  parameters: { id: string },
): QueryKey {
  return ["@openrouter/sdk", "Generations", "getGeneration", parameters];
}
