/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { OpenRouterCore } from "../core.js";
import { apiKeysPatchKeysHash } from "../funcs/apiKeysPatchKeysHash.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useOpenRouterContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type ApiKeysPatchKeysHashMutationVariables = {
  request: operations.PatchKeysHashRequest;
  options?: RequestOptions;
};

export type ApiKeysPatchKeysHashMutationData = operations.PatchKeysHashResponse;

/**
 * Update an API key
 */
export function useApiKeysPatchKeysHashMutation(
  options?: MutationHookOptions<
    ApiKeysPatchKeysHashMutationData,
    Error,
    ApiKeysPatchKeysHashMutationVariables
  >,
): UseMutationResult<
  ApiKeysPatchKeysHashMutationData,
  Error,
  ApiKeysPatchKeysHashMutationVariables
> {
  const client = useOpenRouterContext();
  return useMutation({
    ...buildApiKeysPatchKeysHashMutation(client, options),
    ...options,
  });
}

export function mutationKeyApiKeysPatchKeysHash(): MutationKey {
  return ["openrouter", "API Keys", "patchKeysHash"];
}

export function buildApiKeysPatchKeysHashMutation(
  client$: OpenRouterCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: ApiKeysPatchKeysHashMutationVariables,
  ) => Promise<ApiKeysPatchKeysHashMutationData>;
} {
  return {
    mutationKey: mutationKeyApiKeysPatchKeysHash(),
    mutationFn: function apiKeysPatchKeysHashMutationFn({
      request,
      options,
    }): Promise<ApiKeysPatchKeysHashMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(apiKeysPatchKeysHash(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
