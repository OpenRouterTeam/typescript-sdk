/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { OpenRouterCore } from "../core.js";
import { creditsCreateCoinbaseCharge } from "../funcs/creditsCreateCoinbaseCharge.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useOpenRouterContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type CreditsCreateCoinbaseChargeMutationVariables = {
  security: operations.CreateCoinbaseChargeSecurity;
  request: models.CreateChargeRequest;
  options?: RequestOptions;
};

export type CreditsCreateCoinbaseChargeMutationData =
  operations.CreateCoinbaseChargeResponse;

/**
 * Create a Coinbase charge for crypto payment
 *
 * @remarks
 * Create a Coinbase charge for crypto payment
 */
export function useCreditsCreateCoinbaseChargeMutation(
  options?: MutationHookOptions<
    CreditsCreateCoinbaseChargeMutationData,
    Error,
    CreditsCreateCoinbaseChargeMutationVariables
  >,
): UseMutationResult<
  CreditsCreateCoinbaseChargeMutationData,
  Error,
  CreditsCreateCoinbaseChargeMutationVariables
> {
  const client = useOpenRouterContext();
  return useMutation({
    ...buildCreditsCreateCoinbaseChargeMutation(client, options),
    ...options,
  });
}

export function mutationKeyCreditsCreateCoinbaseCharge(): MutationKey {
  return ["@openrouter/sdk", "Credits", "createCoinbaseCharge"];
}

export function buildCreditsCreateCoinbaseChargeMutation(
  client$: OpenRouterCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: CreditsCreateCoinbaseChargeMutationVariables,
  ) => Promise<CreditsCreateCoinbaseChargeMutationData>;
} {
  return {
    mutationKey: mutationKeyCreditsCreateCoinbaseCharge(),
    mutationFn: function creditsCreateCoinbaseChargeMutationFn({
      security,
      request,
      options,
    }): Promise<CreditsCreateCoinbaseChargeMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(creditsCreateCoinbaseCharge(
        client$,
        security,
        request,
        mergedOptions,
      ));
    },
  };
}
