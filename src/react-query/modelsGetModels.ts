/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { OpenRouterCore } from "../core.js";
import {
  GetModelsAcceptEnum,
  modelsGetModels,
} from "../funcs/modelsGetModels.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useOpenRouterContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export { GetModelsAcceptEnum } from "../funcs/modelsGetModels.js";

export type ModelsGetModelsQueryData = operations.GetModelsResponse;

/**
 * List all models and their properties
 */
export function useModelsGetModels(
  request?: operations.GetModelsRequestRequest | undefined,
  options?: QueryHookOptions<ModelsGetModelsQueryData>,
): UseQueryResult<ModelsGetModelsQueryData, Error> {
  const client = useOpenRouterContext();
  return useQuery({
    ...buildModelsGetModelsQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * List all models and their properties
 */
export function useModelsGetModelsSuspense(
  request?: operations.GetModelsRequestRequest | undefined,
  options?: SuspenseQueryHookOptions<ModelsGetModelsQueryData>,
): UseSuspenseQueryResult<ModelsGetModelsQueryData, Error> {
  const client = useOpenRouterContext();
  return useSuspenseQuery({
    ...buildModelsGetModelsQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchModelsGetModels(
  queryClient: QueryClient,
  client$: OpenRouterCore,
  request?: operations.GetModelsRequestRequest | undefined,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildModelsGetModelsQuery(
      client$,
      request,
    ),
  });
}

export function setModelsGetModelsData(
  client: QueryClient,
  queryKeyBase: [
    parameters: {
      category?: string | undefined;
      supportedParameters?: string | undefined;
      useRss?: string | undefined;
      useRssChatLinks?: string | undefined;
    },
  ],
  data: ModelsGetModelsQueryData,
): ModelsGetModelsQueryData | undefined {
  const key = queryKeyModelsGetModels(...queryKeyBase);

  return client.setQueryData<ModelsGetModelsQueryData>(key, data);
}

export function invalidateModelsGetModels(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: {
      category?: string | undefined;
      supportedParameters?: string | undefined;
      useRss?: string | undefined;
      useRssChatLinks?: string | undefined;
    }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@openrouter/sdk", "Models", "getModels", ...queryKeyBase],
  });
}

export function invalidateAllModelsGetModels(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@openrouter/sdk", "Models", "getModels"],
  });
}

export function buildModelsGetModelsQuery(
  client$: OpenRouterCore,
  request?: operations.GetModelsRequestRequest | undefined,
  options?: RequestOptions & { acceptHeaderOverride?: GetModelsAcceptEnum },
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<ModelsGetModelsQueryData>;
} {
  return {
    queryKey: queryKeyModelsGetModels({
      category: request?.category,
      supportedParameters: request?.supportedParameters,
      useRss: request?.useRss,
      useRssChatLinks: request?.useRssChatLinks,
    }),
    queryFn: async function modelsGetModelsQueryFn(
      ctx,
    ): Promise<ModelsGetModelsQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(modelsGetModels(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyModelsGetModels(
  parameters: {
    category?: string | undefined;
    supportedParameters?: string | undefined;
    useRss?: string | undefined;
    useRssChatLinks?: string | undefined;
  },
): QueryKey {
  return ["@openrouter/sdk", "Models", "getModels", parameters];
}
