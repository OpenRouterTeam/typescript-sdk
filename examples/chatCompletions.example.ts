/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import dotenv from "dotenv";
dotenv.config();
/**
 * Example usage of the @openrouter/sdk SDK for chat completions
 *
 * To run this example from the examples directory with Bun:
 * bun run chatCompletions.example.ts
 */

import { OpenRouter } from "@openrouter/sdk";


if (!process.env["OPENROUTER_API_KEY"]) {
  throw new Error("Missing OPENROUTER_API_KEY environment variable");
}
const openRouter = new OpenRouter({
  apiKey: process.env["OPENROUTER_API_KEY"] ?? "",
  debugLogger: console
});

async function nonStreamingExample() {
  console.log("=== Non-Streaming Example ===\n");

  const result = await openRouter.chat.send({
    model: "qwen/qwen3-max",
    messages: [
      {
        role: "user",
        content: "Tell me a short joke about programming",
      },
    ],
    stream: false,
  });

  if ("choices" in result) {
    console.log("Model:", result.model);
    console.log("Response:", result.choices[0].message.content);
    console.log("Usage:", result.usage);
  }
}

async function streamingExample() {
  console.log("\n=== Streaming Example ===\n");

  const result = await openRouter.chat.send({
    model: "qwen/qwen3-max",
    messages: [
      {
        role: "user",
        content: "Write a haiku about TypeScript",
      },
    ],
    stream: true,
    streamOptions: {
      includeUsage: true,
    },
  });

  if (result && typeof result === "object" && Symbol.asyncIterator in result) {
    const stream = result
    console.log("Streaming response:");
    let fullContent = "";

    for await (const chunk of stream) {
      if (chunk.data.choices && chunk.data.choices[0]?.delta?.content) {
        const content = chunk.data.choices[0].delta.content;
        process.stdout.write(content);
        fullContent += content;
      }

      if (chunk.data.usage) {
        console.log("\n\nStream usage:", chunk.data.usage);
      }
    }

    console.log("\n\nFull response:", fullContent);
  }
}

async function main() {
  try {
    await nonStreamingExample();
    await streamingExample();
  } catch (error) {
    console.error("Error:", error);
  }
}

main();